<?xml version="1.0" encoding="UTF-8" standalone="no"?><addons><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Advanced_Connector" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Scripts" nameLabel="Advanced_Connector_property_scripts" type="text"/>
        <property name="Is disabled" nameLabel="Advanced_Connector_property_is_disabled" type="boolean"/>
	</model>
<css/><view/><preview/><presenter>function AddonAdvanced_Connector_create() {&#13;
    var presenter = function () {};&#13;
    var event;&#13;
&#13;
    presenter.STANDARD_EVENTS = [&#13;
        'ValueChanged',&#13;
        'Definition',&#13;
        'ItemSelected',&#13;
        'ItemConsumed',&#13;
        'ItemReturned',&#13;
        'PageLoaded',&#13;
        'PageAllOk',&#13;
        'ShowAnswers',&#13;
        'HideAnswers',&#13;
        'Done',&#13;
        'AllAttempted',&#13;
        'NotAllAttempted',&#13;
        'LimitedCheck'&#13;
    ];&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (presenter.isDisabled) {&#13;
            return;&#13;
        }&#13;
        var i, length;&#13;
        event = presenter.fillEventData(eventData, eventName);&#13;
&#13;
        try {&#13;
            var filteredEvents = presenter.filterEvents(presenter.events, event);&#13;
            for (i = 0, length = filteredEvents.length; i &lt; length; i++) {&#13;
                eval(filteredEvents[i].Code);&#13;
            }&#13;
        } catch (error) {&#13;
            Helpers.alertErrorMessage(error, "Advanced Connector - problem occurred while running scripts!");&#13;
        }&#13;
&#13;
        event = undefined;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.onEventReceived('Reset', {});&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.onEventReceived('Check', {});&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.onEventReceived('Uncheck', {});&#13;
    };&#13;
&#13;
    function isCustomEvent(eventName) {&#13;
        return $.inArray(eventName, presenter.STANDARD_EVENTS) == -1;&#13;
    }&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        var validatedScript = presenter.validateScript(model.Scripts), eventBus,&#13;
            customEventListeners = [];&#13;
&#13;
        if (validatedScript.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, validatedScript.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isDisabled = ModelValidationUtils.validateBoolean(model["Is disabled"]);&#13;
        if (presenter.isDisabled) {&#13;
            return;&#13;
        }&#13;
&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        presenter.events = validatedScript.events;&#13;
&#13;
        $.each(presenter.STANDARD_EVENTS, function(_, name) {&#13;
            eventBus.addEventListener(name, presenter);&#13;
        });&#13;
&#13;
        $.each(presenter.events, function() {&#13;
            if (isCustomEvent(this.Name) &amp;&amp; (customEventListeners.indexOf(this.Name) == -1) ){&#13;
                eventBus.addEventListener(this.Name.trim(), presenter);&#13;
                customEventListeners.push(this.Name);&#13;
            }&#13;
        });&#13;
&#13;
        $(view).css('visibility', 'hidden');&#13;
    };&#13;
&#13;
    presenter.checkScriptsResources = function(script) {&#13;
        script = script.replace(/\s/g,'');&#13;
        var regex = new RegExp("[\(|\=](\'|\")*(/)*file/serve/[0-9]*");&#13;
&#13;
        return regex.test(script);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        var validatedScript = presenter.validateScript(model.Scripts);&#13;
        if (validatedScript.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, validatedScript.errorCode);&#13;
        }&#13;
        if (presenter.checkScriptsResources(model.Scripts)) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, 'SV_09');&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'SV_01': "Script source must be provided and cannot be empty!",&#13;
        'SV_02': "Missing EVENTSTART keyword or new line after it!",&#13;
        'SV_03': "Missing EVENTEND keyword or new line after it!",&#13;
        'SV_04': "Missing SCRIPTSTART keyword or new line after it!",&#13;
        'SV_05': "Missing SCRIPTEND keyword or new line after it!",&#13;
        'SV_06': "Repeated event field value declaration!",&#13;
        'SV_07': "Repeated keyword!",&#13;
        'SV_08': "Invalid identification. Should be Source,Item, Value or Score!",&#13;
        'SV_09': "Please pay attention to the correct linking resources"&#13;
    };&#13;
&#13;
    function returnErrorResult(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    presenter.fillBlankFields = function(eventDeclaration) {&#13;
        for (var prop in eventDeclaration) {&#13;
            if (eventDeclaration.hasOwnProperty(prop) &amp;&amp; prop !== 'Name') {&#13;
                if (eventDeclaration[prop] == undefined) {&#13;
                    eventDeclaration[prop] = '.*';&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        if (eventDeclaration.Name == undefined) {&#13;
            eventDeclaration.Name = 'ValueChanged';&#13;
        }&#13;
    };&#13;
&#13;
    presenter.findKeywordIndex = function(script, keyword, currentLine) {&#13;
        for (var i = currentLine + 1; i &lt; script.length; i++) {&#13;
            if (script[i].trim() === keyword) return i;&#13;
        }&#13;
&#13;
        return -1;&#13;
    };&#13;
&#13;
    presenter.validateEvent = function(script) {&#13;
        var indexes = [], i, length;&#13;
        var eventDeclaration = {&#13;
            Source: undefined,&#13;
            Item: undefined,&#13;
            Value: undefined,&#13;
            Score: undefined,&#13;
            Name: undefined,&#13;
            Word: undefined,&#13;
            Type: undefined,&#13;
            Code: ''&#13;
        };&#13;
&#13;
        for(i = 0, length = script.length; i &lt; length; i++) {&#13;
            indexes[i] = false;&#13;
        }&#13;
&#13;
        var scriptStartIndex = presenter.findKeywordIndex(script, "SCRIPTSTART", -1);&#13;
        var scriptEndIndex = presenter.findKeywordIndex(script, "SCRIPTEND", 1);&#13;
&#13;
        var isScriptInvalid = scriptStartIndex === -1 &amp;&amp; scriptEndIndex !== -1;&#13;
        isScriptInvalid = isScriptInvalid || scriptStartIndex !== -1 &amp;&amp; scriptEndIndex === -1;&#13;
        isScriptInvalid = isScriptInvalid || scriptStartIndex &gt; scriptEndIndex;&#13;
&#13;
        if (isScriptInvalid) return returnErrorResult('SV_04');&#13;
&#13;
        indexes[scriptStartIndex] = true;&#13;
        indexes[scriptEndIndex] = true;&#13;
&#13;
        for (i = scriptStartIndex + 1; i &lt; scriptEndIndex; i++) {&#13;
            indexes[i] = true;&#13;
            eventDeclaration.Code += script[i];&#13;
            if (i !== scriptEndIndex - 1) {&#13;
                eventDeclaration.Code += '\n';&#13;
            }&#13;
        }&#13;
&#13;
        for(i = 0, length = indexes.length; i &lt; length; i++) {&#13;
            if (indexes[i]) continue;&#13;
&#13;
            var line = script[i].split(':');&#13;
            if (line.length !== 2) return returnErrorResult('SV_08');&#13;
&#13;
            var keywords = ['Source', 'Item', 'Value', 'Score', 'Name', 'Type', 'Word'];&#13;
&#13;
            var trimmedKeyword = line[0].trim();&#13;
            if (keywords.indexOf(trimmedKeyword) === -1) return returnErrorResult('SV_08');&#13;
&#13;
            if (eventDeclaration[trimmedKeyword]) {&#13;
                return returnErrorResult('SV_06');&#13;
            } else {&#13;
                eventDeclaration[trimmedKeyword] = line[1];&#13;
            }&#13;
        }&#13;
&#13;
        presenter.fillBlankFields(eventDeclaration);&#13;
&#13;
        return { isError: false, eventDeclaration: eventDeclaration };&#13;
    };&#13;
&#13;
    function extractLines(script, start, end) {&#13;
        var array = [];&#13;
&#13;
        for (var i = start; i &lt; end; i++) array.push(script[i]);&#13;
&#13;
        return array;&#13;
    }&#13;
&#13;
    function cleanScriptFromEmptyLines(script) {&#13;
        var array = [];&#13;
&#13;
        for (var i = 0; i &lt; script.length; i++) {&#13;
            if (script[i]) array.push(script[i]);&#13;
        }&#13;
&#13;
        return array;&#13;
    }&#13;
&#13;
    presenter.validateScript = function (script) {&#13;
        if (!script) return returnErrorResult('SV_01');&#13;
&#13;
        var scriptsArray = [];&#13;
        var scriptLines = cleanScriptFromEmptyLines(script.split('\n'));&#13;
        var lineIndex = 0, length = scriptLines.length;&#13;
&#13;
        while (lineIndex &lt; length) {&#13;
            if (scriptLines[lineIndex] !== "EVENTSTART") return returnErrorResult('SV_02');&#13;
&#13;
            var endEventIndex = presenter.findKeywordIndex(scriptLines, "EVENTEND", lineIndex);&#13;
            if (endEventIndex === -1) return returnErrorResult('SV_03');&#13;
&#13;
            lineIndex++;&#13;
            var startEventIndex = presenter.findKeywordIndex(scriptLines, "EVENTSTART", lineIndex);&#13;
&#13;
            if (startEventIndex !== -1 &amp;&amp; startEventIndex &lt; endEventIndex) return returnErrorResult('SV_07');&#13;
&#13;
            var eventCode = extractLines(scriptLines, lineIndex, endEventIndex);&#13;
            var validatedEvent = presenter.validateEvent(eventCode);&#13;
            if (validatedEvent.isError) {&#13;
                return returnErrorResult(validatedEvent.errorCode);&#13;
            } else {&#13;
                scriptsArray.push(validatedEvent.eventDeclaration);&#13;
            }&#13;
&#13;
            lineIndex = endEventIndex + 1;&#13;
        }&#13;
&#13;
        return { isError: false, events: scriptsArray };&#13;
    };&#13;
&#13;
    presenter.matchFieldToRule = function (field, rule, doExactMatch) {&#13;
        if (rule.length &gt; 0)&#13;
            var rule = doExactMatch ? '^' + $.trim(rule) + '$' : $.trim(rule);&#13;
        return new RegExp(rule).test(field);&#13;
    };&#13;
&#13;
    presenter.filterEvents = function (events, event) {&#13;
        var filteredArray = [], isMatch;&#13;
&#13;
        try {&#13;
            for (var i = 0, length = events.length; i &lt; length; i++) {&#13;
                isMatch = presenter.matchFieldToRule(event.name, events[i].Name, true);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.source, events[i].Source);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.item, events[i].Item);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.value, events[i].Value);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.score, events[i].Score);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.word, events[i].Word);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.type, events[i].Type);&#13;
&#13;
                if (isMatch) {&#13;
                    filteredArray.push(events[i]);&#13;
                }&#13;
            }&#13;
        } catch (error) {&#13;
            Helpers.alertErrorMessage(error, "Advanced Connector - problem occurred while processing conditions!");&#13;
        }&#13;
&#13;
        return filteredArray;&#13;
    };&#13;
&#13;
    presenter.fillEventData = function (eventData, eventName) {&#13;
        var filledEventData = $.extend(true, {}, eventData);&#13;
        filledEventData.name = eventName;&#13;
&#13;
        if (!filledEventData.word) filledEventData.word = '';&#13;
        if (!filledEventData.type) filledEventData.type = '';&#13;
        if (!filledEventData.item) filledEventData.item = '';&#13;
        if (!filledEventData.value) filledEventData.value = '';&#13;
        if (!filledEventData.source) filledEventData.source = '';&#13;
        if (!filledEventData.score) filledEventData.score = '';&#13;
&#13;
        return filledEventData;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Animated_Lesson_Progress" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Ranges" nameLabel="Animated_Lesson_Progress_property_ranges" type="list">
            <property name="Score" nameLabel="Animated_Lesson_Progress_property_score" type="string"/>
		    <property name="Image" nameLabel="Animated_Lesson_Progress_property_image" type="image"/>
		</property>
	</model>
<css>.animated-lesson-progress-wrapper{&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.animated-lesson-progress-rate {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    background-size: 100% 100%;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
</css><view>&lt;div class="animated-lesson-progress-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="animated-lesson-progress-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAnimated_Lesson_Progress_create() {&#13;
    var presenter = function () { };&#13;
&#13;
    var range_img = [],&#13;
        range_max_score = [];&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'E_01': "All ranges must be in ascending order",&#13;
        'E_02': "Last range must equal 100",&#13;
        'E_03': "All ranges must be positive",&#13;
        'E_04': "First range must equal 0",&#13;
        'E_05': "All scores must be filled"&#13;
    };&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    presenter.sanitizeModel = function (model)  {&#13;
&#13;
        for (var ranges_prop=0; ranges_prop &lt; model.Ranges.length; ranges_prop++){&#13;
            range_img[ranges_prop] = model.Ranges[ranges_prop].Image;&#13;
            range_max_score[ranges_prop] = parseFloat(model.Ranges[ranges_prop].Score);&#13;
        }&#13;
&#13;
        for (var i=0; i&lt; model.Ranges.length; i++){&#13;
            if(!model.Ranges[i].Score){&#13;
                return returnErrorObject('E_05');&#13;
            }&#13;
            if(range_max_score[i]&gt; range_max_score[i+1]){&#13;
                return returnErrorObject('E_01');&#13;
            }&#13;
            if(range_max_score[i] &lt; 0){&#13;
                return returnErrorObject('E_03');&#13;
            }&#13;
        }&#13;
&#13;
        if(range_max_score[model.Ranges.length-1] != 100){&#13;
            return returnErrorObject('E_02');&#13;
        }&#13;
&#13;
        if(range_max_score[0] != 0){&#13;
            return returnErrorObject('E_04');&#13;
        }&#13;
&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            Ranges: {&#13;
                Image: range_img,&#13;
                deselected: range_max_score&#13;
            },&#13;
            length: model.Ranges.length,&#13;
            isVisible: isVisible&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.cleanView = function () {&#13;
        presenter.$view.find('.animated-lesson-progress-rate').each(function () {&#13;
            $(this).css('display', 'none');&#13;
            $(this).attr('data-name', 'invisible');&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setViewImage = function (rate) {&#13;
        presenter.$view.find('.rate-' + (rate+1)).css('display', 'block');&#13;
        presenter.$view.find('.rate-' + (rate+1)).attr('data-name', 'visible');&#13;
    };&#13;
&#13;
    presenter.countPercentageScore = function () {&#13;
        var model = playerController.getPresentation();&#13;
        var scoreService = playerController.getScore();&#13;
        var count = 0,&#13;
            percentageScore = 0;&#13;
&#13;
        for(var i = 0; i &lt; model.getPageCount(); i++){&#13;
            var page = model.getPage(i);&#13;
&#13;
            if(page.isReportable()){&#13;
                count += 1;&#13;
&#13;
                var pageScore = scoreService.getPageScoreById(page.getId()),&#13;
                    score = pageScore.score,&#13;
                    maxScore = pageScore.maxScore;&#13;
&#13;
                if (maxScore &gt; 0) {&#13;
                    percentageScore += ((score/maxScore) * 100);&#13;
                } else if (page.isVisited()) {&#13;
                    percentageScore += 100; // the page was visited but there is no activities, so we give you a bonus +100% :-)&#13;
                }&#13;
&#13;
            }&#13;
        }&#13;
&#13;
        if (count &gt; 0) {&#13;
            percentageScore = percentageScore / count;&#13;
        }&#13;
&#13;
        for (var j = 0; j &lt; range_max_score.length; j++){&#13;
            if(percentageScore == 0){&#13;
                presenter.cleanView();&#13;
                presenter.setViewImage(0);&#13;
                return;&#13;
            }&#13;
&#13;
            if(percentageScore &lt;= range_max_score[j+1] &amp;&amp; percentageScore &gt; range_max_score[j]){&#13;
                presenter.cleanView();&#13;
                presenter.setViewImage(j+1);&#13;
            }&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.appendImages = function (length) {&#13;
        for (var j=0; j&lt;length; j++){&#13;
            presenter.$view.find('.animated-lesson-progress-wrapper').append('&lt;div class="animated-lesson-progress-rate rate-'+ (j+1) +'"&gt;&lt;/div&gt;');&#13;
            if(range_img[j] != "") {&#13;
                presenter.$view.find('.rate-' + (j + 1)).css('background-image', 'url(' + range_img[j] + ')');&#13;
            }&#13;
            presenter.$view.find('.rate-'+(j+1)).css('display', 'none');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.eventListener = function () {&#13;
        eventBus = playerController.getEventBus();&#13;
        presenter.countPercentageScore();&#13;
        eventBus.addEventListener('ValueChanged', this);&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
    	presenter.$view = $(view);&#13;
    	presenter.configuration = presenter.sanitizeModel(model);&#13;
&#13;
        if(presenter.configuration.isError){&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.appendImages(presenter.configuration.length);&#13;
&#13;
        if(!isPreview) {&#13;
            presenter.eventListener();&#13;
        }else{&#13;
            presenter.setViewImage(0);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ValueChanged" &amp;&amp; !presenter.isShowAnswersActive) {&#13;
            presenter.countPercentageScore();&#13;
        }&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getImageId = function () {&#13;
        return presenter.$view.find('[data-name="visible"]').attr('id');&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
&#13;
    presenter.getState = function () {&#13;
        if (presenter.configuration.isError) {&#13;
            return "";&#13;
        }&#13;
&#13;
    	return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
       if (!state) return;&#13;
&#13;
    	var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
    &#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.countPercentageScore();&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Animated_Page_Progress" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Ranges" nameLabel="Animated_Page_Progress_property_ranges" type="list">
            <property name="Score" nameLabel="Animated_Page_Progress_property_score" type="string"/>
		    <property name="Image" nameLabel="Animated_Page_Progress_property_image" type="image"/>
		</property>
        <property name="Initial image" nameLabel="Animated_Page_Progress_property_initial_image" type="image"/>
        <property displayName="Work in Check Mode" name="Work in Check Mode" nameLabel="Animated_Page_Progress_property_work_in_check_mode" type="boolean"/>
	</model>
<css>.animated-page-progress-wrapper{&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.animated-page-progress-rate {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    background-size: 100% 100%;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
</css><view>&lt;div class="animated-page-progress-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="animated-page-progress-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAnimated_Page_Progress_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.displayedImage = null;&#13;
    presenter.ERROR_CODES = {&#13;
        'E_01': "All ranges must be in ascending order",&#13;
        'E_02': "Last range must equal 100",&#13;
        'E_03': "All ranges must be positive",&#13;
        'E_04': "First range must equal 0",&#13;
        'E_05': "All scores must be filled"&#13;
    };&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    presenter.sanitizeModel = function (model) {&#13;
        var rangeImage = [], rangeMaxScore = [], i;&#13;
&#13;
        for (i = 0; i &lt; model.Ranges.length; i++) {&#13;
            rangeImage[i] = model.Ranges[i].Image;&#13;
            rangeMaxScore[i] = parseFloat(model.Ranges[i].Score);&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; model.Ranges.length; i++) {&#13;
            if (!model.Ranges[i].Score) {&#13;
                return returnErrorObject('E_05');&#13;
            }&#13;
            if (rangeMaxScore[i] &gt; rangeMaxScore[i + 1]) {&#13;
                return returnErrorObject('E_01');&#13;
            }&#13;
            if (rangeMaxScore[i] &lt; 0) {&#13;
                return returnErrorObject('E_03');&#13;
            }&#13;
        }&#13;
&#13;
        if (rangeMaxScore[model.Ranges.length - 1] != 100) {&#13;
            return returnErrorObject('E_02');&#13;
        }&#13;
&#13;
        if (rangeMaxScore[0] != 0) {&#13;
            return returnErrorObject('E_04');&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            ranges: {&#13;
                images: rangeImage,&#13;
                maxScores: rangeMaxScore&#13;
            },&#13;
            length: model.Ranges.length,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            initialImage: model['Initial image'],&#13;
            workInCheckMode: ModelValidationUtils.validateBoolean(model['Work in Check Mode'])&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
        var currentPageIndex = playerController.getCurrentPageIndex();&#13;
        presenter.pageID = playerController.getPresentation().getPage(currentPageIndex).getId();&#13;
        presenter.scoreService = playerController.getScore();&#13;
    };&#13;
&#13;
    presenter.cleanView = function () {&#13;
        presenter.$view.find('.animated-page-progress-rate').each(function () {&#13;
            $(this).css('display', 'none');&#13;
            $(this).attr('data-name', 'invisible');&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setViewImage = function (rate) {&#13;
        var $rate;&#13;
&#13;
        if (rate == "initial") {&#13;
            $rate = presenter.$view.find('.rate-initial');&#13;
        } else {&#13;
            $rate = presenter.$view.find('.rate-' + (rate + 1));&#13;
        }&#13;
&#13;
        $rate.css('display', 'block');&#13;
        $rate.attr('data-name', 'visible');&#13;
&#13;
        presenter.displayedImage = rate;&#13;
    };&#13;
&#13;
    presenter.getRange = function (pageScore) {&#13;
        var score = pageScore.score,&#13;
            maxScore = pageScore.maxScore,&#13;
            percentageScore = (score / maxScore) * 100,&#13;
            maxScores = presenter.configuration.ranges.maxScores;&#13;
&#13;
        if (isNaN(percentageScore)) {&#13;
            percentageScore = 0;&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; maxScores.length; i++) {&#13;
            if (percentageScore == 0) {&#13;
                return 0;&#13;
            }&#13;
            if (percentageScore == 100 &amp;&amp; maxScores[i] == 100) {&#13;
                return i;&#13;
            }&#13;
            if (percentageScore &gt;= maxScores[i] &amp;&amp; percentageScore &lt; maxScores[i + 1]) {&#13;
                return i;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeRange = function () {&#13;
        var pageScore = presenter.scoreService.getPageScoreById(presenter.pageID),&#13;
            range = presenter.getRange(pageScore);&#13;
&#13;
        presenter.cleanView();&#13;
        presenter.setViewImage(range);&#13;
    };&#13;
&#13;
    presenter.appendImages = function (length) {&#13;
        var $wrapper = presenter.$view.find('.animated-page-progress-wrapper'),&#13;
            images = presenter.configuration.ranges.images;&#13;
&#13;
        for (var i = 0; i &lt; length; i++) {&#13;
            var $rate = $(document.createElement('div'));&#13;
&#13;
            $rate.addClass('animated-page-progress-rate rate-' + (i + 1)).css('display', 'none');&#13;
&#13;
            if (images[i] != "") {&#13;
                $rate.css('background-image', 'url(' + images[i] + ')');&#13;
            }&#13;
&#13;
            $wrapper.append($rate);&#13;
        }&#13;
&#13;
        if (presenter.configuration.initialImage) {&#13;
            var $initialRate = $(document.createElement('div'));&#13;
&#13;
            $initialRate.addClass('animated-page-progress-rate rate-initial');&#13;
            $initialRate.css({&#13;
                'display': 'none',&#13;
                'background-image': 'url(' + presenter.configuration.initialImage + ')'&#13;
            });&#13;
&#13;
            $wrapper.append($initialRate);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.eventListener = function () {&#13;
        eventBus = playerController.getEventBus();&#13;
        eventBus.addEventListener('ValueChanged', this, true);&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.sanitizeModel(model);&#13;
&#13;
        if (presenter.configuration.isError){&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.appendImages(presenter.configuration.ranges.images.length);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.eventListener();&#13;
        }&#13;
&#13;
        presenter.setViewImage(presenter.configuration.initialImage ? "initial" : 0);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName == "ValueChanged" &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; !presenter.configuration.workInCheckMode) {&#13;
            presenter.changeRange();&#13;
        }&#13;
&#13;
        if (eventName == "ValueChanged" &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; presenter.configuration.workInCheckMode &amp;&amp; eventData.value == "resetClicked") {&#13;
            presenter.changeRange();&#13;
        }&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getImageId = function () {&#13;
        return presenter.$view.find('[data-name="visible"]').attr('id');&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.isCommonsPage = function() {&#13;
        return presenter.pageID != presenter.$view.parent().attr("id");&#13;
    };&#13;
&#13;
    presenter.getCurrentPageIndex = function() {&#13;
        return playerController.getCurrentPageIndex();&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if (presenter.configuration.isError) {&#13;
            return "";&#13;
        }&#13;
&#13;
        var currentPageIndex = presenter.getCurrentPageIndex();&#13;
&#13;
        if(presenter.isCommonsPage()) {&#13;
            if (typeof presenter.states == "undefined") {&#13;
                presenter.states = {};&#13;
                presenter.pageState = {};&#13;
            }&#13;
&#13;
            presenter.pageState = {&#13;
                displayedImage: presenter.displayedImage,&#13;
                isVisible: presenter.configuration.isVisible&#13;
            };&#13;
&#13;
            presenter.states[currentPageIndex] = presenter.pageState;&#13;
&#13;
            return JSON.stringify(presenter.states);&#13;
        } else {&#13;
            return JSON.stringify({&#13;
                pageIndex: currentPageIndex,&#13;
                displayedImage: presenter.displayedImage,&#13;
                isVisible: presenter.configuration.isVisible&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) return;&#13;
&#13;
        var currentPageIndex = presenter.getCurrentPageIndex(),&#13;
            displayedImage,&#13;
            parsedState;&#13;
&#13;
        presenter.states = JSON.parse(state);&#13;
&#13;
        if(presenter.isCommonsPage()) {&#13;
            parsedState = presenter.states[currentPageIndex];&#13;
        } else {&#13;
            parsedState = presenter.states;&#13;
        }&#13;
&#13;
        if (typeof parsedState == "undefined") {&#13;
            parsedState = '';&#13;
            displayedImage = presenter.configuration.initialImage ? "initial" : 0;&#13;
        } else {&#13;
            displayedImage = parsedState.displayedImage;&#13;
        }&#13;
&#13;
        presenter.cleanView();&#13;
        presenter.setViewImage(displayedImage);&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
        if(presenter.configuration.workInCheckMode){&#13;
            presenter.changeRange();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.cleanView();&#13;
        presenter.setViewImage(presenter.configuration.initialImage ? "initial" : 0);&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Animation" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Preview image" nameLabel="Animation_property_preview_image" type="image"/>
		<property name="Animation" nameLabel="Animation_property_animation" type="image"/>
		<property name="Frames count" nameLabel="Animation_property_frames_count" type="string"/>
		<property name="Frame duration" nameLabel="Animation_property_frame_duration" type="string"/>
		<property name="Frame size" nameLabel="Animation_property_frame_size" type="{Original, Keep aspect ratio, Stretch}"/>
		<property name="Loop" nameLabel="Animation_property_loop" type="boolean"/>
		<property name="Labels" nameLabel="Animation_property_labels" type="list">
			<property isLocalized="true" name="Text" nameLabel="Animation_property_text" type="string"/>
			<property name="Top" nameLabel="Animation_property_top" type="string"/>
			<property name="Left" nameLabel="Animation_property_left" type="string"/>
			<property name="Frames" nameLabel="Animation_property_frames" type="string"/>
		</property>
		<property name="Show watermark" nameLabel="Animation_property_show_watermark" type="boolean"/>
		<property name="Watermark color" nameLabel="Animation_property_watermark_color" type="string"/>
		<property name="Watermark opacity" nameLabel="Animation_property_watermark_opacity" type="string"/>
		<property name="Watermark size" nameLabel="Animation_property_watermark_size" type="string"/>
		<property name="Don't reset on end" nameLabel="Animation_property_do_not_reset_on_end" type="boolean"/>
		<property name="Is click disabled" nameLabel="Animation_property_is_click_disabled" type="boolean"/>
	</model>
<css>.animation-image-animation,&#13;
.animation-image-preview,&#13;
.animation-loading-image,&#13;
.animation-label {&#13;
    border: 0;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
}&#13;
&#13;
.animation-image-animation,&#13;
.animation-image-preview {&#13;
    border: none;&#13;
    float: left;&#13;
    overflow: hidden;&#13;
    background: no-repeat 0 0;&#13;
}&#13;
&#13;
.animation-image-animation {&#13;
    display: none;&#13;
}&#13;
&#13;
.animation-image-preview {&#13;
    position: relative;&#13;
}&#13;
&#13;
.animation-loading-image {&#13;
    display: none;&#13;
    position: absolute;&#13;
    border: 0 solid black;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
}&#13;
&#13;
.animation-label {&#13;
    position: absolute;&#13;
}&#13;
&#13;
.animation-hidden-image {&#13;
    visibility: hidden;&#13;
}&#13;
&#13;
.animation-watermark {&#13;
    border: 0;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    display: none;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class='animation-image-preview'&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class='animation-image-animation'&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="animation-watermark"&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="animation-loading-image"/&gt;&#13;
</view><preview>&lt;div class='animation-image-preview'&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class='animation-image-animation'&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="animation-watermark"&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="/media/images/loading.gif" alt="Loading..." class="animation-loading-image"/&gt;&#13;
</preview><presenter>function AddonAnimation_create (){&#13;
    var presenter = function () {};&#13;
    presenter.DOMElements = {};&#13;
    presenter.configuration = {};&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'AI_01': "Animation image wasn't set or was set incorrectly!",&#13;
        'PI_01': "Preview image wasn't set or was set incorrectly!",&#13;
        'FC_01': "Frames count must be positive integer number!",&#13;
        'FD_01': "Frame duration time must be positive integer number!",&#13;
        'L_01': "Text value cannot be empty!",&#13;
        'L_02': "Top position value is invalid!",&#13;
        'L_03': "Left position value is invalid!",&#13;
        'WM_01': "Watermark color must be provided in #RRGGBB format!",&#13;
        'WM_02': "Watermark opacity must be a value from 0.0 to 1.0!",&#13;
        'WM_03': "Watermark size must be a positive integer number!",&#13;
        'FL01': "Frame list - undefined or empty!",&#13;
        'FL02': "Frame list - syntax incorrect (probably wrong separator)!",&#13;
        'FL03': "Frame list - frame number invalid!",&#13;
        'FL04': "Frame list - frame number missing inside list!",&#13;
        'FL05': "Frame list - frame numbers range incorrect!"&#13;
    };&#13;
&#13;
    presenter.ANIMATION_STATE = {&#13;
        PAUSED: 0,&#13;
        PLAYING: 1,&#13;
        STOPPED: 2,&#13;
        ENDED: 3&#13;
    };&#13;
&#13;
    presenter.FRAME_SIZE = {&#13;
        ORIGINAL: 0,&#13;
        SCALED: 1,&#13;
        STRETCHED: 2&#13;
    };&#13;
&#13;
    presenter.IMAGE_TYPE = {&#13;
        PREVIEW: 0,&#13;
        ANIMATION: 1&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.addFramesToLabels(model);&#13;
    };&#13;
&#13;
    presenter.addFramesToLabels = function (model) {&#13;
        var upgradedModel = {}, i;&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        for (i = 0; i &lt; model["Labels"].length; i++) {&#13;
            if (upgradedModel["Labels"][i]["Frames"] == undefined) {&#13;
                upgradedModel["Labels"][i]["Frames"] = "";&#13;
            }&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function setDOMElementsHrefsAndSelectors(view) {&#13;
        presenter.DOMElements.viewContainer = $(view);&#13;
        presenter.DOMElements.animation = $(view).find('.animation-image-animation:first')[0];&#13;
        presenter.DOMElements.preview = $(view).find('.animation-image-preview:first')[0];&#13;
        presenter.DOMElements.loading = $(presenter.DOMElements.viewContainer.find('.animation-loading-image:first')[0]);&#13;
        presenter.DOMElements.watermark = $(presenter.DOMElements.viewContainer.find('.animation-watermark:first')[0]);&#13;
    }&#13;
&#13;
    // Calculate scale for image containing element depending on frame aspect ratio&#13;
    presenter.calculateContainerDimensions = function(imageWidth, imageHeight, containerWidth, containerHeight) {&#13;
        var imageRatio = imageWidth / imageHeight;&#13;
        var containerRatio = containerWidth / containerHeight;&#13;
&#13;
        var horizontal = imageRatio &gt;= containerRatio ? containerWidth : containerHeight * imageRatio;&#13;
        var vertical = imageRatio &gt;= containerRatio ? containerWidth / imageRatio : containerHeight;&#13;
&#13;
        return {&#13;
            horizontal: horizontal,&#13;
            vertical: vertical&#13;
        };&#13;
    };&#13;
&#13;
    function setElementsDimensions(wrapper) {&#13;
        var previewReducedSize = DOMOperationsUtils.calculateReducedSize(wrapper, presenter.DOMElements.preview)&#13;
        $(presenter.DOMElements.preview).css({&#13;
            width: previewReducedSize.width,&#13;
            height: previewReducedSize.height&#13;
        });&#13;
&#13;
        var animationReducedSize = DOMOperationsUtils.calculateReducedSize(wrapper, presenter.DOMElements.animation);&#13;
        $(presenter.DOMElements.animation).css({&#13;
            width: animationReducedSize.width,&#13;
            height: animationReducedSize.height&#13;
        });&#13;
&#13;
        presenter.configuration.dimensions = {&#13;
            preview: { width: previewReducedSize.width, height: previewReducedSize.height },&#13;
            animation: { width: animationReducedSize.width, height: animationReducedSize.height }&#13;
        };&#13;
    }&#13;
&#13;
    // This function returns string containing CSS declaration of elements&#13;
    // background image size in percentage measure&#13;
    function calculateBackgroundSize(size, framesCount, imageType) {&#13;
        var cssValue;&#13;
&#13;
        switch(size) {&#13;
            case presenter.FRAME_SIZE.SCALED:&#13;
            case presenter.FRAME_SIZE.STRETCHED:&#13;
                cssValue = imageType === presenter.IMAGE_TYPE.ANIMATION ? (framesCount * 100) : 100;&#13;
                cssValue += '% 100%';&#13;
                break;&#13;
            default:&#13;
                cssValue = '';&#13;
        }&#13;
&#13;
        return cssValue;&#13;
    }&#13;
&#13;
    function previewImageLogic(previewImage) {&#13;
        var isScaledMode = presenter.configuration.frameSize === presenter.FRAME_SIZE.SCALED;&#13;
        var previewWidth = presenter.configuration.dimensions.preview.width;&#13;
        var previewHeight = presenter.configuration.dimensions.preview.height;&#13;
&#13;
        $(previewImage).addClass('animation-hidden-image');&#13;
        $(presenter.DOMElements.viewContainer).append(previewImage);&#13;
        var previewDimensions = presenter.calculateContainerDimensions($(previewImage).width(), $(previewImage).height(), previewWidth, previewHeight);&#13;
&#13;
        var previewBackgroundSize = calculateBackgroundSize(presenter.configuration.frameSize, presenter.configuration.framesCount, presenter.IMAGE_TYPE.PREVIEW);&#13;
        $(presenter.DOMElements.preview).css({&#13;
            'background-image': 'url(' + presenter.configuration.image + ')',&#13;
            width: isScaledMode ? previewDimensions.horizontal + 'px' : previewWidth + 'px',&#13;
            height: isScaledMode ? previewDimensions.vertical + 'px' : previewHeight + 'px'&#13;
        });&#13;
&#13;
        if (previewBackgroundSize) {&#13;
            $(presenter.DOMElements.preview).css('background-size', previewBackgroundSize);&#13;
        }&#13;
&#13;
        $(previewImage).remove();&#13;
    }&#13;
&#13;
    function animationImageLogic(animationImage) {&#13;
        $(animationImage).addClass('animation-hidden-image');&#13;
        $(presenter.DOMElements.viewContainer).append(animationImage);&#13;
&#13;
        var animationWidth = presenter.configuration.dimensions.animation.width;&#13;
        var animationHeight = presenter.configuration.dimensions.animation.height;&#13;
        var animationDimensions = presenter.calculateContainerDimensions($(animationImage).width() / presenter.configuration.framesCount, $(animationImage).height(), animationWidth, animationHeight);&#13;
        var animationBackgroundSize = calculateBackgroundSize(presenter.configuration.frameSize, presenter.configuration.framesCount, presenter.IMAGE_TYPE.ANIMATION);&#13;
        var source_width = (parseInt(presenter.configuration.oryginal_width, 10) ? presenter.configuration.oryginal_width : $(animationImage).width()) / presenter.configuration.framesCount;&#13;
        var source_height = parseInt(presenter.configuration.oryginal_height,10) ? presenter.configuration.oryginal_height : $(animationImage).height();&#13;
        var elementWidth;&#13;
        var elementHeight;&#13;
&#13;
        switch (presenter.configuration.frameSize) {&#13;
            case presenter.FRAME_SIZE.ORIGINAL:&#13;
                elementWidth = source_width;&#13;
                elementHeight = source_height;&#13;
                break;&#13;
            case presenter.FRAME_SIZE.SCALED:&#13;
                elementWidth = animationDimensions.horizontal;&#13;
                elementHeight = animationDimensions.vertical;&#13;
                break;&#13;
            case presenter.FRAME_SIZE.STRETCHED:&#13;
                elementWidth = animationWidth;&#13;
                elementHeight = animationHeight;&#13;
                break;&#13;
        }&#13;
        elementWidth = Math.round(elementWidth);&#13;
        elementHeight = Math.round(elementHeight);&#13;
&#13;
        presenter.frames = [];&#13;
        var makeFrames = function() {&#13;
            var ctx, i;&#13;
            try {&#13;
                for (i=0; i &lt; presenter.configuration.framesCount; i++) {&#13;
                    var canvas = document.createElement('canvas');&#13;
                    canvas.setAttribute('width', elementWidth);&#13;
                    canvas.setAttribute('height', elementHeight);&#13;
                    ctx = canvas.getContext('2d');&#13;
                    drawImageIOSFix(ctx, animationImage, i*source_width, 0, source_width, source_height, 0, 0, elementWidth, elementHeight);&#13;
                    presenter.frames[i] = canvas;&#13;
                    $(canvas).remove();&#13;
                }&#13;
            } catch (e) {&#13;
                if (e.name == "NS_ERROR_NOT_AVAILABLE") {&#13;
                    makeFrames();&#13;
                } else {&#13;
                    throw e;&#13;
                }&#13;
            }&#13;
        };&#13;
        makeFrames();&#13;
&#13;
        var clickhandler = $("&lt;div&gt;&lt;/div&gt;").css({"background":"transparent", 'width': elementWidth, 'height': elementHeight, 'position':'absolute'});&#13;
        $(presenter.DOMElements.animation).append(clickhandler);&#13;
        $(presenter.DOMElements.animation).append(presenter.frames[0]);&#13;
&#13;
        $(presenter.DOMElements.animation).css({&#13;
            width: elementWidth + 'px',&#13;
            height: elementHeight + 'px'&#13;
        });&#13;
&#13;
        if (animationBackgroundSize) {&#13;
            $(presenter.DOMElements.animation).css('background-size', animationBackgroundSize);&#13;
        }&#13;
&#13;
        $(animationImage).remove();&#13;
    }&#13;
&#13;
    function loadImages() {&#13;
        showLoadingScreen();&#13;
&#13;
        var img = $('&lt;img src="'+ presenter.configuration.animation +'"/&gt;').load(function() {&#13;
        	presenter.configuration.oryginal_width = this.width;&#13;
        	presenter.configuration.oryginal_height = this.height;&#13;
        	$(this).remove();&#13;
        });&#13;
&#13;
        $.imgpreload([presenter.configuration.image, presenter.configuration.animation], {&#13;
            all: function() {&#13;
                var isFirstPreview = $(this[0]).attr('src') == presenter.configuration.image;&#13;
                var previewImage = isFirstPreview ? this[0] : this[1];&#13;
                var animationImage = isFirstPreview ? this[1] : this[0];&#13;
&#13;
                previewImageLogic(previewImage);&#13;
                animationImageLogic(animationImage);&#13;
                hideLoadingScreen();&#13;
&#13;
                loadImagesEndCallback();&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function prepareLoadingScreen(containerWidth, containerHeight) {&#13;
        if (presenter.configuration.isPreview) return;&#13;
&#13;
        var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
        if (loadingSrc) presenter.DOMElements.loading.attr('src', loadingSrc);&#13;
&#13;
        $(presenter.DOMElements.loading).css({&#13;
            top: ((containerHeight - $(presenter.DOMElements.loading).height()) / 2) + 'px',&#13;
            left: ((containerWidth - $(presenter.DOMElements.loading).width()) / 2) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function showLoadingScreen() {&#13;
        $(presenter.DOMElements.loading).show();&#13;
    }&#13;
&#13;
    function hideLoadingScreen() {&#13;
        $(presenter.DOMElements.loading).hide();&#13;
    }&#13;
&#13;
    function changeFrame() {&#13;
    	$(presenter.DOMElements.animation).find('canvas').remove();&#13;
    	$(presenter.DOMElements.animation).append(presenter.frames[presenter.configuration.currentFrame]);&#13;
&#13;
        if (presenter.configuration.animationState === presenter.ANIMATION_STATE.STOPPED) {&#13;
            showLabelsForFrame(0);&#13;
        } else {&#13;
            showLabelsForFrame(presenter.configuration.currentFrame + 1);&#13;
        }&#13;
    }&#13;
&#13;
    function prepareLabels() {&#13;
        for (var i = 0; i &lt; presenter.configuration.labels.count; i++) {&#13;
            var label = presenter.configuration.labels.content[i];&#13;
            var labelElement = document.createElement('span');&#13;
&#13;
            $(labelElement).addClass('animation-label');&#13;
            $(labelElement).html(label.text);&#13;
            $(labelElement).css({&#13;
                top: label.top,&#13;
                left: label.left,&#13;
                visibility: 'hidden'&#13;
            });&#13;
&#13;
            $(presenter.DOMElements.viewContainer).append(labelElement);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.playAnimation = function() {&#13;
        $(presenter.DOMElements.preview).hide();&#13;
        $(presenter.DOMElements.animation).show();&#13;
        presenter.configuration.animationState = presenter.ANIMATION_STATE.PLAYING;&#13;
        showLabelsForFrame(presenter.configuration.currentFrame + 1);&#13;
        if (presenter.configuration.watermarkOptions.show) {&#13;
            $(presenter.DOMElements.watermark).hide();&#13;
        }&#13;
        presenter.configuration.watermarkOptions.clicked = true;&#13;
        $.doTimeout(presenter.configuration.queueName, presenter.configuration.frameDuration, function() {&#13;
            if (presenter.configuration.animationState !== presenter.ANIMATION_STATE.PLAYING) {&#13;
                return false;&#13;
            }&#13;
&#13;
            if (presenter.configuration.currentFrame &lt; presenter.configuration.framesCount - 1) {&#13;
                presenter.configuration.currentFrame++;&#13;
                changeFrame();&#13;
            } else {&#13;
                if (presenter.configuration.loop || presenter.configuration.resetOnEnd) {&#13;
                    presenter.configuration.currentFrame = 0;&#13;
                    changeFrame();&#13;
                } else {&#13;
                    presenter.configuration.animationState = presenter.ANIMATION_STATE.ENDED;&#13;
                    $.doTimeout(presenter.configuration.queueName, false);&#13;
                    return false;&#13;
                }&#13;
            }&#13;
&#13;
            if (presenter.configuration.currentFrame === 0 &amp;&amp; !presenter.configuration.loop) {&#13;
                if (presenter.configuration.resetOnEnd) {&#13;
                    presenter.stop();&#13;
                    return false;&#13;
                }&#13;
            }&#13;
&#13;
            return true;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.pause = function() {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('pause', []);&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.configuration.animationState !== presenter.ANIMATION_STATE.PLAYING) return;&#13;
&#13;
        presenter.configuration.animationState = presenter.ANIMATION_STATE.PAUSED;&#13;
        if (presenter.configuration.watermarkOptions.show) {&#13;
            $(presenter.DOMElements.watermark).show();&#13;
        }&#13;
        presenter.configuration.watermarkOptions.clicked = false;&#13;
        $.doTimeout(presenter.configuration.queueName, true);&#13;
    };&#13;
&#13;
    presenter.stop = function() {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('stop', []);&#13;
            return;&#13;
        }&#13;
&#13;
        $(presenter.DOMElements.preview).show();&#13;
        $(presenter.DOMElements.animation).hide();&#13;
        presenter.configuration.animationState = presenter.ANIMATION_STATE.STOPPED;&#13;
        presenter.configuration.currentFrame = 0;&#13;
        changeFrame();&#13;
        if (presenter.configuration.watermarkOptions.show) {&#13;
            $(presenter.DOMElements.watermark).show();&#13;
        }&#13;
        presenter.configuration.watermarkOptions.clicked = false;&#13;
        $.doTimeout(presenter.configuration.queueName, false);&#13;
    };&#13;
&#13;
    function elementClickHandler(e) {&#13;
        e.stopPropagation();&#13;
&#13;
        switch (presenter.configuration.animationState) {&#13;
            case presenter.ANIMATION_STATE.PAUSED:&#13;
            case presenter.ANIMATION_STATE.STOPPED:&#13;
                presenter.playAnimation();&#13;
                break;&#13;
&#13;
            case presenter.ANIMATION_STATE.PLAYING:&#13;
                presenter.pause();&#13;
                break;&#13;
&#13;
            case presenter.ANIMATION_STATE.ENDED:&#13;
                presenter.stop();&#13;
                break;&#13;
        }&#13;
    }&#13;
&#13;
    function handleMouseActions() {&#13;
        if (presenter.configuration.isClickDisabled) return;&#13;
&#13;
        $(presenter.DOMElements.preview).click(elementClickHandler);&#13;
        $(presenter.DOMElements.animation).click(elementClickHandler);&#13;
        $(presenter.DOMElements.watermark).click(elementClickHandler);&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        setDOMElementsHrefsAndSelectors(view);&#13;
&#13;
        presenter.model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(presenter.model);&#13;
        presenter.configuration.isPreview = isPreview;&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isLoaded = false;&#13;
        presenter.commandsQueue = CommandsQueueFactory.create(presenter);&#13;
&#13;
        setElementsDimensions(view);&#13;
        prepareLoadingScreen(model.Width, model.Height);&#13;
&#13;
        presenter.imagesLoadedDfd = new jQuery.Deferred();&#13;
        presenter.imagesLoaded = presenter.imagesLoadedDfd.promise();&#13;
&#13;
        $.when(presenter.imagesLoaded).then(function () {&#13;
            presenter.isLoaded = true;&#13;
&#13;
            if (!presenter.commandsQueue.isQueueEmpty()) {&#13;
                presenter.commandsQueue.executeAllTasks();&#13;
            }&#13;
        });&#13;
&#13;
        loadImages();&#13;
        prepareLabels();&#13;
        showLabelsForFrame(0);&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('reset', []);&#13;
            return;&#13;
        }&#13;
&#13;
        this.stop();&#13;
        presenter.configuration.watermarkOptions.clicked = false;&#13;
        if(presenter.configuration.watermarkOptions.show) {&#13;
            $(presenter.DOMElements.watermark).show();&#13;
        } else {&#13;
            $(presenter.DOMElements.watermark).hide();&#13;
        }&#13;
&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        if (!presenter.configuration.isVisibleByDefault) {&#13;
            presenter.hideLabels();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if (!presenter.isLoaded) return '';&#13;
&#13;
        if (presenter.ANIMATION_STATE.PLAYING === presenter.configuration.animationState) {&#13;
            presenter.pause();&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            currentFrame: presenter.configuration.currentFrame,&#13;
            animationState: presenter.configuration.animationState,&#13;
            isVisible : presenter.configuration.isVisible,&#13;
            watermarkClicked : presenter.configuration.watermarkOptions.clicked&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        if (!stateString) return;&#13;
&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('setState', [stateString]);&#13;
            return;&#13;
        }&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        presenter.configuration.currentFrame = state.currentFrame;&#13;
        presenter.configuration.animationState = state.animationState;&#13;
        presenter.configuration.watermarkOptions.clicked = state.watermarkClicked;&#13;
        changeFrame();&#13;
&#13;
        if (state.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        if (!presenter.configuration.watermarkOptions.clicked) {&#13;
            showLabelsForFrame(0);&#13;
        }&#13;
&#13;
        //noinspection FallthroughInSwitchStatementJS&#13;
        switch (presenter.configuration.animationState) {&#13;
            case presenter.ANIMATION_STATE.PLAYING:&#13;
                presenter.playAnimation();&#13;
                break;&#13;
            case presenter.ANIMATION_STATE.PAUSED:&#13;
            case presenter.ANIMATION_STATE.ENDED:&#13;
                $(presenter.DOMElements.preview).hide();&#13;
                $(presenter.DOMElements.animation).show();&#13;
                break;&#13;
        }&#13;
&#13;
        if (presenter.configuration.watermarkOptions.show &amp;&amp; !presenter.configuration.watermarkOptions.clicked) {&#13;
            $(presenter.DOMElements.watermark).show();&#13;
        } else {&#13;
            $(presenter.DOMElements.watermark).hide();&#13;
        }&#13;
    };&#13;
&#13;
    function loadImagesEndCallback () {&#13;
        presenter.configuration.animationState = presenter.ANIMATION_STATE.PAUSED;&#13;
        presenter.configuration.currentFrame = 0;&#13;
&#13;
        handleMouseActions();&#13;
&#13;
        Watermark.draw(presenter.DOMElements.watermark, presenter.configuration.watermarkOptions);&#13;
        if (presenter.configuration.watermarkOptions.show &amp;&amp; !presenter.configuration.watermarkOptions.clicked) {&#13;
            $(presenter.DOMElements.watermark).show();&#13;
        } else {&#13;
            $(presenter.DOMElements.watermark).hide();&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        if (!presenter.configuration.isVisibleByDefault) {&#13;
            presenter.hideLabels();&#13;
        }&#13;
&#13;
        presenter.imagesLoadedDfd.resolve();&#13;
    }&#13;
&#13;
    presenter.play = function () {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('play', []);&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.configuration.animationState === presenter.ANIMATION_STATE.ENDED) {&#13;
            presenter.stop();&#13;
        } else {&#13;
            presenter.playAnimation();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'stop': presenter.stop,&#13;
            'pause': presenter.pause,&#13;
            'play': presenter.play,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        $(presenter.DOMElements.viewContainer).css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.hideLabels = function() {&#13;
        $(presenter.DOMElements.viewContainer).find('.animation-label').each(function () {&#13;
            $(this).css('visibility', 'hidden');&#13;
        });&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('hide', []);&#13;
            return;&#13;
        }&#13;
&#13;
        this.configuration.isVisible = false;&#13;
        if(presenter.configuration.animationState == presenter.ANIMATION_STATE.PLAYING) {&#13;
            this.pause();&#13;
        }&#13;
        this.setVisibility(false);&#13;
        this.hideLabels();&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('show', []);&#13;
            return;&#13;
        }&#13;
&#13;
        this.configuration.isVisible = true;&#13;
        if(presenter.configuration.animationState == presenter.ANIMATION_STATE.PLAYING) {&#13;
            this.playAnimation();&#13;
        }&#13;
        this.setVisibility(true);&#13;
        showLabelsForFrame(presenter.configuration.currentFrame + 1);&#13;
    };&#13;
&#13;
    // This function validates and converts number from string representation to positive integer value&#13;
    presenter.sanitizePositiveNumber = function(number) {&#13;
        if (!number) {&#13;
            return {&#13;
                isError: true&#13;
            };&#13;
        }&#13;
&#13;
        var parsedNumber = parseInt(number, 10);&#13;
        if (isNaN(parsedNumber)) {&#13;
            return {&#13;
                isError: true&#13;
            };&#13;
        }&#13;
&#13;
        if (parsedNumber &lt; 0) {&#13;
            return {&#13;
                isError: true&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            number: parsedNumber&#13;
        };&#13;
    };&#13;
&#13;
    // If validation error occurs then one of the following error codes are returned&#13;
    // L_01 - 'Text' value invalid&#13;
    // L_02 - 'Top' value invalid&#13;
    // L_03 - 'Left' value invalid&#13;
    // L_04 - Label empty&#13;
    presenter.validateLabels = function(labelsArray, framesCount) {&#13;
        var labels = { count: 0, content: [] };&#13;
&#13;
        if (ModelValidationUtils.isArrayEmpty(labelsArray)) {&#13;
            return { isError: false, labels: labels };&#13;
        }&#13;
&#13;
        for (var i = 0; i  &lt; labelsArray.length; i++) {&#13;
            if (ModelValidationUtils.isArrayElementEmpty(labelsArray[i])) {&#13;
                return { isError: true, errorCode: "L_04" };&#13;
            }&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(labelsArray[i].Text)) {&#13;
                return { isError: true, errorCode: "L_01" };&#13;
            }&#13;
&#13;
            var sanitizedTopPosition = presenter.sanitizePositiveNumber(labelsArray[i].Top);&#13;
            if (sanitizedTopPosition.isError) {&#13;
                return { isError: true, errorCode: "L_02" };&#13;
            }&#13;
&#13;
            var sanitizedLeftPosition = presenter.sanitizePositiveNumber(labelsArray[i].Left);&#13;
            if (sanitizedLeftPosition.isError) {&#13;
                return { isError: true, errorCode: "L_03" };&#13;
            }&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(labelsArray[i].Frames)) {&#13;
                labelsArray[i].Frames = "0";&#13;
            }&#13;
&#13;
            var convertedFrames = ImageViewer.convertFramesList(labelsArray[i].Frames, 0, framesCount);&#13;
            if (convertedFrames.isError) {&#13;
                return { isError: true, errorCode: convertedFrames.errorCode};&#13;
            }&#13;
&#13;
            var label = {&#13;
                text: labelsArray[i].Text,&#13;
                top: sanitizedTopPosition.number,&#13;
                left: sanitizedLeftPosition.number,&#13;
                frames: convertedFrames.list&#13;
            };&#13;
&#13;
            labels.content.push(label);&#13;
            labels.count++;&#13;
        }&#13;
&#13;
        return { isError: false, labels: labels };&#13;
    };&#13;
&#13;
    presenter.validateFramesCount = function(framesCount) {&#13;
        var sanitizedFramesCount = presenter.sanitizePositiveNumber(framesCount);&#13;
&#13;
        if (sanitizedFramesCount.isError) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FC_01"&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            framesCount: sanitizedFramesCount.number&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateFrameDuration = function(frameDuration) {&#13;
        var sanitizedFrameDuration = presenter.sanitizePositiveNumber(frameDuration);&#13;
&#13;
        if (sanitizedFrameDuration.isError) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FD_01"&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            frameDuration: sanitizedFrameDuration.number&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateFrameSize = function(frameSize) {&#13;
        var result;&#13;
&#13;
        switch (frameSize) {&#13;
            case "Keep aspect ratio":&#13;
                result = presenter.FRAME_SIZE.SCALED;&#13;
                break;&#13;
            case "Stretch":&#13;
                result = presenter.FRAME_SIZE.STRETCHED;&#13;
                break;&#13;
            default:&#13;
                result = presenter.FRAME_SIZE.ORIGINAL;&#13;
                break;&#13;
        }&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        if (ModelValidationUtils.isStringEmpty(model["Preview image"])) {&#13;
            return { isError: true, errorCode: "PI_01" };&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(model.Animation)) {&#13;
            return { isError: true, errorCode: "AI_01" };&#13;
        }&#13;
&#13;
        var validatedFramesCount = presenter.validateFramesCount(model["Frames count"]);&#13;
        if (validatedFramesCount.isError) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: validatedFramesCount.errorCode&#13;
            };&#13;
        }&#13;
&#13;
        var validatedFrameDuration = presenter.validateFrameDuration(model["Frame duration"]);&#13;
        if (validatedFrameDuration.isError) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: validatedFrameDuration.errorCode&#13;
            };&#13;
        }&#13;
&#13;
        var validatedLabels = presenter.validateLabels(model.Labels, validatedFramesCount.framesCount);&#13;
        if (validatedLabels.isError) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: validatedLabels.errorCode&#13;
            };&#13;
        }&#13;
&#13;
        var watermarkOptions = {&#13;
            "color": model["Watermark color"],&#13;
            "opacity": model["Watermark opacity"],&#13;
            "size": model["Watermark size"]&#13;
        };&#13;
        var validatedOptions = Watermark.validateOptions(watermarkOptions);&#13;
        validatedOptions.show = ModelValidationUtils.validateBoolean(model["Show watermark"]);&#13;
        validatedOptions.clicked = false;&#13;
&#13;
        var isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            queueName: model.ID,&#13;
            image: model["Preview image"],&#13;
            animation: model.Animation,&#13;
            framesCount: validatedFramesCount.framesCount,&#13;
            frameDuration: validatedFrameDuration.frameDuration,&#13;
            loop: ModelValidationUtils.validateBoolean(model.Loop),&#13;
            labels: validatedLabels.labels,&#13;
            frameSize: presenter.validateFrameSize(model["Frame size"]),&#13;
            resetOnEnd: !ModelValidationUtils.validateBoolean(model["Don't reset on end"]),&#13;
            isClickDisabled: ModelValidationUtils.validateBoolean(model["Is click disabled"]),&#13;
            isVisibleByDefault: isVisibleByDefault,&#13;
            isVisible: isVisibleByDefault,&#13;
            watermarkOptions: validatedOptions&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getLabelIndexesForFrame = function (labels, frame) {&#13;
        var indexes = [];&#13;
&#13;
        if(!labels) return indexes;&#13;
&#13;
        for (var i = 0, length = labels.length; i &lt; length; i++) {&#13;
            if (labels[i].frames.indexOf(frame) !== -1) {&#13;
                indexes.push(i);&#13;
            }&#13;
        }&#13;
&#13;
        return indexes;&#13;
    };&#13;
&#13;
    function showLabelsForFrame(frame) {&#13;
        var labels = presenter.configuration.labels.content,&#13;
            indexes = presenter.getLabelIndexesForFrame(labels, frame);&#13;
&#13;
        presenter.hideLabels();&#13;
&#13;
        if (!presenter.configuration.isVisible) return;&#13;
&#13;
        for (var i = 0, length = indexes.length; i &lt; length; i++) {&#13;
            $(presenter.DOMElements.viewContainer).find('.animation-label:eq(' + indexes[i] + ')').css('visibility', 'visible');&#13;
        }&#13;
    }&#13;
&#13;
    // This function is from https://github.com/stomita/ios-imagefile-megapixel&#13;
    function detectVerticalSquash(img) {&#13;
        try {&#13;
            var iw = img.naturalWidth, ih = img.naturalHeight;&#13;
            var canvas = document.createElement('canvas');&#13;
            canvas.width = 1;&#13;
            canvas.height = ih;&#13;
            var ctx = canvas.getContext('2d');&#13;
            ctx.drawImage(img, 0, 0);&#13;
            var data = ctx.getImageData(0, 0, 1, ih).data;&#13;
            // search image edge pixel position in case it is squashed vertically.&#13;
            var sy = 0;&#13;
            var ey = ih;&#13;
            var py = ih;&#13;
            while (py &gt; sy) {&#13;
                var alpha = data[(py - 1) * 4 + 3];&#13;
                if (alpha === 0) {&#13;
                    ey = py;&#13;
                } else {&#13;
                    sy = py;&#13;
                }&#13;
                py = (ey + sy) &gt;&gt; 1;&#13;
            }&#13;
            var ratio = (py / ih);&#13;
        }&#13;
        catch (err) {&#13;
            // we expect Security error on SVG files&#13;
            return 1;&#13;
        }&#13;
        return (ratio === 0) ? 1 : ratio;&#13;
    }&#13;
&#13;
    function drawImageIOSFix(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {&#13;
        var vertSquashRatio = detectVerticalSquash(img);&#13;
        ctx.drawImage(img, sx * vertSquashRatio, sy * vertSquashRatio,&#13;
            sw * vertSquashRatio, sh * vertSquashRatio,&#13;
            dx, dy, dw, dh );&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon id="Assessments_Navigation_Bar">
    <model>
        <property name="Sections" nameLabel="Assessments_Navigation_Bar_property_sections" type="text"/>
        <property displayName="Real-time navigationbar-page-attempted" name="addClassAreAllAttempted" nameLabel="Assessments_Navigation_Bar_property_add_class_are_all_attempted" type="boolean"/>
        <property displayName="Number of buttons" name="userButtonsNumber" nameLabel="Assessments_Navigation_Bar_property_number_of_buttons" type="string"/>
        <property displayName="Width of buttons" name="userButtonsWidth" nameLabel="Assessments_Navigation_Bar_property_width_of_buttons" type="string"/>
    </model>
<css>.assessments-navigation-bar-wrapper .navigation-buttons-first .previous {&#13;
    width: 40px;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .navigation-buttons-first {&#13;
    display: inline-block;&#13;
    height: 80%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .navigation-buttons-last {&#13;
    display: inline-block;&#13;
    height: 80%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .inactive {&#13;
    background-color: #80BBC8;&#13;
    color: #C0C0C0;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper {&#13;
    background-color: #F3F3F3;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .sections {&#13;
    display: inline-block;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .section {&#13;
    display: inline-block;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .section_name {&#13;
    text-align: center;&#13;
    height: 20%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .element {&#13;
    display: inline-block;&#13;
    text-align: center;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .buttons {&#13;
    height: 80%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .button_text {&#13;
    position: relative;&#13;
    top: 50%;&#13;
    transform: translateY(-50%);&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .mouse-over {&#13;
    background-color: #7F7F7F;&#13;
    color: #F3F3F3;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .current_page {&#13;
    background-color: #2091AB;&#13;
    color: white;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .bookmark {&#13;
    color: red;&#13;
}&#13;
</css><view>&lt;div class="assessments-navigation-bar-wrapper"&gt;&#13;
    &lt;div class="navigation-buttons-first"&gt;&#13;
        &lt;div class="previous"&gt;&amp;hellip;&lt;/div&gt;&#13;
        &lt;div class="turn_backward"&gt;&amp;lt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&#13;
    &lt;div class="sections"&gt;&#13;
        &lt;div class ="section_0"&gt;&#13;
            &lt;div class="section_name"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&#13;
    &lt;div class="navigation-buttons-last"&gt;&#13;
          &lt;div class="turn_forward"&gt;&amp;hellip;&lt;/div&gt;&#13;
          &lt;div class="next"&gt;&amp;gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="assessments-navigation-bar-wrapper"&gt;&#13;
    &lt;div class="navigation-buttons-first"&gt;&#13;
        &lt;div class="previous"&gt;&amp;hellip;&lt;/div&gt;&#13;
        &lt;div class="turn_backward"&gt;&amp;lt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&#13;
    &lt;div class="sections"&gt;&#13;
        &lt;div class ="section_0"&gt;&#13;
            &lt;div class="section_name"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&#13;
    &lt;div class="navigation-buttons-last"&gt;&#13;
          &lt;div class="turn_forward"&gt;&amp;hellip;&lt;/div&gt;&#13;
          &lt;div class="next"&gt;&amp;gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAssessments_Navigation_Bar_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.SECTION_NAME_HEIGHT = 20;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        S_00: "Section property cant be empty string",&#13;
        S_01: "Pages range are invalid on section %section% in sections property. Numbers have to be integers only.",&#13;
        S_02: "Pages range is invalid on section: %section% in sections property.",&#13;
        S_03: "Pages descriptions are invalid on section: %section% in sections property. Number of descriptions is too small.",&#13;
        S_04: "Pages descriptions are invalid on section: %section% in sections property. Number of descriptions is too big.",&#13;
        S_05: "Section: %section_1% pages numbers cant intersect with page numbers of section: %section_2%.",&#13;
        S_06: "Number of buttons property can't be equal or below 0.",&#13;
        S_07: "Number of buttons property have to be an integer",&#13;
        S_08: "Number of buttons can't be greater than number of pages in sections",&#13;
        S_09: "Buttons width property can't be equal or below 0.",&#13;
        S_10: "Buttons width property have to be an integer"&#13;
    };&#13;
&#13;
    presenter.CSS_CLASSES = {&#13;
        ALL_ATTEMPTED: "all-attempted"&#13;
    };&#13;
    &#13;
    presenter.attemptedButtons = [];&#13;
&#13;
    presenter.configuration = {&#13;
        isValid: undefined,&#13;
        addonID: undefined,&#13;
        sections: undefined,&#13;
        addClassAreAllAttempted: undefined,&#13;
        userButtonsNumber: undefined,&#13;
        userButtonsWidth: undefined,&#13;
        numberOfButtons: undefined,&#13;
        navigationLeftIndex: 0,&#13;
        navigationRightIndex: 0,&#13;
        numberOfPages: 0,&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function(message, substitutions) {&#13;
        var errorContainer;&#13;
        if(typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for(var key in substitutions) {&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    function getErrorObject (errorCode, errorData) {&#13;
        return {&#13;
            isValid: false,&#13;
            errorCode: errorCode,&#13;
            errorData: errorData&#13;
        };&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.presentation = controller.getPresentation();&#13;
        presenter.currentPageIndex = presenter.playerController.getCurrentPageIndex();&#13;
        presenter.commander = controller.getCommands();&#13;
        presenter.eventBus = controller.getEventBus();&#13;
&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.changeToPage = function (index) {&#13;
        if (index == presenter.currentPageIndex) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.commander.gotoPageIndex(index);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'bookmarkCurrentPage': presenter.bookmarkCurrentPage,&#13;
            'removeBookmark' : presenter.removeBookmark,&#13;
            'moveToPage': presenter.moveToPageCommand&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.moveToPageCommand = function (params) {&#13;
        presenter.moveToPage(params[0]);&#13;
    };&#13;
&#13;
    presenter.moveToPage = function (pageIndex) {&#13;
        var validatedPageIndex = presenter.validatePageIndex(pageIndex);&#13;
&#13;
        if (validatedPageIndex.isValid) {&#13;
            var page = presenter.sections.getPageByIndex(validatedPageIndex.index);&#13;
&#13;
            presenter.changeToPage(page.page);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validatePageIndex = function (pageIndex) {&#13;
        var parsedIndex = Number(pageIndex);&#13;
&#13;
        if (isNaN(parsedIndex)) {&#13;
            return getErrorObject();&#13;
        }&#13;
&#13;
        if (presenter.isFloat(parsedIndex)) {&#13;
            return getErrorObject();&#13;
        }&#13;
&#13;
        if ((parsedIndex &lt; 1) || (parsedIndex &gt; presenter.configuration.numberOfPages)) {&#13;
            return getErrorObject();&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            index: (parsedIndex - 1)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.bookmarkCurrentPage = function () {&#13;
        presenter.sections.setBookmarkCurrentPage(true);&#13;
        presenter.navigationManager.bookmarkCurrentButton();&#13;
    };&#13;
&#13;
    presenter.removeBookmark = function () {&#13;
        presenter.sections.setBookmarkCurrentPage(false);&#13;
        presenter.navigationManager.removeBookmarkFromCurrentButton();&#13;
    };&#13;
&#13;
    // Fisher-Yates algorithm&#13;
    // based on http://sedition.com/perl/javascript-fy.html&#13;
    function shuffleArray (a) {&#13;
        var i = a.length;&#13;
        if ( i == 0 ) return [];&#13;
&#13;
        while ( --i ) {&#13;
            var j = Math.floor( Math.random() * ( i + 1 ) );&#13;
            var tempi = a[i];&#13;
            a[i] = a[j];&#13;
            a[j] = tempi;&#13;
        }&#13;
&#13;
        return a;&#13;
    }&#13;
&#13;
    presenter.Button = function (view_description) {&#13;
        this.description = view_description;&#13;
        this.$view = this.createView();&#13;
        this.$view_text;&#13;
        this.actualCommand;&#13;
        this.navigateToPage;&#13;
        this.isActualButton = false;&#13;
&#13;
        this.connectEvents();&#13;
        this.$view.addClass("element");&#13;
    };&#13;
&#13;
    presenter.Button.prototype.connectEvents = function () {&#13;
        this.$view[0].addEventListener("click", this, false);&#13;
        this.$view[0].addEventListener("mouseover", this, false);&#13;
        this.$view[0].addEventListener("mouseout", this, false);&#13;
    };&#13;
    &#13;
    presenter.Button.prototype.addCssClass = function (cssClass) {&#13;
        this.$view.addClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.Button.prototype.removeCssClass = function (cssClass) {&#13;
        this.$view.removeClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.Button.prototype.setCommand = function (command) {&#13;
        this.actualCommand = command;&#13;
    };&#13;
&#13;
    presenter.Button.prototype.setNavigateToPage = function (navigateToPage) {&#13;
        this.navigateToPage = navigateToPage;&#13;
    };&#13;
&#13;
    presenter.Button.prototype.execute = function () {&#13;
        this.actualCommand();&#13;
    };&#13;
&#13;
    presenter.Button.prototype.handleEvent = function (event) {&#13;
        if (presenter.isPreview) {&#13;
            return;&#13;
        }&#13;
&#13;
        switch (event.type) {&#13;
            case "click":&#13;
                this.execute();&#13;
                break;&#13;
            case "mouseover":&#13;
                this.$view.addClass("mouse-over");&#13;
                break;&#13;
            case "mouseout":&#13;
                this.$view.removeClass("mouse-over");&#13;
                break;&#13;
        }&#13;
&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
    };&#13;
&#13;
    presenter.Button.prototype.setAsCurrent = function () {&#13;
        this.isActualButton = true;&#13;
        this.$view.addClass("current_page");&#13;
    };&#13;
&#13;
    presenter.Button.prototype.addBookmark = function () {&#13;
        this.$view.addClass("bookmark");&#13;
    };&#13;
&#13;
    presenter.Button.prototype.removeBookmark = function () {&#13;
        this.$view.removeClass("bookmark");&#13;
    };&#13;
&#13;
    presenter.Button.prototype.createView = function () {&#13;
        var $view = $('&lt;div&gt;&lt;/div&gt;');&#13;
&#13;
        $view.css({&#13;
            width: presenter.configuration.sizes.elementWidth + "px"&#13;
        });&#13;
&#13;
        this.$view_text = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this.$view_text.text(this.description);&#13;
        this.$view_text.addClass("button_text");&#13;
&#13;
        $view.append(this.$view_text);&#13;
&#13;
        $view.addClass("button");&#13;
&#13;
        return $view;&#13;
    };&#13;
&#13;
    presenter.Button.prototype.getView = function () {&#13;
        return this.$view;&#13;
    };&#13;
&#13;
    presenter.Button.prototype.addInactiveClass = function () {&#13;
        this.$view.addClass("inactive");&#13;
    };&#13;
&#13;
    presenter.Button.prototype.removeInactiveClass = function () {&#13;
        this.$view.removeClass("inactive");&#13;
    };&#13;
&#13;
    presenter.NavigationButtonLeft = function () {&#13;
        presenter.Button.call(this, "&amp;lt;");&#13;
        this.$view.removeClass("button");&#13;
        this.$view.addClass("previous");&#13;
        this.setCommand(function () {&#13;
            presenter.navigationManager.goLeft();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationButtonLeft.prototype = Object.create(presenter.Button.prototype);&#13;
    presenter.NavigationButtonLeft.constructor = presenter.NavigationButtonLeft;&#13;
&#13;
    presenter.NavigationButtonRight = function () {&#13;
        presenter.Button.call(this, "&amp;gt;");&#13;
        this.$view.addClass("next");&#13;
        this.$view.removeClass("button");&#13;
        this.setCommand(function () {&#13;
            presenter.navigationManager.goRight();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationButtonRight.prototype = Object.create(presenter.Button.prototype);&#13;
    presenter.NavigationButtonRight.constructor = presenter.NavigationButtonRight;&#13;
&#13;
    presenter.HellipButton = function (hellipFunction, className) {&#13;
        presenter.Button.call(this, "&amp;hellip;"); // ...&#13;
        this.$view_text.html(this.description);&#13;
        this.$view.removeClass("button");&#13;
        this.$view.addClass(className);&#13;
&#13;
        this.setCommand(hellipFunction);&#13;
    };&#13;
&#13;
    presenter.HellipButton.prototype = Object.create(presenter.Button.prototype);&#13;
    presenter.HellipButton.constructor = presenter.HellipButton;&#13;
&#13;
    presenter.Page = function (page, view_description, sectionName, sectionCssClass) {&#13;
        this.description = view_description;&#13;
        this.page = page;&#13;
        this.isBookmarkOn = false;&#13;
        this.sectionName = sectionName;&#13;
        this.sectionCssClass = sectionCssClass;&#13;
    };&#13;
&#13;
    presenter.Page.prototype.setBookmarkOn = function (bookmark) {&#13;
        this.isBookmarkOn = bookmark;&#13;
    };&#13;
&#13;
    presenter.Page.prototype.getSectionClassName = function () {&#13;
        return this.sectionCssClass;&#13;
    };&#13;
&#13;
    presenter.Page.prototype.getSectionName = function () {&#13;
        return this.sectionName;&#13;
    };&#13;
&#13;
    presenter.Page.prototype.getChangeToPageCommand = function () {&#13;
        return function () {&#13;
            presenter.changeToPage(this);&#13;
        }.bind(this.page);&#13;
    };&#13;
&#13;
    presenter.Page.prototype.isActualPage = function () {&#13;
        return presenter.currentPageIndex === this.page;&#13;
    };&#13;
&#13;
    presenter.Section = function (pages, sectionName, pagesDescriptions, sectionCssClassName) {&#13;
        this.name = sectionName;&#13;
        this.cssClass = sectionCssClassName;&#13;
        this.pages = this.createPages(pages, pagesDescriptions);&#13;
    };&#13;
&#13;
    presenter.Section.prototype.createPages = function (pages, pagesDescriptions) {&#13;
        return shuffleArray(pages).map(function (page, index) {&#13;
            return new presenter.Page(page, pagesDescriptions[index], this.name, this.cssClass);&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.Sections = function (sections) {&#13;
        this.sections = this.createSections(sections);&#13;
        this.allPages = this.getAllPagesInOrder(this.sections);&#13;
        this.attemptedPages = [];&#13;
        this.pagesIndexes = this.getPagesIndexes(this.allPages);&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.markPageAsAttempted = function (page) {&#13;
        if(!(this.attemptedPages.indexOf(page) &gt; -1)){&#13;
            this.attemptedPages.push(page);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.markPageAsNotAttempted = function (page) {&#13;
        var attempted_page_index = this.attemptedPages.indexOf(page);&#13;
        if (attempted_page_index !== -1) {&#13;
            this.attemptedPages.splice(attempted_page_index, 1);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getPagesIndexes = function (pages) {&#13;
        return pages.map(function (page) {&#13;
            return page.page;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getPageByIndex = function (index) {&#13;
        return this.allPages[index];&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.isHomeCurrentPage = function () {&#13;
        return this.allPages[0].isActualPage();&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.isLastCurrentPage = function () {&#13;
        return this.allPages[this.allPages.length - 1].isActualPage();&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getActualPageIndex = function () {&#13;
        for (var i = 0; i &lt; this.allPages.length; i++) {&#13;
            if (this.allPages[i].isActualPage()) {&#13;
                return i;&#13;
            }&#13;
        }&#13;
&#13;
        return undefined;&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.doesActualPageExists = function () {&#13;
        return this.pagesIndexes.indexOf(presenter.currentPageIndex) !== -1;&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getNextPageToCurrent = function () {&#13;
        var pageIndex = this.getActualPageIndex();&#13;
&#13;
        if ((pageIndex !== undefined) &amp;&amp; (pageIndex &lt; presenter.configuration.numberOfPages - 1)) {&#13;
            pageIndex = pageIndex + 1;&#13;
            return this.getPageByIndex(pageIndex);&#13;
        }&#13;
&#13;
        return undefined;&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getPreviousPageToCurrent = function () {&#13;
        var pageIndex = this.getActualPageIndex();&#13;
&#13;
        if ((pageIndex !== undefined) &amp;&amp; (pageIndex &gt; 0)) {&#13;
            pageIndex = pageIndex - 1;&#13;
            return this.getPageByIndex(pageIndex);&#13;
        }&#13;
&#13;
        return undefined;&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getAllPagesInOrder = function (sections) {&#13;
        return sections.reduce(function (result, section) {&#13;
            return result.concat(section.pages);&#13;
        }, []);&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.addClassAllAttemptedToPage = function (current_page_index) {&#13;
        presenter.navigationManager.markCurrentButtonWithAttemptedClass();&#13;
        presenter.sections.markPageAsAttempted(current_page_index);&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.removeClassAllAttemptedToPage = function (current_page_index) {&#13;
        presenter.navigationManager.removeCurrentButtonAttemptedClass();&#13;
        presenter.sections.markPageAsNotAttempted(current_page_index);&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.setBookmarkCurrentPage = function (bookmark) {&#13;
        for (var i = 0; i &lt; this.allPages.length; i++) {&#13;
            if (this.allPages[i].isActualPage()) {&#13;
                this.allPages[i].isBookmarkOn = bookmark;&#13;
                break&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getPages = function (leftIndex, numberOfPages) {&#13;
        var pages = [];&#13;
&#13;
        if (leftIndex + numberOfPages &gt;= this.allPages.length) {&#13;
            leftIndex = ((this.allPages.length) - numberOfPages)&#13;
        }&#13;
&#13;
        if (leftIndex &lt; 0) {&#13;
            leftIndex = 0;&#13;
        }&#13;
&#13;
        for (var i = leftIndex; i &lt; this.allPages.length; i++) {&#13;
            if (numberOfPages == 0) {&#13;
                break;&#13;
            }&#13;
&#13;
            pages.push(this.allPages[i]);&#13;
            numberOfPages--;&#13;
        }&#13;
&#13;
        return pages;&#13;
    };&#13;
&#13;
&#13;
    presenter.Sections.prototype.createSections = function (sections) {&#13;
        return sections.map(function (section, index) {&#13;
            var sectionCssClass = "section_" + index;&#13;
            return new presenter.Section(section.pages, section.sectionName, section.pagesDescriptions, sectionCssClass);&#13;
        })&#13;
    };&#13;
&#13;
    presenter.NavigationManager = function () {&#13;
        this.leftSideIndex = 0;&#13;
        this.actualSections = [];&#13;
        this.actualSectionsNames = [];&#13;
        this.$navigationButtonsFirst;&#13;
        this.$navigationButtonsLast;&#13;
        this.navigationButtonLeft;&#13;
        this.navigationButtonRight;&#13;
        this.$sections;&#13;
        this.buttons = [];&#13;
        this.shiftCount = 0;&#13;
&#13;
        this.initView();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.restartLeftSideIndex = function () {&#13;
        this.leftSideIndex = 0;&#13;
        this.shiftCount = 0;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.goRight = function () {&#13;
        var page = presenter.sections.getNextPageToCurrent();&#13;
&#13;
        if (page) {&#13;
            presenter.changeToPage(page.page);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.goLeft = function () {&#13;
        var page = presenter.sections.getPreviousPageToCurrent();&#13;
&#13;
        if (page) {&#13;
            presenter.changeToPage(page.page);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.bookmarkCurrentButton = function () {&#13;
        this.buttons.filter(function (element) {&#13;
            return element.isActualButton;&#13;
        })[0].addBookmark();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeBookmarkFromCurrentButton = function () {&#13;
        this.buttons.filter(function (element) {&#13;
            return element.isActualButton;&#13;
        })[0].removeBookmark();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.markButtonsWithAttempted = function (attemptedPages) {&#13;
        this.buttons.filter(function (button) {&#13;
            return (attemptedPages.indexOf(button.navigateToPage) !== -1);&#13;
        }).forEach(function (button) {&#13;
            button.addCssClass(presenter.CSS_CLASSES.ALL_ATTEMPTED);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.initView = function () {&#13;
        this.appendNavigationButtonsFirst();&#13;
        this.appendSectionsContainer();&#13;
        this.appendNavigationButtonsLast();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.appendSectionsContainer = function () {&#13;
        this.$sections = $('&lt;div&gt;&lt;/div&gt;');&#13;
&#13;
        this.$sections.addClass("sections");&#13;
&#13;
        presenter.$wrapper.append(this.$sections);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.getActualButtonsArray = function () {&#13;
        return this.buttons.filter(function (button) {&#13;
            return button.isActualButton&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.markCurrentButtonWithAttemptedClass = function () {&#13;
        var button = this.getActualButtonsArray();&#13;
&#13;
        if (button.length === 1) {&#13;
            button[0].addCssClass(presenter.CSS_CLASSES.ALL_ATTEMPTED);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeCurrentButtonAttemptedClass = function () {&#13;
        var button = this.getActualButtonsArray();&#13;
&#13;
        if (button.length === 1) {&#13;
            button[0].removeCssClass(presenter.CSS_CLASSES.ALL_ATTEMPTED);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.appendNavigationButtonsFirst = function () {&#13;
        var $navigationButtonsFirst = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $navigationButtonsFirst.addClass("navigation-buttons-first");&#13;
&#13;
        this.navigationButtonLeft = new presenter.NavigationButtonLeft();&#13;
        $navigationButtonsFirst.append(this.navigationButtonLeft.getView());&#13;
&#13;
        this.$navigationButtonsFirst = $navigationButtonsFirst;&#13;
        presenter.$wrapper.append(this.$navigationButtonsFirst);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.appendNavigationButtonsLast = function () {&#13;
        var $navigationButtonsLast = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $navigationButtonsLast.addClass("navigation-buttons-last");&#13;
&#13;
        this.navigationButtonRight = new presenter.NavigationButtonRight();&#13;
        $navigationButtonsLast.append(this.navigationButtonRight.getView());&#13;
&#13;
        this.$navigationButtonsLast = $navigationButtonsLast;&#13;
        presenter.$wrapper.append(this.$navigationButtonsLast);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.clearStateAndButtons = function () {&#13;
        this.removeSections();&#13;
        this.removeHellips();&#13;
        this.removeInactiveClassFromNavigationButtons();&#13;
        this.buttons = [];&#13;
        this.actualPages = [];&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeInactiveClassFromNavigationButtons = function () {&#13;
        this.navigationButtonLeft.removeInactiveClass();&#13;
        this.navigationButtonRight.removeInactiveClass();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.addLeftHellip = function () {&#13;
        if (this.shouldAddLeftHellip()) {&#13;
            this.getHellip($.fn.append.bind(this.$navigationButtonsFirst), this.shiftPagesToLeft.bind(this), "turn_back");&#13;
            return 1;&#13;
        }&#13;
&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.addRightHellip = function () {&#13;
        if (this.shouldAddRightHellip()) {&#13;
            this.rightHellip = this.getHellip($.fn.prepend.bind(this.$navigationButtonsLast), this.shiftPagesToRight.bind(this), "turn_forward");&#13;
            return 1&#13;
        }&#13;
&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.calculateNumberOfPages = function (hellipsCount) {&#13;
        var number = presenter.configuration.numberOfButtons - 2 - hellipsCount;&#13;
        if (number &lt; 1) {&#13;
            return 1;&#13;
        } else {&#13;
            return number;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.getHellip = function (containerAddFunction, hellipFunction, className) {&#13;
        var button = new presenter.HellipButton(hellipFunction, className);&#13;
&#13;
        containerAddFunction(button.getView());&#13;
&#13;
        return button;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.setSections = function () {&#13;
        this.clearStateAndButtons();&#13;
&#13;
        this.hellipsCount = 0;&#13;
&#13;
        this.hellipsCount += this.addLeftHellip();&#13;
        this.hellipsCount += this.addRightHellip();&#13;
&#13;
        this.addSections(this.calculateNumberOfPages(this.hellipsCount));&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.deactivateNavigationButtons = function () {&#13;
        if (presenter.sections.isHomeCurrentPage()) {&#13;
            this.navigationButtonLeft.addInactiveClass();&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.sections.isLastCurrentPage()) {&#13;
            this.navigationButtonRight.addInactiveClass();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeSections = function () {&#13;
        presenter.$wrapper.find(".sections").children().remove();&#13;
        this.actualSections = [];&#13;
        this.actualSectionsNames = [];&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.moveToCurrentPage = function () {&#13;
        if (presenter.sections.doesActualPageExists()) {&#13;
            this.moveToCurrentPageLogic();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.moveToCurrentPageLogic = function () {&#13;
        for (var i = 0; i &lt; this.actualPages.length; i++) {&#13;
            if (this.actualPages[i].isActualPage()) {&#13;
                return;&#13;
            }&#13;
        }&#13;
&#13;
        this.rightHellip.execute();&#13;
        this.moveToCurrentPage();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeHellips = function () {&#13;
        presenter.$wrapper.find(".turn_forward").remove();&#13;
        presenter.$wrapper.find(".turn_back").remove();&#13;
        delete this.rightHellip;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.shiftPagesToLeft = function () {&#13;
        if (this.shiftCount === 1) {&#13;
            this.leftSideIndex = 0;&#13;
        } else {&#13;
            if (presenter.configuration.numberOfButtons - 4 &gt; 0) {&#13;
                this.leftSideIndex -=  (presenter.configuration.numberOfButtons - 4);&#13;
            } else {&#13;
                this.leftSideIndex -= 1;&#13;
            }&#13;
        }&#13;
&#13;
        this.shiftCount--;&#13;
        this.setSections();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.shiftPagesToRight = function () {&#13;
        var shift;&#13;
        if (presenter.configuration.userButtonsNumber) {&#13;
            shift = (presenter.configuration.numberOfButtons - 2 - this.hellipsCount);&#13;
        } else {&#13;
            shift = this.getNormalRightShift();&#13;
        }&#13;
&#13;
        if (shift &lt;= 0) {&#13;
            shift = 1;&#13;
        }&#13;
&#13;
        this.leftSideIndex += shift;&#13;
&#13;
        this.shiftCount++;&#13;
        this.setSections();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.getNormalRightShift = function () {&#13;
        if (this.shiftCount === 0) {&#13;
            return (presenter.configuration.numberOfButtons - 3);&#13;
        } else {&#13;
            return (presenter.configuration.numberOfButtons - 4);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.setSectionWidth = function ($section) {&#13;
        var numOfButtons = $section.find(".buttons").children().length;&#13;
        $section.css({&#13;
            width: (numOfButtons*presenter.configuration.sizes.elementWidth) + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.setButtonCurrentPage = function (button, page) {&#13;
        if (page.isActualPage()) {&#13;
            button.setAsCurrent();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.setButtonBookmark = function (button, page) {&#13;
        if (page.isBookmarkOn) {&#13;
            button.addBookmark();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.setButtonProperties = function (button, page) {&#13;
        if (presenter.isPreview) {&#13;
            return;&#13;
        }&#13;
        this.setButtonCurrentPage(button, page);&#13;
        this.setButtonBookmark(button, page);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.addSections = function (numberOfPages) {&#13;
        this.actualPages = presenter.sections.getPages(this.leftSideIndex, numberOfPages);&#13;
        var sectionIterator = -1;&#13;
&#13;
        var len = this.actualPages.length;&#13;
        for (var i = 0; i &lt; len; i++) {&#13;
            var button = this.getPageButton(this.actualPages[i]);&#13;
            this.setButtonProperties(button, this.actualPages[i]);&#13;
            this.buttons.push(button);&#13;
&#13;
            sectionIterator = this.addButtonToSection(button, sectionIterator, this.actualPages[i]);&#13;
        }&#13;
&#13;
        this.appendSectionsToView();&#13;
        this.deactivateNavigationButtons();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.appendSectionsToView = function () {&#13;
        this.actualSections.forEach(function ($section) {&#13;
            this.setSectionWidth($section);&#13;
            this.$sections.append($section);&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.getPageButton = function (page) {&#13;
        var button = new presenter.Button(page.description);&#13;
        button.setCommand(page.getChangeToPageCommand());&#13;
        button.setNavigateToPage(page.page);&#13;
&#13;
        return button;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.addButtonToSection = function (button, sectionIterator, page) {&#13;
        if (page.getSectionClassName() === this.actualSectionsNames[sectionIterator]) {&#13;
            this.appendButtonToSection(button, sectionIterator);&#13;
        } else {&#13;
            this.addNewSection(page);&#13;
            sectionIterator++;&#13;
            this.appendButtonToSection(button, sectionIterator);&#13;
        }&#13;
&#13;
        return sectionIterator&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.appendButtonToSection = function (button, sectionIterator) {&#13;
        this.actualSections[sectionIterator].find(".buttons").append(button.getView());&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.addNewSection = function (page) {&#13;
        var $section = this.getSection(page.getSectionName(), page.getSectionClassName());&#13;
        this.actualSectionsNames.push(page.getSectionClassName());&#13;
        this.actualSections.push($section);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.getSection = function (sectionName, cssClass) {&#13;
        var $section = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $section.addClass(cssClass);&#13;
        $section.addClass("section");&#13;
&#13;
        var $sectionName = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $sectionName.text(sectionName);&#13;
        $sectionName.addClass("section_name");&#13;
&#13;
        var $sectionButtons = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $sectionButtons.addClass("buttons");&#13;
&#13;
        $section.append($sectionName);&#13;
        $section.append($sectionButtons);&#13;
&#13;
        return $section;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.shouldAddLeftHellip = function () {&#13;
        return this.leftSideIndex !== 0;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.shouldAddRightHellip = function () {&#13;
        var buttonsWithoutNavigation = presenter.configuration.numberOfButtons - 2;&#13;
        if (presenter.configuration.userButtonsNumber) {&#13;
            if (presenter.configuration.userButtonsNumber == 1) {&#13;
                return this.leftSideIndex + buttonsWithoutNavigation - this.hellipsCount &lt; presenter.configuration.numberOfPages - 1;&#13;
            }&#13;
        }&#13;
        return this.leftSideIndex + buttonsWithoutNavigation - this.hellipsCount &lt; presenter.configuration.numberOfPages;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.isPreview = false;&#13;
        presenter.runLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.isPreview = true;&#13;
        presenter.currentPageIndex = 0;&#13;
        presenter.runLogic(view, model);&#13;
    };&#13;
&#13;
    function deleteCommands () {&#13;
        delete presenter.setState;&#13;
        delete presenter.getState;&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeNumberAndWidthOfButtons(model);&#13;
    };&#13;
&#13;
    presenter.upgradeNumberAndWidthOfButtons = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model.userButtonsWidth == undefined) {&#13;
            upgradedModel["userButtonsWidth"] = "";&#13;
        }&#13;
&#13;
        if(model.userButtonsNumber == undefined) {&#13;
            upgradedModel["userButtonsNumber"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.runLogic = function (view, model) {&#13;
    	presenter.$view = $(view);&#13;
        presenter.$wrapper = presenter.$view.find('.assessments-navigation-bar-wrapper');&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        var validatedModel = presenter.validateModel(upgradedModel);&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[validatedModel.errorCode], validatedModel.errorData);&#13;
            deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration = validatedModel;&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, presenter.$wrapper);&#13;
&#13;
        presenter.calculateObjectsSizes();&#13;
&#13;
        presenter.initializeAddon();&#13;
&#13;
        if (presenter.isPreview) {&#13;
            presenter.navigationManager.buttons[0].setAsCurrent();&#13;
        } else {&#13;
            presenter.navigationManager.moveToCurrentPage();&#13;
        }&#13;
    };&#13;
&#13;
    function removeMockupDOM () {&#13;
        presenter.$wrapper.find(".navigation-buttons-first").remove();&#13;
        presenter.$wrapper.find(".navigation-buttons-last").remove();&#13;
        presenter.$wrapper.find(".sections").remove();&#13;
    }&#13;
&#13;
    presenter.initializeAddon = function () {&#13;
        removeMockupDOM();&#13;
&#13;
        presenter.sections = new presenter.Sections(presenter.configuration.sections);&#13;
        presenter.navigationManager = new presenter.NavigationManager();&#13;
&#13;
        presenter.navigationManager.setSections();&#13;
    };&#13;
&#13;
    function calculateMaxNumberOfButtons () {&#13;
        var numberOfButtons;&#13;
        if (presenter.configuration.userButtonsNumber) {&#13;
            numberOfButtons = presenter.configuration.maxElementCount &gt; (presenter.configuration.userButtonsNumber + 2) ?&#13;
                (presenter.configuration.userButtonsNumber + 2) : presenter.configuration.maxElementCount;&#13;
&#13;
            if (numberOfButtons &gt; presenter.configuration.numberOfPages + 2) {&#13;
                numberOfButtons = (presenter.configuration.numberOfPages + 2);&#13;
            }&#13;
        } else {&#13;
            numberOfButtons = presenter.configuration.maxElementCount &gt; (presenter.configuration.numberOfPages + 2) ?&#13;
                (presenter.configuration.numberOfPages + 2) : presenter.configuration.maxElementCount;&#13;
        }&#13;
&#13;
        presenter.configuration.numberOfButtons = numberOfButtons;&#13;
        presenter.configuration.navigationLeftIndex = 0;&#13;
        presenter.configuration.navigationRightIndex = numberOfButtons - 1;&#13;
    }&#13;
&#13;
    function calculateButtonsSize(elementDistances) {&#13;
        var elementWidth;&#13;
        if (presenter.configuration.userButtonsWidth) {&#13;
            elementWidth = presenter.configuration.userButtonsWidth;&#13;
        } else {&#13;
            elementWidth = parseInt(presenter.$wrapper.width() / presenter.configuration.numberOfButtons - elementDistances.horizontal, 10);&#13;
        }&#13;
&#13;
        var horizontalGap = presenter.$wrapper.width() - (elementWidth + elementDistances.horizontal) * presenter.configuration.maxElementCount;&#13;
&#13;
        presenter.configuration.sizes = {&#13;
            elementWidth: elementWidth,&#13;
            horizontalGap: horizontalGap&#13;
        };&#13;
    }&#13;
&#13;
    presenter.calculateObjectsSizes =   function() {&#13;
        var $element = presenter.$wrapper.find(".previous");&#13;
&#13;
        var elementDimensions = DOMOperationsUtils.getOuterDimensions($element);&#13;
        var elementDistances = DOMOperationsUtils.calculateOuterDistances(elementDimensions);&#13;
&#13;
&#13;
        var elementBaseWidth;&#13;
&#13;
        if (presenter.configuration.userButtonsWidth) {&#13;
            elementBaseWidth = presenter.configuration.userButtonsWidth;&#13;
        } else {&#13;
            elementBaseWidth = parseInt($element.width(), 10) + elementDistances.horizontal;&#13;
        }&#13;
        presenter.configuration.maxElementCount = parseInt((presenter.$wrapper.width()) / elementBaseWidth, 10) - 4;&#13;
&#13;
        calculateMaxNumberOfButtons();&#13;
        calculateButtonsSize(elementDistances);&#13;
    };&#13;
&#13;
    presenter.calculateNumberOfPages = function (sections) {&#13;
        return sections.reduce(function (result, section) {&#13;
            return result + section.pages.length;&#13;
        }, 0);&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedSections = presenter.validateSections(model["Sections"]);&#13;
&#13;
        if (!validatedSections.isValid) {&#13;
            return validatedSections;&#13;
        }&#13;
&#13;
        var numberOfPages = presenter.calculateNumberOfPages(validatedSections.sections);&#13;
&#13;
        var validateButtonsNumber = presenter.parseButtonsNumber(model["userButtonsNumber"], numberOfPages);&#13;
        if (!validateButtonsNumber.isValid) {&#13;
            return validateButtonsNumber;&#13;
        }&#13;
&#13;
        var validateButtonsWidth = presenter.parseButtonsWidth(model["userButtonsWidth"]);&#13;
        if (!validateButtonsNumber.isValid) {&#13;
            return validateButtonsNumber;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            addonID: model["ID"],&#13;
            sections: validatedSections.sections,&#13;
            addClassAreAllAttempted: ModelValidationUtils.validateBoolean(model["addClassAreAllAttempted"]),&#13;
            userButtonsNumber: validateButtonsNumber.value,&#13;
            userButtonsWidth: validateButtonsWidth.value,&#13;
            numberOfPages: numberOfPages&#13;
        };&#13;
    };&#13;
&#13;
    presenter.parseButtonsNumber = function (value, numberOfPages) {&#13;
        var buttonsNumber = presenter.parseNumericProperty(value, "S_06", "S_07");&#13;
&#13;
        if (!buttonsNumber.isValid) {&#13;
            return buttonsNumber;&#13;
        }&#13;
&#13;
        if (buttonsNumber.value &amp;&amp; buttonsNumber.value &gt; numberOfPages) {&#13;
            return getErrorObject("S_08");&#13;
        }&#13;
&#13;
        return buttonsNumber;&#13;
    };&#13;
&#13;
    presenter.parseButtonsWidth = function (value) {&#13;
        return presenter.parseNumericProperty(value, "S_09", "S_10");&#13;
    };&#13;
&#13;
    presenter.parseNumericProperty = function (value, belowZeroError, nanError) {&#13;
        var trimmedValue = value.trim();&#13;
        if (ModelValidationUtils.isStringEmpty(trimmedValue)) {&#13;
            return {&#13;
                isValid: true,&#13;
                value: undefined&#13;
            };&#13;
        }&#13;
&#13;
        var parsedValue = Number(trimmedValue);&#13;
&#13;
        if (isNaN(parsedValue)) {&#13;
            return getErrorObject(nanError);&#13;
        }&#13;
&#13;
        if (parsedValue &lt;= 0) {&#13;
            return getErrorObject(belowZeroError);&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            value: parseInt(parsedValue, 10)&#13;
        };&#13;
    };&#13;
&#13;
    function isNotValid (element) {&#13;
        return element.isValid === false;&#13;
    }&#13;
&#13;
    function isSectionPagesIntersecting (pagesA, pagesB) {&#13;
        return pagesA.some(function (element) {&#13;
            return this.indexOf(element) != -1;&#13;
        }, pagesB);&#13;
    }&#13;
&#13;
&#13;
    function validateSectionsIntersecting (sections) {&#13;
        var firstSection;&#13;
        var secondSection;&#13;
        var result = sections.every(function (section, sectionIndex) {&#13;
            for (var i = 0; i &lt; this.length; i++) {&#13;
                if (sectionIndex == i) {&#13;
                    continue;&#13;
                }&#13;
&#13;
                if (isSectionPagesIntersecting(section.pages, this[i].pages)) {&#13;
                    firstSection = sectionIndex;&#13;
                    secondSection = i;&#13;
                    return false;&#13;
                }&#13;
            }&#13;
&#13;
            return true;&#13;
        }, sections);&#13;
&#13;
        return {&#13;
            isValid: result,&#13;
            firstSection: (firstSection + 1),&#13;
            secondSection: (secondSection + 1)&#13;
        };&#13;
    }&#13;
&#13;
    presenter.validateSections = function (sections) {&#13;
        sections = sections.trim();&#13;
        if (ModelValidationUtils.isStringEmpty(sections)) {&#13;
            return getErrorObject("S_00");&#13;
        }&#13;
&#13;
        var parsedSections = Helpers.splitLines(sections).map(getTrimmedStringElement).map(parseSection);&#13;
        var notValidSections = parsedSections.filter(isNotValid);&#13;
&#13;
        if (notValidSections.length &gt; 0) {&#13;
            return notValidSections[0];&#13;
        }&#13;
&#13;
        var validatedSections = validateSectionsIntersecting(parsedSections);&#13;
&#13;
        if (!validatedSections.isValid) {&#13;
            return getErrorObject("S_05", {&#13;
                section_1: validatedSections.firstSection,&#13;
                section_2: validatedSections.secondSection&#13;
            });&#13;
        }&#13;
&#13;
        parsedSections.map(function (element) {&#13;
            delete element.isValid;&#13;
            return element;&#13;
        });&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            sections: parsedSections&#13;
        };&#13;
    };&#13;
&#13;
    function getTrimmedStringElement(element) {&#13;
        return element.trim();&#13;
    }&#13;
&#13;
    function parseDescriptions(descriptions, expectedLength, sectionIndex) {&#13;
        if (ModelValidationUtils.isStringEmpty(descriptions)) {&#13;
            return getErrorObject("S_03", {section: sectionIndex});&#13;
        }&#13;
&#13;
        var parsedDescriptions = descriptions.split(",").map(getTrimmedStringElement);&#13;
&#13;
        if (parsedDescriptions.length &gt; expectedLength) {&#13;
            return getErrorObject("S_04", {section: sectionIndex});&#13;
        }&#13;
&#13;
        if (parsedDescriptions.length &lt; expectedLength) {&#13;
            return getErrorObject("S_03", {section: sectionIndex});&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            descriptions: parsedDescriptions&#13;
        };&#13;
    }&#13;
&#13;
    function changeToStringOneBigger (element) {&#13;
        return ((element + 1) + "");&#13;
    }&#13;
&#13;
    function parseSection(section, sectionIndex) {&#13;
        section = section.split(";").map(getTrimmedStringElement);&#13;
        var len = section.length;&#13;
        var sectionName = "";&#13;
        var descriptions = [];&#13;
&#13;
        var pages = presenter.parsePagesFromRange(section[0], (sectionIndex + 1));&#13;
&#13;
        if (!pages.isValid) {&#13;
            return pages;&#13;
        }&#13;
&#13;
        if (len &gt; 1) {&#13;
            sectionName = getTrimmedStringElement(section[1]);&#13;
        }&#13;
&#13;
        if (len &gt; 2) {&#13;
            descriptions = parseDescriptions(section[2], pages.pages.length, (sectionIndex + 1));&#13;
            if (!descriptions.isValid) {&#13;
                return descriptions;&#13;
            }&#13;
        } else {&#13;
            descriptions = {&#13;
                descriptions: pages.pages.map(changeToStringOneBigger)&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            pages: pages.pages,&#13;
            sectionName: sectionName,&#13;
            pagesDescriptions: descriptions.descriptions&#13;
        }&#13;
    }&#13;
&#13;
    function parseDashRange (section) {&#13;
        var result = [];&#13;
        var ranges = section.split("-");&#13;
&#13;
        var min = Math.min(ranges[0], ranges[1]);&#13;
        var max = Math.max(ranges[0], ranges[1]);&#13;
&#13;
        for (; max &gt;= min; min++) {&#13;
            result.push((min - 1));&#13;
        }&#13;
&#13;
        return result;&#13;
    }&#13;
&#13;
    function changeToIndexesZeroBased(element) {&#13;
        return (element - 1);&#13;
    }&#13;
&#13;
    function parseCommaSeparatedRange (section) {&#13;
        return section.split(",").map(getTrimmedStringElement).map(Number).map(changeToIndexesZeroBased);&#13;
    }&#13;
&#13;
    function getArrayOfPagesFromSection (section) {&#13;
        // 1-4 -&gt; true,&#13;
        // asdfa-123980fda -&gt; false,&#13;
        // 1, 2, 3, 4 -&gt; false&#13;
        var dashRangeTest = /^\d+-\d+$/;&#13;
&#13;
        if (dashRangeTest.test(section)) {&#13;
            return parseDashRange(section);&#13;
        } else {&#13;
            return parseCommaSeparatedRange(section);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isFloat = function (number) {&#13;
        return number % 1 !== 0;&#13;
    };&#13;
&#13;
    function isNegativeOrZero (number) {&#13;
        return number &lt; 0;&#13;
    }&#13;
&#13;
&#13;
    presenter.parsePagesFromRange = function (section, sectionIndex) {&#13;
        var pages = getArrayOfPagesFromSection(section);&#13;
&#13;
        for (var i = 0; i &lt; pages.length; i++) {&#13;
            if (isNaN(pages[i])) {&#13;
                return getErrorObject("S_02", {section: sectionIndex});&#13;
            }&#13;
&#13;
            if (presenter.isFloat(pages[i])) {&#13;
                return getErrorObject("S_01", {section: sectionIndex});&#13;
            }&#13;
&#13;
            if (isNegativeOrZero(pages[i])) {&#13;
                return getErrorObject("S_01", {section: sectionIndex});&#13;
            }&#13;
        }&#13;
&#13;
        var sortedPages = pages.sort(function (a,b) {&#13;
            return a - b;&#13;
        });&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            pages: sortedPages&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        var pages = presenter.sections.allPages.map(function (page) {&#13;
            return {&#13;
                page: page.page,&#13;
                description: page.description,&#13;
                sectionName: page.sectionName,&#13;
                sectionCssClass: page.sectionCssClass,&#13;
                isBookmarkOn: page.isBookmarkOn&#13;
            };&#13;
        });&#13;
&#13;
        var state = {&#13;
            pages: pages,&#13;
            attemptedPages: presenter.sections.attemptedPages&#13;
        };&#13;
&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    function getRestorePagesObjectArray (pages) {&#13;
        return pages.map(function (page) {&#13;
            var restoredPage = new presenter.Page(page.page, page.description, page.sectionName, page.sectionCssClass);&#13;
            restoredPage.setBookmarkOn(page.isBookmarkOn);&#13;
&#13;
            return restoredPage;&#13;
        });&#13;
    }&#13;
&#13;
    presenter.setState = function(state){&#13;
        if (state === null || state === "" || state === undefined) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
        var upgradedState = presenter.upgradeState(parsedState);&#13;
&#13;
        presenter.sections.allPages = getRestorePagesObjectArray(upgradedState.pages);&#13;
        presenter.navigationManager.restartLeftSideIndex();&#13;
        presenter.navigationManager.setSections();&#13;
        presenter.navigationManager.moveToCurrentPage();&#13;
&#13;
        presenter.sections.attemptedPages = upgradedState.attemptedPages;&#13;
        presenter.navigationManager.markButtonsWithAttempted(presenter.sections.attemptedPages);&#13;
    };&#13;
&#13;
    presenter.upgradeState = function (state) {&#13;
        return presenter.upgradeAttemptedPages(state);&#13;
    };&#13;
&#13;
    presenter.upgradeAttemptedPages = function (state) {&#13;
        var upgradedState = {};&#13;
        jQuery.extend(true, upgradedState, state); // Deep copy of model object&#13;
&#13;
        if(state.attemptedPages === undefined) {&#13;
            upgradedState["attemptedPages"] = [];&#13;
        }&#13;
&#13;
        return upgradedState;&#13;
    };&#13;
&#13;
    function currentPageAreAllAttempted() {&#13;
        if(presenter.presentation.getPage(presenter.currentPageIndex).isReportable()){&#13;
            &#13;
            var modules = getAllModulesImplementingIsAttempted(presenter.currentPageIndex);&#13;
&#13;
            if(areAllModulesAttempted(modules)){&#13;
                presenter.sections.addClassAllAttemptedToPage(presenter.currentPageIndex);&#13;
            }else{&#13;
                presenter.sections.removeClassAllAttemptedToPage(presenter.currentPageIndex);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function getAllModulesImplementingIsAttempted(page) {&#13;
        var ids = presenter.playerController.getPresentation().getPage(page).getModulesAsJS(),&#13;
            modules = [];&#13;
&#13;
        for(var i = 0; i &lt; ids.length; i++){&#13;
            var currentModule = presenter.playerController.getModule(ids[i]);&#13;
&#13;
            if (currentModule &amp;&amp; currentModule.isAttempted !== undefined) {&#13;
                modules.push(currentModule);&#13;
            }&#13;
        }&#13;
&#13;
        return modules;&#13;
    }&#13;
&#13;
    function areAllModulesAttempted(modules) {&#13;
        if(modules.length == 0){&#13;
            return false;&#13;
        }&#13;
&#13;
        var areAllAttempted = true;&#13;
&#13;
        $.each(modules, function() {&#13;
            if (!this.isAttempted()) {&#13;
                areAllAttempted = false;&#13;
                return false; // break;&#13;
            }&#13;
        });&#13;
&#13;
        return areAllAttempted;&#13;
    }&#13;
&#13;
    presenter.areAllModulesAttempted = function () {&#13;
        currentPageAreAllAttempted();&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.sections.removeClassAllAttemptedToPage(presenter.currentPageIndex);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
        if (eventName == 'PageLoaded' &amp;&amp; presenter.configuration.addClassAreAllAttempted) {&#13;
            presenter.areAllModulesAttempted();&#13;
        }&#13;
&#13;
        if (eventName == "ValueChanged" &amp;&amp; presenter.configuration.addClassAreAllAttempted &amp;&amp; !presenter.isShowAnswersActive) {&#13;
            presenter.areAllModulesAttempted();&#13;
        }&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Audio" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="mp3" nameLabel="Audio_property_mp3" type="audio"/>
		<property name="ogg" nameLabel="Audio_property_ogg" type="audio"/>
		<property name="defaultControls" nameLabel="Audio_property_default_controls" type="boolean"/>
        <property name="useBrowserControls" nameLabel="Audio_property_use_browser_controls" type="boolean"/>
		<property name="displayTime" nameLabel="Audio_property_display_time" type="boolean"/>
		<property name="enableLoop" nameLabel="Audio_property_enable_loop" type="boolean"/>
		<property isLocalized="true" name="Narration" nameLabel="Audio_property_narration" type="narration"/>
		<property name="onEnd" nameLabel="Audio_property_on_end" type="event"/>
	</model>
<css>.wrapper-addon-audio audio {&#13;
    bottom: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.wrapper-addon-audio {&#13;
    height: 40px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.audioplayer {&#13;
    background-color: #EBEFF0;&#13;
    border-radius: 20px;&#13;
    width: 340px;&#13;
    height: 40px;&#13;
    display: table;&#13;
    padding-right: 2px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.play-pause-btn {&#13;
    width: 38px;&#13;
    height: 40px;&#13;
    float:left;&#13;
    border: solid 1px #444;&#13;
    border-radius: 30px;&#13;
    background-position: center center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.audio-play-btn {&#13;
    background-image: url('resources/audio-play-btn.png');&#13;
}&#13;
&#13;
.audio-pause-btn {&#13;
    background-image: url('resources/audio-pause-btn.png');&#13;
}&#13;
&#13;
.audio-stop-btn {&#13;
    width: 40px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-stop-btn.png') no-repeat center center;&#13;
    float:left;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.audio-volume-btn {&#13;
    width: 40px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-volume-btn.png') no-repeat center center;&#13;
    float:left;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.audio-volume0 {&#13;
    background-image: url('resources/volume-0.png');&#13;
}&#13;
&#13;
.audio-volume1 {&#13;
    background-image: url('resources/volume-1.png');&#13;
}&#13;
&#13;
.audio-volume2 {&#13;
    background-image: url('resources/volume-2.png');&#13;
}&#13;
&#13;
.audio-volume3 {&#13;
    background-image: url('resources/volume-3.png');&#13;
}&#13;
&#13;
.player-time {&#13;
    vertical-align: middle;&#13;
    display: table-cell;&#13;
    height: 40px;&#13;
    line-height: 16px;&#13;
    padding-right: 10px;&#13;
    font-size: 14px;&#13;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;&#13;
    color: grey;&#13;
}&#13;
&#13;
.audio-progress-bar {&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
    width: 100px;&#13;
    float:left;&#13;
    padding-left: 0px;&#13;
    margin-top: 15px;&#13;
    margin-left: 5px;&#13;
    height: 10px;&#13;
    background-color: #FFF;&#13;
    border-radius: 5px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.audio-slider-btn {&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    background: url('resources/audio-slider-btn.png') no-repeat;&#13;
    float:left;&#13;
    margin-left: -10px;&#13;
    margin-top: -5px;&#13;
    position: absolute;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.audio-bar {&#13;
    background-color: #BDC2C7;&#13;
    float: left;&#13;
    height: 10px;&#13;
    margin-left: 0px;&#13;
    border-bottom-left-radius: 5px;&#13;
    border-top-left-radius: 5px;&#13;
}&#13;
&#13;
.audio-volume-layer {&#13;
    width: 100px;&#13;
    height: 40px;&#13;
    position: absolute;&#13;
    right: 15px;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.volume-control-background {&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 50%;&#13;
    border-bottom: solid 1px #808080;&#13;
}&#13;
&#13;
.audio-volume-control {&#13;
    position: absolute;&#13;
    width: 20px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-slider-btn.png') no-repeat center;&#13;
    margin-left: -10px;&#13;
}&#13;
</css><view>&lt;div class="wrapper-addon-audio"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="wrapper-addon-audio"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAudio_create(){&#13;
    var presenter = function(){};&#13;
    var AUDIO_FILES_MISSING = "This addon needs at least 1 audio file.";&#13;
    var mp3File;&#13;
    var oggFile;&#13;
    var eventBus;&#13;
    var currentTimeAlreadySent;&#13;
&#13;
    presenter.audio = {&#13;
        readyState : 0&#13;
    };&#13;
    presenter.playerController = null;&#13;
    presenter.addonID = null;&#13;
&#13;
    presenter.mouseData = {};&#13;
&#13;
    presenter.onEventReceived = function AddonAudio_onEventReceived (eventName, eventData) {&#13;
        if(eventData.value == 'dropdownClicked') {&#13;
            presenter.audio.load();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function AddonAudio_setPlayerController (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function AddonAudio_upgradeModel (model) {&#13;
        return presenter.upgradeEnableLoop(model);&#13;
    };&#13;
&#13;
    presenter.upgradeEnableLoop = function AddonAudio_upgradeEnableLoop (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["enableLoop"]) {&#13;
            upgradedModel["enableLoop"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.createTimeUpdateEventData = function AddonAudio_createTimeUpdateEventData (data) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : '',&#13;
            value : '' + data.currentTime,&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createOnEndEventData = function AddonAudio_createOnEndEventData () {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : 'end',&#13;
            value : '',&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getAudioCurrentTime = function AddonAudio_getAudioCurrentTime () {&#13;
        return this.audio.currentTime;&#13;
    };&#13;
&#13;
    function addonAudio_formatTime (seconds) {&#13;
        var minutes = Math.floor(seconds / 60);&#13;
        minutes = (minutes &gt;= 10) ? minutes : "0" + minutes;&#13;
        seconds = Math.floor(seconds % 60);&#13;
        seconds = (seconds &gt;= 10) ? seconds : "0" + seconds;&#13;
        return minutes + ":" + seconds;&#13;
    }&#13;
&#13;
    function AddonAudio_onLoadedMetadataCallback () {&#13;
        var duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        if (presenter.configuration.displayTime) {&#13;
            AddonAudio_displayTimer(0, duration);&#13;
        }&#13;
        if (presenter.configuration.isHtmlPlayer){&#13;
            presenter.$playerTime.html('0:00 / ' + addonAudio_formatTime(duration))&#13;
        }&#13;
    }&#13;
&#13;
    presenter.sendEventAndSetCurrentTimeAlreadySent = function AddonAudio_sendEventAndSetCurrentTimeAlreadySent (eventData, currentTime) {&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
        currentTimeAlreadySent = currentTime;&#13;
    };&#13;
&#13;
    presenter.sendOnEndEvent = function AddonAudio_sendOnEndEvent () {&#13;
        var eventData = presenter.createOnEndEventData();&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.onTimeUpdateSendEventCallback = function AddonAudio_onTimeUpdateSendEventCallback () {&#13;
        var currentTime = addonAudio_formatTime(presenter.getAudioCurrentTime());&#13;
        if (currentTime !== currentTimeAlreadySent) { // to prevent duplicated value&#13;
            var eventData = presenter.createTimeUpdateEventData({'currentTime' : currentTime});&#13;
            presenter.sendEventAndSetCurrentTimeAlreadySent(eventData, currentTime);&#13;
        }&#13;
    };&#13;
&#13;
    function AddonAudio_onTimeUpdateCallback() {&#13;
        var bar_width, duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        var currentTime = presenter.audio.currentTime;&#13;
        if (presenter.configuration.displayTime) {&#13;
            AddonAudio_displayTimer(currentTime, duration);&#13;
        }&#13;
        if (presenter.configuration.isHtmlPlayer){&#13;
            presenter.$playerTime.html(addonAudio_formatTime(currentTime) + ' / ' + addonAudio_formatTime(duration));&#13;
            bar_width = presenter.$progressWrapper.width() * currentTime / duration;&#13;
            presenter.$progressBar.width(Math.round(bar_width));&#13;
            presenter.$progressSlider.css('left', Math.round(bar_width));&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_change_volume_class(volume_class) {&#13;
        if (presenter.$volumeBtn.hasClass(volume_class)) {&#13;
            return;&#13;
        }&#13;
        for (var i=0; i&lt;=3; i++) {&#13;
            if (presenter.$volumeBtn.hasClass('audio-volume'+i)) {&#13;
                presenter.$volumeBtn.removeClass('audio-volume'+i);&#13;
            }&#13;
        }&#13;
        presenter.$volumeBtn.addClass(volume_class);&#13;
    }&#13;
&#13;
    function AddonAudio_onVolumeChanged() {&#13;
        if (presenter.configuration.isHtmlPlayer){&#13;
            var volume = presenter.audio.volume,&#13;
                volume_class = '';&#13;
            presenter.$volumeControl.css('left', volume * presenter.$volumeLayer.width());&#13;
            if (volume &lt; 0.1) {&#13;
                volume_class = 'audio-volume0';&#13;
                if (volume &gt; 0) {&#13;
                    presenter.audio.volume = 0;&#13;
                }&#13;
            } else if (volume &lt; 0.4) {&#13;
                volume_class = 'audio-volume1';&#13;
            } else if (volume &lt; 0.7) {&#13;
                volume_class = 'audio-volume2';&#13;
            } else {&#13;
                volume_class = 'audio-volume3';&#13;
            }&#13;
            AddonAudio_change_volume_class(volume_class);&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_playPauseCallback () {&#13;
        if (presenter.$playPauseBtn.hasClass('audio-pause-btn')) {&#13;
            presenter.pause();&#13;
        }&#13;
        else {&#13;
            presenter.play();&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_displayTimer(current, duration) {&#13;
        presenter.$view.find('#currentTime').html(addonAudio_formatTime(current) + ' / ');&#13;
        presenter.$view.find('#durationTime').html(addonAudio_formatTime(duration));&#13;
    }&#13;
&#13;
    function AddonAudio_progressMouseDownCallback(event) {&#13;
        if ($(event.target).hasClass('audio-slider-btn')) {&#13;
            presenter.mouseData.oldPosition = event.pageX;&#13;
            presenter.mouseData.isMouseDragged = true;&#13;
            presenter.mouseData.playedBeforeDragging = !presenter.audio.paused;&#13;
            if (!presenter.audio.paused) {&#13;
                presenter.pause();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_progressMouseUpCallback() {&#13;
        if (presenter.mouseData.isMouseDragged) {&#13;
            var duration = presenter.audio.duration;&#13;
            duration = isNaN(duration) ? 0 : duration;&#13;
            presenter.audio.currentTime = duration * presenter.$progressBar.width() / presenter.$progressWrapper.width();&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
            presenter.mouseData.oldPosition = 0;&#13;
            if (presenter.mouseData.playedBeforeDragging) {&#13;
                presenter.play();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_progressMouseMoveCallback(event) {&#13;
        if (presenter.mouseData.isMouseDragged){&#13;
            var relativeDistance = event.pageX - presenter.mouseData.oldPosition,&#13;
                bar_width = 0,&#13;
                oldWidth = presenter.$progressBar.width();&#13;
            if (oldWidth + relativeDistance &lt; presenter.$progressWrapper.width()) {&#13;
                bar_width = oldWidth + relativeDistance;&#13;
            }&#13;
            else {&#13;
                bar_width = presenter.$progressWrapper.width();&#13;
            }&#13;
            presenter.$progressBar.width(bar_width);&#13;
            presenter.$progressSlider.css('left',Math.round(bar_width));&#13;
            presenter.mouseData.oldPosition = event.pageX;&#13;
        }&#13;
    }&#13;
&#13;
    function addonAudio_isMoreThanOneFingerGesture(event) {&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touchPoints = event.touches;&#13;
        return touchPoints.length&gt; 1;&#13;
    }&#13;
&#13;
    function AddonAudio_progressTouchStartCallback(event) {&#13;
        var touch, touchPoints;&#13;
        if (addonAudio_isMoreThanOneFingerGesture(event)) return;&#13;
&#13;
        touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0];&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        AddonAudio_progressMouseDownCallback(touch);&#13;
    }&#13;
&#13;
&#13;
    function AddonAudio_progressTouchEndCallback() {&#13;
        AddonAudio_progressMouseUpCallback();&#13;
    }&#13;
&#13;
&#13;
    function AddonAudio_progressTouchMoveCallback(event) {&#13;
        if (addonAudio_isMoreThanOneFingerGesture(event)) return;&#13;
&#13;
        var touch;&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0];&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        AddonAudio_progressMouseMoveCallback(touch);&#13;
    }&#13;
&#13;
    function AddonAudio_attachProgressListeners() {&#13;
        presenter.isMobileDevice = MobileUtils.isMobileUserAgent(navigator.userAgent) || MobileUtils.isEventSupported('touchend');&#13;
        if (MobileUtils.isWindowsMobile(window.navigator)) {&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerDown", AddonAudio_progressTouchStartCallback, false);&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerUp", AddonAudio_progressTouchEndCallback, false);&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerMove", AddonAudio_progressTouchMoveCallback, false);&#13;
        }&#13;
        else if (presenter.isMobileDevice) {&#13;
            presenter.$progressWrapper[0].ontouchstart=AddonAudio_progressTouchStartCallback;&#13;
            presenter.$customPlayer[0].ontouchend=AddonAudio_progressTouchEndCallback;&#13;
            presenter.$progressWrapper[0].ontouchmove=AddonAudio_progressTouchMoveCallback;&#13;
        }&#13;
        else {&#13;
            presenter.$progressWrapper.on('mousedown', AddonAudio_progressMouseDownCallback);&#13;
            presenter.$progressWrapper.on('mouseup', AddonAudio_progressMouseUpCallback);&#13;
            presenter.$progressWrapper.on('mousemove', AddonAudio_progressMouseMoveCallback);&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_toogleVolumeLayer(){&#13;
        AddonAudio_onVolumeChanged();&#13;
        presenter.$volumeLayer.toggle();&#13;
        presenter.$playerTime.toggle();&#13;
    }&#13;
&#13;
    function AddonAudio_createHtmlPlayer() {&#13;
        presenter.$customPlayer = $('&lt;div&gt;').&#13;
            addClass('audioplayer');&#13;
&#13;
        presenter.$playPauseBtn = $('&lt;div&gt;').&#13;
            addClass('play-pause-btn').&#13;
            addClass('audio-play-btn').&#13;
            on('click', AddonAudio_playPauseCallback);&#13;
&#13;
        presenter.$customPlayer.append(presenter.$playPauseBtn);&#13;
&#13;
        presenter.$stopBtn = $('&lt;div&gt;').&#13;
            addClass('audio-stop-btn').&#13;
            on('click', presenter.stop);&#13;
&#13;
        presenter.$customPlayer.append(presenter.$stopBtn);&#13;
&#13;
        presenter.$progressWrapper = $('&lt;div&gt;').&#13;
            addClass('audio-progress-bar');&#13;
&#13;
        presenter.$progressBar = $('&lt;div&gt;').&#13;
            addClass('audio-bar');&#13;
&#13;
        presenter.$progressSlider = $('&lt;div&gt;').&#13;
            addClass('audio-slider-btn');&#13;
&#13;
        AddonAudio_attachProgressListeners();&#13;
&#13;
        presenter.$progressWrapper.&#13;
            append(presenter.$progressBar).&#13;
            append(presenter.$progressSlider);&#13;
&#13;
        presenter.$customPlayer.append(presenter.$progressWrapper);&#13;
&#13;
        if (!MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
            presenter.$volumeBtn = $('&lt;div&gt;').&#13;
                addClass('audio-volume-btn').&#13;
                on('click', AddonAudio_toogleVolumeLayer);&#13;
&#13;
            presenter.$customPlayer.append(presenter.$volumeBtn);&#13;
&#13;
            presenter.$volumeControlBackground = $('&lt;div&gt;').addClass('volume-control-background');&#13;
            presenter.$volumeControl = $('&lt;div&gt;').addClass('audio-volume-control');&#13;
&#13;
            presenter.$volumeLayer = $('&lt;div&gt;').&#13;
                addClass('audio-volume-layer').&#13;
                append(presenter.$volumeControlBackground).&#13;
                append(presenter.$volumeControl).&#13;
                on('click', function (e) {&#13;
                presenter.audio.volume = e.offsetX / $(this).width();&#13;
            });&#13;
&#13;
            presenter.$volumeLayer.hide();&#13;
&#13;
            presenter.$customPlayer.append(presenter.$volumeLayer);&#13;
        }&#13;
&#13;
        presenter.$playerTime = $('&lt;div&gt;').&#13;
            addClass('player-time').&#13;
            text('00:00 / --:--');&#13;
        presenter.$customPlayer.append(presenter.$playerTime);&#13;
&#13;
        presenter.$customPlayer.on('click mousedown mouseup', function(event){&#13;
            event.stopPropagation();&#13;
            event.preventDefault();&#13;
        });&#13;
        presenter.$audioWrapper.append(presenter.$customPlayer);&#13;
    }&#13;
&#13;
    function AddonAudio_createView(view, model, isPreview){&#13;
        presenter.$audioWrapper = presenter.$view.find(".wrapper-addon-audio");&#13;
&#13;
        mp3File = model.mp3;&#13;
        oggFile = model.ogg;&#13;
&#13;
        if (!oggFile &amp;&amp; !mp3File) {&#13;
            $(view).html(AUDIO_FILES_MISSING);&#13;
        }&#13;
&#13;
        var audio = document.createElement("audio");&#13;
&#13;
        if (presenter.configuration.defaultControls){&#13;
            $(audio).attr("preload", "auto");&#13;
            if (presenter.configuration.isHtmlPlayer){&#13;
                AddonAudio_createHtmlPlayer();&#13;
            }&#13;
            else {&#13;
                $(audio).attr("controls", "controls");&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        var currentTime = document.createElement("span");&#13;
        var durationTime = document.createElement("span");&#13;
        $(currentTime).attr("id", "currentTime");&#13;
        $(durationTime).attr("id", "durationTime");&#13;
&#13;
        presenter.$audioWrapper.append(audio);&#13;
        if (presenter.configuration.displayTime) {&#13;
            presenter.$audioWrapper.append(currentTime).append(durationTime);&#13;
        }&#13;
        if (!isPreview) {&#13;
            audio.addEventListener('timeupdate', presenter.onTimeUpdateSendEventCallback, false);&#13;
        }&#13;
&#13;
        presenter.audio = audio;&#13;
    }&#13;
&#13;
    presenter.sendOnPLayingEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': '',&#13;
            'value': 'playing',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    function AddonAudio_onAudioPlaying () {&#13;
        presenter.sendOnPLayingEvent();&#13;
    }&#13;
&#13;
    function AddonAudio_attachEventListeners(audio) {&#13;
        audio.addEventListener('loadeddata', AddonAudio_onLoadedMetadataCallback, false);&#13;
        audio.addEventListener('timeupdate', AddonAudio_onTimeUpdateCallback, false);&#13;
        audio.addEventListener('volumechange', AddonAudio_onVolumeChanged, false);&#13;
        audio.addEventListener('ended', AddonAudio_onAudioEnded , false);&#13;
        audio.addEventListener('click', AddonAudio_onAudioClick, false);&#13;
        audio.addEventListener('playing', AddonAudio_onAudioPlaying, false);&#13;
    }&#13;
&#13;
    function AddonAudio_onAudioEnded () {&#13;
        if (presenter.configuration.enableLoop) {&#13;
            this.currentTime = 0;&#13;
            this.play();&#13;
        } else {&#13;
            presenter.executeOnEndEvent();&#13;
            presenter.sendOnEndEvent();&#13;
            presenter.stop();&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_onAudioClick (e) {&#13;
        e.stopPropagation();&#13;
    }&#13;
&#13;
    function AddonAudio_loadFiles(){&#13;
        var canPlayMp3 = false;&#13;
        var canPlayOgg = false;&#13;
        var audio = presenter.audio;&#13;
&#13;
        if(audio.canPlayType) {&#13;
            canPlayMp3 = audio.canPlayType &amp;&amp; "" != audio.canPlayType('audio/mpeg');&#13;
            canPlayOgg = audio.canPlayType &amp;&amp; "" != audio.canPlayType('audio/ogg; codecs="vorbis"');&#13;
&#13;
            if(canPlayMp3){&#13;
                $(audio).attr("src", mp3File);&#13;
            } else if (canPlayOgg) {&#13;
                $(audio).attr("src", oggFile);&#13;
            }&#13;
&#13;
        } else {&#13;
            $(audio).append("Your browser doesn't support audio.");&#13;
        }&#13;
&#13;
        $(audio).load();&#13;
&#13;
        AddonAudio_attachEventListeners(audio);&#13;
    }&#13;
&#13;
    presenter.run = function AddonAudio_run (view, model){&#13;
        presenter.initialize(view, model, false);&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        presenter.addonID = model.ID;&#13;
        eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonAudio_createPreview (view, model){&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.initialize = function AddonAudio_initialize (view, model, isPreview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
&#13;
        AddonAudio_createView(view, upgradedModel, isPreview);&#13;
        &#13;
        if (!isPreview) {&#13;
        	AddonAudio_loadFiles();&#13;
            presenter.$view.bind('click', function (event) {&#13;
                event.stopPropagation();&#13;
            });&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonAudio_destroy (event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.audio.pause();&#13;
&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.playerController = null;&#13;
&#13;
        presenter.audio.removeEventListener('timeupdate', presenter.onTimeUpdateSendEventCallback, false);&#13;
        presenter.audio.removeEventListener('loadeddata', AddonAudio_onLoadedMetadataCallback, false);&#13;
        presenter.audio.removeEventListener('timeupdate', AddonAudio_onTimeUpdateCallback, false);&#13;
        presenter.audio.removeEventListener('volumechange', AddonAudio_onVolumeChanged, false);&#13;
        presenter.audio.removeEventListener('ended', AddonAudio_onAudioEnded , false);&#13;
        presenter.audio.removeEventListener('click', AddonAudio_onAudioClick, false);&#13;
        presenter.audio.removeEventListener('playing', AddonAudio_onAudioPlaying, false);&#13;
        presenter.audio.setAttribute('src', '');&#13;
        presenter.audio.load();&#13;
        presenter.audio = null;&#13;
&#13;
        if (presenter.$playPauseBtn) {&#13;
            presenter.$playPauseBtn.off();&#13;
            presenter.$playPauseBtn = null;&#13;
        }&#13;
        if (presenter.$stopBtn) {&#13;
            presenter.$stopBtn.off();&#13;
            presenter.$stopBtn = null;&#13;
        }&#13;
        if (presenter.$progressWrapper) {&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerDown", AddonAudio_progressTouchStartCallback, false);&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerUp", AddonAudio_progressTouchEndCallback, false);&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerMove", AddonAudio_progressTouchMoveCallback, false);&#13;
            presenter.$progressWrapper[0].ontouchstart=null;&#13;
            presenter.$progressWrapper[0].ontouchmove=null;&#13;
            presenter.$progressWrapper.off();&#13;
            presenter.$progressWrapper = null;&#13;
        }&#13;
        if (presenter.$customPlayer) {&#13;
            presenter.$customPlayer.off();&#13;
            presenter.$customPlayer[0].ontouchend=null;&#13;
            presenter.$customPlayer = null;&#13;
        }&#13;
        if (presenter.$volumeBtn) {&#13;
            presenter.$volumeBtn.off();&#13;
            presenter.$volumeBtn = null;&#13;
        }&#13;
        if (presenter.$volumeLayer) {&#13;
            presenter.$volumeLayer.off();&#13;
            presenter.$volumeLayer = null;&#13;
        }&#13;
&#13;
        presenter.$volumeControlBackground = null;&#13;
        presenter.$volumeControl = null;&#13;
        presenter.$audioWrapper = null;&#13;
        presenter.$playerTime = null;&#13;
        presenter.$progressBar = null;&#13;
        presenter.$progressSlider = null;&#13;
&#13;
        presenter.mouseData = null;&#13;
        presenter.configuration = null;&#13;
        presenter.$view.unbind();&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
    };&#13;
&#13;
    presenter.validateModel = function AddonAudio_validateModel (model) {&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            defaultControls = ModelValidationUtils.validateBoolean(model.defaultControls),&#13;
            useBrowserControls = ModelValidationUtils.validateBoolean(model.useBrowserControls);&#13;
&#13;
        return {&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            onEndEventCode: model.onEnd,&#13;
            enableLoop: ModelValidationUtils.validateBoolean(model.enableLoop),&#13;
            displayTime: ModelValidationUtils.validateBoolean(model.displayTime),&#13;
            defaultControls: defaultControls,&#13;
            useBrowserControls: useBrowserControls,&#13;
            isHtmlPlayer: defaultControls &amp;&amp; !useBrowserControls,&#13;
            addonID: model.ID&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function AddonAudio_executeCommand (name, params) {&#13;
        var commands = {&#13;
            'play': presenter.play,&#13;
            'stop': presenter.stop,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonAudio_setVisibility (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.play = function() {&#13;
        if (!presenter.audio) return;&#13;
        if(presenter.audio.src &amp;&amp; presenter.audio.paused) {&#13;
            presenter.audio.play();&#13;
            if (presenter.configuration.isHtmlPlayer) {&#13;
                presenter.$playPauseBtn.&#13;
                    removeClass('audio-play-btn').&#13;
                    addClass('audio-pause-btn');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.pause = function AddonAudio_pause () {&#13;
        if (!presenter.audio) return;&#13;
        if(presenter.audio.readyState &gt; 0) {&#13;
            if (!presenter.audio.paused) {&#13;
                presenter.audio.pause();&#13;
            }&#13;
            if (presenter.configuration.isHtmlPlayer) {&#13;
                presenter.$playPauseBtn.&#13;
                    removeClass('audio-pause-btn').&#13;
                    addClass('audio-play-btn');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stop = function AddonAudio_stop () {&#13;
        if (!presenter.audio) return;&#13;
        if(presenter.audio.readyState &gt; 0) {&#13;
            presenter.pause();&#13;
            presenter.audio.currentTime = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.show = function AddonAudio_show () {&#13;
        this.setVisibility(true);&#13;
        this.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hideAddon = function AddonAudio_hideAddon () {&#13;
        this.setVisibility(false);&#13;
        this.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.hide = function AddonAudio_hide () {&#13;
        this.stop();&#13;
        this.hideAddon();&#13;
    };&#13;
&#13;
    presenter.reset = function AddonAudio_reset () {&#13;
        if (!presenter.audio) return;&#13;
&#13;
        presenter.stop();&#13;
&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hideAddon();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function AddonAudio_getState () {&#13;
&#13;
        presenter.stop();&#13;
&#13;
        return JSON.stringify({&#13;
            isVisible : presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function addonAudio_setState (stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) {&#13;
            return false;&#13;
        }&#13;
&#13;
        presenter.stop();&#13;
&#13;
        if (JSON.parse(stateString).isVisible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hideAddon();&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.executeOnEndEvent = function AddonAudio_executeOnEndEvent () {&#13;
        if (presenter.configuration.onEndEventCode) {&#13;
            presenter.playerController.getCommands().executeEventCode(presenter.configuration.onEndEventCode);&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Basic_Math_Gaps" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Decimal Separator" name="decimalSeparator" nameLabel="Basic_Math_Gaps_property_decimal_separator" type="string"/>
        <property displayName="Gaps Definition" name="gapsDefinition" nameLabel="Basic_Math_Gaps_property_gaps_definition" type="text"/>
        <property displayName="Is Equation" name="isEquation" nameLabel="Basic_Math_Gaps_property_is_equation" type="boolean"/>
        <property displayName="Is Not Activity" name="isNotActivity" nameLabel="Basic_Math_Gaps_property_is_not_activity" type="boolean"/>
        <property displayName="Is Disabled" name="isDisabled" nameLabel="Basic_Math_Gaps_property_is_disabled" type="boolean"/>
        <property displayName="Gap width" name="gapWidth" nameLabel="Basic_Math_Gaps_property_gap_width" type="string"/>
        <property displayName="Gap Type" name="gapType" nameLabel="Basic_Math_Gaps_property_gap_type" type="{Editable, Draggable}"/>
        <property displayName="Gap Signs" name="Signs" nameLabel="Basic_Math_Gaps_property_gap_signs" type="list">
            <property displayName="Addition" name="Addition" nameLabel="Basic_Math_Gaps_property_gap_signs_addition" type="string"/>
            <property displayName="Subtraction" name="Subtraction" nameLabel="Basic_Math_Gaps_property_gap_signs_subtraction" type="string"/>
            <property displayName="Division" name="Division" nameLabel="Basic_Math_Gaps_property_gap_signs_division" type="string"/>
            <property displayName="Multiplication" name="Multiplication" nameLabel="Basic_Math_Gaps_property_gap_signs_multiplication" type="string"/>
        </property>
    </model>
<css>&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container {&#13;
    padding: 10px 0px;&#13;
    border: 1px solid transparent;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container input,&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .element {&#13;
    width: 30px;&#13;
    text-align: center;&#13;
    margin: 0 2px;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container &gt; input,&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container &gt; .element,&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container &gt; .fraction-container,&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container &gt; .draggable-gap {&#13;
    float: left;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container.hasFractions &gt; input,&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container.hasFractions &gt; .element {&#13;
    margin-top: 15px;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .element {&#13;
    display: inline-block;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .fraction-container {&#13;
    display: inline-block;&#13;
    text-align: center;&#13;
    padding: 0 5px;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .fraction-container .numerator {&#13;
    padding: 0 5px;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .fraction-container .denominator {&#13;
    border-top: 1px solid #000;&#13;
    display: block;&#13;
    padding: 2px 5px 0px 5px;&#13;
    margin-top: 2px;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .hidden-addition {&#13;
    width: 0px;&#13;
    height: 0px;&#13;
    visibility: hidden;&#13;
    display: inline-block;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .correct {&#13;
    border-color: #00bb00;&#13;
    background-color: #bbffbb;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .wrong {&#13;
    border-color: #ff1111;&#13;
    background-color: #ffbbbb;&#13;
}&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container.wrong {&#13;
    border: 1px solid #ff1111;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container.correct {&#13;
    border: 1px solid #00bb00;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .draggable-gap {&#13;
    height: 20px;&#13;
    text-align: center;&#13;
    cursor: pointer;&#13;
}&#13;
</css><view>&lt;div class="basic-math-gaps-wrapper"&gt;&#13;
    &lt;div class="basic-math-gaps-container clearfix"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="basic-math-gaps-wrapper"&gt;&#13;
    &lt;div class="basic-math-gaps-container clearfix"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonBasic_Math_Gaps_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.eventBus = null;&#13;
    presenter.playerController = null;&#13;
    presenter.gapsContainer = null;&#13;
    presenter.widgetsFactory = null;&#13;
    presenter.lastDraggedItem = null;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        this.playerController = controller;&#13;
        presenter.eventBus = this.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.getErrorObject = function (errorCode) {&#13;
        return {&#13;
            'isError' : true,&#13;
            'errorCode' : errorCode&#13;
        };&#13;
    };&#13;
&#13;
    presenter.errorCodes = {&#13;
        'E01' : 'Left side is not equal to Right side.',&#13;
        'E02' : 'A space can NOT be a decimal separator.',&#13;
        'E03' : 'Gaps Definition can NOT be blank',&#13;
        'E04' : 'Gap width must be positive integer',&#13;
        'E05' : 'Sign must be other than =, [, ]',&#13;
        'E06' : 'Equation needs \'=\' sign to be a equation'&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        runLogic(view, model, false);&#13;
&#13;
        presenter.setOnEventListeners();&#13;
    };&#13;
&#13;
    presenter.setOnEventListeners = function () {&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        presenter.eventBus.addEventListener('ItemSelected', this);&#13;
        presenter.eventBus.addEventListener('ItemConsumed', this);&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeGapType(model);&#13;
    };&#13;
&#13;
    presenter.upgradeGapType = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model.gapType == undefined) {&#13;
            upgradedModel["gapType"] = "Editable";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function deleteCommands() {&#13;
        delete presenter.getState;&#13;
        delete presenter.setState;&#13;
        delete presenter.getScore;&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.disable;&#13;
        delete presenter.enable;&#13;
    }&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
        presenter.$view = $(view);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(presenter.$view.find('.basic-math-gaps-container'), presenter.errorCodes, presenter.configuration.errorCode);&#13;
&#13;
            deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.gapsContainer = new presenter.GapsContainerObject();&#13;
        presenter.widgetsFactory = new presenter.ObjectFactory();&#13;
        presenter.valueChangeObserver = new presenter.ValueChangeObserver();&#13;
&#13;
        if (isPreview) {&#13;
            presenter.eventBus = function () {};&#13;
        }&#13;
&#13;
        presenter.createGaps();&#13;
&#13;
        if (!isPreview) presenter.addFocusOutEventListener();&#13;
&#13;
        presenter.$view.find('input').click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.setWrapperCss();&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    }&#13;
&#13;
    presenter.createGaps = function () {&#13;
        presenter.widgetsFactory.produce(&#13;
            presenter.ObjectFactory.PRODUCTION_TYPE.GAP_CONTAINER,&#13;
            presenter.configuration.gapsDefinition&#13;
        );&#13;
&#13;
        presenter.lastDraggedItem = {};&#13;
    };&#13;
&#13;
    presenter.setWrapperCss = function () {&#13;
        presenter.$view.find('.basic-math-gaps-wrapper :input').each(function(){&#13;
            if (presenter.configuration.gapWidth != '') {&#13;
                $(this).css("width", presenter.configuration.gapWidth);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.addFocusOutEventListener = function () {&#13;
        if(presenter.configuration.isDisabled) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter._addFocusOutEventListener();&#13;
    };&#13;
&#13;
    presenter._addFocusOutEventListener = function () {&#13;
        var inputs = presenter.$view.find('input');&#13;
&#13;
        inputs.focusout(function() {&#13;
            var item = presenter.$view.find('input').index( this),&#13;
                value = $(this).val().trim(),&#13;
                score = (($(this).val().trim() == presenter.configuration.gapsValues[item]) || (presenter.reconvertSign(presenter.configuration.Signs, $(this).val().trim()) == presenter.configuration.gapsValues[item]));&#13;
&#13;
            if (presenter.configuration.isEquation&#13;
                &amp;&amp; filterInputs(function(element) { return $(element).val().length &gt; 0; }).length != presenter.$view.find('input').length ) {&#13;
                return;&#13;
            }&#13;
&#13;
            presenter.sendEvent(item, value, score);&#13;
        });&#13;
    };&#13;
&#13;
&#13;
    function escapeRegexSpecialCharacters(value) {&#13;
        return (value + '').replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&amp;'); // escape regex special characters&#13;
    }&#13;
&#13;
    function convertDecimalSeparator(value, from, to) {&#13;
        if (from == '.') {&#13;
            return value;&#13;
        }&#13;
        var escaped = escapeRegexSpecialCharacters(from);&#13;
        return value.replace(new RegExp(escaped, 'g'), to);&#13;
    }&#13;
&#13;
    function getValueOfSingleElement(element, isGap, shouldParse) {&#13;
        var getGapValuePattern = /\[(.+)\]/,&#13;
            isDigitPattern = /\d+/;&#13;
&#13;
        element = isGap ? getGapValuePattern.exec(element)[1] : element.replace(/[\[\]']+/g, '');&#13;
&#13;
        if (isDigitPattern.test(element) &amp;&amp; shouldParse) {&#13;
            return parseInt(element, 10);&#13;
        } else {&#13;
            return element;&#13;
        }&#13;
    }&#13;
&#13;
    // this is for situation when user pass for example: 1 1/2,&#13;
    // which from math point of view is an addition but the addition sign should NOT be displayed&#13;
    function checkIsHiddenAddition(list, index) {&#13;
        var isDigitPattern = /\d+/;&#13;
        if ( index &gt;= list.length ) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if ( isDigitPattern.test(list[index]) &amp;&amp; isDigitPattern.test(list[index + 1]) ) {&#13;
            return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    presenter.convertSign = function (signs, value) {&#13;
        if (typeof (signs) == "undefined") {&#13;
            signs = {Addition: "", Subtraction: "", Division: "", Multiplication: ""};&#13;
        }&#13;
&#13;
        if (value === "*" &amp;&amp; signs['Multiplication'] !== "") {&#13;
            return signs['Multiplication'];&#13;
        }&#13;
        else if (value === "/" &amp;&amp; signs['Division'] !== "") {&#13;
            return signs['Division'];&#13;
        }&#13;
        else if (value === "+" &amp;&amp; signs['Addition'] !== "") {&#13;
            return signs['Addition'];&#13;
        }&#13;
        else if (value === "-" &amp;&amp; signs['Subtraction'] !== "") {&#13;
            return signs['Subtraction'];&#13;
        }&#13;
        else {&#13;
            return value;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reconvertSign = function (signs, value) {&#13;
        if (typeof (signs) == "undefined") {&#13;
            return value;&#13;
        }&#13;
&#13;
        switch(value) {&#13;
            case signs['Multiplication']:&#13;
                return "*";&#13;
            case signs['Division']:&#13;
                return "/";&#13;
            case signs['Addition']:&#13;
                return "+";&#13;
            case signs['Subtraction']:&#13;
                return "-";&#13;
            default:&#13;
                return value;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.removeEmptyStringsFromArray = function (stringArray) {&#13;
        var resultArray = [];&#13;
&#13;
        var arrayLen = stringArray.length;&#13;
        for(var i = 0; i &lt; arrayLen; i++) {&#13;
            if (!ModelValidationUtils.isStringEmpty(stringArray[i])) {&#13;
                resultArray.push(stringArray[i]);&#13;
            }&#13;
        }&#13;
&#13;
        return resultArray;&#13;
    };&#13;
&#13;
    presenter.validateGapsDefinition = function(model, isEquation, separator, signs) {&#13;
        if (model['gapsDefinition'].length === 0) {&#13;
            return presenter.getErrorObject('E03');&#13;
        }&#13;
&#13;
        var validatedGapsDefinition = [],&#13;
            isGapPattern = /^\[.+\]$/,&#13;
            splittedGapsBySpace = model['gapsDefinition'].split(' '),&#13;
            isFractionPattern = /\d+\]*\/\[*\d+/,&#13;
            leftSide = '',&#13;
            rightSide = '',&#13;
            isLeft = true,&#13;
            gapsValues = [];&#13;
&#13;
&#13;
        splittedGapsBySpace = presenter.removeEmptyStringsFromArray(splittedGapsBySpace);&#13;
&#13;
        $.each(splittedGapsBySpace, function(i) {&#13;
            var valueBeforeConvert = splittedGapsBySpace[i],&#13;
                value = presenter.convertSign(signs, valueBeforeConvert),&#13;
                isGap = isGapPattern.test(value),&#13;
                isFraction = isFractionPattern.test(value);&#13;
&#13;
            var gapType = isGap ? presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP :&#13;
                presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP;&#13;
&#13;
            var singleElement = {&#13;
                gapType: gapType,&#13;
                originalForm: value,&#13;
                beforeConvert: getValueOfSingleElement(valueBeforeConvert, isGap, false),&#13;
                isGap: isGap,&#13;
                isFraction: isFraction,&#13;
                parsed: getValueOfSingleElement(value, isGap, true),&#13;
                notParsed: getValueOfSingleElement(value, isGap, false),&#13;
                isHiddenAdditionAfter: checkIsHiddenAddition(splittedGapsBySpace, i)&#13;
            };&#13;
&#13;
            if (isFraction) {&#13;
                var numerator = value.split('/')[0],&#13;
                    denominator = value.split('/')[1],&#13;
                    isNumeratorGap = isGapPattern.test(numerator),&#13;
                    isDenominatorGap = isGapPattern.test(denominator);&#13;
&#13;
                if (!isGap) {&#13;
                    isNumeratorGap = isGapPattern.test(numerator);&#13;
                    isDenominatorGap = isGapPattern.test(denominator);&#13;
                } else {&#13;
                    isNumeratorGap = true;&#13;
                    isDenominatorGap = true;&#13;
                    numerator += ']';&#13;
                    denominator = '[' + denominator;&#13;
                }&#13;
&#13;
                singleElement.fraction = {&#13;
                    numerator: {&#13;
                        isGap: isNumeratorGap,&#13;
                        originalForm: numerator,&#13;
                        parsed: getValueOfSingleElement(numerator, isNumeratorGap, true),&#13;
                        notParsed: getValueOfSingleElement(numerator, isNumeratorGap, false)&#13;
                    },&#13;
                    denominator: {&#13;
                        isGap: isDenominatorGap,&#13;
                        originalForm: denominator,&#13;
                        parsed: getValueOfSingleElement(denominator, isDenominatorGap, true),&#13;
                        notParsed: getValueOfSingleElement(denominator, isDenominatorGap, false)&#13;
                    }&#13;
                };&#13;
&#13;
                singleElement.gapType = presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP;&#13;
&#13;
                if(isNumeratorGap) {&#13;
                    gapsValues.push(singleElement.fraction.numerator.notParsed);&#13;
                }&#13;
&#13;
                if(isDenominatorGap) {&#13;
                    gapsValues.push(singleElement.fraction.denominator.notParsed);&#13;
                }&#13;
&#13;
            } else if(singleElement.isGap) {&#13;
                gapsValues.push(singleElement.notParsed);&#13;
            }&#13;
&#13;
            validatedGapsDefinition.push(singleElement);&#13;
&#13;
            if (singleElement.notParsed == '=') {&#13;
                isLeft = false;&#13;
                return true; // continue in jQuery.each&#13;
            }&#13;
&#13;
            if (isLeft) {&#13;
                leftSide += singleElement.beforeConvert;&#13;
                if (singleElement.isHiddenAdditionAfter) {&#13;
                    leftSide += '+';&#13;
                }&#13;
            } else {&#13;
                rightSide += singleElement.beforeConvert;&#13;
                if (singleElement.isHiddenAdditionAfter) {&#13;
                    rightSide += '+';&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        if (isEquation) {&#13;
            leftSide = convertDecimalSeparator(leftSide, separator, '.');&#13;
            rightSide = convertDecimalSeparator(rightSide, separator, '.');&#13;
&#13;
            try {&#13;
                var leftSideEvaluated = eval(leftSide).toFixed(2),&#13;
                rightSideEvaluated = eval(rightSide).toFixed(2);&#13;
            } catch (_) {&#13;
                return presenter.getErrorObject('E06');&#13;
            }&#13;
&#13;
            if(leftSideEvaluated != rightSideEvaluated) {&#13;
                return presenter.getErrorObject('E01');&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'allElements' : validatedGapsDefinition,&#13;
            'gapsValues' : gapsValues,&#13;
            'leftSide' : isEquation &amp;&amp; splittedGapsBySpace.length &gt; 0 ? leftSideEvaluated : leftSide,&#13;
            'rightSide' : isEquation &amp;&amp; splittedGapsBySpace.length &gt; 0 ? rightSideEvaluated : rightSide&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateDecimalSeparator = function(separator) {&#13;
        var spacePattern = /(\s)/;&#13;
&#13;
        if (spacePattern.test(separator)) {&#13;
            return presenter.getErrorObject('E02');&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'value' : separator.length &gt; 0 ? separator : '.'&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateGapWidth = function(gapWidth) {&#13;
        if (typeof gapWidth == "undefined" || gapWidth == 0) {&#13;
            gapWidth = '34';&#13;
        }&#13;
&#13;
        if (gapWidth &lt; 0 || isNaN(gapWidth)) {&#13;
            return presenter.getErrorObject('E04');&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'value' : gapWidth&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateSigns = function(signs) {&#13;
        if (typeof signs == "undefined") {&#13;
            signs = [{Addition: "", Subtraction: "", Division: "", Multiplication: ""}];&#13;
        }&#13;
&#13;
        var regexp = new RegExp("[\=\\[\\]]");&#13;
&#13;
        for (var i = 0; i &lt; Object.keys(signs[0]).length; i++) {&#13;
            if (regexp.test(signs[0][Object.keys(signs[0])[i]])) {&#13;
                return presenter.getErrorObject('E05');&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'value' : signs[0]&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateGapType = function (model) {&#13;
        if(model.gapType === "Draggable") {&#13;
            return { value: true };&#13;
        }&#13;
&#13;
        return { value: false };&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
&#13;
        var validatedIsEquation = ModelValidationUtils.validateBoolean(model['isEquation']),&#13;
            validatedIsDisabled = ModelValidationUtils.validateBoolean(model['isDisabled']),&#13;
            validatedIsActivity = !(ModelValidationUtils.validateBoolean(model['isNotActivity'])),&#13;
            validatedIsVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
&#13;
        var validatedDecimalSeparator = presenter.validateDecimalSeparator(model['decimalSeparator']);&#13;
&#13;
        if (validatedDecimalSeparator.isError) {&#13;
            return validatedDecimalSeparator;&#13;
        }&#13;
&#13;
        var validatedGapWidth = presenter.validateGapWidth(model['gapWidth']);&#13;
&#13;
        if (validatedGapWidth.isError) {&#13;
            return validatedGapWidth;&#13;
        }&#13;
&#13;
        var validatedSigns = presenter.validateSigns(model['Signs']);&#13;
&#13;
        if (validatedSigns.isError) {&#13;
            return validatedSigns;&#13;
        }&#13;
&#13;
        var validatedGapsDefinition = presenter.validateGapsDefinition(model, validatedIsEquation, validatedDecimalSeparator.value, validatedSigns.value);&#13;
        if (validatedGapsDefinition.isError) {&#13;
            return validatedGapsDefinition;&#13;
        }&#13;
&#13;
        var validatedGapType = presenter.validateGapType(model);&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'gapsDefinition' : validatedGapsDefinition.allElements,&#13;
            'gapsValues' : validatedGapsDefinition.gapsValues,&#13;
            'isEquation' : validatedIsEquation,&#13;
            'addonID' : model.ID,&#13;
            'rightValue' : validatedGapsDefinition.rightSide,&#13;
            'leftValue' : validatedGapsDefinition.leftSide,&#13;
            'isActivity' : validatedIsActivity,&#13;
            'isNotActivity': !validatedIsActivity,&#13;
            'isDisabled' : validatedIsDisabled,&#13;
            'isDisabledByDefault': validatedIsDisabled,&#13;
            'isVisibleByDefault' : validatedIsVisible,&#13;
            'isVisible' : validatedIsVisible,&#13;
            'decimalSeparator' : validatedDecimalSeparator.value,&#13;
            'gapWidth' : validatedGapWidth.value,&#13;
            'isDraggable': validatedGapType.value,&#13;
            'Signs' : validatedSigns.value&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isErrorsMode = false;&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if(!presenter.isErrorsMode){&#13;
            presenter.gapsContainer.check(true);&#13;
            presenter.isErrorsMode = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.gapsContainer.check(false);&#13;
        presenter.isErrorsMode = false;&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        presenter.gapsContainer.reset();&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.configuration.isDisabled = presenter.configuration.isDisabledByDefault;&#13;
        presenter.isErrorsMode = false;&#13;
    };&#13;
&#13;
    presenter.areValuesInEquation = function (userValuesInGaps, correctGapsValues) {&#13;
        correctGapsValues = [].concat(correctGapsValues);&#13;
        var len = userValuesInGaps.length;&#13;
&#13;
        for (var i = 0; i &lt; len; i++) {&#13;
            if (correctGapsValues.indexOf(userValuesInGaps[i]) === -1) {&#13;
                return false;&#13;
            } else {&#13;
                var index = correctGapsValues.indexOf(userValuesInGaps[i]);&#13;
                correctGapsValues.splice(index, 1);&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.isEquationCorrect = function (validatedScore) {&#13;
        var isCorrect = presenter.isEquationCorrectWrapper(validatedScore);&#13;
        var valuesAreInEquation = presenter.areValuesInEquationWrapper();&#13;
&#13;
        return (isCorrect &amp;&amp; valuesAreInEquation);&#13;
    };&#13;
&#13;
    function getReconvertedUserExpression () {&#13;
        return presenter.reconvertExpression(getUserExpression().split(' '));&#13;
    }&#13;
&#13;
    function getConvertedUserGapsValues () {&#13;
        var gapsValues = presenter.reconvertExpression(presenter.gapsContainer.getValues());&#13;
&#13;
        return gapsValues.split(' ');&#13;
    }&#13;
&#13;
    presenter.areValuesInEquationWrapper = function () {&#13;
        return presenter.areValuesInEquation(getConvertedUserGapsValues(), presenter.configuration.gapsValues);&#13;
    };&#13;
&#13;
&#13;
    presenter.isEquationCorrectWrapper = function (validatedScore) {&#13;
        return validatedScore.isSameResultOnBothSides&#13;
            &amp;&amp; validatedScore.leftEvaluated == presenter.configuration.leftValue&#13;
            &amp;&amp; validatedScore.rightEvaluated == presenter.configuration.rightValue;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function(){&#13;
        if (presenter.configuration.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (presenter.cantCheck()) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return _getErrorCount();&#13;
    };&#13;
&#13;
    function _getErrorCount () {&#13;
        var validated = presenter.validateScore();&#13;
&#13;
        if (presenter.configuration.isEquation) {&#13;
            if(!presenter.gapsContainer.areAllGapsFilled()){&#13;
                return 0;&#13;
            }&#13;
&#13;
            return equationGetErrorCount(validated);&#13;
        } else {&#13;
            return presenter.gapsContainer.getNonEmptyGapsNumber() - validated.validGapsCount;&#13;
        }&#13;
    }&#13;
&#13;
    function equationGetErrorCount (validated) {&#13;
        if (presenter.isEquationCorrect(validated) ) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return 1;&#13;
    }&#13;
&#13;
    function filterInputs(testFunction) {&#13;
        return $.grep(presenter.$view.find('input'), function(element) { return testFunction(element) });&#13;
    }&#13;
&#13;
    presenter.getMaxScore = function(){&#13;
        if (presenter.configuration.isNotActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.configuration.isEquation) {&#13;
            return 1;&#13;
        }&#13;
&#13;
        return presenter.gapsContainer.getMaxScore();&#13;
    };&#13;
&#13;
    function getUserExpression() {&#13;
        function getValueFromChild($gap) {&#13;
            var gapID = $gap.attr("id");&#13;
            var gapValue = presenter.gapsContainer.getValueByID(gapID);&#13;
&#13;
            return value = gapValue;&#13;
        }&#13;
&#13;
        var result = '';&#13;
&#13;
        $.each(presenter.$view.find('.basic-math-gaps-container').children(), function() {&#13;
            var elements = [$(this)];&#13;
&#13;
            if (elements[0].hasClass('fraction-container')) {&#13;
                var container = elements[0];&#13;
                elements = [];&#13;
                elements.push(container.find('.numerator').children());&#13;
                elements.push($('&lt;span class="element"&gt;/&lt;/span&gt;'));&#13;
                elements.push(container.find('.denominator').children());&#13;
            }&#13;
&#13;
            $.each(elements, function() {&#13;
                var $element = $(this),&#13;
                    value = '';&#13;
&#13;
                if ($element.is('input')) {&#13;
                    var gapID = $element.attr("id");&#13;
                    var gapValue = presenter.gapsContainer.getValueByID(gapID);&#13;
                    value = gapValue + ' ';&#13;
                } else if ($element.hasClass("draggableContainer")) {&#13;
                    var child = $element.find(":first-child");&#13;
                    value = getValueFromChild(child) + ' ';&#13;
                } else {&#13;
                    value = $element.text() + ' ';&#13;
                }&#13;
                result += convertDecimalSeparator(value, presenter.configuration.decimalSeparator, '.');&#13;
            });&#13;
        });&#13;
&#13;
        return result.trim();&#13;
    }&#13;
&#13;
    presenter.reconvertExpression = function(splittedUserExpression) {&#13;
        var convertedSign,&#13;
            reconvertedExpression = '';&#13;
&#13;
        $.each(splittedUserExpression, function(i) {&#13;
            convertedSign = presenter.reconvertSign(presenter.configuration.Signs, splittedUserExpression[i]);&#13;
            reconvertedExpression += convertedSign + " ";&#13;
        });&#13;
&#13;
        return reconvertedExpression.trim();&#13;
    };&#13;
&#13;
    presenter.getValidGapsCount = function (valuesArray) {&#13;
        var isValid = true;&#13;
        var validGapsCount = 0;&#13;
&#13;
        valuesArray.forEach(function (value, index) {&#13;
            if (presenter.configuration.gapsValues[index] != presenter.reconvertSign(presenter.configuration.Signs, value)) {&#13;
                isValid = false;&#13;
            } else if (value.length &gt; 0) {&#13;
                validGapsCount++;&#13;
            }&#13;
        });&#13;
&#13;
        return {&#13;
            isValid: isValid,&#13;
            validGapsCount: validGapsCount&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getStringReconvertedUserExpression = function () {&#13;
        return getReconvertedUserExpression().split(' ').reduce(function (result, element) {&#13;
            return result + element;&#13;
        }, '');&#13;
    };&#13;
&#13;
    presenter.validateScore = function () {&#13;
        var validatedGapsCount = presenter.getValidGapsCount(presenter.gapsContainer.getValues());&#13;
&#13;
        var reconvertedExpression = presenter.getStringReconvertedUserExpression();&#13;
&#13;
        var splitted = reconvertedExpression.split('=');&#13;
&#13;
        if (presenter.configuration.isEquation &amp;&amp; splitted.length &gt; 1 &amp;&amp; filterInputs(function(element) { return $(element).val().length == 0; }).length == 0) {&#13;
            try {&#13;
                var userExpressionLeft = splitted[0];&#13;
                var userExpressionRight = splitted[1];&#13;
                var leftEvaluated = eval(userExpressionLeft).toFixed(2);&#13;
                var rightEvaluated = eval(userExpressionRight).toFixed(2);&#13;
                var isSameResultOnBothSides = leftEvaluated == rightEvaluated;&#13;
            } catch (_) {&#13;
                leftEvaluated = "";&#13;
                rightEvaluated = "";&#13;
                isSameResultOnBothSides = false;&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            'isValid' : validatedGapsCount.isValid,&#13;
            'isSameResultOnBothSides' : isSameResultOnBothSides,&#13;
            'leftEvaluated' : leftEvaluated,&#13;
            'rightEvaluated' : rightEvaluated,&#13;
            'validGapsCount' : validatedGapsCount.validGapsCount&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if (presenter.configuration.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (presenter.cantCheck()) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        var validated = presenter.validateScore();&#13;
&#13;
        if (presenter.configuration.isEquation) {&#13;
            if(!presenter.gapsContainer.areAllGapsFilled()){&#13;
                return 0;&#13;
            }&#13;
&#13;
            if (presenter.isEquationCorrect(validated) ) {&#13;
                return 1;&#13;
            }&#13;
&#13;
            return 0;&#13;
        } else {&#13;
            return validated.validGapsCount;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.cantCheck = function () {&#13;
        if (presenter.configuration.isNotActivity&#13;
        || presenter.configuration.isDisabled&#13;
        || presenter.gapsContainer.areAllGapsEmpty()) {&#13;
            return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        var state = {&#13;
            'values' : presenter.gapsContainer.getValues(),&#13;
            'sources': presenter.gapsContainer.getSources(),&#13;
            'isVisible' : presenter.configuration.isVisible,&#13;
            'isDisabled' : presenter.configuration.isDisabled,&#13;
            'droppedElements' : presenter.gapsContainer.getDroppedElements()&#13;
        };&#13;
&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.upgradeState = function (state) {&#13;
        if (state.sources == undefined) {&#13;
             return presenter.upgradeSources(state);&#13;
        }&#13;
&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.upgradeSources = function (state) {&#13;
        var upgradedState = {};&#13;
        jQuery.extend(true, upgradedState, state); // Deep copy of model object&#13;
&#13;
        upgradedState["sources"] = upgradedState.values.map(function () {&#13;
            return "";&#13;
        });&#13;
&#13;
        return upgradedState;&#13;
    };&#13;
&#13;
    presenter.setDisabledInSetState = function (isDisabled) {&#13;
        if (presenter.configuration.isDisabledByDefault &amp;&amp; !isDisabled) {&#13;
            presenter.gapsContainer.unlock();&#13;
        } else if (!presenter.configuration.isDisabledByDefault &amp;&amp; isDisabled) {&#13;
            presenter.gapsContainer.lock();&#13;
        } else if (presenter.configuration.isDisabledByDefault &amp;&amp; isDisabled) {&#13;
            presenter.gapsContainer.lock();&#13;
        }&#13;
&#13;
        presenter.configuration.isDisabled = isDisabled;&#13;
    };&#13;
&#13;
    presenter.upgradeDroppedElements = function (state) {&#13;
        var upgradedState = {};&#13;
        jQuery.extend(true, upgradedState, state); // Deep copy of model object&#13;
&#13;
        upgradedState["droppedElements"] = upgradedState.values.map(function () {&#13;
            return "";&#13;
        });&#13;
&#13;
        return upgradedState;&#13;
    };&#13;
&#13;
    presenter.upgradeStateDroppedElements = function (state) {&#13;
        if(state.droppedElements == undefined){&#13;
            return presenter.upgradeDroppedElements(state);&#13;
        }&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString){&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        var upgradedState = presenter.upgradeState(state);&#13;
        upgradedState = presenter.upgradeStateDroppedElements(upgradedState);&#13;
&#13;
        presenter.gapsContainer.setState(upgradedState.values, upgradedState.sources, upgradedState.droppedElements);&#13;
&#13;
        presenter.configuration.isVisible = upgradedState.isVisible;&#13;
        presenter.setDisabledInSetState(upgradedState.isDisabled);&#13;
&#13;
        presenter.setVisibility(upgradedState.isVisible);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.find('.basic-math-gaps-wrapper').css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        presenter.configuration.isDisabled = true;&#13;
&#13;
        presenter.gapsContainer.lock();&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if (presenter.configuration.isDisabled) {&#13;
            presenter.gapsContainer.unlock();&#13;
            presenter.configuration.isDisabled = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOK = function() {&#13;
        var score = presenter.getScore();&#13;
        return score == presenter.getMaxScore() &amp;&amp; score != 0;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'disable' : presenter.disable,&#13;
            'enable' : presenter.enable,&#13;
            'isAllOK' : presenter.isAllOK,&#13;
            'getView' : presenter.getView&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getView = function() {&#13;
        return this.$view;&#13;
    };&#13;
&#13;
    presenter.createEventData = function (item, value, score) {&#13;
        if (presenter.configuration.isEquation) {&#13;
            score = presenter.isAllOK() ? 1 : 0;&#13;
            value = '';&#13;
            item = 'all';&#13;
        } else {&#13;
            score = score ? 1 : 0;&#13;
            value.toString();&#13;
            item = (item + 1).toString();&#13;
        }&#13;
&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': item,&#13;
            'value': value,&#13;
            'score': score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(item, value, score) {&#13;
        var eventData = presenter.createEventData(item, value, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
        if (presenter.isAllOK() &amp;&amp; !presenter.configuration.isEquation) presenter.sendAllOKEvent();&#13;
    };&#13;
&#13;
    presenter.sendAllOKEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "ItemSelected") {&#13;
            presenter.lastDraggedItem = eventData;&#13;
        }&#13;
&#13;
        if (eventName == "ItemConsumed") {&#13;
            presenter.lastDraggedItem = {};&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.isErrorsMode = false;&#13;
            presenter.gapsContainer.showAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.gapsContainer.hideAnswers();&#13;
    };&#13;
&#13;
    presenter.parseItemValue = function (item) {&#13;
    	return item.replace(/\*\*(.*?)\*\*/g, "&lt;b&gt;$1&lt;/b&gt;").replace(/__(.*?)__/g, "&lt;i&gt;$1&lt;/i&gt;").replace(/__(.*?)_/g, "&lt;i&gt;$1_&lt;/i&gt;").replace(/\*\*(.*?)\*/g, "&lt;b&gt;$1*&lt;/b&gt;").replace(/_(.*?)__/g, "_$1").replace(/\*(.*?)\*\*/g, "*$1");&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject = function () {&#13;
        this._gaps = {};&#13;
        this._gapsOrderArray = [];&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getGapIndexByID = function (htmlID) {&#13;
        return this._gapsOrderArray.indexOf(htmlID);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getValues = function () {&#13;
        return this._gapsOrderArray.map(function (element) {&#13;
            return this._gaps[element].getValue();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getMaxScore = function () {&#13;
        return this._gapsOrderArray.length;&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getSources = function () {&#13;
        return this._gapsOrderArray.map(function (gapID){&#13;
            return this._gaps[gapID].getSource();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getDroppedElements = function () {&#13;
        return this._gapsOrderArray.map(function (gapID){&#13;
            return this._gaps[gapID].getDroppedElement();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.areAllGapsEmpty = function () {&#13;
        var reducedValue = this.getValues().reduce(function (previousElement, currentElement) {&#13;
            return previousElement + currentElement;&#13;
        });&#13;
&#13;
        return (reducedValue === "");&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.setState = function (valuesArray, sourcesArray, droppedElementsArray) {&#13;
        this._gapsOrderArray.forEach(function (gapID, index) {&#13;
            this._gaps[gapID].setState(valuesArray[index], sourcesArray[index], droppedElementsArray[index]);&#13;
            if (valuesArray[index] == "") {&#13;
                this._gaps[gapID].destroyDraggableProperty();&#13;
            }else{&#13;
                this.addGapFilled(gapID);&#13;
            }&#13;
&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.addGapFilled = function (gapID){&#13;
        this._gaps[gapID].removeCssClass("gapEmpty");&#13;
        this._gaps[gapID].addCssClass("gapFilled");&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.showAnswers = function () {&#13;
        this._gapsOrderArray.forEach(function (gapID) {&#13;
            this._gaps[gapID].showAnswers();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.hideAnswers = function () {&#13;
        this._gapsOrderArray.forEach(function (gapID) {&#13;
            this._gaps[gapID].hideAnswers();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.canSendEvent = function () {&#13;
        if (presenter.configuration.isEquation) {&#13;
            return this.getNonEmptyGapsNumber() == this._gapsOrderArray.length;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.check = function (isSetShow) {&#13;
        this._gapsOrderArray.forEach(function (gapID) {&#13;
            this._gaps[gapID].check(isSetShow);&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.lock = function () {&#13;
        this._gapsOrderArray.forEach(function (element) {&#13;
            this._gaps[element].lock();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.unlock = function () {&#13;
        this._gapsOrderArray.forEach(function (element) {&#13;
            this._gaps[element].unlock();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.reset = function () {&#13;
        this._gapsOrderArray.forEach(function (gapID) {&#13;
            this._gaps[gapID].reset();&#13;
            this._gaps[gapID].removeCssClass("gapFilled");&#13;
            this._gaps[gapID].removeCssClass("gapEmpty");&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getNonEmptyGapsNumber = function () {&#13;
        return this.getValues().filter(function (value) {&#13;
            return value.length &gt; 0;&#13;
        }).length;&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.areAllGapsFilled = function () {&#13;
        return (this.getNonEmptyGapsNumber() == this._gapsOrderArray.length);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.addGap = function (gap) {&#13;
        var gapID = gap.getObjectID();&#13;
&#13;
        this._gapsOrderArray.push(gapID);&#13;
&#13;
        this._gaps[gapID] = gap;&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getValueByID = function (gapID) {&#13;
        return this._gaps[gapID].getValue();&#13;
    };&#13;
&#13;
    presenter.getCSSConfiguration = function () {&#13;
        if (presenter.configuration.isEquation) {&#13;
            return {&#13;
                showAnswers: 'bmg_show-answers'&#13;
            };&#13;
        } else {&#13;
            return {&#13;
                correct: "correct",&#13;
                wrong: "wrong",&#13;
                showAnswers: 'bmg_show-answers'&#13;
            };&#13;
        }&#13;
    }&#13;
&#13;
    presenter.GapUtils = function (configuration) {&#13;
        DraggableDroppableObject.call(this, configuration, presenter.getCSSConfiguration());&#13;
&#13;
        this.valueChangeObserver = presenter.valueChangeObserver;&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype = Object.create(DraggableDroppableObject.prototype);&#13;
    presenter.GapUtils.constructor = presenter.GapUtils;&#13;
&#13;
    presenter.GapUtils.prototype.addClassToContainer = function () {&#13;
        presenter.$view.find('.basic-math-gaps-container').addClass("basic_math_gaps_check");&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.removeClassFromContainer = function () {&#13;
        presenter.$view.find('.basic-math-gaps-container').removeClass("basic_math_gaps_check");&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.removeClassInEquation = function () {&#13;
        presenter.$view.find('.basic-math-gaps-container').removeClass('correct wrong');&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.getClassName = function () {&#13;
        if (presenter.isEquationCorrect(presenter.validateScore())) {&#13;
            return "correct";&#13;
        } else {&#13;
            return "wrong";&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.addClassInEquation = function () {&#13;
        if (presenter.gapsContainer.areAllGapsFilled()) {&#13;
            presenter.$view.find('.basic-math-gaps-container').addClass(this.getClassName());&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.shouldNotAddCssClassInEquation = function (valueFunction) {&#13;
        return presenter.configuration.isNotActivity&#13;
        || presenter.configuration.isDisabled&#13;
        || presenter.gapsContainer.areAllGapsEmpty();&#13;
    };&#13;
    &#13;
    presenter.GapUtils.prototype.shouldNotAddCssClass = function () {&#13;
        return presenter.configuration.isNotActivity&#13;
        || presenter.configuration.isDisabled&#13;
        || this.isEmpty();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCss = function (containerCssFunction, equationFunction, notEquationFunction) {&#13;
        containerCssFunction();&#13;
&#13;
        if (presenter.configuration.isEquation) {&#13;
            if (this.shouldNotAddCssClassInEquation()) {&#13;
                return;&#13;
            }&#13;
            equationFunction.call(this);&#13;
        } else {&#13;
            if (this.shouldNotAddCssClass()) {&#13;
                return;&#13;
            }&#13;
            notEquationFunction.call(this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.isEmpty = function () {&#13;
        return this.getValue() == "";&#13;
    }&#13;
&#13;
    presenter.GapUtils.prototype.onBlock = function () {&#13;
        if (!presenter.configuration.isDisabled) {&#13;
            this.lock();&#13;
            if(this.isEmpty()){&#13;
                this.addCssClass("gapEmpty");&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onUnblock = function () {&#13;
        if (!presenter.configuration.isDisabled) {&#13;
            this.unlock();&#13;
            this.removeCssClass("gapEmpty");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onShowAnswers = function () {&#13;
        presenter.configuration.isShowAnswersActive = true;&#13;
&#13;
        if (presenter.configuration.isDisabled) {&#13;
            this.setViewValue(this.showAnswersValue);&#13;
        } else {&#13;
            DraggableDroppableObject.prototype.onShowAnswers.call(this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onHideAnswers = function () {&#13;
        presenter.configuration.isShowAnswersActive = false;&#13;
&#13;
        if (presenter.configuration.isDisabled) {&#13;
            this.setViewValue(this.value);&#13;
        } else {&#13;
            DraggableDroppableObject.prototype.onHideAnswers.call(this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onReset = function () {&#13;
        DraggableDroppableObject.prototype.onReset.call(this);&#13;
&#13;
        if (presenter.configuration.isDisabledByDefault &amp;&amp; !presenter.configuration.isDisabled) {&#13;
            this.lock();&#13;
        } else if (!presenter.configuration.isDisabledByDefault &amp;&amp; presenter.configuration.isDisabled) {&#13;
            this.unlock();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onCorrect = function () {&#13;
        this.onBlock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onUnCorrect = function () {&#13;
        this.onUnblock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onWrong = function () {&#13;
        this.onBlock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onUnWrong = function () {&#13;
        this.onUnblock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnCorrect = function () {&#13;
        this.setCss(this.addClassToContainer, this.addClassInEquation, DraggableDroppableObject.prototype.setCssOnCorrect);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnUnCorrect = function () {&#13;
        this.setCss(this.removeClassFromContainer, this.removeClassInEquation, DraggableDroppableObject.prototype.setCssOnUnCorrect);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnWrong = function () {&#13;
        this.setCss(this.addClassToContainer, this.addClassInEquation, DraggableDroppableObject.prototype.setCssOnWrong);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnUnWrong = function () {&#13;
        this.setCss(this.removeClassFromContainer, this.removeClassInEquation, DraggableDroppableObject.prototype.setCssOnUnWrong);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.isCorrect = function () {&#13;
        if (presenter.configuration.isEquation) {&#13;
            return presenter.isEquationCorrect(presenter.validateScore());&#13;
        } else {&#13;
            return DraggableDroppableObject.prototype.isCorrect.call(this);&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.EditableInputGap = function (htmlID, correctAnswer) {&#13;
        var configuration = {&#13;
            addonID: presenter.configuration.addonID,&#13;
            objectID: htmlID,&#13;
            eventBus: presenter.eventBus,&#13;
            getSelectedItem: presenter.getSelectedItem,&#13;
&#13;
            showAnswersValue: correctAnswer,&#13;
&#13;
            createView: presenter.EditableInputGap.prototype.createView,&#13;
            connectEvents: function () {},&#13;
            setViewValue: presenter.EditableInputGap.prototype.setViewValue&#13;
        };&#13;
&#13;
        presenter.GapUtils.call(this, configuration);&#13;
&#13;
        this.$view.on("input", this.onEdit.bind(this));&#13;
&#13;
        this.$view.off('change').bind('change', this.onEdit.bind(this));&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype = Object.create(presenter.GapUtils.prototype);&#13;
    presenter.EditableInputGap.constructor = presenter.EditableInputGap;&#13;
&#13;
    presenter.EditableInputGap.prototype.createView = function () {&#13;
        var $inputGap = $('&lt;input type="text" value="" id="' + this.objectID + '" /&gt;');&#13;
        $inputGap.css({&#13;
            width: presenter.configuration.gapWidth + "px"&#13;
        });&#13;
&#13;
        return $inputGap;&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.onEdit = function (event) {&#13;
        this.notifyEdit();&#13;
        this.value = this.getValue();&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.lock = function () {&#13;
        this.$view.attr('disabled','disabled');&#13;
        this.$view.addClass('disabled');&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.unlock = function () {&#13;
        this.$view.removeAttr('disabled');&#13;
        this.$view.removeClass('disabled');&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.getValue = function () {&#13;
        return this.$view.val().trim();&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.setViewValue = function (value) {&#13;
        return this.$view.val(value);&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.getSource = function () {&#13;
        return "";&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.onShowAnswers = function () {&#13;
        this.value = this.getValue();&#13;
        presenter.GapUtils.prototype.onShowAnswers.call(this);&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap = function (htmlID, correctAnswer) {&#13;
        var configuration = {&#13;
            addonID: presenter.configuration.addonID,&#13;
            objectID: htmlID,&#13;
            eventBus: presenter.eventBus,&#13;
            getSelectedItem: presenter.getSelectedItem,&#13;
&#13;
            showAnswersValue: correctAnswer,&#13;
&#13;
            fillGap: presenter.DraggableDroppableGap.prototype.fillGap,&#13;
            makeGapEmpty: presenter.DraggableDroppableGap.prototype.makeGapEmpty&#13;
        };&#13;
&#13;
&#13;
        presenter.GapUtils.call(this, configuration);&#13;
&#13;
        this.$view.css({&#13;
            width: presenter.configuration.gapWidth + "px",&#13;
            display: 'inline-block'&#13;
        });&#13;
&#13;
        this.addCssClass("draggable-gap");&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype = Object.create(presenter.GapUtils.prototype);&#13;
    presenter.DraggableDroppableGap.parent = presenter.GapUtils.prototype;&#13;
    presenter.DraggableDroppableGap.constructor = presenter.DraggableDroppableGap;&#13;
&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.fillGap = function (selectedItem) {&#13;
        DraggableDroppableObject.prototype.fillGap.call(this, selectedItem);&#13;
        this.notify();&#13;
        this.addCssClass("gapFilled");&#13;
        this.removeCssClass("gapEmpty")&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.makeGapEmpty = function () {&#13;
        DraggableDroppableObject.prototype.makeGapEmpty.call(this);&#13;
        this.notify();&#13;
        this.removeCssClass("gapFilled");&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.notify = function () {&#13;
        this.valueChangeObserver.notify(this.getValueChangeEventData());&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.getValueChangeEventData = function () {&#13;
        return {&#13;
            htmlID: this.getObjectID(),&#13;
            value: this.getValue(),&#13;
            isCorrect: this.getValue() == this.showAnswersValue&#13;
        };&#13;
    };&#13;
&#13;
    presenter.ElementGapObject = function (value) {&#13;
        this._value = value;&#13;
        this.$view = this._createView();&#13;
    };&#13;
&#13;
&#13;
    presenter.ElementGapObject.prototype._createView = function () {&#13;
        return $('&lt;span class="element"&gt;' + this._value + '&lt;/span&gt;');&#13;
    };&#13;
&#13;
    presenter.ElementGapObject.prototype.getView = function () {&#13;
        return $('&lt;span class="element"&gt;' + this._value + '&lt;/span&gt;');&#13;
    };&#13;
&#13;
    presenter.getSelectedItem = function () {&#13;
        var item = presenter.lastDraggedItem;&#13;
&#13;
        presenter.onEventReceived("ItemSelected", {});&#13;
&#13;
        return item;&#13;
    };&#13;
&#13;
&#13;
    presenter.FractionGapObject = function (id) {&#13;
        this._id = id;&#13;
        this._$mainContainer;&#13;
        this._$numeratorContainer;&#13;
        this._$denominatorContainer;&#13;
        this._numerator;&#13;
        this._denominator;&#13;
        this._numeratorValue;&#13;
        this._denominatorValue;&#13;
&#13;
        this._createContainers();&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.constructor = presenter.FractionGapObject;&#13;
&#13;
    presenter.FractionGapObject.prototype._createContainers = function () {&#13;
        this._$mainContainer = $('&lt;span class="fraction-container"&gt;&lt;/span&gt;');&#13;
        this._$numeratorContainer = $('&lt;span class="numerator"&gt;&lt;/span&gt;');&#13;
        this._$denominatorContainer = $('&lt;span class="denominator"&gt;&lt;/span&gt;');&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.createElementNumerator = function (value) {&#13;
        this._numerator = presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP, value);&#13;
&#13;
        this._numeratorValue = value;&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.createElementDenominator = function (value) {&#13;
        this._denominator = presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP, value);&#13;
&#13;
        this._denominatorValue = value;&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.setDisplayInlineBlock = function (gap) {&#13;
        gap.getView().css({&#13;
            display: "inline-block"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.createGapNumerator = function (type, data) {&#13;
         this._numerator = presenter.widgetsFactory.produce(type, this._getNominatorProductionData(data));&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.createGapDenominator = function (type, data) {&#13;
         this._denominator = presenter.widgetsFactory.produce(type, this._getDenominatorProductionData(data));&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype._getNominatorProductionData = function (data) {&#13;
        return {&#13;
            id: this._id + "-numerator",&#13;
            width: presenter.configuration.gapWidth,&#13;
            correctAnswer: data.correctAnswerNumerator&#13;
        };&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype._getDenominatorProductionData = function (data) {&#13;
        return {&#13;
            id: this._id + "-denominator",&#13;
            width: presenter.configuration.gapWidth,&#13;
            correctAnswer: data.correctAnswerDenominator&#13;
        };&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.getView = function () {&#13;
        return this._$mainContainer;&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.joinNumeratorDenominator = function () {&#13;
        this._$numeratorContainer.append(this._numerator.getView());&#13;
        this._$denominatorContainer.append(this._denominator.getView());&#13;
&#13;
        this._$mainContainer.append(this._$numeratorContainer).append(this._$denominatorContainer);&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.getNumerator = function () {&#13;
        return this._numerator;&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.getDenominator = function () {&#13;
        return this._denominator;&#13;
    };&#13;
&#13;
    presenter.ObjectFactory = function () {&#13;
        this.gapsFactory = new presenter.GapsFactoryObject();&#13;
        this.gapsContainerFactory = new presenter.GapsContainerFactoryObject();&#13;
    };&#13;
&#13;
    presenter.ObjectFactory.PRODUCTION_TYPE = {&#13;
        EDITABLE_INPUT_GAP: 0,&#13;
        FRACTION_GAP: 1,&#13;
        ELEMENT_GAP: 2,&#13;
        DRAGGABLE_MATH_GAP: 3,&#13;
        GAP_CONTAINER: 4&#13;
    };&#13;
&#13;
    presenter.ObjectFactory.prototype.produce = function (type, data) {&#13;
        var producedItem;&#13;
&#13;
        switch (type) {&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP:&#13;
                producedItem = this.gapsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP, data);&#13;
                break;&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP:&#13;
                producedItem = this.gapsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP, data);&#13;
                break;&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP:&#13;
                producedItem = this.gapsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP, data);&#13;
                break;&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP:&#13;
                producedItem = this.gapsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP, data);&#13;
                break;&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.GAP_CONTAINER:&#13;
                producedItem = this.gapsContainerFactory.produce(data);&#13;
                break;&#13;
        }&#13;
&#13;
        return producedItem;&#13;
    };&#13;
&#13;
    presenter.FractionBuilderObject = function () {};&#13;
&#13;
    presenter.FractionBuilderObject.prototype = Object.create(presenter.ObjectFactory.prototype);&#13;
    presenter.FractionBuilderObject.prototype.constructor = presenter.FractionBuilderObject;&#13;
&#13;
    presenter.FractionBuilderObject.prototype.produce = function (data) {&#13;
        var fraction = this._produceFractionObject(data);&#13;
&#13;
        this._setNumerator(fraction, data);&#13;
        this._setDenominator(fraction, data);&#13;
&#13;
&#13;
        fraction.setDisplayInlineBlock(fraction.getNumerator());&#13;
        fraction.setDisplayInlineBlock(fraction.getDenominator());&#13;
&#13;
        fraction.joinNumeratorDenominator();&#13;
&#13;
        return fraction;&#13;
    };&#13;
&#13;
    presenter.FractionBuilderObject.prototype._produceFractionObject = function (data) {&#13;
        return new presenter.FractionGapObject(data.fractionID);&#13;
    };&#13;
&#13;
    presenter.FractionBuilderObject.prototype._setNumerator = function (fraction, data) {&#13;
        if (data.fraction.numerator.isGap) {&#13;
            if (presenter.configuration.isDraggable) {&#13;
                fraction.createGapNumerator(presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP, data);&#13;
            } else {&#13;
                fraction.createGapNumerator(presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP, data);}&#13;
&#13;
        } else {&#13;
            fraction.createElementNumerator(data.fraction.numerator.parsed);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.FractionBuilderObject.prototype._setDenominator = function (fraction, data) {&#13;
        if (data.fraction.denominator.isGap) {&#13;
            if (presenter.configuration.isDraggable) {&#13;
                fraction.createGapDenominator(presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP, data);&#13;
            } else {&#13;
                fraction.createGapDenominator(presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP, data);&#13;
            }&#13;
        } else {&#13;
            fraction.createElementDenominator(data.fraction.denominator.parsed);&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.GapsFactoryObject = function () {&#13;
        this._fractionBuilder = new presenter.FractionBuilderObject();&#13;
    };&#13;
&#13;
    presenter.GapsFactoryObject.prototype = Object.create(presenter.ObjectFactory.prototype);&#13;
    presenter.GapsFactoryObject.prototype.constructor = presenter.GapsFactoryObject;&#13;
&#13;
    presenter.GapsFactoryObject.prototype.produce = function (type, data) {&#13;
        switch (type) {&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP:&#13;
                return this.produceEditableInputGap(data);&#13;
                break;&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP:&#13;
                return this.produceDraggableMathGap(data);&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP:&#13;
                return this.produceElementGap(data);&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP:&#13;
                return this.produceFractionGap(data);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapsFactoryObject.prototype.produceEditableInputGap = function (data) {&#13;
        return new presenter.EditableInputGap(data.id, data.correctAnswer);&#13;
    };&#13;
&#13;
    presenter.GapsFactoryObject.prototype.produceDraggableMathGap = function (data) {&#13;
        return new presenter.DraggableDroppableGap(data.id, data.correctAnswer);&#13;
    };&#13;
&#13;
    presenter.GapsFactoryObject.prototype.produceElementGap = function (value) {&#13;
        return new presenter.ElementGapObject(value);&#13;
    };&#13;
&#13;
    presenter.GapsFactoryObject.prototype.produceFractionGap = function (data) {&#13;
        return this._fractionBuilder.produce(data);&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject = function () {};&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype = Object.create(presenter.ObjectFactory.prototype);&#13;
    presenter.GapsContainerFactoryObject.prototype.constructor = presenter.GapsContainerFactoryObject;&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype.getFractionIndexIncrement = function (dataElement) {&#13;
        var increment = 0;&#13;
&#13;
        if (dataElement.fraction.denominator.isGap) {&#13;
            increment++;&#13;
        }&#13;
&#13;
        if (dataElement.fraction.numerator.isGap) {&#13;
            increment++;&#13;
        }&#13;
&#13;
        return increment;&#13;
    };&#13;
&#13;
    function wrapItemInContainer(item) {&#13;
        var $container = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $container.css({&#13;
            height: "50px",&#13;
            'text-align': 'center',&#13;
            float: 'left',&#13;
            display: 'inline-block'&#13;
        });&#13;
        $container.addClass("draggableContainer");&#13;
        $container.append(item.getView());&#13;
&#13;
        return $container&#13;
    }&#13;
&#13;
    function setFractionCssToMainContainer($mainContainer) {&#13;
        $mainContainer.addClass('hasFractions');&#13;
        $mainContainer.find(".draggableContainer").css({&#13;
            'margin-top': "15px"&#13;
        });&#13;
    }&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype.produce = function (data) {&#13;
        var container = presenter.$view.find('.basic-math-gaps-container');&#13;
        var hasFractions = false;&#13;
&#13;
&#13;
        var dataIndex;&#13;
        var elementIndex;&#13;
        var draggable = false;&#13;
        for(dataIndex = 0, elementIndex = 0; dataIndex &lt; data.length; dataIndex += 1) {&#13;
            var dataElement = data[dataIndex];&#13;
            var item;&#13;
&#13;
            switch (dataElement.gapType) {&#13;
                case presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP:&#13;
                    item = this._produceGap(this._getGapData(elementIndex));&#13;
                    elementIndex++;&#13;
                    presenter.gapsContainer.addGap(item);&#13;
                    draggable = true;&#13;
                    break;&#13;
                case presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP:&#13;
                    item = this._produceElementGap(dataElement);&#13;
                    break;&#13;
                case presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP:&#13;
                    item = this._produceFractionGap(dataElement, this._getElementId(elementIndex), elementIndex);&#13;
                    elementIndex += this.getFractionIndexIncrement(dataElement);&#13;
                    this._addFractionGap(item, dataElement);&#13;
                    hasFractions = true;&#13;
                    break;&#13;
            }&#13;
&#13;
&#13;
            if (draggable) {&#13;
                var $wrappedItem = wrapItemInContainer(item);&#13;
                container.append($wrappedItem);&#13;
                draggable = false;&#13;
            } else {&#13;
                container.append(item.getView());&#13;
            }&#13;
&#13;
            if (dataElement.isHiddenAdditionAfter) {&#13;
                container.append($('&lt;span class="hidden-addition"&gt;+&lt;/span&gt;'));&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.configuration.isDisabledByDefault) {&#13;
            presenter.gapsContainer.lock();&#13;
        }&#13;
&#13;
        if (hasFractions) {&#13;
            setFractionCssToMainContainer(container);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._addFractionGap = function (fractionGap, gapDefinition) {&#13;
&#13;
        if (gapDefinition.fraction.numerator.isGap) {&#13;
            presenter.gapsContainer.addGap(fractionGap.getNumerator());&#13;
        }&#13;
&#13;
        if (gapDefinition.fraction.denominator.isGap) {&#13;
            presenter.gapsContainer.addGap(fractionGap.getDenominator());&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._produceFractionGap = function (data, id, elementIndex) {&#13;
        data.fractionID = id;&#13;
&#13;
        if (data.fraction.numerator.isGap) {&#13;
            data["correctAnswerNumerator"] = presenter.convertSign(presenter.configuration.Signs, presenter.configuration.gapsValues[elementIndex]);&#13;
            elementIndex++;&#13;
        }&#13;
&#13;
        if (data.fraction.denominator.isGap) {&#13;
            data["correctAnswerDenominator"] = presenter.convertSign(presenter.configuration.Signs, presenter.configuration.gapsValues[elementIndex]);&#13;
        }&#13;
&#13;
        return presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP, data);&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._produceElementGap = function (data) {&#13;
        return presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP, data.originalForm);&#13;
    };&#13;
&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._produceGap = function (data) {&#13;
        var gap;&#13;
&#13;
        if (presenter.configuration.isDraggable) {&#13;
            gap = presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP, data);&#13;
        } else {&#13;
            gap = presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP, data);&#13;
        }&#13;
&#13;
        return gap;&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._getGapData = function (index) {&#13;
        return {&#13;
            id: this._getElementId(index),&#13;
            width: presenter.configuration.gapWidth,&#13;
            value: "",&#13;
            source: "",&#13;
            correctAnswer: presenter.convertSign(presenter.configuration.Signs, presenter.configuration.gapsValues[index])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._getElementId = function (index) {&#13;
        return (presenter.configuration.addonID + "-" + index);&#13;
    };&#13;
&#13;
    presenter.ValueChangeObserver = function () {};&#13;
&#13;
    presenter.ValueChangeObserver.prototype.notify = function (data) {&#13;
        var eventData = presenter.createEventData(presenter.gapsContainer.getGapIndexByID(data.htmlID), data.value, data.isCorrect);&#13;
&#13;
        if (!presenter.gapsContainer.canSendEvent()) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        if (presenter.isAllOK() &amp;&amp; !presenter.configuration.isEquation) presenter.sendAllOKEvent();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Board_Game" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Background" name="Background" nameLabel="Board_game_property_background" type="image"/>
        <property displayName="has Fields" name="hasFields" nameLabel="Board_game_property_has_fields" type="boolean"/>
        <property name="Fields" nameLabel="Board_game_property_fields" type="list">
            <property name="Top" nameLabel="Board_game_property_top" type="string"/>
            <property name="Left" nameLabel="Board_game_property_left" type="string"/>
            <property name="Width" nameLabel="Board_game_property_width" type="string"/>
            <property name="Height" nameLabel="Board_game_property_height" type="string"/>
        </property>
        <property displayName="Elements" name="Images" nameLabel="Board_game_property_images" type="list">
            <property displayName="Element Image" name="PawnImage" nameLabel="Board_game_property_pawn_image" type="image"/>
            <property name="Top" nameLabel="Board_game_property_top" type="string"/>
            <property name="Left" nameLabel="Board_game_property_left" type="string"/>
            <property name="Width" nameLabel="Board_game_property_width" type="string"/>
            <property name="Height" nameLabel="Board_game_property_height" type="string"/>
        </property>
        <property name="isDisable" nameLabel="Board_game_property_is_disable" type="boolean"/>
	</model>
<css>.board-game-container{&#13;
    background-color:white;&#13;
    -moz-background-size:100% 100%;&#13;
    -webkit-background-size:100% 100%;&#13;
    background-size:100% 100%;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
&#13;
.board-game-element{&#13;
    position:absolute;&#13;
    background-color:blue;&#13;
}&#13;
&#13;
.board-game-field{&#13;
    position:absolute;&#13;
    background-color:blue;&#13;
    opacity: 0.3;&#13;
}&#13;
</css><view>&lt;p class="board-game-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id="board-game-container" class="board-game-container"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;p class="board-game-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id="board-game-container" class="board-game-container"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonBoard_Game_create(){&#13;
&#13;
    var presenter = function() {&#13;
    };&#13;
&#13;
    presenter.currentElement = 0;&#13;
    presenter.mouseX = 0;&#13;
    presenter.mouseY = 0;&#13;
    presenter.isElementInMove = false;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    presenter.showAnswersMode = false;&#13;
    presenter.isDisabled = false;&#13;
    presenter.hasFields = false;&#13;
    presenter.currentLeftValue = [];&#13;
    presenter.currentTopValue = [];&#13;
    presenter.originalLeftValue = [];&#13;
    presenter.originalTopValue = [];&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch (name.toLowerCase()) {&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawBoard = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.modelID = model.ID;&#13;
        presenter.Height = parseInt(model.Height, 10);&#13;
        presenter.Width = parseInt(model.Width, 10);&#13;
&#13;
        presenter.$view.find('.board-game-container').css({&#13;
            'width' : presenter.Width,&#13;
            'height' : presenter.Height,&#13;
            'background-image' : 'url('+ model.Background + ')'&#13;
        });&#13;
&#13;
        presenter.fieldsLength = model.Fields.length;&#13;
&#13;
        var fig = ''&#13;
        if(model.hasFields == 'True'){&#13;
            for(i=0;i&lt;presenter.fieldsLength;i++){&#13;
                //fig += '&lt;div id="'+presenter.modelID+'Field'+(i+1)+'" class="board-game-field" style=""&gt;&lt;/div&gt;';&#13;
                fig += '&lt;div id="Field'+(i+1)+'" class="board-game-field" style=""&gt;&lt;/div&gt;';&#13;
            }&#13;
        }&#13;
        for(i=0;i&lt;model.Images.length;i++){&#13;
            fig += '&lt;div id="Element'+(i+1)+'" class="board-game-element" style="background-image: url('+ model.Images[i].PawnImage + '); -moz-background-size:100% 100%; -webkit-background-size:100% 100%; background-size:100% 100%;; height: ' + model.Images[i].Height + 'px; width: ' + model.Images[i].Width + 'px;  "&gt;&lt;/div&gt;';&#13;
            presenter.currentLeftValue[i] = model.Images[i].Left;&#13;
            presenter.currentTopValue[i] = model.Images[i].Top;&#13;
            presenter.originalLeftValue[i] = model.Images[i].Left;&#13;
            presenter.originalTopValue[i] = model.Images[i].Top;&#13;
        }&#13;
&#13;
        return fig;&#13;
    };&#13;
&#13;
&#13;
&#13;
    presenter.validate = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        $counter = $(view).find('.board-game-counter');&#13;
&#13;
        if(model.hasFields == 'True'){&#13;
            for(i=0;i&lt;model.Fields.length;i++){&#13;
                if (parseInt(model.Fields[i].Left,10) + parseInt(model.Fields[i].Width,10) &gt; parseInt(model.Width, 10) || parseInt(model.Fields[i].Top,10) + parseInt(model.Fields[i].Height,10) &gt; parseInt(model.Height, 10)) {&#13;
                    $counter.text('Field'+ (i+1) +' is outside of addon!');&#13;
                    return false;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        for(i=0;i&lt;model.Images.length;i++){&#13;
            if (parseInt(model.Images[i].Left,10) + parseInt(model.Images[i].Width,10) &gt; parseInt(model.Width, 10) || parseInt(model.Images[i].Top,10) + parseInt(model.Images[i].Height,10) &gt; parseInt(model.Height, 10)) {&#13;
                $counter.text('Element'+ (i+1) +' is outside of addon!');&#13;
                return false;&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
&#13;
    presenter.init = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.modelID = model.ID;&#13;
        presenter.isDisable = model.isDisable == "True" ? true : false;&#13;
        presenter.wasDisable = model.isDisable == "True" ? true : false;&#13;
        presenter.hasFields = model.hasFields == "True" ? true : false;&#13;
        presenter.wasVisible = model["Is Visible"] == 'True';&#13;
        presenter.isVisible = model["Is Visible"] == 'True';&#13;
        presenter.fieldsLength = model.Fields.length;&#13;
        presenter.imagesLength = model.Images.length;&#13;
&#13;
        var myDiv = $(view).find('.board-game-container')[0];&#13;
&#13;
        var board = presenter.drawBoard(view, model);&#13;
        $(myDiv).append(board);&#13;
&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
&#13;
        if(presenter.hasFields){&#13;
            for(i=0;i&lt;presenter.fieldsLength;i++){&#13;
                $(presenter.$view.find('.board-game-field')[i]).css({&#13;
                    'width' : model.Fields[i].Width + "px",&#13;
                    'height' : model.Fields[i].Height + "px",&#13;
                    'top' : model.Fields[i].Top + "px",&#13;
                    'left' : model.Fields[i].Left + "px"&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        presenter.setElementsPosition(presenter.originalLeftValue, presenter.originalTopValue);&#13;
&#13;
    };&#13;
&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        if (presenter.validate(view, model)) {&#13;
&#13;
            presenter.init(view, model);&#13;
&#13;
            presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
            presenter.eventBus.addEventListener('HideAnswers', this);&#13;
&#13;
&#13;
            // $(view).find('.board-game-element').draggable({ revert: true });&#13;
&#13;
            presenter.$view.find('.board-game-element').draggable({&#13;
                containment: "parent"&#13;
            });&#13;
&#13;
&#13;
            presenter.$view.find('.board-game-field').droppable({&#13;
                drop: function(e, ui) {&#13;
                    presenter.checkRevert(this);&#13;
                }&#13;
            });&#13;
&#13;
            if(presenter.isDisable){&#13;
                presenter.disable();&#13;
            }&#13;
&#13;
            jQuery(function($) {&#13;
                presenter.$view.find('.board-game-element')&#13;
&#13;
                    .mousedown(function(e) {&#13;
                        presenter.moveCurrentElement(this);&#13;
                    })&#13;
                    .mouseup(function(e) {&#13;
&#13;
                    }).click(function(e) {&#13;
&#13;
                    });&#13;
            });&#13;
&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.moveCurrentElement = function(element) {&#13;
        presenter.currentElement = element.id;&#13;
        if(presenter.hasFields){&#13;
            presenter.$view.find('#'+presenter.currentElement+'').draggable({ revert: true });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.checkRevert = function(element){&#13;
        var field = element.id;&#13;
        presenter.$view.find('#'+presenter.currentElement+'').draggable({ revert: false });&#13;
        presenter.triggerFrameChangeEvent(field, presenter.currentElement);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        if (presenter.validate(view, model)) {&#13;
            presenter.init(view, model);&#13;
            $(view).find('.board-game-element').draggable({ containment: "parent" });&#13;
&#13;
            var coordinations = {x:0, y:0};&#13;
&#13;
            var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
                xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;');&#13;
            coordinatesContainer.addClass('coordinates');&#13;
            coordinatesContainer.append(xContainer).append(yContainer);&#13;
            $(view).find('.board-game-container').append(coordinatesContainer);&#13;
&#13;
            function setCalculatedPosition(e) {&#13;
                coordinations.x = e.originalEvent.pageX || e.originalEvent.touches[0].pageX;&#13;
                coordinations.y = e.originalEvent.pageY || e.originalEvent.touches[0].pageY;&#13;
                presenter.mouseSX = parseInt(coordinations.x,10) - parseInt($(view).find('.board-game-container').offset().left,10);&#13;
                presenter.mouseSY = parseInt(coordinations.y,10) - parseInt($(view).find('.board-game-container').offset().top,10);&#13;
                xContainer.find('.value').html(presenter.mouseSX);&#13;
                yContainer.find('.value').html(presenter.mouseSY);&#13;
            }&#13;
&#13;
            var doesElementExist = function() {&#13;
                var $moduleSelector = $('.moduleSelector[data-id="'+presenter.modelID+'"]');&#13;
&#13;
                if ($moduleSelector.length &gt; 0) {&#13;
                    $moduleSelector.on('mousemove', function(e) {&#13;
                        setCalculatedPosition(e);&#13;
                    });&#13;
&#13;
                    clearInterval(interval);&#13;
                }&#13;
            };&#13;
&#13;
            var interval = setInterval(function() { doesElementExist(); }, 500);&#13;
&#13;
            $(view).find('.board-game-container').on('mousemove', function(e) {&#13;
                setCalculatedPosition(e);&#13;
            });&#13;
        }&#13;
&#13;
    };&#13;
&#13;
&#13;
&#13;
    presenter.disable = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.isDisable = true;&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        $($myDiv).addClass('disable');&#13;
        presenter.$view.find('.board-game-element').draggable("disable");&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.isDisable = false;&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        $($myDiv).removeClass('disable');&#13;
        presenter.$view.find('.board-game-element').draggable("enable");&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
&#13;
    presenter.setElementsPosition = function(arrayLeft, arrayTop){&#13;
        for(i=0;i&lt;presenter.imagesLength;i++){&#13;
            $(presenter.$view.find('.board-game-element')[i]).css({&#13;
                'left' : arrayLeft[i] + "px",&#13;
                'top' : arrayTop[i] + "px"&#13;
            });&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getElementsPosition = function(){&#13;
        for(i=0;i&lt;presenter.imagesLength;i++){&#13;
            presenter.currentLeftValue[i] = parseInt($(presenter.$view.find('.board-game-element')[i]).css("left"),10);&#13;
            presenter.currentTopValue[i] = parseInt($(presenter.$view.find('.board-game-element')[i]).css("top"),10);&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.getState = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isErrorCheckingMode = false;&#13;
        var isVisible = presenter.isVisible;&#13;
        var wasVisible = presenter.wasVisible;&#13;
        var wasDisable = presenter.wasDisable;&#13;
        var isDisable = presenter.isDisable;&#13;
&#13;
        presenter.getElementsPosition();&#13;
&#13;
        var originalLeftValue = presenter.originalLeftValue;&#13;
        var originalTopValue = presenter.originalTopValue;&#13;
        var currentLeftValue = presenter.currentLeftValue;&#13;
        var currentTopValue = presenter.currentTopValue;&#13;
&#13;
        return JSON.stringify({&#13;
            originalLeftValue : originalLeftValue,&#13;
            originalTopValue : originalTopValue,&#13;
            currentLeftValue : currentLeftValue,&#13;
            currentTopValue : currentTopValue,&#13;
            isVisible : isVisible,&#13;
            wasVisible : wasVisible,&#13;
            wasDisable : wasDisable,&#13;
            isDisable : isDisable&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var parsedState = JSON.parse(state), $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        presenter.originalLeftValue = parsedState.originalLeftValue;&#13;
        presenter.originalTopValue = parsedState.originalTopValue;&#13;
        presenter.currentLeftValue = parsedState.currentLeftValue;&#13;
        presenter.currentTopValue = parsedState.currentTopValue;&#13;
        presenter.isVisible = parsedState.isVisible;&#13;
        presenter.wasVisible = parsedState.wasVisible;&#13;
        presenter.wasDisable = parsedState.wasDisable;&#13;
        presenter.isDisable = parsedState.isDisable;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
        presenter.setElementsPosition(presenter.currentLeftValue, presenter.currentTopValue);&#13;
&#13;
        if(presenter.isDisable){&#13;
            $($myDiv).addClass('disable');&#13;
            presenter.$view.find('.board-game-element').draggable("disable");&#13;
        } else{&#13;
            $($myDiv).removeClass('disable');&#13;
            presenter.$view.find('.board-game-element').draggable("enable");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        presenter.setElementsPosition(presenter.originalLeftValue, presenter.originalTopValue);&#13;
        presenter.setWorkMode();&#13;
        presenter.isErrorCheckingMode = false;&#13;
&#13;
        presenter.setElementsPosition(presenter.originalLeftValue, presenter.originalTopValue);&#13;
        presenter.isVisible = presenter.wasVisible;&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
        presenter.isDisable = presenter.wasDisable;&#13;
&#13;
        if(presenter.isDisable){&#13;
            $($myDiv).addClass('disable');&#13;
            presenter.$view.find('.board-game-element').draggable("disable");&#13;
        } else{&#13;
            $($myDiv).removeClass('disable');&#13;
            presenter.$view.find('.board-game-element').draggable("enable");&#13;
        }&#13;
    };&#13;
&#13;
&#13;
&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.showErrorsMode = true;&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        $($myDiv).addClass('check');&#13;
        presenter.$view.find('.board-game-element').draggable("disable");&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.showErrorsMode = false;&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        $($myDiv).removeClass('check');&#13;
&#13;
        if(!presenter.isDisable){&#13;
            presenter.$view.find('.board-game-element').draggable("enable");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(presenter.showErrorsMode === true){&#13;
            presenter.setWorkMode();&#13;
        }&#13;
        presenter.showAnswersMode = true;&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        $($myDiv).addClass('show-answer');&#13;
        presenter.$view.find('.board-game-element').draggable("disable");&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(presenter.showAnswersMode === true){&#13;
            var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
            $($myDiv).removeClass('show-answer');&#13;
&#13;
            if(!presenter.isDisable){&#13;
                presenter.$view.find('.board-game-element').draggable("enable");&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function(eventItem, eventValue) {&#13;
        return {&#13;
            source : presenter.modelID,&#13;
            item : "" + eventItem,&#13;
            value : '' + eventValue,&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(eventItem, eventValue) {&#13;
        var eventData = presenter.createEventData(eventItem, eventValue);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Clock" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="TimeStandard" nameLabel="Clock_property_time_standard" type="{24H,12H}"/>
		<property name="InitialTime" nameLabel="Clock_property_initial_time" type="string"/>
		<property displayName="Step (minutes)" name="TimeStep" nameLabel="Clock_property_time_step" type="string"/>
		<property name="ShowClockLabels" nameLabel="Clock_property_show_clock_labels" type="boolean"/>
		<property name="ActiveHand" nameLabel="Clock_property_active_hand" type="{Both,HourHand,MinuteHand}"/>
		<property name="SynchronizeHands" nameLabel="Clock_property_synchronize_hands" type="{None, Min with Hour, Both}"/>
		<property name="Images" nameLabel="Clock_property_images" type="list">
			<property name="Background" nameLabel="Clock_property_background" type="image"/>
		</property>
		<property name="CorrectAnswer" nameLabel="Clock_property_correct_answer" type="string"/>
		<property name="isDisable" nameLabel="Clock_property_is_disable" type="boolean"/>
		<property name="isActivity" nameLabel="Clock_property_is_activity" type="boolean"/>
	</model>
<css>#clock-face {&#13;
    stroke: black;&#13;
    stroke-width: 2px;&#13;
    fill: white;&#13;
}&#13;
&#13;
.analog-clock {&#13;
    border: 3px solid transparent;&#13;
    -ms-touch-action: none;&#13;
}&#13;
&#13;
.analog-clock.incorrect {&#13;
    border: 3px solid #ff4901;&#13;
}&#13;
&#13;
.analog-clock.correct {&#13;
    border: 3px solid #06d401;&#13;
}&#13;
&#13;
#h-hand,#m-hand {&#13;
    stroke: #A52A2A;&#13;
    stroke-opacity: 0.0;&#13;
}&#13;
&#13;
#h-hand {&#13;
    stroke-width: 50px&#13;
}&#13;
&#13;
#m-hand {&#13;
    stroke-width: 50px;&#13;
}&#13;
&#13;
.time-text {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.text_label { /*fill: blue;*/&#13;
&#13;
}&#13;
&#13;
#label_mask {&#13;
    opacity: 0;&#13;
}&#13;
</css><view>&lt;p class="clock-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id="analog-clock" class="analog-clock"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;p class="clock-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id="analog-clock" class="analog-clock"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonClock_create() {&#13;
    var presenter = function() {&#13;
    };&#13;
&#13;
    presenter.currentHand = 0;&#13;
    presenter.getHour = 0;&#13;
    presenter.getMinute = 0;&#13;
    presenter.mouseX = 0;&#13;
    presenter.mouseY = 0;&#13;
    presenter.isHandInMove = false;&#13;
    presenter.currentHour = 0;&#13;
    presenter.currentMinute = 0;&#13;
    presenter.lastMinuteValue = 0;&#13;
    presenter.Step = 1;&#13;
    presenter.showClockLabels = false;&#13;
    presenter.isActivity = false;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    presenter.TimeStandard = 24;&#13;
    presenter.showAnswersMode = false;&#13;
&#13;
    function displayText() {&#13;
        var textToDisplay = presenter.model['Text to be displayed'], isTextColored = presenter.model['Color text'] === 'True', $textContainer = presenter.$view&#13;
            .find('.some-text-container');&#13;
&#13;
        $textContainer.text(textToDisplay);&#13;
        if (isTextColored) {&#13;
            $textContainer.css('color', 'red');&#13;
        }&#13;
    }&#13;
&#13;
&#13;
&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch (name.toLowerCase()) {&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'setClockTime'.toLowerCase():&#13;
                presenter.setClockTime(params[0]);&#13;
                break;&#13;
            case 'getCurrentTime'.toLowerCase():&#13;
                presenter.getCurrentTime();&#13;
                break;&#13;
            case 'getCurrentHour'.toLowerCase():&#13;
                presenter.getCurrentHour();&#13;
                break;&#13;
            case 'getCurrentMinute'.toLowerCase():&#13;
                presenter.getCurrentMinute();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'markAsCorrect'.toLowerCase():&#13;
                presenter.markAsCorrect();&#13;
                break;&#13;
            case 'markAsWrong'.toLowerCase():&#13;
                presenter.markAsWrong();&#13;
                break;&#13;
            case 'markAsEmpty'.toLowerCase():&#13;
                presenter.markAsEmpty();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawClock = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.modelID = model.ID;&#13;
        presenter.Height = parseInt(model.Height, 10);&#13;
        presenter.Width = parseInt(model.Width, 10);&#13;
&#13;
        var centerX = parseInt(presenter.Height / 2, 10);&#13;
        var centerY = parseInt(presenter.Width / 2, 10);&#13;
        presenter.center = centerX &gt; centerY ? centerY : centerX;&#13;
        presenter.radius = presenter.center - 5;&#13;
&#13;
        var size = 2 * presenter.center;&#13;
&#13;
        presenter.$view.find('.analog-clock').css({&#13;
            'width' : size,&#13;
            'height' : size&#13;
        });&#13;
&#13;
        var vector = presenter.center / 15;&#13;
&#13;
        var fig = '&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="'&#13;
            + presenter.Width + '" height="' + presenter.Height + '"&gt;';&#13;
        var uniqueID = Math.floor((Math.random() * 10000) + 1);&#13;
        if (model.Images[0].Background != "") {&#13;
            fig += '&lt;defs&gt;';&#13;
            fig += '&lt;pattern id="imageBackground' + presenter.modelID&#13;
                + uniqueID&#13;
                + '" x="0" y="0" patternUnits="userSpaceOnUse" height="'&#13;
                + (2 * presenter.center) + '" width="'&#13;
                + (2 * presenter.center) + '"&gt;';&#13;
            fig += '&lt;image y="0" x="0" id="imageBackground' + presenter.modelID&#13;
                + uniqueID + '" xlink:href="' + model.Images[0].Background&#13;
                + '" height="' + (2 * presenter.center) + '" width="'&#13;
                + (2 * presenter.center) + '" /&gt;';&#13;
            fig += '&lt;/pattern&gt;';&#13;
            fig += '&lt;/defs&gt;';&#13;
&#13;
            fig += '&lt;circle id="clock-face-with-image" class="circle" cx="'&#13;
                + presenter.center + '" cy="' + presenter.center + '" r="'&#13;
                + presenter.radius + '" fill="url(#imageBackground'&#13;
                + presenter.modelID + uniqueID + ')"/&gt;';&#13;
        } else {&#13;
            fig += '&lt;circle id="clock-face" class="circle" cx="'&#13;
                + presenter.center + '" cy="' + presenter.center + '" r="'&#13;
                + presenter.radius + '" /&gt;';&#13;
        }&#13;
        if (presenter.showClockLabels) {&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (presenter.center - 17 * vector / 10) + '" y="'&#13;
                + (presenter.center / 5 + vector / 2) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;12&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (2 * presenter.center - presenter.center / 5) + '" y="'&#13;
                + (presenter.center + presenter.center / 10 - vector / 2)&#13;
                + '" font-size="' + (presenter.center / 5)&#13;
                + 'px" &gt;3&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (presenter.center - presenter.center / 20) + '" y="'&#13;
                + (2 * presenter.center - presenter.center / 10)&#13;
                + '" font-size="' + (presenter.center / 5)&#13;
                + 'px" &gt;6&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="' + (presenter.center / 10)&#13;
                + '" y="'&#13;
                + (presenter.center + presenter.center / 10 - vector / 2)&#13;
                + '" font-size="' + (presenter.center / 5)&#13;
                + 'px" &gt;9&lt;/text&gt;';&#13;
&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (14 * presenter.center / 10) + '" y="'&#13;
                + (9 * presenter.center / 25) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;1&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (4 * presenter.center / 10 + vector) + '" y="'&#13;
                + (9 * presenter.center / 25) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;11&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (8.4 * presenter.center / 5) + '" y="'&#13;
                + (7 * presenter.center / 10 - vector) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;2&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (presenter.center / 5 - vector / 2) + '" y="'&#13;
                + (7 * presenter.center / 10 - vector) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;10&lt;/text&gt;';&#13;
&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (14 * presenter.center / 10 - vector) + '" y="'&#13;
                + (44 * presenter.center / 25 + vector) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;5&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (4 * presenter.center / 10 + 2 * vector) + '" y="'&#13;
                + (44 * presenter.center / 25 + vector) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;7&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (8.4 * presenter.center / 5) + '" y="'&#13;
                + (15 * presenter.center / 10) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;4&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="' + (presenter.center / 5)&#13;
                + '" y="' + (15 * presenter.center / 10) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;8&lt;/text&gt;';&#13;
            fig += '&lt;rect id="label_mask" x="0" y="0" width="'&#13;
                + (2 * presenter.center) + '" height="'&#13;
                + (2 * presenter.center) + '"/&gt;';&#13;
        }&#13;
&#13;
        if (presenter.ActiveHand == 'HourHand') {&#13;
            fig += '&lt;rect id="m-hand" x="' + (presenter.center - vector)&#13;
                + '" y="' + (presenter.center / 5) + '" ry="'&#13;
                + (2 * vector) + '" rx="' + (2 * vector) + '" width="'&#13;
                + (2 * vector) + '" height="'&#13;
                + (4 * presenter.center / 5 + vector) + '" /&gt;';&#13;
            fig += '&lt;rect id="h-hand" x="' + (presenter.center - vector)&#13;
                + '" y="' + (presenter.center / 2) + '" ry="'&#13;
                + (2 * vector) + '" rx="' + (2 * vector) + '" width="'&#13;
                + (2 * vector) + '" height="'&#13;
                + (presenter.center / 2 + vector) + '" /&gt;';&#13;
        } else {&#13;
            fig += '&lt;rect id="h-hand" x="' + (presenter.center - vector)&#13;
                + '" y="' + (presenter.center / 2) + '" ry="'&#13;
                + (2 * vector) + '" rx="' + (2 * vector) + '" width="'&#13;
                + (2 * vector) + '" height="'&#13;
                + (presenter.center / 2 + vector) + '" /&gt;';&#13;
            fig += '&lt;rect id="m-hand" x="' + (presenter.center - vector)&#13;
                + '" y="' + (presenter.center / 5) + '" ry="'&#13;
                + (2 * vector) + '" rx="' + (2 * vector) + '" width="'&#13;
                + (2 * vector) + '" height="'&#13;
                + (4 * presenter.center / 5 + vector) + '" /&gt;';&#13;
        }&#13;
&#13;
        fig += '&lt;/svg&gt;';&#13;
&#13;
        return fig;&#13;
    };&#13;
&#13;
    presenter.getNewTime = function(myTime) {&#13;
        var newTime = [];&#13;
&#13;
        var position = myTime.indexOf(':');&#13;
        newTime[0] = myTime.slice(0, position);&#13;
        newTime[1] = myTime.slice(position + 1, myTime.length);&#13;
        return newTime;&#13;
    };&#13;
&#13;
    presenter.checkTime = function(time) {&#13;
        var hour, minute;&#13;
&#13;
        if (time.indexOf(':') !== -1) {&#13;
            var position = time.indexOf(':');&#13;
            hour = time.slice(0, position);&#13;
            minute = time.slice(position + 1, time.length);&#13;
&#13;
            if (parseInt(hour, 10) == Math.round(hour * 100) / 100&#13;
                &amp;&amp; parseInt(hour, 10) &gt; -2 &amp;&amp; !(isNaN(hour))&#13;
                &amp;&amp; parseInt(minute, 10) == Math.round(minute * 100) / 100&#13;
                &amp;&amp; parseInt(minute, 10) &gt; -1 &amp;&amp; !(isNaN(minute))) {&#13;
                return true;&#13;
            } else {&#13;
                return false;&#13;
            }&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.countTimeFromMinuteAngle = function(angleValue) {&#13;
        value = angleValue / 6;&#13;
        return value;&#13;
    };&#13;
&#13;
    presenter.setClockTime = function(time) {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (!presenter.checkTime(time)) {&#13;
            return 0;&#13;
        }&#13;
        var newTime = presenter.getNewTime(time);&#13;
&#13;
        presenter.currentMinuteValue = parseInt(newTime[1], 10);&#13;
        presenter.currentHourValue = parseInt(newTime[0], 10)&#13;
            % presenter.TimeStandard;&#13;
        if (presenter.TimeStandard == 12 &amp;&amp; presenter.currentHourValue == 0) {&#13;
            presenter.currentHourValue = 12;&#13;
        }&#13;
        var h = 30 * ((parseInt(presenter.currentHourValue, 10) % 12) + parseInt(&#13;
            presenter.currentMinuteValue, 10) / 60);&#13;
        var m = 6 * parseInt(presenter.currentMinuteValue, 10);&#13;
&#13;
        presenter.currentHourAngle = h;&#13;
&#13;
        presenter.setAttr('h-hand', h);&#13;
        presenter.setAttr('m-hand', m);&#13;
&#13;
    };&#13;
&#13;
    presenter.setTimeNotSynhronized = function() {&#13;
&#13;
        var handToMove = 0;&#13;
        var valueMinute = presenter.currentMinuteValue, valueHour = presenter.currentHourValue;&#13;
        var value = 0;&#13;
&#13;
        if (presenter.currentHand == 'h-hand') {&#13;
            if (presenter.currentHourValue == 11&#13;
                &amp;&amp; presenter.currentHandValue &lt; 30) {&#13;
                presenter.currentHourValue = 12;&#13;
            }&#13;
            if (presenter.currentHourValue == 12&#13;
                &amp;&amp; presenter.currentHandValue &gt; 330) {&#13;
                presenter.currentHourValue = 11;&#13;
            }&#13;
            if (presenter.currentHourValue == 0&#13;
                &amp;&amp; presenter.currentHandValue &gt; 330) {&#13;
                presenter.currentHourValue = 23;&#13;
            }&#13;
            if (presenter.currentHourValue == 23&#13;
                &amp;&amp; presenter.currentHandValue &lt; 30) {&#13;
                presenter.currentHourValue = 0;&#13;
            }&#13;
            if (presenter.currentHourValue &gt;= 12) {&#13;
                presenter.currentHourValue = 12 + Math&#13;
                    .floor(presenter.currentHandValue / 30);&#13;
            } else {&#13;
                presenter.currentHourValue = Math&#13;
                    .floor(presenter.currentHandValue / 30);&#13;
            }&#13;
&#13;
            presenter.setClockTime(presenter.currentHourValue + ":"&#13;
                + presenter.currentMinuteValue);&#13;
&#13;
        } else {&#13;
&#13;
            valueMinute = Math.round(presenter.currentHandValue / 6);&#13;
&#13;
            if (valueMinute == 60) {&#13;
                valueMinute = 0;&#13;
            }&#13;
            presenter.setClockTime(presenter.currentHourValue + ":"&#13;
                + valueMinute);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.setTimeSynhronizedMinWithHour = function() {&#13;
&#13;
        var handToMove = 0;&#13;
        var valueMinute = presenter.currentMinuteValue, valueHour = presenter.currentHourValue;&#13;
        var valueMinutePrevious = presenter.currentMinuteValue;&#13;
        var valueHourPrevious = presenter.currentHourValue;&#13;
        var value = 0;&#13;
&#13;
        if (presenter.currentHand == 'h-hand') {&#13;
            if (presenter.currentHourValue == 11&#13;
                &amp;&amp; presenter.currentHandValue &lt; 30) {&#13;
                presenter.currentHourValue = 12;&#13;
            }&#13;
            if (presenter.currentHourValue == 12&#13;
                &amp;&amp; presenter.currentHandValue &gt; 330) {&#13;
                presenter.currentHourValue = 11;&#13;
            }&#13;
            if (presenter.currentHourValue == 0&#13;
                &amp;&amp; presenter.currentHandValue &gt; 330) {&#13;
                presenter.currentHourValue = 23;&#13;
            }&#13;
            if (presenter.currentHourValue == 23&#13;
                &amp;&amp; presenter.currentHandValue &lt; 30) {&#13;
                presenter.currentHourValue = 0;&#13;
            }&#13;
            if (presenter.currentHourValue &gt;= 12) {&#13;
                presenter.currentHourValue = 12 + Math&#13;
                    .floor(presenter.currentHandValue / 30);&#13;
            } else {&#13;
                presenter.currentHourValue = Math&#13;
                    .floor(presenter.currentHandValue / 30);&#13;
            }&#13;
&#13;
        } else {&#13;
&#13;
            valueMinute = Math.round(presenter.currentHandValue / 6);&#13;
&#13;
            if (valueMinute == 60) {&#13;
                valueMinute = 0;&#13;
            }&#13;
&#13;
            if (valueMinute &lt; 15 &amp;&amp; valueMinutePrevious &gt; 45) {&#13;
                if (presenter.currentHourValue == 23) {&#13;
                    presenter.currentHourValue = 0;&#13;
                } else {&#13;
                    presenter.currentHourValue++;&#13;
                }&#13;
            }&#13;
            if (valueMinute &gt; 45 &amp;&amp; valueMinutePrevious &lt; 15) {&#13;
                if (presenter.currentHourValue == 0) {&#13;
                    presenter.currentHourValue = 23;&#13;
                } else {&#13;
                    presenter.currentHourValue--;&#13;
                }&#13;
            }&#13;
            valueMinutePrevious = valueMinute;&#13;
&#13;
        }&#13;
        presenter.setClockTime(presenter.currentHourValue + ":" + valueMinute);&#13;
&#13;
    };&#13;
&#13;
    presenter.setTimeSynhronizedBoth = function() {&#13;
&#13;
        var handToMove = 0;&#13;
        var valueMinutePrevious = presenter.currentMinuteValue, valueHour = presenter.currentHourAngle;&#13;
        var value = 0;&#13;
&#13;
        if (presenter.currentHand == 'h-hand') {&#13;
            if (presenter.currentHourValue == 11&#13;
                &amp;&amp; presenter.currentHandValue &lt; 30) {&#13;
                presenter.currentHourValue = 12;&#13;
            }&#13;
            if (presenter.currentHourValue == 12&#13;
                &amp;&amp; presenter.currentHandValue &gt; 330) {&#13;
                presenter.currentHourValue = 11;&#13;
            }&#13;
            if (presenter.currentHourValue == 0&#13;
                &amp;&amp; presenter.currentHandValue &gt; 330) {&#13;
                presenter.currentHourValue = 23;&#13;
            }&#13;
            if (presenter.currentHourValue == 23&#13;
                &amp;&amp; presenter.currentHandValue &lt; 30) {&#13;
                presenter.currentHourValue = 0;&#13;
            }&#13;
            if (presenter.currentHourValue &gt;= 12) {&#13;
                presenter.currentHourValue = 12 + Math&#13;
                    .floor(presenter.currentHandValue / 30);&#13;
            } else {&#13;
                presenter.currentHourValue = Math&#13;
                    .floor(presenter.currentHandValue / 30);&#13;
            }&#13;
&#13;
            valueMinute = Math.round(2 * (presenter.currentHandValue % 30));&#13;
&#13;
            var value = valueMinute * 6;&#13;
&#13;
            if (parseInt(value / 6) % presenter.Step &gt;= parseInt(&#13;
                presenter.Step / 2, 10)) {&#13;
                var getMinute = Math&#13;
                    .floor(parseInt(value / 6) / presenter.Step)&#13;
                    * presenter.Step;&#13;
&#13;
                valueMinute = (getMinute + presenter.Step);&#13;
&#13;
            } else {&#13;
                var getMinute = Math&#13;
                    .floor(parseInt(value / 6) / presenter.Step)&#13;
                    * presenter.Step;&#13;
&#13;
                valueMinute = getMinute;&#13;
            }&#13;
&#13;
        } else {&#13;
&#13;
            var valueMinute = Math.round(presenter.currentHandValue / 6);&#13;
&#13;
            if (valueMinute == 60) {&#13;
                valueMinute = 0;&#13;
            }&#13;
&#13;
            if (valueMinute &lt; 15 &amp;&amp; valueMinutePrevious &gt; 45) {&#13;
                if (presenter.currentHourValue == 23) {&#13;
                    presenter.currentHourValue = 0;&#13;
                } else {&#13;
                    presenter.currentHourValue++;&#13;
                }&#13;
            }&#13;
            if (valueMinute &gt; 45 &amp;&amp; valueMinutePrevious &lt; 15) {&#13;
                if (presenter.currentHourValue == 0) {&#13;
                    presenter.currentHourValue = 23;&#13;
                } else {&#13;
                    presenter.currentHourValue--;&#13;
                }&#13;
            }&#13;
            valueMinutePrevious = valueMinute;&#13;
&#13;
        }&#13;
&#13;
        presenter.setClockTime(presenter.currentHourValue + ":" + valueMinute);&#13;
&#13;
    };&#13;
&#13;
    presenter.moveCurrentHand = function(element) {&#13;
        presenter.currentHand = element.id;&#13;
    };&#13;
&#13;
    presenter.setAttr = function(id, val) {&#13;
        var v = 'rotate(' + val + ', ' + presenter.center + ', '&#13;
            + presenter.center + ')';&#13;
        presenter.$view.find('#' + id).attr('transform', v);&#13;
&#13;
    };&#13;
&#13;
    presenter.validate = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        if (model.TimeStandard == '12H') {&#13;
            presenter.TimeStandard = 12;&#13;
        } else {&#13;
            presenter.TimeStandard = 24;&#13;
        }&#13;
        $counter = $(view).find('.clock-counter');&#13;
&#13;
        if (!presenter.checkTime(model.InitialTime)) {&#13;
            $counter.text('Put correct InitialTime (hour:minute).');&#13;
            return false;&#13;
        } else {&#13;
            var getTime = presenter.getNewTime(model.InitialTime);&#13;
            var min = parseInt(getTime[1], 10);&#13;
            var hour = parseInt(getTime[0], 10);&#13;
            if (min &gt; 59 || hour &gt; parseInt(presenter.TimeStandard, 10)) {&#13;
                $counter.text('Put correct InitialTime (hour &lt; '&#13;
                    + (parseInt(presenter.TimeStandard, 10) + 1)&#13;
                    + ' and minute &lt; 60).');&#13;
                return false;&#13;
            }&#13;
            if (parseInt(presenter.TimeStandard, 10) == 12 &amp;&amp; hour == 0) {&#13;
                $counter.text('Put correct InitialTime (0 &lt; hour &lt; '&#13;
                    + (parseInt(presenter.TimeStandard, 10) + 1)&#13;
                    + ' and minute &lt; 60).');&#13;
                return false;&#13;
            }&#13;
        }&#13;
        if (model.TimeStep.length == 0) {&#13;
            $counter.text('Fill step value.');&#13;
            return false;&#13;
        } else {&#13;
            if (parseInt(model.TimeStep, 10) != Math&#13;
                .round(model.TimeStep * 100) / 100&#13;
                || isNaN(model.TimeStep)) {&#13;
                $counter.text('Incorrect step value.');&#13;
                return false;&#13;
            } else {&#13;
                if (60 % parseInt(model.TimeStep, 10) != 0) {&#13;
                    $counter.text('Step should be a divisor of 60.');&#13;
                    return false;&#13;
                } else {&#13;
                    var getTime = presenter.getNewTime(model.InitialTime);&#13;
                    var minutes = parseInt(getTime[1], 10);&#13;
                    var step = parseInt(model.TimeStep, 10);&#13;
                    if (minutes % step == 0) {&#13;
                        presenter.Step = parseInt(model.TimeStep, 10);&#13;
                    } else {&#13;
                        $counter&#13;
                            .text('Value of minutes in InitialTime should be a multiple value of step.');&#13;
                        return false;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        if (!(presenter.checkTime(model.CorrectAnswer))&#13;
            &amp;&amp; model.isActivity == "True") {&#13;
            $counter&#13;
                .text('Put CorrectAnswer (hour:minute) or uncheck isActivity.');&#13;
            return false;&#13;
        } else {&#13;
            if (model.isActivity == "True") {&#13;
                var getTime = presenter.getNewTime(model.CorrectAnswer);&#13;
                var hours = parseInt(getTime[0], 10);&#13;
                var minutes = parseInt(getTime[1], 10);&#13;
                var step = parseInt(model.TimeStep, 10);&#13;
                if (hours &gt; parseInt(presenter.TimeStandard, 10)&#13;
                    || minutes &gt; 59) {&#13;
                    $counter.text('Put correct InitialTime (hour &lt; '&#13;
                        + (parseInt(presenter.TimeStandard, 10) + 1)&#13;
                        + ' and minute &lt; 60).');&#13;
                    return false;&#13;
                }&#13;
                if (parseInt(presenter.TimeStandard, 10) == 12 &amp;&amp; hours == 0) {&#13;
                    $counter.text('Put correct InitialTime (0 &lt; hour &lt; '&#13;
                        + (parseInt(presenter.TimeStandard, 10) + 1)&#13;
                        + ' and minute &lt; 60).');&#13;
                    return false;&#13;
                }&#13;
                if (minutes % step != 0) {&#13;
                    $counter&#13;
                        .text('Value of minutes in CorrectAnswer should be a multiple value of step.');&#13;
                    return false;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.validateTime = function(time) {&#13;
        var hour, minute, newTime;&#13;
&#13;
        var position = time.indexOf(':');&#13;
        hour = time.slice(0, position);&#13;
        minute = time.slice(position + 1, time.length);&#13;
&#13;
        hour = parseInt(hour, 10);&#13;
        minute = minute &gt; 9 ? parseInt(minute, 10) : "0" + parseInt(minute, 10);&#13;
        newTime = hour +":" + minute;&#13;
        return newTime;&#13;
    };&#13;
&#13;
    presenter.init = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.modelID = model.ID;&#13;
        presenter.isActivity = model.isActivity == "True" ? true : false;&#13;
        presenter.CorrectAnswer = presenter.validateTime(model.CorrectAnswer);&#13;
        presenter.InitialTime = presenter.validateTime(model.InitialTime);&#13;
        presenter.isDisable = model.isDisable == "True" ? true : false;&#13;
        presenter.wasDisable = model.isDisable == "True" ? true : false;&#13;
        presenter.wasVisible = model["Is Visible"] == 'True';&#13;
        presenter.isVisible = model["Is Visible"] == 'True';&#13;
        presenter.ActiveHand = model.ActiveHand;&#13;
&#13;
        if (model.ShowClockLabels == 'True') {&#13;
            presenter.showClockLabels = true;&#13;
        }&#13;
&#13;
        presenter.isSynhronized = model.SynchronizeHands;&#13;
        var myDiv = $(view).find('.analog-clock')[0];&#13;
&#13;
        var figureClock = presenter.drawClock(view, model);&#13;
        $(myDiv).append(figureClock);&#13;
&#13;
        if (presenter.isDisable) {&#13;
            $(myDiv).addClass('disable');&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        if (presenter.validate(view, model)) {&#13;
&#13;
            presenter.init(view, model);&#13;
            presenter.setClockTime(model.InitialTime);&#13;
&#13;
            presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
            presenter.eventBus.addEventListener('HideAnswers', this);&#13;
&#13;
            jQuery(function($) {&#13;
                $(view).find('#analog-clock').mousemove(function(e) {&#13;
&#13;
                    e.stopImmediatePropagation();&#13;
                    presenter.currentHand = 0;&#13;
                    e.stopPropagation();&#13;
&#13;
                    if (presenter.isHandInMove &amp;&amp; !presenter.isDisable 	&amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                        presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1 : 0);&#13;
                    }&#13;
                    presenter.isHandInMove = false;&#13;
                }).click(function(e) {&#13;
&#13;
&#13;
                    }).mouseleave(function(e) {&#13;
                        if(presenter.isHandInMove){&#13;
                            presenter.isHandInMove = false;&#13;
                            presenter.currentHand = 0;&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1 : 0);&#13;
&#13;
                        }&#13;
                    }).mouseup(function(e) {&#13;
&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view).find('#h-hand')&#13;
                    .click(function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        presenter.isHandInMove = false;&#13;
                    })&#13;
                    .mouseup(&#13;
                    function(e) {&#13;
&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
&#13;
                            presenter.isHandInMove = false;&#13;
                        }&#13;
                    })&#13;
                    .mousedown(&#13;
                    function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        if ((presenter.ActiveHand != 'MinuteHand')&#13;
                            &amp;&amp; !presenter.isDisable&#13;
                            &amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                            e.stopPropagation();&#13;
                            presenter.moveCurrentHand(this);&#13;
                            presenter.isHandInMove = true;&#13;
                        }&#13;
                    })&#13;
                    .mousemove(&#13;
                    function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter&#13;
                                .changeHandPosition(e, 'mouse');&#13;
                            if (presenter.isSynhronized == 'Min with Hour') {&#13;
                                presenter&#13;
                                    .setTimeSynhronizedMinWithHour();&#13;
                            } else {&#13;
                                if (presenter.isSynhronized == 'Both') {&#13;
                                    presenter&#13;
                                        .setTimeSynhronizedBoth();&#13;
                                } else {&#13;
                                    presenter&#13;
                                        .setTimeNotSynhronized();&#13;
                                }&#13;
                            }&#13;
                            e.stopPropagation();&#13;
                        }&#13;
&#13;
                    }).mouseleave(function() {&#13;
&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view)&#13;
                    .find('#m-hand')&#13;
                    .click(function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        presenter.isHandInMove = false;&#13;
&#13;
                    })&#13;
                    .mouseup(&#13;
                    function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                            presenter.isHandInMove = false;&#13;
                        }&#13;
                    })&#13;
                    .mousedown(&#13;
                    function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        if ((presenter.ActiveHand != 'HourHand')&#13;
                            &amp;&amp; !presenter.isDisable&#13;
                            &amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                            e.stopPropagation();&#13;
                            presenter.moveCurrentHand(this);&#13;
                            presenter.isHandInMove = true;&#13;
                        }&#13;
&#13;
                    })&#13;
                    .mousemove(&#13;
                    function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter&#13;
                                .changeHandPosition(e, 'mouse');&#13;
                            if (presenter.isSynhronized == 'Min with Hour') {&#13;
                                presenter&#13;
                                    .setTimeSynhronizedMinWithHour();&#13;
                            } else {&#13;
                                if (presenter.isSynhronized == 'Both') {&#13;
                                    presenter&#13;
                                        .setTimeSynhronizedBoth();&#13;
                                } else {&#13;
                                    presenter&#13;
                                        .setTimeNotSynhronized();&#13;
                                }&#13;
                            }&#13;
                            e.stopPropagation();&#13;
                        }&#13;
&#13;
                    }).mouseleave(function() {&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view).find('#label_mask')&#13;
                    .click(function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        presenter.isHandInMove = false;&#13;
&#13;
                    }).mouseup(function(e) {&#13;
&#13;
                        if(presenter.isHandInMove){&#13;
&#13;
                            presenter.isHandInMove = false;&#13;
                            presenter.currentHand = 0;&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1 : 0);&#13;
                        }&#13;
&#13;
                    }).mousemove(function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter.changeHandPosition(e, 'mouse');&#13;
                            if (presenter.isSynhronized == 'Min with Hour') {&#13;
                                presenter.setTimeSynhronizedMinWithHour();&#13;
                            } else {&#13;
                                if (presenter.isSynhronized == 'Both') {&#13;
                                    presenter.setTimeSynhronizedBoth();&#13;
                                } else {&#13;
                                    presenter.setTimeNotSynhronized();&#13;
                                }&#13;
                            }&#13;
                            e.stopPropagation();&#13;
                        }&#13;
&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view).find('#analog-clock').on('touchmove', function(e) {&#13;
                    presenter.currentHand = 0;&#13;
                    e.stopPropagation();&#13;
                    e.stopImmediatePropagation();&#13;
                    presenter.isHandInMove = false;&#13;
                });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view).find('#label_mask').on('touchmove', function(e) {&#13;
                    e.preventDefault();&#13;
                    e.stopPropagation();&#13;
                    e.stopImmediatePropagation();&#13;
                });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view)&#13;
                    .find('#m-hand')&#13;
                    .on(&#13;
                    'touchstart',&#13;
                    function(e) {&#13;
                        if ((presenter.ActiveHand != 'HourHand')&#13;
                            &amp;&amp; !presenter.isDisable&#13;
                            &amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                            e.stopPropagation();&#13;
                            e.stopImmediatePropagation();&#13;
                            e.preventDefault();&#13;
                            presenter.moveCurrentHand(this);&#13;
                            presenter.isHandInMove = true;&#13;
                        }&#13;
                    })&#13;
                    .on(&#13;
                    'touchend',&#13;
                    function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        e.stopImmediatePropagation();&#13;
                        presenter.isHandInMove = false;&#13;
                        presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                    })&#13;
                    .on(&#13;
                    'touchmove',&#13;
                    function(e) {&#13;
                        e.preventDefault();&#13;
                        e.stopPropagation();&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter&#13;
                                .changeHandPosition(e, 'touch');&#13;
                            if (presenter.isSynhronized == 'Min with Hour') {&#13;
                                presenter&#13;
                                    .setTimeSynhronizedMinWithHour();&#13;
                            } else {&#13;
                                if (presenter.isSynhronized == 'Both') {&#13;
                                    presenter&#13;
                                        .setTimeSynhronizedBoth();&#13;
                                } else {&#13;
                                    presenter&#13;
                                        .setTimeNotSynhronized();&#13;
                                }&#13;
                            }&#13;
                        }&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view)&#13;
                    .find('#h-hand')&#13;
                    .on(&#13;
                    'touchstart',&#13;
                    function(e) {&#13;
                        if ((presenter.ActiveHand != 'MinuteHand')&#13;
                            &amp;&amp; !presenter.isDisable&#13;
                            &amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                            e.stopPropagation();&#13;
                            e.stopImmediatePropagation();&#13;
                            e.preventDefault();&#13;
                            presenter.moveCurrentHand(this);&#13;
                            presenter.isHandInMove = true;&#13;
                        }&#13;
                    })&#13;
                    .on(&#13;
                    'touchend',&#13;
                    function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        e.stopImmediatePropagation();&#13;
                        presenter.isHandInMove = false;&#13;
                        presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
&#13;
                    })&#13;
                    .on(&#13;
                    'touchmove',&#13;
                    function(e) {&#13;
                        e.preventDefault();&#13;
                        e.stopPropagation();&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter&#13;
                                .changeHandPosition(e, 'touch');&#13;
                            if (presenter.isSynhronized == 'Min with Hour') {&#13;
                                presenter&#13;
                                    .setTimeSynhronizedMinWithHour();&#13;
                            } else {&#13;
                                if (presenter.isSynhronized == 'Both') {&#13;
                                    presenter&#13;
                                        .setTimeSynhronizedBoth();&#13;
                                } else {&#13;
                                    presenter&#13;
                                        .setTimeNotSynhronized();&#13;
                                }&#13;
                            }&#13;
&#13;
                        }&#13;
                    });&#13;
            });&#13;
&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        if (presenter.validate(view, model)) {&#13;
            presenter.init(view, model);&#13;
            presenter.setClockTime(model.InitialTime);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.getCurrentTime = function() {&#13;
        if(presenter.currentMinuteValue == 60){&#13;
            presenter.currentMinuteValue = 0;&#13;
            if (presenter.TimeStandard == 12 &amp;&amp; presenter.currentHourValue == 12) {&#13;
                presenter.currentHourValue = 1;&#13;
            } else{&#13;
                if (presenter.TimeStandard == 24 &amp;&amp; presenter.currentHourValue == 23) {&#13;
                    presenter.currentHourValue = 0;&#13;
                } else{&#13;
                    presenter.currentHourValue++;&#13;
                }&#13;
            }&#13;
        }&#13;
        var currentTime = presenter.currentHourValue&#13;
            + ":"&#13;
            + (presenter.currentMinuteValue &lt; 10 ? "0"&#13;
            + presenter.currentMinuteValue&#13;
            : presenter.currentMinuteValue);&#13;
        return currentTime;&#13;
    };&#13;
&#13;
    presenter.getCurrentHour = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        return presenter.currentHourValue;&#13;
    };&#13;
&#13;
    presenter.getCurrentMinute = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        return presenter.currentMinuteValue &lt; 10 ? "0"&#13;
            + presenter.currentMinuteValue : presenter.currentMinuteValue;&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.isDisable = true;&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        $($myDiv).addClass('disable');&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.isDisable = false;&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        if (presenter.isActivity === false) {&#13;
            return true;&#13;
        } else {&#13;
            if (presenter.InitialTime == presenter.getCurrentTime()) {&#13;
                return false;&#13;
            } else {&#13;
                return true;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveCurrentHand = function(element) {&#13;
        presenter.currentHand = element.id;&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function() {&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        presenter.isErrorCheckingMode = true;&#13;
        $($myDiv).removeClass('incorrect');&#13;
        $($myDiv).addClass('correct');&#13;
&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        presenter.isErrorCheckingMode = true;&#13;
        $($myDiv).removeClass('correct');&#13;
        $($myDiv).addClass('incorrect');&#13;
    };&#13;
&#13;
    presenter.markAsEmpty = function() {&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        presenter.isErrorCheckingMode = true;&#13;
        $($myDiv).removeClass('incorrect');&#13;
        $($myDiv).removeClass('correct');&#13;
    };&#13;
&#13;
    presenter.changeHandPosition = function(e, device) {&#13;
        if (presenter.currentHand != 0 &amp;&amp; presenter.isHandInMove) {&#13;
            var h = 0, m = 0;&#13;
            var value = 0;&#13;
            var $div = presenter.$view.find('#analog-clock');&#13;
&#13;
            if (device == 'mouse') {&#13;
                presenter.mouseX = e.pageX - $div.offset().left;&#13;
                presenter.mouseY = e.pageY - $div.offset().top;&#13;
            } else {&#13;
                presenter.mouseX = e.originalEvent.touches[0].pageX&#13;
                    - $div.offset().left;&#13;
                presenter.mouseY = e.originalEvent.touches[0].pageY&#13;
                    - $div.offset().top;&#13;
            }&#13;
&#13;
            if (presenter.mouseX == presenter.center) {&#13;
                if (presenter.mouseY &lt; presenter.center) {&#13;
                    value = 0;&#13;
                } else {&#13;
                    if (presenter.mouseY &gt; presenter.center) {&#13;
                        value = 180;&#13;
                    }&#13;
                }&#13;
&#13;
            } else {&#13;
                if (presenter.mouseY == presenter.center) {&#13;
                    if (presenter.mouseX &lt; presenter.center) {&#13;
                        value = 270;&#13;
                    } else {&#13;
                        if (presenter.mouseX &gt; presenter.center) {&#13;
                            value = 90;&#13;
                        }&#13;
                    }&#13;
&#13;
                } else {&#13;
                    if (presenter.mouseX &gt; presenter.center&#13;
                        &amp;&amp; presenter.mouseY &lt; presenter.center) {&#13;
                        value = 90 - presenter.countAngle(parseInt(&#13;
                            presenter.mouseX, 10)&#13;
                            - parseInt(presenter.center, 10), parseInt(&#13;
                            presenter.center, 10)&#13;
                            - parseInt(presenter.mouseY, 10));&#13;
                    }&#13;
&#13;
                    if (presenter.mouseX &lt; presenter.center&#13;
                        &amp;&amp; presenter.mouseY &lt; presenter.center) {&#13;
                        value = 270 + presenter.countAngle(parseInt(&#13;
                            presenter.center, 10)&#13;
                            - parseInt(presenter.mouseX, 10), parseInt(&#13;
                            presenter.center, 10)&#13;
                            - parseInt(presenter.mouseY, 10));&#13;
                    }&#13;
&#13;
                    if (presenter.mouseX &lt; presenter.center&#13;
                        &amp;&amp; presenter.mouseY &gt; presenter.center) {&#13;
                        value = 270 - presenter.countAngle(parseInt(&#13;
                            presenter.center, 10)&#13;
                            - parseInt(presenter.mouseX, 10), parseInt(&#13;
                            presenter.mouseY, 10)&#13;
                            - parseInt(presenter.center, 10));&#13;
                    }&#13;
&#13;
                    if (presenter.mouseX &gt; presenter.center&#13;
                        &amp;&amp; presenter.mouseY &gt; presenter.center) {&#13;
                        value = 90 + presenter.countAngle(parseInt(&#13;
                            presenter.mouseX, 10)&#13;
                            - parseInt(presenter.center, 10), parseInt(&#13;
                            presenter.mouseY, 10)&#13;
                            - parseInt(presenter.center, 10));&#13;
&#13;
                    }&#13;
&#13;
                }&#13;
            }&#13;
&#13;
            if (presenter.currentHand == "m-hand") {&#13;
                if (parseInt(value / 6) % presenter.Step &gt;= parseInt(&#13;
                    presenter.Step / 2, 10)) {&#13;
                    var getMinute = Math.floor(parseInt(value / 6)&#13;
                        / presenter.Step)&#13;
                        * presenter.Step;&#13;
&#13;
                    value = (getMinute + presenter.Step) * 6;&#13;
                    presenter.setAttr(presenter.currentHand, value);&#13;
                    presenter.currentHandValue = value;&#13;
                } else {&#13;
                    var getMinute = Math.floor(parseInt(value / 6)&#13;
                        / presenter.Step)&#13;
                        * presenter.Step;&#13;
&#13;
                    value = getMinute * 6;&#13;
                    presenter.setAttr(presenter.currentHand, value);&#13;
                    presenter.currentHandValue = value;&#13;
                }&#13;
            } else {&#13;
&#13;
                presenter.setAttr(presenter.currentHand, value);&#13;
                presenter.currentHandValue = value;&#13;
            }&#13;
        } else{&#13;
            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.countAngle = function(coordinateX, coordinateY) {&#13;
        var value = parseInt(Math.atan((coordinateY / coordinateX)) * 180&#13;
            / Math.PI, 10);&#13;
        return value;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isErrorCheckingMode = false;&#13;
        var isVisible = presenter.isVisible;&#13;
        var wasVisible = presenter.wasVisible;&#13;
        var initialTime = presenter.InitialTime;&#13;
        var wasDisable = presenter.wasDisable;&#13;
        var isDisable = presenter.isDisable;&#13;
        var currentTime = presenter.getCurrentTime();&#13;
&#13;
        return JSON.stringify({&#13;
            initialTime : initialTime,&#13;
            isVisible : isVisible,&#13;
            wasVisible : wasVisible,&#13;
            wasDisable : wasDisable,&#13;
            isDisable : isDisable,&#13;
            currentTime : currentTime&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var parsedState = JSON.parse(state), $myDiv = presenter.$view&#13;
            .find('.analog-clock')[0];&#13;
        presenter.currentTime = parsedState.currentTime;&#13;
        presenter.isVisible = parsedState.isVisible;&#13;
        presenter.wasVisible = parsedState.wasVisible;&#13;
        presenter.InitialTime = parsedState.initialTime;&#13;
        presenter.wasDisable = parsedState.wasDisable;&#13;
        presenter.isDisable = parsedState.isDisable;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        presenter.setClockTime(presenter.currentTime);&#13;
        presenter.isDisable === true ? $($myDiv).addClass('disable')&#13;
            : $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
&#13;
        var $myDiv = presenter.$view.find('#analog-clock')[0];&#13;
        presenter.setWorkMode();&#13;
        presenter.isErrorCheckingMode = false;&#13;
&#13;
        presenter.setClockTime(presenter.InitialTime);&#13;
        presenter.isVisible = presenter.wasVisible;&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
        presenter.isDisable = presenter.wasDisable;&#13;
        presenter.isDisable === true ? $($myDiv).addClass('disable')&#13;
            : $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
&#13;
        if (presenter.CorrectAnswer == presenter.InitialTime) {&#13;
            return 0;&#13;
        }&#13;
        if (presenter.isActivity === true) {&#13;
            return 1;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        if (presenter.CorrectAnswer == presenter.InitialTime) {&#13;
            return 0;&#13;
        }&#13;
        if (presenter.isActivity === true) {&#13;
            return presenter.getCurrentTime() == presenter.CorrectAnswer ? 1&#13;
                : 0;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
&#13;
&#13;
        if (presenter.isActivity === true) {&#13;
&#13;
            if (presenter.CorrectAnswer == presenter.InitialTime&#13;
                &amp;&amp; presenter.getCurrentTime() != presenter.CorrectAnswer) {&#13;
                return 1;&#13;
            }&#13;
&#13;
            if (presenter.neutralOption() == 1) {&#13;
                return 0;&#13;
            } else {&#13;
                return presenter.getMaxScore() - presenter.getScore();&#13;
            }&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.neutralOption = function() {&#13;
        return presenter.getCurrentTime() == presenter.InitialTime ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
&#13;
        presenter.isErrorCheckingMode = true;&#13;
&#13;
&#13;
        if (presenter.isActivity === true) {&#13;
            var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
&#13;
            if (presenter.neutralOption() === 0) {&#13;
&#13;
                if (presenter.getScore() === presenter.getMaxScore()&#13;
                    &amp;&amp; presenter.getErrorCount() === 0) {&#13;
                    $($myDiv).addClass('correct');&#13;
                } else {&#13;
                    $($myDiv).addClass('incorrect');&#13;
                }&#13;
            }&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        presenter.isErrorCheckingMode = false;&#13;
        $($myDiv).removeClass('correct');&#13;
        $($myDiv).removeClass('incorrect');&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function(checkScore) {&#13;
        return {&#13;
            source : presenter.modelID,&#13;
            item : "" + "1",&#13;
            value : ''&#13;
                + presenter.currentHourValue&#13;
                + ":"&#13;
                + (presenter.currentMinuteValue &lt; 10 ? "0"&#13;
                + presenter.currentMinuteValue&#13;
                : presenter.currentMinuteValue),&#13;
            score : '' + checkScore&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(checkScore) {&#13;
        var eventData = presenter.createEventData(checkScore);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(presenter.isErrorCheckingMode == true){&#13;
            presenter.setWorkMode();&#13;
        }&#13;
        if (presenter.isActivity === true) {&#13;
            presenter.isErrorCheckingMode = true;&#13;
            presenter.showAnswersMode = true;&#13;
            var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
            $($myDiv).addClass('showAnswers');&#13;
            presenter.showAnswersCurrentTime = presenter.getCurrentTime();&#13;
            presenter.setShowAnswerTime(presenter.CorrectAnswer);&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(presenter.showAnswersMode === true){&#13;
            var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
            $($myDiv).removeClass('showAnswers');&#13;
            presenter.isErrorCheckingMode = false;&#13;
            presenter.showAnswersMode = false;&#13;
            presenter.setShowAnswerTime(presenter.showAnswersCurrentTime);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowAnswerTime = function(time) {&#13;
&#13;
        var newTime = presenter.getNewTime(time);&#13;
&#13;
        presenter.currentMinuteValue = parseInt(newTime[1], 10);&#13;
        presenter.currentHourValue = parseInt(newTime[0], 10)&#13;
            % presenter.TimeStandard;&#13;
        if (presenter.TimeStandard == 12 &amp;&amp; presenter.currentHourValue == 0) {&#13;
            presenter.currentHourValue = 12;&#13;
        }&#13;
        var h = 30 * ((parseInt(presenter.currentHourValue, 10) % 12) + parseInt(&#13;
            presenter.currentMinuteValue, 10) / 60);&#13;
        var m = 6 * parseInt(presenter.currentMinuteValue, 10);&#13;
&#13;
        presenter.currentHourAngle = h;&#13;
&#13;
        presenter.setAttr('h-hand', h);&#13;
        presenter.setAttr('m-hand', m);&#13;
&#13;
&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Coloring" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Image" name="Image" nameLabel="Coloring_property_image" type="image"/>
        <property displayName="Areas" name="Areas" nameLabel="Coloring_property_areas" type="text"/>
        <property displayName="Default Filling Color" name="DefaultFillingColor" nameLabel="Coloring_property_default_filling_color" type="string"/>
        <property displayName="Tolerance" name="Tolerance" nameLabel="Coloring_property_tolerance" type="string"/>
        <property displayName="Is Not Activity" name="isNotActivity" nameLabel="Coloring_property_is_not_activity" type="boolean"/>
        <property displayName="Is Disabled" name="isDisabled" nameLabel="Coloring_property_is_disabled" type="boolean"/>
        <property displayName="Disable fill on click" name="disableFill" nameLabel="Coloring_property_disable_fill" type="boolean"/>
        <property displayName="Color correct" name="colorCorrect" nameLabel="Coloring_property_color_correct" type="boolean"/>
    </model>
<css>.coloring-wrapper .coloring-container canvas {&#13;
    display: table;&#13;
    margin: auto;&#13;
}&#13;
&#13;
.coloring-wrapper {&#13;
    display: table;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    overflow: hidden;&#13;
    outline: none;&#13;
}&#13;
&#13;
.coloring-wrapper .coloring-container {&#13;
    display: table-cell;&#13;
    vertical-align: middle;&#13;
}&#13;
&#13;
.coloring-wrapper .coloring-container .icon-container {&#13;
    border: 1px solid #111111;&#13;
    border-radius: 50%;&#13;
    font-size: 10px;&#13;
    height: 8px;&#13;
    line-height: 6px;&#13;
    padding: 2px;&#13;
    position: absolute;&#13;
    width: 8px;&#13;
    font-weight: bold;&#13;
}&#13;
&#13;
.coloring-wrapper .coloring-container .icon-container.wrong {&#13;
    background-color: #ff5599;&#13;
}&#13;
&#13;
.coloring-wrapper .coloring-container .icon-container.correct {&#13;
    background-color: #55ff99;&#13;
}&#13;
&#13;
.coloring-wrapper .coloring-container .icon-container.correct:after {&#13;
    content: 'v';&#13;
}&#13;
&#13;
.coloring-wrapper .coloring-container .icon-container.wrong:after {&#13;
    content: 'x';&#13;
}&#13;
</css><view>&lt;div class="coloring-wrapper"&gt;&#13;
    &lt;div class="coloring-container"&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="coloring-wrapper"&gt;&#13;
    &lt;div class="coloring-container"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonColoring_create(){&#13;
    /*&#13;
        KNOWN ISSUES:&#13;
            Areas - property validation - backward compatibility:&#13;
                Co-ordinates X &amp; Y:&#13;
                    Due to invalid validation, those values can be negative numbers or non-numbers strings. The addon behavior is to&#13;
                    display image, pass the validation and just do nothing. Browser probably will throw a small stack trace with function's&#13;
                    referring to getImageData on canvas. You shouldn't broke this invalid validation due to backward compatibility&#13;
                Transparent color:&#13;
                    It's have been added with validation : only numbers between range 0-255, without inproper strings&#13;
&#13;
            Default Filling Color - backward compatibility:&#13;
                Empty string:&#13;
                    Default color is [255, 100, 100, 255], when provided string is just empty one.&#13;
&#13;
    * */&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.lastEvent = null;&#13;
    presenter.imageHasBeenLoaded = false;&#13;
&#13;
    presenter.AREA_TYPE = {&#13;
        NORMAL: 0,&#13;
        TRANSPARENT: 1,&#13;
        USER_AREA: 2&#13;
    };&#13;
&#13;
    function areaObject(x, y, type) {&#13;
        this.x = x;&#13;
        this.y = y;&#13;
        this.type = type;&#13;
        this.defaultColor;&#13;
        this.pixelPosition;&#13;
        this.colorToFill = [];&#13;
&#13;
        this.getColor = function () {&#13;
            return presenter.getColorAtPoint(this.x, this.y);&#13;
        };&#13;
&#13;
        this.setPixelPosition = function () {&#13;
            this.pixelPosition = ((this.x + this.y * presenter.canvasWidth) * 4);&#13;
        };&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    function setColorsThatCanBeFilled() {&#13;
        var configuration = presenter.configuration;&#13;
        configuration.colorsThatCanBeFilled = [];&#13;
        $.each(configuration.areas, function() {&#13;
            var color = presenter.getColorAtPoint(this.x, this.y);&#13;
            if (!presenter.isAlreadyInColorsThatCanBeFilled(color)) {&#13;
                configuration.colorsThatCanBeFilled.push(color);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
&#13;
        presenter.runEndedDeferred = new $.Deferred();&#13;
        presenter.runEnded = presenter.runEndedDeferred.promise();&#13;
&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function (item, value, score) {&#13;
        var score;&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(score)) {&#13;
            score = "";&#13;
        } else {&#13;
            score = score ? 1 : 0;&#13;
        }&#13;
&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': item.join(';'),&#13;
            'value': value.toString(),&#13;
            'score': score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(item, value, score) {&#13;
        if (!presenter.isShowAnswersActive &amp;&amp; !presenter.setShowErrorsModeActive) {&#13;
            var eventData = presenter.createEventData(item, value, score);&#13;
            presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
            if (presenter.isAllOK()) sendAllOKEvent();&#13;
        }&#13;
    };&#13;
&#13;
    function sendAllOKEvent() {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    function setAreasDefaultColors() {&#13;
        var configuration = presenter.configuration;&#13;
        $.each(configuration.areas, function() {&#13;
            this.defaultColor = presenter.getColorAtPoint(this.x, this.y);&#13;
        });&#13;
    }&#13;
&#13;
    function setAreasPixelPosition() {&#13;
        var configuration = presenter.configuration;&#13;
        $.each(configuration.areas, function() {&#13;
            this.pixelPosition = (this.x + this.y * presenter.canvasWidth) * 4;&#13;
        });&#13;
    }&#13;
&#13;
    function getClickedArea(clickObject) {&#13;
        var configuration = presenter.configuration;&#13;
        var clickedArea = new areaObject(clickObject.x, clickObject.y, presenter.AREA_TYPE.USER_AREA);&#13;
        clickedArea.setPixelPosition();&#13;
        clickedArea.colorToFill = [255, 255, 255, 255];&#13;
&#13;
        for(var i = 0; i &lt; configuration.areas.length; i++) {&#13;
            var area = configuration.areas[i];&#13;
&#13;
            if(isAreaColored(area)) {&#13;
                presenter.allColoredPixels = [];&#13;
                return area;&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.configuration.userAreas == undefined) {&#13;
            presenter.configuration.userAreas = [];&#13;
        }&#13;
&#13;
        if (!isUserAreaExists()) {&#13;
            presenter.configuration.userAreas.push(clickedArea);&#13;
        }&#13;
&#13;
        presenter.allColoredPixels = [];&#13;
        return clickedArea;&#13;
    }&#13;
&#13;
    function isUserAreaExists() {&#13;
        var userAreas = presenter.configuration.userAreas;&#13;
        for(var i = 0; i &lt; userAreas.length; i++) {&#13;
            if(isAreaColored(userAreas[i])) {&#13;
                return true;&#13;
            }&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    function isAreaColored(area) {&#13;
        return (presenter.allColoredPixels.indexOf(area.pixelPosition) != -1);&#13;
    }&#13;
&#13;
    presenter.clearArea = function (x, y, isRemovingWrongColor) {&#13;
        presenter.fillArea(x, y, '255 255 255 255', isRemovingWrongColor);&#13;
    };&#13;
&#13;
    presenter.fillArea = function (x, y, color, isRemovingWrongColor) {&#13;
        presenter.isColored = true;&#13;
&#13;
        presenter.click = {&#13;
            x: parseInt(x, 10),&#13;
            y: parseInt(y, 10)&#13;
        };&#13;
&#13;
        presenter.click.color = presenter.getColorAtPoint(presenter.click.x, presenter.click.y);&#13;
&#13;
        if (color == undefined) {&#13;
            presenter.fillColor = presenter.configuration.currentFillingColor;&#13;
        } else {&#13;
            var validatedDefaultFillingColor = presenter.validateColor(color);&#13;
            if (validatedDefaultFillingColor.isError) {&#13;
                DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.errorCodes, validatedDefaultFillingColor.errorCode);&#13;
                return;&#13;
            }&#13;
            presenter.fillColor = validatedDefaultFillingColor.value;&#13;
        }&#13;
&#13;
        if ( presenter.isAlreadyInColorsThatCanBeFilled(presenter.click.color) || isRemovingWrongColor) {&#13;
            if (!presenter.isShowAnswersActive &amp;&amp; !presenter.setShowErrorsModeActive) {&#13;
                presenter.floodFill(&#13;
                    presenter.click,&#13;
                    presenter.fillColor,&#13;
                    presenter.configuration.tolerance&#13;
                );&#13;
            }&#13;
&#13;
            if (!presenter.isAlreadyInColorsThatCanBeFilled(presenter.fillColor)) {&#13;
                presenter.configuration.colorsThatCanBeFilled.push(presenter.fillColor)&#13;
            }&#13;
        }&#13;
&#13;
        presenter.allColoredPixels = [];&#13;
    };&#13;
&#13;
    presenter.checkIfColoredCorrectly = function () {&#13;
        $.each(presenter.configuration.areas, function() {&#13;
            var area = this;&#13;
&#13;
            if(!presenter.shouldBeTakenIntoConsideration(area)) {&#13;
                return true; // continue&#13;
            }&#13;
&#13;
            if (!isCorrect(area)) {&#13;
                    var r = area.colorToFill[0],&#13;
                        g = area.colorToFill[1],&#13;
                        b = area.colorToFill[2],&#13;
                        a = area.colorToFill[3],&#13;
                        color = r + " " + g + " " + b + " " + a;&#13;
                if(r != -1){&#13;
                    presenter.fillArea(area.x, area.y, color, false);&#13;
                }else{&#13;
                    presenter.fillArea(area.x, area.y, '0 0 0 0', false);&#13;
                }&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.clickLogic = function(e, isTouch) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
&#13;
        presenter.isColored = true;&#13;
&#13;
        presenter.click = getMousePositionOnCanvas(e, isTouch);&#13;
&#13;
        presenter.click.color = presenter.getColorAtPoint(presenter.click.x, presenter.click.y);&#13;
&#13;
        if (presenter.configuration.disableFill) {&#13;
            presenter.sendEvent([presenter.click.x, presenter.click.y], '', '');&#13;
&#13;
            return false;&#13;
        }&#13;
&#13;
        if ( presenter.isAlreadyInColorsThatCanBeFilled(presenter.click.color) ) {&#13;
&#13;
            if (!presenter.isShowAnswersActive &amp;&amp; !presenter.setShowErrorsModeActive) {&#13;
                presenter.floodFill(&#13;
                    presenter.click,&#13;
                    presenter.configuration.currentFillingColor,&#13;
                    presenter.configuration.tolerance&#13;
                );&#13;
            }&#13;
&#13;
            if(!presenter.configuration.colorCorrect){&#13;
                presenter.userInteractionSendingEvent(getClickedArea(presenter.click));&#13;
            }&#13;
&#13;
            if (!presenter.isAlreadyInColorsThatCanBeFilled(presenter.configuration.currentFillingColor)) {&#13;
                presenter.configuration.colorsThatCanBeFilled.push(presenter.configuration.currentFillingColor)&#13;
            }&#13;
        }&#13;
        if(presenter.configuration.colorCorrect){&#13;
            presenter.checkIfColoredCorrectly();&#13;
            presenter.sendEvent([presenter.click.x, presenter.click.y], presenter.configuration.isErase ? 0 : 1, 1);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.userInteractionSendingEvent = function (clickedArea) {&#13;
        if (clickedArea.type == presenter.AREA_TYPE.USER_AREA) {&#13;
            presenter.sendEvent([clickedArea.x, clickedArea.y], presenter.configuration.isErase ? 0 : 1, "");&#13;
        } else {&#13;
            presenter.sendEvent([clickedArea.x, clickedArea.y], presenter.configuration.isErase ? 0 : 1, isCorrect(clickedArea) ? 1 : 0);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.recolorImage = function () {&#13;
        var imageData = presenter.ctx.getImageData(0, 0,presenter.canvasWidth, presenter.canvasHeight);&#13;
&#13;
        for (var i=0; i&lt;imageData.data.length; i+=4) {&#13;
            if (imageData.data[i]==0 &amp;&amp;&#13;
                imageData.data[i+1]==0 &amp;&amp;&#13;
                imageData.data[i+2]==0 &amp;&amp;&#13;
                imageData.data[i+3]==255&#13;
                ){&#13;
                imageData.data[i]=55;&#13;
                imageData.data[i+1]=55;&#13;
                imageData.data[i+2]=55;&#13;
                imageData.data[i+3]=255;&#13;
            }&#13;
        }&#13;
&#13;
        presenter.ctx.putImageData(imageData,0,0);&#13;
    };&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        presenter.allColoredPixels = [];&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage($(view), presenter.errorCodes, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        var imageElement = $('&lt;img&gt;');&#13;
        imageElement.attr('src', presenter.configuration.imageFile);&#13;
&#13;
        var canvasElement = $('&lt;canvas&gt;&lt;/canvas&gt;');&#13;
        presenter.ctx = canvasElement[0].getContext('2d');&#13;
&#13;
        imageElement.load(function() {&#13;
            canvasElement.attr('width', imageElement[0].width);&#13;
            canvasElement.attr('height', imageElement[0].height);&#13;
            presenter.canvasWidth = imageElement[0].width;&#13;
            presenter.canvasHeight = imageElement[0].height;&#13;
            presenter.canvas = canvasElement[0];&#13;
&#13;
            presenter.ctx.drawImage(imageElement[0], 0, 0);&#13;
            presenter.imageHasBeenLoaded = true;&#13;
&#13;
            presenter.imageData = presenter.ctx.getImageData(0, 0, imageElement[0].width, imageElement[0].height);&#13;
&#13;
            presenter.image = imageElement;&#13;
&#13;
            var coloringContainer = presenter.$view.find('.coloring-container');&#13;
&#13;
            coloringContainer.append(canvasElement);&#13;
&#13;
            presenter.canvasOffset = canvasElement.offset();&#13;
&#13;
            setColorsThatCanBeFilled();&#13;
            setAreasDefaultColors();&#13;
            setAreasPixelPosition();&#13;
&#13;
            if (isPreview) {&#13;
                var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
                    xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                    yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                    coloringWrapper = presenter.$view.find('.coloring-wrapper');&#13;
&#13;
                coordinatesContainer.css({&#13;
                    'width' : 60,&#13;
                    'height' : 25,&#13;
                    'border' : '1px solid #696969',&#13;
                    'borderRadius' : '3px',&#13;
                    'position' : 'absolute',&#13;
                    'top' : 5,&#13;
                    'left' : 5,&#13;
                    'fontSize' : '9px',&#13;
                    'padding': '5px',&#13;
                    'lineHeight' : '12px'&#13;
                });&#13;
&#13;
                coordinatesContainer&#13;
                    .append(xContainer)&#13;
                    .append(yContainer);&#13;
&#13;
                coloringWrapper.append(coordinatesContainer);&#13;
                coloringWrapper.css({&#13;
                    'position' : 'relative',&#13;
                    'minHeight' : presenter.canvasHeight,&#13;
                    'minWidth' : presenter.canvasWidth&#13;
                });&#13;
&#13;
                var moduleSelector = $('.moduleSelector[data-id="'+presenter.configuration.addonID+'"]');&#13;
&#13;
                moduleSelector.on('mousemove', function(e) {&#13;
                    xContainer.find('.value').html(getMousePositionOnCanvas(e).x);&#13;
                    yContainer.find('.value').html(getMousePositionOnCanvas(e).y);&#13;
                });&#13;
&#13;
                canvasElement.on('mousemove', function(e) {&#13;
                    xContainer.find('.value').html(getMousePositionOnCanvas(e).x);&#13;
                    yContainer.find('.value').html(getMousePositionOnCanvas(e).y);&#13;
                });&#13;
            } else if (!presenter.configuration.isDisabled) {&#13;
                canvasElement.on('click', function(e) {&#13;
                    presenter.clickLogic(e);&#13;
                });&#13;
&#13;
                canvasElement.on('touchstart', function (e){&#13;
                    presenter.lastEvent = e;&#13;
                });&#13;
&#13;
                canvasElement.on('touchend', function (e){&#13;
                    if ( presenter.lastEvent.type != e.type ) {&#13;
                        presenter.clickLogic(e, true);&#13;
                    }&#13;
                });&#13;
&#13;
                presenter.recolorImage();&#13;
                presenter.runEndedDeferred.resolve();&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.run = function(view, model){&#13;
        runLogic(view, model, false);&#13;
&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.isAlreadyInColorsThatCanBeFilled = function(color) {&#13;
        for (var i = 0; i &lt; presenter.configuration.colorsThatCanBeFilled.length; i++) {&#13;
            if (presenter.compareArrays(color, presenter.configuration.colorsThatCanBeFilled[i])) {&#13;
                return true;&#13;
            }&#13;
        }&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.compareArrays = function(array1, array2) {&#13;
        // if the other array is a falsy value, return&#13;
        if (!array2)&#13;
            return false;&#13;
&#13;
        // compare lengths - can save a lot of time&#13;
        if (array1.length != array2.length)&#13;
            return false;&#13;
&#13;
        for (var i = 0, l=array1.length; i &lt; l; i++) {&#13;
            if (array1[i] != array2[i] &amp;&amp; (array1[i]+1) != array2[i] &amp;&amp; (array1[i]-1) != array2[i]) {&#13;
                //Due to the lossy nature of converting to and from premultiplied alpha color values,&#13;
                // pixels that have just been set using putImageData() might be returned to an equivalent getImageData() as different values. http://www.w3.org/TR/2dcontext/#dom-context-2d-getimagedata&#13;
                // Warning - two different object instances will never be equal: {x:20} != {x:20}&#13;
                return false;&#13;
            }&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.getColorAtPoint = function(x, y) {&#13;
        var data = presenter.ctx.getImageData(x, y, 1, 1).data,&#13;
            color = [];&#13;
        for (var i = 0; i &lt; data.length; i++) {&#13;
            color.push(data[i]);&#13;
        }&#13;
        return color;&#13;
    };&#13;
&#13;
    function fixTouch (touch) {&#13;
        var winPageX = window.pageXOffset,&#13;
            winPageY = window.pageYOffset,&#13;
            x = touch.clientX,&#13;
            y = touch.clientY;&#13;
&#13;
        if (touch.pageY === 0 &amp;&amp; Math.floor(y) &gt; Math.floor(touch.pageY) ||&#13;
            touch.pageX === 0 &amp;&amp; Math.floor(x) &gt; Math.floor(touch.pageX)) {&#13;
            // iOS4 clientX/clientY have the value that should have been&#13;
            // in pageX/pageY. While pageX/page/ have the value 0&#13;
            x = x - winPageX;&#13;
            y = y - winPageY;&#13;
        } else if (y &lt; (touch.pageY - winPageY) || x &lt; (touch.pageX - winPageX) ) {&#13;
            // Some Android browsers have totally bogus values for clientX/Y&#13;
            // when scrolling/zooming a page. Detectable since clientX/clientY&#13;
            // should never be smaller than pageX/pageY minus page scroll&#13;
            x = touch.pageX - winPageX;&#13;
            y = touch.pageY - winPageY;&#13;
        }&#13;
&#13;
        return {&#13;
            x: x,&#13;
            y: y&#13;
        };&#13;
    }&#13;
&#13;
    function getMousePositionOnCanvas(e, isTouch) {&#13;
        var rect = presenter.canvas.getBoundingClientRect(),&#13;
            client = {&#13;
                x: e.clientX,&#13;
                y: e.clientY&#13;
            };&#13;
&#13;
        if (isTouch) {&#13;
            client = fixTouch(event.touches[0] || event.changedTouches[0]);&#13;
        }&#13;
&#13;
        return {&#13;
            x: parseInt(client.x - rect.left, 10),&#13;
            y: parseInt(client.y - rect.top, 10)&#13;
        };&#13;
    }&#13;
&#13;
    presenter.errorCodes = {&#13;
        'E01': 'Wrong color notation. Must be in "r g b a" format. See documentation for more details.',&#13;
        'E02': 'All color values must be between 0 - 255.',&#13;
        'E03': 'Areas are configured wrong. It should be in "x; y; color" format. See documentation for more details.',&#13;
        'A01': "Areas x &amp; y values have to be integer values between 0 - 255."&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedAreas = {&#13;
            items: []&#13;
        };&#13;
&#13;
        if (model['Areas'].toString().length &gt; 0) {&#13;
            validatedAreas = presenter.validateAreas(model['Areas']);&#13;
            if (validatedAreas.isError) {&#13;
                return { isError: true, errorCode: validatedAreas.errorCode};&#13;
            }&#13;
        }&#13;
&#13;
        var validatedTolerance = {};&#13;
        if (model['Tolerance'].toString().length === 0) {&#13;
            validatedTolerance.value = 50;&#13;
        } else {&#13;
            validatedTolerance = ModelValidationUtils.validateIntegerInRange(model['Tolerance'], 100, 0);&#13;
            if (validatedTolerance.isError) {&#13;
                return { isError: true, errorCode: validatedTolerance.errorCode};&#13;
            }&#13;
        }&#13;
&#13;
        var validatedDefaultFillingColor = {};&#13;
        if (model['DefaultFillingColor'].toString().length === 0) {&#13;
&#13;
            validatedDefaultFillingColor.value = [255, 100, 100, 255];&#13;
&#13;
        } else {&#13;
&#13;
            validatedDefaultFillingColor = presenter.validateColor(model['DefaultFillingColor']);&#13;
            if (validatedDefaultFillingColor.isError) {&#13;
                return { isError: true, errorCode: validatedDefaultFillingColor.errorCode};&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        var validatedIsVisible = ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            validatedIsDisabled = ModelValidationUtils.validateBoolean(model['isDisabled']);&#13;
&#13;
        return {&#13;
            'isValid': true,&#13;
            'isError': false,&#13;
            'addonID' : model['ID'],&#13;
&#13;
            'imageFile': model.Image,&#13;
            'areas' : validatedAreas.items,&#13;
            'tolerance' : validatedTolerance.value,&#13;
            'currentFillingColor' : validatedDefaultFillingColor.value,&#13;
            'defaultFillingColor' : validatedDefaultFillingColor.value,&#13;
            'isErase' : false,&#13;
            'isVisible' : validatedIsVisible,&#13;
            'isVisibleByDefault' : validatedIsVisible,&#13;
            'isDisabled' : validatedIsDisabled,&#13;
            'isDisabledByDefault' : validatedIsDisabled,&#13;
            'isActivity' : !(ModelValidationUtils.validateBoolean(model['isNotActivity'])),&#13;
            'lastUsedColor' : validatedDefaultFillingColor.value,&#13;
            'disableFill' : ModelValidationUtils.validateBoolean(model['disableFill']),&#13;
            'colorCorrect' : ModelValidationUtils.validateBoolean(model.colorCorrect)&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorObject = function (errorCode) {&#13;
        return {isValid: false, isError: true, errorCode: errorCode};&#13;
    };&#13;
&#13;
    presenter.parseTransparentArea = function (splitedAreaArray) {&#13;
        var area = {&#13;
            x: parseInt(Number(splitedAreaArray[0])),&#13;
            y: parseInt(Number(splitedAreaArray[1])),&#13;
            type: presenter.AREA_TYPE.TRANSPARENT,&#13;
            colorToFill: [-1, -1, -1, -1]&#13;
        };&#13;
&#13;
        if (isNaN(area.x) || isNaN(area.y)) {&#13;
            return presenter.getErrorObject("A01");&#13;
        }&#13;
&#13;
        if (area.x &lt; 0 || area.y &lt; 0) {&#13;
            return presenter.getErrorObject("A01");&#13;
        }&#13;
&#13;
        area.isError = false;&#13;
&#13;
        return area;&#13;
    };&#13;
&#13;
    presenter.isTransparent = function (value) {&#13;
        if (value.length == 3) {&#13;
            return value[2] == "transparent";&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.validateAreas = function(areasText) {&#13;
        var areas = Helpers.splitLines(areasText).map(function (element) {&#13;
           return element.split(';');&#13;
        }).map(function (element) {&#13;
&#13;
            if (element.length == 3) {&#13;
                var trimmedArray = element.map(function (value) {return value.trim();});&#13;
&#13;
                if (presenter.isTransparent(trimmedArray)) {&#13;
                    return presenter.parseTransparentArea(trimmedArray);&#13;
                } else {&#13;
                    var area = {&#13;
                        x: parseInt(trimmedArray[0], 10),&#13;
                        y: parseInt(trimmedArray[1], 10),&#13;
                        type: presenter.AREA_TYPE.NORMAL&#13;
                    };&#13;
&#13;
&#13;
                    var validatedColor = presenter.validateColor(trimmedArray[2]);&#13;
                    if(!validatedColor.isError) {&#13;
                      area.colorToFill = validatedColor.value;&#13;
                      area.isError = false;&#13;
                      return area;&#13;
                    }&#13;
                }&#13;
&#13;
                return {isValid: false, isError: true, errorCode: validatedColor.errorCode};&#13;
            }&#13;
&#13;
            return {isValid: false, isError: true, errorCode: 'E03'};&#13;
        });&#13;
&#13;
        var errors = areas.filter(function (element) {if (element.isError) return element;});&#13;
        if (errors.length &gt; 0) {&#13;
            return errors[0];&#13;
        }&#13;
&#13;
        return {isValid: true, isError: false, items: areas};&#13;
    };&#13;
&#13;
    presenter.validateColor = function(spaceSeparatedColor) {&#13;
        var splitted = spaceSeparatedColor.split(' '),&#13;
            validatedColors = [];&#13;
&#13;
        if (splitted.length &lt; 4) {&#13;
            return {isError: true, errorCode: 'E01'};&#13;
        }&#13;
&#13;
        var areAllValuesInRange = true;&#13;
        $.each(splitted, function() {&#13;
&#13;
            var validated = ModelValidationUtils.validateIntegerInRange(this, 255, 0);&#13;
            if (!validated.isValid) {&#13;
                areAllValuesInRange = false;&#13;
                return;&#13;
            }&#13;
            validatedColors.push(validated.value);&#13;
        });&#13;
&#13;
        if (!areAllValuesInRange) {&#13;
            return { isError: true, errorCode: 'E02'};&#13;
        }&#13;
&#13;
        return { value: validatedColors, isError: false};&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        presenter.configuration.isDisabled = true;&#13;
        $(presenter.canvas).off('click touchstart touchend');&#13;
        $(presenter.canvas).on('click touchstart touchend', function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        presenter.configuration.isDisabled = false;&#13;
        $(presenter.canvas).off('click');&#13;
        $(presenter.canvas).on('click', function(e){&#13;
            presenter.clickLogic(e);&#13;
        });&#13;
&#13;
        $(presenter.canvas).off('touchstart');&#13;
        $(presenter.canvas).on('touchstart', function (e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
&#13;
            presenter.lastEvent = e;&#13;
        });&#13;
&#13;
        $(presenter.canvas).off('touchend');&#13;
        $(presenter.canvas).on('touchend', function (e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
&#13;
            if ( presenter.lastEvent.type != e.type ) {&#13;
                presenter.clickLogic(e, true);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getView = function() {&#13;
        return presenter.$view;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function() {&#13;
        var actualScore = presenter.getScore();&#13;
&#13;
        if (presenter.configuration.transparentAreaError) {&#13;
            return false;&#13;
        }&#13;
&#13;
        return actualScore === presenter.getMaxScore();&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return presenter.isColored || false;&#13;
    };&#13;
&#13;
    presenter.getColor = function(x, y) {&#13;
        if (x === undefined || y === undefined) return;&#13;
&#13;
        return presenter.getColorAtPoint(x, y).join(' ');&#13;
    };&#13;
&#13;
    presenter.removeWrongColors = function () {&#13;
        $.each(presenter.configuration.areas, function() {&#13;
            var area = this;&#13;
&#13;
            if(!presenter.shouldBeTakenIntoConsideration(area)) {&#13;
                return true; // continue&#13;
            }&#13;
&#13;
            if (!isCorrect(area)) {&#13;
                presenter.clearArea(area.x, area.y, true);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'disable' : presenter.disable,&#13;
            'enable' : presenter.enable,&#13;
            'isAllOK' : presenter.isAllOK,&#13;
            'getView' : presenter.getView,&#13;
            'setColor' : presenter.setColorCommand,&#13;
            'setEraserOn' : presenter.setEraserOn,&#13;
            'isAttempted' : presenter.isAttempted,&#13;
            'showAnswers' : presenter.showAnswers,&#13;
            'hideAnswers' : presenter.hideAnswers,&#13;
            'fillArea' : presenter.fillAreaCommand,&#13;
            'clearArea' : presenter.clearAreaCommand,&#13;
            'getColor' : presenter.getColor,&#13;
            'removeWrongColors': presenter.removeWrongColors&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setEraserOn = function() {&#13;
        presenter.configuration.isErase = true;&#13;
        presenter.configuration.lastUsedColor = presenter.configuration.currentFillingColor;&#13;
        presenter.configuration.currentFillingColor = [255, 255, 255, 255];&#13;
    };&#13;
&#13;
    presenter.clearAreaCommand = function (coordinates){&#13;
        presenter.clearArea(coordinates[0], coordinates[1], false);&#13;
    };&#13;
&#13;
    presenter.fillAreaCommand = function(coordinatesAndColor) {&#13;
        presenter.fillArea(coordinatesAndColor[0], coordinatesAndColor[1], coordinatesAndColor[2], false);&#13;
    };&#13;
&#13;
    presenter.setColorCommand = function(color) {&#13;
        presenter.setColor(color[0]);&#13;
    };&#13;
&#13;
    presenter.setColor = function(color) {&#13;
        var validatedDefaultFillingColor = presenter.validateColor(color);&#13;
        if (validatedDefaultFillingColor.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.errorCodes, validatedDefaultFillingColor.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration.currentFillingColor = validatedDefaultFillingColor.value;&#13;
        presenter.configuration.isErase = false;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (presenter.configuration.isActivity) {&#13;
            $.each(presenter.configuration.areas, function() {&#13;
                var area = this;&#13;
&#13;
                if(!presenter.shouldBeTakenIntoConsideration(area)) {&#13;
                    return true; // continue&#13;
                }&#13;
&#13;
                if (isCorrect(area)) {&#13;
                    displayIcon(area, false);&#13;
                } else {&#13;
                    displayIcon(area, true);&#13;
                }&#13;
            });&#13;
        }&#13;
        presenter.setShowErrorsModeActive = true;&#13;
    };&#13;
&#13;
    function displayIcon(area, isWrong) {&#13;
        var iconContainer = $('&lt;div class="icon-container"&gt;&lt;/div&gt;'),&#13;
            container = presenter.$view.find('.coloring-container'),&#13;
            containerWidth = container.width(),&#13;
            canvasWidth = $(presenter.canvas).width(),&#13;
            leftDistance = (containerWidth-canvasWidth)/ 2,&#13;
            position = $(presenter.canvas).position(),&#13;
            top = area.y + position.top - 5, // -5 because it's half of the icon container width and height&#13;
            left = area.x + leftDistance - 5;&#13;
&#13;
        iconContainer.css({&#13;
            top: top + 'px',&#13;
            left: left + 'px'&#13;
        });&#13;
&#13;
        iconContainer.addClass(isWrong ? 'wrong' : 'correct');&#13;
&#13;
        container.append(iconContainer);&#13;
    }&#13;
&#13;
    presenter.setWorkMode = function(){&#13;
        presenter.$view.find('.icon-container').remove();&#13;
        presenter.setShowErrorsModeActive = false;&#13;
    };&#13;
&#13;
    presenter.clearCanvas = function() {&#13;
        presenter.ctx.clearRect(0, 0, presenter.canvasWidth, presenter.canvasHeight);&#13;
        presenter.ctx.drawImage(presenter.image[0], 0, 0);&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        presenter.clearCanvas();&#13;
        presenter.$view.find('.icon-container').remove();&#13;
        presenter.isColored = false;&#13;
        presenter.isShowAnswersActive = false;&#13;
        presenter.setShowErrorsModeActive = false;&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
&#13;
        presenter.configuration.isDisabled = presenter.configuration.isDisabledByDefault;&#13;
        presenter.configuration.isDisabledByDefault ? presenter.disable() : presenter.enable();&#13;
&#13;
        if (presenter.configuration.isErase) {&#13;
            presenter.configuration.currentFillingColor = presenter.configuration.lastUsedColor;&#13;
            presenter.configuration.isErase = false;&#13;
        } else {&#13;
            presenter.configuration.currentFillingColor = presenter.configuration.defaultFillingColor;&#13;
        }&#13;
&#13;
        setColorsThatCanBeFilled();&#13;
        presenter.recolorImage();&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            return presenter.currentErrorCount;&#13;
        }&#13;
&#13;
        if (presenter.configuration.isActivity &amp;&amp; presenter.imageHasBeenLoaded) {&#13;
            var errorsCount = 0;&#13;
            $.each(presenter.configuration.areas, function() {&#13;
                var area = this;&#13;
&#13;
                if (!presenter.shouldBeTakenIntoConsideration(area)) {&#13;
                    return true; // continue&#13;
                }&#13;
&#13;
                if (!isCorrect(area)) {&#13;
                    errorsCount++;&#13;
                }&#13;
            });&#13;
            return errorsCount;&#13;
        } else if (presenter.configuration.isActivity &amp;&amp; presenter.savedErrorCount) {&#13;
            return 0;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    function isCorrect(area) {&#13;
        return presenter.compareArrays(presenter.getColorAtPoint(area.x, area.y), area.colorToFill);&#13;
    }&#13;
&#13;
    presenter.shouldBeTakenIntoConsideration = function(area) {&#13;
        return !presenter.compareArrays(presenter.getColorAtPoint(area.x, area.y), area.defaultColor);&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function(){&#13;
        if (presenter.configuration.isActivity) {&#13;
            var normalAreas = presenter.configuration.areas.filter(function (element) {&#13;
                   return (element.type == presenter.AREA_TYPE.NORMAL);&#13;
            });&#13;
&#13;
            return normalAreas.length;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getScoreForNormalArea = function (area) {&#13;
        if (!presenter.shouldBeTakenIntoConsideration(area)) {&#13;
            return 0; // continue&#13;
        }&#13;
&#13;
        if (isCorrect(area)) {&#13;
            return 1;&#13;
        }&#13;
&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScoreForTransparentArea = function (area) {&#13;
&#13;
        if(!presenter.compareArrays(presenter.getColorAtPoint(area.x, area.y), area.defaultColor)) {&#13;
            presenter.configuration.transparentAreaError = true;&#13;
        }&#13;
&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            return presenter.currentScore;&#13;
        }&#13;
&#13;
        if (presenter.configuration.isActivity &amp;&amp; presenter.imageHasBeenLoaded) {&#13;
            var scoreCount = 0;&#13;
            presenter.configuration.transparentAreaError = false;&#13;
            $.each(presenter.configuration.areas, function() {&#13;
                switch(this.type) {&#13;
                    case presenter.AREA_TYPE.NORMAL:&#13;
                        scoreCount += presenter.getScoreForNormalArea(this);&#13;
                        break;&#13;
                    case presenter.AREA_TYPE.TRANSPARENT:&#13;
                        scoreCount += presenter.getScoreForTransparentArea(this);&#13;
                        break;&#13;
                }&#13;
            });&#13;
&#13;
            return scoreCount;&#13;
        } else if (presenter.configuration.isActivity &amp;&amp; presenter.savedScore) {&#13;
            return 0;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var filledAreas = [];&#13;
        $.each(presenter.configuration.areas, function() {&#13;
            if (presenter.shouldBeTakenIntoConsideration(this)) {&#13;
                filledAreas.push({&#13;
                    area: this,&#13;
                    color: presenter.getColorAtPoint(this.x, this.y)&#13;
                });&#13;
            }&#13;
        });&#13;
&#13;
        var userAreas = [];&#13;
        if (presenter.configuration.userAreas != undefined) {&#13;
            userAreas = presenter.configuration.userAreas.map(function (elem) {&#13;
                return {&#13;
                    area: {x: elem.x, y: elem.y, type: elem.type, pixelPosition: elem.pixelPosition, colorToFill: elem.colorToFill},&#13;
                    color: elem.getColor()};&#13;
            });&#13;
        }&#13;
&#13;
&#13;
        var state = {&#13;
            filledAreas: filledAreas,&#13;
            currentFillingColor: presenter.configuration.currentFillingColor,&#13;
            isErase: presenter.configuration.isErase,&#13;
            colorsThatCanBeFilled: presenter.configuration.colorsThatCanBeFilled,&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            isDisabled: presenter.configuration.isDisabled,&#13;
            isColored: presenter.isColored,&#13;
            score: presenter.getScore(),&#13;
            errorCount: presenter.getErrorCount(),&#13;
            userAreas: userAreas&#13;
        };&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.upgradeState = function(state) {&#13;
&#13;
        if (state.userAreas == undefined) {&#13;
            return presenter.upgradeUserAreas(state);&#13;
        }&#13;
&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.upgradeUserAreas = function(state) {&#13;
        var upgradedState = {};&#13;
        jQuery.extend(true, upgradedState, state); // Deep copy of model object&#13;
&#13;
        if(state.userAreas == undefined) {&#13;
            upgradedState["userAreas"] = [];&#13;
        }&#13;
&#13;
        return upgradedState;&#13;
    };&#13;
&#13;
    presenter.restoreUserAreasFromState = function (state) {&#13;
        presenter.configuration.userAreas = [];&#13;
&#13;
        $.each(state.userAreas, function() {&#13;
            var userArea = new areaObject(this.area.x, this.area.y, this.area.type);&#13;
            userArea.pixelPosition = this.area.pixelPosition;&#13;
            userArea.colorToFill = this.area.colorToFill;&#13;
&#13;
            presenter.configuration.userAreas.push(userArea);&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.getAreasToFillFromSetState = function (state) {&#13;
        var filledAreasArray = state.filledAreas;&#13;
        filledAreasArray = filledAreasArray.concat(state.userAreas);&#13;
&#13;
        return filledAreasArray&#13;
    };&#13;
&#13;
    presenter.setCurrentFillingColorInSetState = function (state) {&#13;
        if (presenter.configuration.isErase) {&#13;
            presenter.configuration.currentFillingColor = [255, 255, 255, 255];&#13;
        } else {&#13;
            presenter.configuration.currentFillingColor = state.currentFillingColor;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
        if (ModelValidationUtils.isStringEmpty(state)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsed = JSON.parse(state);&#13;
        var upgradedState = presenter.upgradeState(parsed);&#13;
&#13;
        presenter.configuration.isErase = upgradedState.isErase;&#13;
        presenter.configuration.isVisible = upgradedState.isVisible;&#13;
        presenter.configuration.isDisabled = upgradedState.isDisabled;&#13;
        presenter.isColored = upgradedState.isColored;&#13;
        presenter.savedScore = upgradedState.score;&#13;
        presenter.savedErrorCount = upgradedState.errorCount;&#13;
&#13;
        presenter.setCurrentFillingColorInSetState(upgradedState);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        presenter.restoreUserAreasFromState(upgradedState);&#13;
&#13;
        var areasToFill = presenter.getAreasToFillFromSetState(upgradedState);&#13;
&#13;
        presenter.restoreColoringAtState(areasToFill, upgradedState)&#13;
    };&#13;
&#13;
    presenter.restoreColoringAtState = function (filledAreasArray, state) {&#13;
        presenter.runEnded.then(function() {&#13;
            presenter.configuration.colorsThatCanBeFilled = state.colorsThatCanBeFilled;&#13;
            $.each(filledAreasArray, presenter.restoreFilledArea);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.restoreFilledArea = function (_, areaToFillObject) {&#13;
        presenter.floodFill({&#13;
            x: areaToFillObject.area.x,&#13;
            y: areaToFillObject.area.y,&#13;
            color: [255, 255, 255, 255]&#13;
        },&#13;
&#13;
        areaToFillObject.color,&#13;
        presenter.configuration.tolerance);&#13;
        presenter.allColoredPixels = [];&#13;
    };&#13;
&#13;
    presenter.floodFill = function (position, fillColor, tolerance) {&#13;
        var img = presenter.ctx.getImageData(0, 0, presenter.canvasWidth, presenter.canvasHeight),&#13;
            surface = img.data,&#13;
            length = surface.length,&#13;
            queue = [],&#13;
            x = position.x,&#13;
            y = position.y,&#13;
            targetColor = position.color,&#13;
            startingPixel = (x + y * presenter.canvasWidth) * 4,&#13;
            east = startingPixel, west = startingPixel, rightBound, leftBound, leftEdge = presenter.canvasWidth * 4;&#13;
&#13;
        if(!pixelCompare(startingPixel, targetColor, fillColor, surface, length, tolerance).canFill) { return false; }&#13;
&#13;
        queue.push(startingPixel);&#13;
&#13;
        while(queue.length) {&#13;
            startingPixel = queue.pop();&#13;
&#13;
            if(pixelCompareAndSet(startingPixel, targetColor, fillColor, surface, length, tolerance)) {&#13;
                east = startingPixel;&#13;
                west = startingPixel;&#13;
                leftBound = parseInt(startingPixel / leftEdge) * leftEdge; //left bound&#13;
                rightBound = leftBound + leftEdge;	//right bound&#13;
                while(leftBound &lt; (west -= 4) &amp;&amp; pixelCompareAndSet(west, targetColor, fillColor, surface, length, tolerance)); //go left until edge hit&#13;
&#13;
                while(rightBound &gt; (east += 4) &amp;&amp; pixelCompareAndSet(east, targetColor, fillColor, surface, length, tolerance)); //go right until edge hit&#13;
&#13;
                for(var j = west; j &lt; east; j += 4) {&#13;
                    if(j - leftEdge &gt;= 0 		&amp;&amp; pixelCompare(j - leftEdge, targetColor, fillColor, surface, length, tolerance).canFill) queue.push(j - leftEdge);&#13;
                    if(j + leftEdge &lt; length	&amp;&amp; pixelCompare(j + leftEdge, targetColor, fillColor, surface, length, tolerance).canFill) queue.push(j + leftEdge);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.ctx.putImageData(img, 0, 0);&#13;
    };&#13;
&#13;
    function pixelCompare(i, targetColor, fillColor, surface, length, tolerance) {&#13;
        if (i &lt; 0 || i &gt;= length) { // out of bounds&#13;
&#13;
            return {&#13;
                canFill: false,&#13;
                withinTolerance: false&#13;
            };&#13;
        }&#13;
        if (surface[i + 3] === 0) { //surface is invisible&#13;
&#13;
            return {&#13;
                canFill: false,&#13;
                withinTolerance: false&#13;
            };&#13;
        }&#13;
&#13;
        if (targetColor[3] === fillColor[3] &amp;&amp; //target is same as fill&#13;
            targetColor[0] === fillColor[0] &amp;&amp;&#13;
            targetColor[1] === fillColor[1] &amp;&amp;&#13;
            targetColor[2] === fillColor[2]) {&#13;
&#13;
            return {&#13;
                canFill: false,&#13;
                withinTolerance: false&#13;
            };&#13;
        }&#13;
&#13;
        if (fillColor[3] === surface[i+3] &amp;&amp; // surface matches fillColor&#13;
            fillColor[0] === surface[i]  &amp;&amp;&#13;
            fillColor[1] === surface[i+1] &amp;&amp;&#13;
            fillColor[2] === surface[i+2]) {&#13;
&#13;
            return {&#13;
                canFill: false,&#13;
                withinTolerance: false&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        if (targetColor[3] === surface[i + 3] &amp;&amp; //target matches surface&#13;
            targetColor[0] === surface[i]  &amp;&amp;&#13;
            targetColor[1] === surface[i + 1] &amp;&amp;&#13;
            targetColor[2] === surface[i + 2]) {&#13;
&#13;
            return {&#13;
                canFill: true,&#13;
                withinTolerance: false&#13;
            };&#13;
        }&#13;
&#13;
        if (Math.abs(targetColor[3] - surface[i + 3]) &lt;= (255 - tolerance) &amp;&amp; //target to surface within tolerance&#13;
            Math.abs(targetColor[0] - surface[i]) &lt;= tolerance &amp;&amp;&#13;
            Math.abs(targetColor[1] - surface[i + 1]) &lt;= tolerance &amp;&amp;&#13;
            Math.abs(targetColor[2] - surface[i + 2]) &lt;= tolerance) {&#13;
&#13;
            return {&#13;
                canFill: true,&#13;
                withinTolerance: true&#13;
            };&#13;
&#13;
        }&#13;
&#13;
        return {&#13;
            canFill: false,&#13;
            withinTolerance: false&#13;
        }; //no match&#13;
    }&#13;
&#13;
    function pixelCompareAndSet(i, targetColor, fillColor, surface, length, tolerance) {&#13;
        var compareResult = pixelCompare(i, targetColor, fillColor, surface, length, tolerance);&#13;
&#13;
        if (compareResult.canFill) {&#13;
            for(var j = i; j &lt; i + 4; j++) {&#13;
                presenter.allColoredPixels.push(j);&#13;
            }&#13;
            //fill the color&#13;
            surface[i]     = fillColor[0];&#13;
            surface[i + 1] = fillColor[1];&#13;
            surface[i + 2] = fillColor[2];&#13;
            surface[i + 3] = fillColor[3];&#13;
&#13;
            return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (!presenter.configuration.isActivity) {&#13;
            return;&#13;
        }&#13;
        presenter.setShowErrorsModeActive = false;&#13;
&#13;
        presenter.$view.find('.icon-container').remove();&#13;
        presenter.currentScore = presenter.getScore();&#13;
        presenter.currentErrorCount = presenter.getErrorCount();&#13;
&#13;
        presenter.tmpFilledAreas = [];&#13;
        $.each(presenter.configuration.areas, function() {&#13;
            if (presenter.shouldBeTakenIntoConsideration(this)) {&#13;
                presenter.tmpFilledAreas.push({&#13;
                    area: this,&#13;
                    color: presenter.getColorAtPoint(this.x, this.y)&#13;
                });&#13;
            }&#13;
&#13;
        });&#13;
&#13;
        if (presenter.configuration.userAreas) {&#13;
            for (var i = 0; i &lt; presenter.configuration.userAreas.length; i++) {&#13;
                var area = presenter.configuration.userAreas[i];&#13;
                presenter.tmpFilledAreas.push({area: area, color: area.getColor()});&#13;
            }&#13;
        }&#13;
&#13;
        presenter.clearCanvas();&#13;
        presenter.recolorImage();&#13;
&#13;
        var areas = presenter.configuration.areas;&#13;
        for (var i=0; i&lt; areas.length; i++) {&#13;
            presenter.floodFill({&#13;
                    x: areas[i].x,&#13;
                    y: areas[i].y,&#13;
                    color: [255, 255, 255, 255]&#13;
                },&#13;
                [areas[i].colorToFill[0], areas[i].colorToFill[1], areas[i].colorToFill[2], areas[i].colorToFill[3]],&#13;
                presenter.configuration.tolerance);&#13;
&#13;
            presenter.allColoredPixels = [];&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (!presenter.configuration.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.clearCanvas();&#13;
        presenter.recolorImage();&#13;
        $.each(presenter.tmpFilledAreas, function() {&#13;
            presenter.floodFill({&#13;
                    x: this.area.x,&#13;
                    y: this.area.y,&#13;
                    color: [255, 255, 255, 255]&#13;
                },&#13;
                this.color,&#13;
                presenter.configuration.tolerance);&#13;
&#13;
            presenter.allColoredPixels = [];&#13;
        });&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Completion_Progress" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="Turn off automatic counting" nameLabel="Completion_Progress_property_turn_off_automatic_counting" type="boolean"/>
    </model>
<css>.addon_Completion_Progress {&#13;
    padding: 2px;&#13;
    width: 130px;&#13;
    height: 25px;&#13;
    border-radius: 5px;&#13;
    border: 2px solid black;&#13;
}&#13;
&#13;
.addon_Completion_Progress .progress-bar {&#13;
    background-color: #FA8805;&#13;
    border-radius: 5px;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.addon_Completion_Progress .progress-text {&#13;
    color: #000000;&#13;
    font-size: 18px;&#13;
    position: absolute;&#13;
    width: 10%;&#13;
    left: 45%;&#13;
    height: 50%;&#13;
    top: 25%;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="progress-bar" style="width: 0;"&gt;&lt;/div&gt;&#13;
&lt;div class="progress-text"&gt;0%&lt;/div&gt;&#13;
</view><preview>&lt;div class="progress-bar" style="width: 45%;"&gt;&lt;/div&gt;&#13;
&lt;div class="progress-text"&gt;45%&lt;/div&gt;&#13;
</preview><presenter>function AddonCompletion_Progress_create() {&#13;
    var presenter = function () { };&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.currentProgress = 0;&#13;
    presenter.modules = [];&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
        eventBus = controller.getEventBus();&#13;
        eventBus.addEventListener('PageLoaded', this);&#13;
&#13;
        presenter.page = controller.getPresentation().getPage(controller.getCurrentPageIndex());&#13;
    };&#13;
&#13;
    presenter.updateProgress = function () {&#13;
        if (presenter.modules.length == 0) {&#13;
            presenter.currentProgress = 0;&#13;
        } else {&#13;
            var attemptedCount = 0;&#13;
&#13;
            for (var i = 0; i &lt; presenter.modules.length; i++) {&#13;
                if (presenter.modules[i].isAttempted()) {&#13;
                    attemptedCount++;&#13;
                }&#13;
            }&#13;
&#13;
            presenter.currentProgress = Math.floor((attemptedCount / presenter.modules.length) * 100);&#13;
        }&#13;
&#13;
        presenter.updateProgressUI(presenter.currentProgress);&#13;
    };&#13;
&#13;
    presenter.loadModules = function () {&#13;
        if (!presenter.page.isReportable()) {&#13;
            return;&#13;
        }&#13;
&#13;
        var modules = presenter.page.getModulesAsJS(),&#13;
            module, loadedModules = [];&#13;
&#13;
        for (var i = 0; i &lt; modules.length; i++) {&#13;
            module = playerController.getModule(modules[i]);&#13;
&#13;
            if (module &amp;&amp; module.isAttempted !== undefined) {&#13;
                loadedModules.push(module);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.modules = loadedModules;&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        return {&#13;
            automaticCounting: !ModelValidationUtils.validateBoolean(model['Turn off automatic counting']),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible'])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
&#13;
            presenter.$view = $(view);&#13;
            presenter.model = model;&#13;
            presenter.configuration = presenter.validateModel(model);&#13;
&#13;
            presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
            if (!isPreview &amp;&amp; presenter.configuration.automaticCounting) {&#13;
                eventBus.addEventListener('ValueChanged', this);&#13;
                presenter.pageLoaded.then(function() {&#13;
                    presenter.loadModules();&#13;
                    presenter.updateProgress();&#13;
                });&#13;
            }&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ValueChanged") {&#13;
            presenter.updateProgress();&#13;
        }&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            currentProgress: presenter.currentProgress&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
       if (!state) return;&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        presenter.currentProgress = parsedState.currentProgress;&#13;
        presenter.updateProgressUI(presenter.currentProgress);&#13;
    };&#13;
    &#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'setProgress': presenter.setProgressCommand,&#13;
            'getProgress': presenter.getProgress&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.updateProgressUI = function (progress) {&#13;
        presenter.$view.find('.progress-bar').css('width', progress + '%');&#13;
        presenter.$view.find('.progress-text').text(progress + '%');&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.currentProgress = 0;&#13;
&#13;
        presenter.updateProgressUI(0);&#13;
    };&#13;
&#13;
    presenter.getProgress = function () {&#13;
        return presenter.currentProgress;&#13;
    };&#13;
&#13;
    presenter.setProgress = function (progress) {&#13;
        var validatedProgress = ModelValidationUtils.validateIntegerInRange(progress, 100);&#13;
&#13;
        if (!validatedProgress.isValid) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.currentProgress = validatedProgress.value;&#13;
        presenter.updateProgressUI(presenter.currentProgress);&#13;
    };&#13;
&#13;
    presenter.setProgressCommand = function (params) {&#13;
        presenter.setProgress(params[0]);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ConnectingDots" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property displayName="Dots' coordinates" name="Dots" nameLabel="ConnectingDots_property_dots" type="text"/>
		<property displayName="Dots' indexes" name="Indexes" nameLabel="ConnectingDots_property_indexes" type="text"/>
		<property name="Is activity" nameLabel="ConnectingDots_property_is_activity" type="boolean"/>
		<property displayName="Animation time" name="Time" nameLabel="ConnectingDots_property_time" type="string"/>
		<property displayName="Start image" name="Image A" nameLabel="ConnectingDots_property_image_a" type="image"/>
		<property displayName="End image" name="Image B" nameLabel="ConnectingDots_property_image_b" type="image"/>
		<property name="Is disabled" nameLabel="ConnectingDots_property_is_disabled" type="boolean"/>
	</model>
<css>.connectingdots {&#13;
    border:3px solid #ccc;&#13;
    position:relative;&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
&#13;
.connectingdots .dot_container {&#13;
    position:absolute;&#13;
    min-height: 25px;&#13;
    min-width: 25px;&#13;
}&#13;
&#13;
.connectingdots .dot {&#13;
    position:relative;&#13;
    height:10px;&#13;
    width:10px;&#13;
    background-color:#000;&#13;
    border-radius:5px;&#13;
    float:left;&#13;
    margin:-5px -5px -5px -5px;&#13;
}&#13;
&#13;
.connectingdots .image-start {&#13;
    position:absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.connectingdots .image-end {&#13;
    position:absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.connectingdots .dot_number {&#13;
    position:relative;&#13;
    float:left;&#13;
    cursor: default;&#13;
}&#13;
&#13;
.connectingdots .line {&#13;
    height:1px;&#13;
    position:absolute;&#13;
    background-color:#000;&#13;
}&#13;
.connectingdots .line-show-answer {&#13;
    height:1px;&#13;
    position:absolute;&#13;
    background-color:gray;&#13;
}&#13;
&#13;
.connectingdots .active .dot {&#13;
    background-color:#146CDD;&#13;
}&#13;
&#13;
.connectingdots .active .dot_number {&#13;
    color:#146CDD;&#13;
}&#13;
&#13;
.connectingdots .correct {&#13;
    border:3px solid #04B431;&#13;
}&#13;
&#13;
.connectingdots .wrong {&#13;
    border:3px solid #DF0101;&#13;
}&#13;
</css><view>&lt;div class="connectingdots"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="connectingdots"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonConnectingDots_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.toSelect = 0;&#13;
    presenter.lineIds = new Array();&#13;
    presenter.activity = false;&#13;
    presenter.error = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'PE': 'Points coordinates incorrect!',&#13;
        'PO': 'Points outside the addon!',&#13;
        'NP': 'Define the points!',&#13;
        'IE': 'Indexes incorrect!'&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    function checkIndexes(indexes,numberOfPoints) {&#13;
        indexes = indexes.replace(/\s/g, '');&#13;
        pointsIndexes = new Array(numberOfPoints);&#13;
        if (indexes == '') {&#13;
            for (var i = 0; i &lt; numberOfPoints; i++) {&#13;
                pointsIndexes[i] = i+1;&#13;
            }&#13;
            return pointsIndexes;&#13;
        } else if (indexes[0] == '*' &amp;&amp; !(isNaN(indexes.substring(1)))){&#13;
            for (var i = 0; i &lt; numberOfPoints; i++) {&#13;
                pointsIndexes[i] = (i+1)*indexes.substring(1);&#13;
            }&#13;
            return pointsIndexes;&#13;
        } else {&#13;
            pointsIndexes = indexes.split(',');&#13;
            if (pointsIndexes.length != numberOfPoints) {&#13;
                presenter.error = 'IE';&#13;
                return false;&#13;
            } else {&#13;
                return pointsIndexes;&#13;
            }&#13;
        }&#13;
    }&#13;
    function getPoint(con,coords) {&#13;
        coords = coords.replace(/\s/g, '');&#13;
        if (coords == '') {&#13;
            presenter.error = 'NP';&#13;
            return false;&#13;
        } else {&#13;
            var points = coords.split(']');&#13;
            var numberOfPoints = points.length - 1;&#13;
            var pointsCoordinates = new Array(numberOfPoints);&#13;
            var tmp_dane;&#13;
            if (points[numberOfPoints] != '') {&#13;
                presenter.error = 'PE';&#13;
                return false;&#13;
            }&#13;
            var i;&#13;
            for (i = 0; i&lt;points.length-1; i++) {&#13;
                tmp_dane = points[i].split(',');&#13;
                pointsCoordinates[i] = new Array(2);&#13;
                if (tmp_dane[0][0] != '[') {&#13;
                    presenter.error = 'PE';&#13;
                    return false;&#13;
                }&#13;
                pointsCoordinates[i][0] = tmp_dane[0].substring(1);&#13;
                pointsCoordinates[i][1] = tmp_dane[1];&#13;
                if (isNaN(pointsCoordinates[i][0]) || isNaN(pointsCoordinates[i][1])) {&#13;
                    presenter.error = 'PE';&#13;
                    return false;&#13;
                } else if (pointsCoordinates[i][0] &gt;= (con.width()) || pointsCoordinates[i][0] &lt;= 0 || pointsCoordinates[i][1] &lt;= 0 || pointsCoordinates[i][1] &gt;= (con.height())) {&#13;
                    presenter.error = 'PO';&#13;
                    return false;&#13;
                }&#13;
                pointsCoordinates[i][1] = parseInt(pointsCoordinates[i][1],10);&#13;
                pointsCoordinates[i][0] = parseInt(pointsCoordinates[i][0],10);&#13;
            }&#13;
        }&#13;
        return pointsCoordinates;&#13;
    }&#13;
&#13;
    presenter.drawPoints = function() {&#13;
        for(var i=0; i&lt;(presenter.points).length; i++) {&#13;
            div = $('&lt;div id="dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+i+'" order_value="'+i+'" class="dot_container" style="left: '+presenter.points[i][0]+'px; top: '+presenter.points[i][1]+'px;"&gt;&lt;div class="dot"&gt;&lt;/div&gt;&lt;div class="dot_number"&gt;'+presenter.indexes[i]+'&lt;/div&gt;&lt;/div&gt;');&#13;
            presenter.$view.find('.connectingdots').append(div);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawLine = function(i, time, fade, showAnswer) {&#13;
        var m, angle, d, transform, id, line;&#13;
        x1 = parseInt(presenter.points[i-1][0],10);&#13;
        y1 = parseInt(presenter.points[i-1][1],10);&#13;
        x2 = parseInt(presenter.points[i][0],10);&#13;
        y2 = parseInt(presenter.points[i][1],10);&#13;
        m = (y2-y1)/(x2-x1);&#13;
        angle = (Math.atan(m))*180/(Math.PI);&#13;
        d = Math.sqrt(((x2-x1)*(x2-x1)) + ((y2-y1)*(y2-y1)));&#13;
&#13;
        if (x2 &gt;= x1){&#13;
            transform = (360 + angle) % 360;&#13;
        } else {&#13;
            transform = 180 + angle;&#13;
        }&#13;
        if (showAnswer) {&#13;
            id ='line_'+i+'_'+new Date().getTime();&#13;
            line = "&lt;div id='"+id+"'class='line-show-answer' style ='left: "+x1+"px; top: "+y1+"px'&gt;&amp;nbsp;&lt;/div&gt;";&#13;
        } else {&#13;
            id ='line_'+new Date().getTime();&#13;
            line = "&lt;div id='"+id+"'class='line' style ='left: "+x1+"px; top: "+y1+"px'&gt;&amp;nbsp;&lt;/div&gt;";&#13;
            presenter.lineIds[i] = id;&#13;
        }&#13;
        presenter.$view.find('.connectingdots').append(line);&#13;
        presenter.$view.find('#'+id).css({&#13;
            'left': x1,&#13;
            'top': y1,&#13;
            'width': '0px',&#13;
            'transform' : 'rotate('+transform+'deg)',&#13;
            'transform-origin' : '0px 0px',&#13;
            '-ms-transform' : 'rotate('+transform+'deg)',&#13;
            '-ms-transform-origin' : '0px 0px',&#13;
            '-moz-transform' : 'rotate('+transform+'deg)',&#13;
            '-moz-transform-origin' : '0px 0px',&#13;
            '-webkit-transform' : 'rotate('+transform+'deg)',&#13;
            '-webkit-transform-origin' : '0px 0px',&#13;
            '-o-transform' : 'rotate('+transform+'deg)',&#13;
            '-o-transform-origin' : '0px 0px'&#13;
        });&#13;
&#13;
        presenter.$view.find('#'+id).animate({&#13;
            width: d&#13;
        }, time, "linear", function(){&#13;
            if (i == (presenter.points).length-1 &amp;&amp; !showAnswer) {&#13;
                presenter.$view.find('.image-end').remove();&#13;
                if (presenter.imageSrcEnd != '') {&#13;
                    if (fade) {&#13;
                        presenter.$view.find('.image-start').fadeOut('slow');&#13;
                    } else {&#13;
                        presenter.$view.find('.image-start').remove();&#13;
                    }&#13;
                    var image2 = document.createElement('img');&#13;
                    $(image2).attr('src', presenter.imageSrcEnd);&#13;
                    $(image2).addClass('image-end');&#13;
                    presenter.$view.find('.connectingdots').prepend(image2);&#13;
                    if (fade) {&#13;
                        presenter.$view.find('.image-end').hide();&#13;
                        presenter.$view.find('.image-end').fadeIn('slow');&#13;
                    }&#13;
                }&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.drawTempLine = function(i, x, y) {&#13;
        if (presenter.draw !== false) {&#13;
            if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                presenter.$view.find('#line_tmp').remove();&#13;
            }&#13;
            var m, angle, d, transform, id, line;&#13;
            x1 = parseInt(presenter.points[i][0],10);&#13;
            y1 = parseInt(presenter.points[i][1],10);&#13;
            m = (y-y1)/(x-x1);&#13;
            angle = (Math.atan(m))*180/(Math.PI);&#13;
            d = Math.sqrt(((x-x1)*(x-x1)) + ((y-y1)*(y-y1)));&#13;
            if (x &gt;= x1){&#13;
                transform = (360 + angle) % 360;&#13;
            } else {&#13;
                transform = 180 + angle;&#13;
            }&#13;
&#13;
            div = $('&lt;div&gt;');&#13;
            div.attr('id','line_tmp');&#13;
            div.attr('class','line');&#13;
            div.attr('style','left: '+x1+'px; top: '+y1+'px');&#13;
            presenter.$view.find('.connectingdots').append(div);&#13;
            presenter.$view.find('#line_tmp').css({&#13;
                'left': x1,&#13;
                'top': y1,&#13;
                'width': d,&#13;
                'transform' : 'rotate('+transform+'deg)',&#13;
                'transform-origin' : '0px 0px',&#13;
                '-ms-transform' : 'rotate('+transform+'deg)',&#13;
                '-ms-transform-origin' : '0px 0px',&#13;
                '-moz-transform' : 'rotate('+transform+'deg)',&#13;
                '-moz-transform-origin' : '0px 0px',&#13;
                '-webkit-transform' : 'rotate('+transform+'deg)',&#13;
                '-webkit-transform-origin' : '0px 0px',&#13;
                '-o-transform' : 'rotate('+transform+'deg)',&#13;
                '-o-transform-origin' : '0px 0px'&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isDisabled = true;&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isDisabled = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.updateVisibility = function() {&#13;
        if(presenter.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return (!(presenter.activity) || (presenter.toSelect &gt; 0));&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function(selected,mark) {&#13;
        var score = 0;&#13;
        if ((presenter.points).length == selected &amp;&amp; selected == presenter.toSelect) {&#13;
            score = 1;&#13;
        }&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : selected,&#13;
            value : mark,&#13;
            score : score&#13;
        };&#13;
    };&#13;
    presenter.triggerPointSelectedEvent = function(selected,mark) {&#13;
        var eventData = presenter.createEventData(selected,mark);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.randomId = Math.floor(100000*Math.random());&#13;
        presenter.$view = $(view);&#13;
        presenter.addonID = model.ID;&#13;
        presenter.model = model;&#13;
        distance = 0;&#13;
        var con = presenter.$view.find('.connectingdots').parent();&#13;
        presenter.$view.find('.connectingdots').css({&#13;
            'width': con.width(),&#13;
            'height': con.height()&#13;
        });&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        var coords = presenter.model['Dots'];&#13;
        presenter.time = presenter.model['Time'];&#13;
        presenter.activity = ModelValidationUtils.validateBoolean(presenter.model['Is activity']);&#13;
&#13;
        presenter.imageSrcStart = presenter.model['Image A'];&#13;
        presenter.imageSrcEnd = presenter.model['Image B'];&#13;
&#13;
        presenter.points = getPoint(con,coords);&#13;
        presenter.indexes = checkIndexes(presenter.model['Indexes'],(presenter.points).length);&#13;
        presenter.isDisabled = ModelValidationUtils.validateBoolean(presenter.model['Is disabled']);&#13;
        presenter.initIsDisabled = presenter.isDisabled;&#13;
&#13;
        var image1 = document.createElement('img');&#13;
        $(image1).attr('src', presenter.imageSrcStart);&#13;
        $(image1).addClass('image-start');&#13;
&#13;
        var image2 = document.createElement('img');&#13;
        $(image2).attr('src', presenter.imageSrcEnd);&#13;
        $(image2).addClass('image-end');&#13;
&#13;
        presenter.draw = false;&#13;
        presenter.isDown = false;&#13;
&#13;
        if (presenter.time == '') {&#13;
            presenter.time = 0;&#13;
        }&#13;
        var $div = presenter.$view.find('.connectingdots');&#13;
        var Width = $div.width();&#13;
        var Height = $div.height();&#13;
        var tmpTime;&#13;
        //var Left = parseInt(con[0].offsetLeft,10);&#13;
        //var Top = parseInt(con[0].offsetTop,10);&#13;
        var Left = parseInt($div.offset().left,10);&#13;
        var Top = parseInt($div.offset().top,10);&#13;
&#13;
        if (presenter.points == false || presenter.indexes == false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
        } else {&#13;
            presenter.drawPoints();&#13;
            if (presenter.imageSrcStart != '') {&#13;
                presenter.$view.find('.connectingdots').prepend(image1);&#13;
            }&#13;
&#13;
            $(view).find('.connectingdots').click(function(event){&#13;
                event.stopPropagation();&#13;
                presenter.isDown = false;&#13;
            });&#13;
&#13;
            presenter.$view.find('.dot').on('mousedown', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.isDown = false;&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.find('.dot_number').on('mousedown', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.isDown = false;&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.on('mousedown', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.isDown = true;&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.on('mousemove',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.draw = presenter.toSelect - 1;&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; presenter.draw !== -1 &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    if (presenter.draw &lt; (presenter.points).length-1 &amp;&amp; presenter.isDown === true) {&#13;
                        presenter.mouseSX = parseInt(e.pageX,10) - parseInt($div.offset().left,10);&#13;
                        presenter.mouseSY = parseInt(e.pageY,10) - parseInt($div.offset().top,10);&#13;
                        presenter.drawTempLine(presenter.draw,presenter.mouseSX,presenter.mouseSY);&#13;
                    }&#13;
                }&#13;
            });&#13;
&#13;
            $(view).find('.dot_container').on('mouseup',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                    presenter.$view.find('#line_tmp').remove();&#13;
                }&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.isDisabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    i = parseInt($(this).attr('order_value'),10);&#13;
&#13;
                    if (i == presenter.toSelect){&#13;
                        if (i &gt; 0) {&#13;
                            presenter.$view.find('div#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(i-1)).removeClass('active');&#13;
                            if (presenter.isDown) {&#13;
                                presenter.drawLine(i,0,true);&#13;
                            } else {&#13;
                                presenter.drawLine(i,presenter.time,true);&#13;
                            }&#13;
                        }&#13;
&#13;
                        if (i &lt; (presenter.points).length-1) {&#13;
                            presenter.$view.find('div#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(i)).addClass('active');&#13;
                        }&#13;
&#13;
                        presenter.toSelect++;&#13;
                        presenter.triggerPointSelectedEvent(i+1,1);&#13;
                    } else {&#13;
                        presenter.triggerPointSelectedEvent(i+1,0);&#13;
                    }&#13;
                }&#13;
                presenter.isDown = false;&#13;
            });&#13;
&#13;
            presenter.$view.on('mouseleave mouseup',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.draw = false;&#13;
                presenter.isDown = false;&#13;
&#13;
                if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                    presenter.$view.find('#line_tmp').remove();&#13;
                }&#13;
            });&#13;
&#13;
&#13;
            presenter.$view.on('touchstart', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.isDown = true;&#13;
                    presenter.mouseX = parseInt(e.originalEvent.touches[0].pageX,10) - parseInt($div.offset().left,10);&#13;
                    presenter.mouseY = parseInt(e.originalEvent.touches[0].pageY,10) - parseInt($div.offset().top,10);&#13;
                }&#13;
            });&#13;
            presenter.$view.on('touchmove', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.mouseX = parseInt(e.originalEvent.touches[0].pageX,10) - parseInt($div.offset().left,10);&#13;
                presenter.mouseY = parseInt(e.originalEvent.touches[0].pageY,10) - parseInt($div.offset().top,10);&#13;
                if (presenter.draw !== false &amp;&amp; presenter.mouseX &lt;  Width &amp;&amp; presenter.mouseY &lt; Height &amp;&amp; presenter.mouseX &gt; 0 &amp;&amp; presenter.mouseY &gt; 0 &amp;&amp; !presenter.isErrorMode &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; !presenter.disabled &amp;&amp; presenter.toSelect &lt; (presenter.points).length &amp;&amp; presenter.isDown === true) {&#13;
                    presenter.drawTempLine(presenter.toSelect-1,presenter.mouseX,presenter.mouseY);&#13;
                } else {&#13;
                    if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                        presenter.$view.find('#line_tmp').remove();&#13;
                        presenter.isDown = false;&#13;
                    }&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.on('touchend', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                tmpTime = presenter.time;&#13;
                if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                    presenter.$view.find('#line_tmp').remove();&#13;
                    tmpTime = 0;&#13;
                }&#13;
                distance = Math.abs(parseInt(presenter.points[presenter.toSelect][0],10) - presenter.mouseX) + Math.abs(parseInt(presenter.points[presenter.toSelect][1],10) - presenter.mouseY);&#13;
                if (distance &lt; 35) {&#13;
                    if (presenter.toSelect &gt; 0) {&#13;
                        presenter.$view.find('div#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(presenter.toSelect-1)).removeClass('active');&#13;
                        presenter.drawLine(presenter.toSelect,tmpTime,true);&#13;
                    }&#13;
&#13;
                    if (presenter.toSelect &lt; (presenter.points).length-1) {&#13;
                        presenter.$view.find('div#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(presenter.toSelect)).addClass('active');&#13;
                    }&#13;
&#13;
                    presenter.toSelect++;&#13;
                    presenter.draw++;&#13;
                    presenter.triggerPointSelectedEvent(i+1,1);&#13;
                }&#13;
                presenter.isDown = false;&#13;
            });&#13;
        }&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.addonID = model.ID;&#13;
        presenter.model = model;&#13;
        var con = presenter.$view.find('.connectingdots').parent();&#13;
        presenter.$view.find('.connectingdots').css({&#13;
            'width': con.width(),&#13;
            'height': con.height()&#13;
        });&#13;
        presenter.imageSrcStart = presenter.model['Image A'];&#13;
&#13;
        var coords = presenter.model['Dots'];&#13;
        presenter.points = getPoint(con,coords);&#13;
        presenter.indexes = checkIndexes(presenter.model['Indexes'],(presenter.points).length);&#13;
&#13;
        var $div = presenter.$view.find('.connectingdots');&#13;
        var Width = $div.width();&#13;
        var Height = $div.height();&#13;
&#13;
        if (presenter.points == false || presenter.indexes == false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
        } else {&#13;
            presenter.points = getPoint(con,coords);&#13;
            presenter.drawPoints();&#13;
            if (presenter.imageSrcStart != '') {&#13;
                var image1 = document.createElement('img');&#13;
                $(image1).attr('src', presenter.imageSrcStart);&#13;
                $(image1).addClass('image-start');&#13;
                presenter.$view.find('.connectingdots').prepend(image1);&#13;
            }&#13;
            presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
            presenter.updateVisibility();&#13;
            var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
                xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                coloringWrapper = presenter.$view.find('.connectingdots');&#13;
&#13;
            coordinatesContainer.css({&#13;
                'width' : 35,&#13;
                'height' : 22,&#13;
                'border' : '1px solid #696969',&#13;
                'borderRadius' : '3px',&#13;
                'position' : 'absolute',&#13;
                'top' : 3,&#13;
                'left' : 3,&#13;
                'fontSize' : '9px',&#13;
                'padding' : '5px',&#13;
                'lineHeight' : '11px'&#13;
            });&#13;
&#13;
            coordinatesContainer.append(xContainer).append(yContainer);&#13;
&#13;
            coloringWrapper.append(coordinatesContainer);&#13;
            coloringWrapper.css({&#13;
                'position' : 'relative',&#13;
                'minHeight' : Height,&#13;
                'minWidth' : Width&#13;
            });&#13;
&#13;
            function setCalculatedPosition(e) {&#13;
                presenter.mouseSX = parseInt(e.pageX,10) - parseInt($div.offset().left,10);&#13;
                presenter.mouseSY = parseInt(e.pageY,10) - parseInt($div.offset().top,10);&#13;
                xContainer.find('.value').html(presenter.mouseSX);&#13;
                yContainer.find('.value').html(presenter.mouseSY);&#13;
            }&#13;
&#13;
            var doesElementExist = function() {&#13;
                var $moduleSelector = $('.moduleSelector[data-id="'+presenter.addonID+'"]');&#13;
&#13;
                if ($moduleSelector.length &gt; 0) {&#13;
                    $moduleSelector.on('mousemove', function(e) {&#13;
                        setCalculatedPosition(e);&#13;
                    });&#13;
&#13;
                    clearInterval(interval);&#13;
                }&#13;
            };&#13;
&#13;
            var interval = setInterval(function() { doesElementExist(); }, 500);&#13;
&#13;
            presenter.$view.find('.connectingdots').on('mousemove', function(e) {&#13;
                setCalculatedPosition(e);&#13;
            });&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.error != false) {&#13;
        } else {&#13;
            if (presenter.toSelect &gt; 0) {&#13;
                var temp_id = '#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(presenter.toSelect-1);&#13;
                presenter.$view.find(temp_id).removeClass('active');&#13;
            }&#13;
            for (var i = 1; i &lt; presenter.toSelect; i++) {&#13;
                presenter.$view.find('#'+presenter.lineIds[i]).remove();&#13;
            }&#13;
            presenter.$view.find('.image-start').remove();&#13;
            presenter.$view.find('.image-end').remove();&#13;
            if (presenter.imageSrcStart != '') {&#13;
                var image1 = document.createElement('img');&#13;
                $(image1).attr('src', presenter.imageSrcStart);&#13;
                $(image1).addClass('image-start');&#13;
                presenter.$view.find('.connectingdots').prepend(image1);&#13;
            }&#13;
            presenter.isDisabled = presenter.initIsDisabled;&#13;
            presenter.isVisible = presenter.initIsVisible;&#13;
            presenter.toSelect = 0;&#13;
            presenter.updateVisibility();&#13;
            presenter.setWorkMode();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var toSelect = presenter.toSelect;&#13;
        var isDisabled = presenter.isDisabled;&#13;
        var isVisible = presenter.isVisible;&#13;
        return JSON.stringify({&#13;
            toSelect: presenter.toSelect,&#13;
            isDisabled: isDisabled,&#13;
            isVisible: isVisible&#13;
        });&#13;
    };&#13;
    presenter.setState = function(state) {&#13;
        presenter.toSelect = JSON.parse(state).toSelect;&#13;
        presenter.isVisible = JSON.parse(state).isVisible;&#13;
        presenter.isDisabled = JSON.parse(state).isDisabled;&#13;
&#13;
        if (presenter.toSelect &gt; 0 &amp;&amp; presenter.toSelect &lt; (presenter.points).length) {&#13;
            var temp_id = '#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(presenter.toSelect-1);&#13;
            $(temp_id).addClass('active');&#13;
        }&#13;
        for(var i = 1; i &lt; presenter.toSelect; i++) {&#13;
            presenter.drawLine(i,0,false);&#13;
        }&#13;
        presenter.updateVisibility();&#13;
    };&#13;
    presenter.getMaxScore = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.activity) return 1;&#13;
        return 0;&#13;
    };&#13;
    presenter.getScore = function (view, model) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (!presenter.activity || (presenter.error != false)) return 0;&#13;
&#13;
        if ((presenter.points).length == presenter.toSelect) {&#13;
            return 1;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
    presenter.getErrorCount = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.toSelect == 0 || (presenter.error != false)) {&#13;
            return 0;&#13;
        } else {&#13;
            return presenter.getMaxScore() - presenter.getScore();&#13;
        }&#13;
    };&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isErrorMode = true;&#13;
        if (!presenter.activity) return 0;&#13;
        if (presenter.getScore() === presenter.getMaxScore())&#13;
            presenter.$view.find('.connectingdots').addClass('correct');&#13;
        if (presenter.getErrorCount() &gt; 0)&#13;
            presenter.$view.find('.connectingdots').addClass('wrong');&#13;
    };&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.isErrorMode = false;&#13;
        presenter.$view.find('.connectingdots').removeClass('wrong');&#13;
        presenter.$view.find('.connectingdots').removeClass('correct');&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            var numberOfPoints = (presenter.points).length;&#13;
            if (presenter.isShowAnswersActive) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.setWorkMode();&#13;
            presenter.$view.find('.line').addClass('line-show-answer');&#13;
            var i = presenter.toSelect;&#13;
            if (i == 0) {&#13;
                i++;&#13;
            } else {&#13;
                presenter.$view.find('div#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(i-1)).removeClass('active');&#13;
            }&#13;
            for (; i &lt; numberOfPoints; i++) {&#13;
                presenter.drawLine(i,0,true,true);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find('.line').removeClass('line-show-answer');&#13;
            presenter.$view.find('.line-show-answer').remove();&#13;
            if (presenter.toSelect &gt; 0 &amp;&amp; presenter.toSelect &lt; (presenter.points).length) {&#13;
                var i = presenter.toSelect;&#13;
                presenter.$view.find('div#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(i-1)).addClass('active');&#13;
            }&#13;
        }&#13;
    };&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Connection" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Is not an activity" name="isNotActivity" nameLabel="Connection_property_is_not_activity" type="boolean"/>
		<property name="Single connection mode" nameLabel="Connection_property_single_connection_mode" type="boolean"/>
		<property isDefault="true" name="Left column" nameLabel="Connection_property_left_column" type="list">
			<property name="id" nameLabel="Connection_property_id" type="string"/>
			<property isLocalized="true" name="content" nameLabel="Connection_property_content" type="html"/>
			<property name="connects to" nameLabel="Connection_property_connects_to" type="string"/>
			<property name="additional class" nameLabel="Connection_property_additional_class" type="string"/>
		</property>
		<property name="Right column" nameLabel="Connection_property_right_column" type="list">
			<property name="id" nameLabel="Connection_property_id" type="string"/>
			<property isLocalized="true" name="content" nameLabel="Connection_property_content" type="html"/>
			<property name="connects to" nameLabel="Connection_property_connects_to" type="string"/>
			<property name="additional class" nameLabel="Connection_property_additional_class" type="string"/>
		</property>
		<property name="Columns width" nameLabel="Connection_property_columns_width" type="list">
			<property name="left" nameLabel="Connection_property_left" type="string"/>
			<property name="middle" nameLabel="Connection_property_middle" type="string"/>
			<property name="right" nameLabel="Connection_property_right" type="string"/>
		</property>
		<property name="Default connection color" nameLabel="Connection_property_default_connection_color" type="string"/>
		<property name="Correct connection color" nameLabel="Connection_property_correct_connection_color" type="string"/>
		<property name="Incorrect connection color" nameLabel="Connection_property_incorrect_connection_color" type="string"/>
		<property name="Connection thickness" nameLabel="Connection_property_connection_thickness" type="string"/>
        <property name="Random order left column" nameLabel="Connection_property_random_order_left_column" type="boolean"/>
        <property name="Random order right column" nameLabel="Connection_property_random_order_right_column" type="boolean"/>
        <property name="Show answers line color" nameLabel="Connection_property_show_answers_line_color" type="string"/>
        <property displayName="Block wrong answers" name="blockWrongAnswers" nameLabel="Connection_property_block_wrong_answers" type="boolean"/>
		<property displayName="Remove dragged element" name="removeDraggedElement" nameLabel="Connection_property_remove_dragged_element" type="boolean"/>
	</model>
<css>.connectionContainer {&#13;
    height: 100%;&#13;
    width: 100%;&#13;
    padding: 0px;&#13;
    border-collapse:collapse;&#13;
    border-spacing: 0px;&#13;
    direction: ltr;&#13;
}&#13;
&#13;
.connectionContainer .connectionLeftColumn {&#13;
    width: 33%;&#13;
    height: 100%;&#13;
    padding: 0px;&#13;
}&#13;
&#13;
.connectionContainer .connectionMiddleColumn {&#13;
    width: 34%;&#13;
    height: 100%;&#13;
    padding: 0px;&#13;
    overflow: hidden;&#13;
    overflow-x: visible;&#13;
}&#13;
&#13;
.connectionContainer .connectionRightColumn {&#13;
    width: 33%;&#13;
    padding: 0px;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.connectionContainer .connections {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.connectionContainer .connectionItem {&#13;
    width: 100%;&#13;
    padding: 0px;&#13;
    border-collapse:collapse;&#13;
    border-spacing: 0px;&#13;
    border: solid 1px black;&#13;
}&#13;
&#13;
.connectionContainer .content {&#13;
    height: 100%;&#13;
    width: 100%;&#13;
    border-collapse:collapse;&#13;
    border-spacing: 0px;&#13;
}&#13;
&#13;
.connectionContainer .content .connectionItemWrapper {&#13;
    padding: 0px;&#13;
}&#13;
&#13;
.connection_line {&#13;
    position: absolute;&#13;
    height:2px;&#13;
}&#13;
</css><view>&lt;table class="connectionContainer"&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="connectionLeftColumn"&gt;&#13;
            &lt;table class="content"&gt;&lt;/table&gt;&#13;
        &lt;/td&gt;&#13;
        &lt;td class="connectionMiddleColumn"&gt;&#13;
            &lt;canvas class="connections"&gt;&lt;/canvas&gt;&#13;
        &lt;/td&gt;&#13;
        &lt;td class="connectionRightColumn"&gt;&#13;
            &lt;table class="content"&gt;&lt;/table&gt;&#13;
        &lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
&lt;/table&gt;&#13;
</view><preview>&lt;table class="connectionContainer"&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="connectionLeftColumn"&gt;&#13;
            &lt;table class="content"&gt;&lt;/table&gt;&#13;
        &lt;/td&gt;&#13;
        &lt;td class="connectionMiddleColumn"&gt;&#13;
            &lt;canvas class="connections"&gt;&lt;/canvas&gt;&#13;
        &lt;/td&gt;&#13;
        &lt;td class="connectionRightColumn"&gt;&#13;
            &lt;table class="content"&gt;&lt;/table&gt;&#13;
        &lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
&lt;/table&gt;&#13;
</preview><presenter>function AddonConnection_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    var playerController;&#13;
    var eventBus; // Modules communication&#13;
    var addonID;&#13;
&#13;
    presenter.uniqueIDs = [];&#13;
    presenter.uniqueElementLeft = [];&#13;
    presenter.uniqueElementRight = [];&#13;
    presenter.elements = [];&#13;
    presenter.lastClickTime = 0;&#13;
    presenter.lastEvent = null;&#13;
    presenter.disabledConnections = [];&#13;
&#13;
    var connections;&#13;
    var singleMode = false;&#13;
    var selectedItem = null;&#13;
    var isNotActivity = false;&#13;
&#13;
    presenter.lineStack = new LineStack(true);&#13;
    presenter.correctConnections = new LineStack(false);&#13;
    var isSelectionPossible = true;&#13;
    var isRTL = false;&#13;
&#13;
    var connectionColor = "#000";&#13;
    var correctConnection = "#0d0";&#13;
    var incorrectConnection = "#d00";&#13;
    var connectionThickness = "1px";&#13;
    var showAnswersColor = "#0d0";&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        'ID not unique': 'One or more IDs are not unique.'&#13;
    };&#13;
&#13;
    presenter.ELEMENT_SIDE = {&#13;
        LEFT: 0,&#13;
        RIGHT: 1&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeFrom_01(model);&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_01 = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["Columns width"]) {&#13;
            upgradedModel["Columns width"] = [&#13;
                {&#13;
                    left: "",&#13;
                    middle: "",&#13;
                    right: ""&#13;
                }&#13;
            ];&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function LineStack(sendEvents) {&#13;
        this.stack = [];&#13;
        this.ids = [];&#13;
        this.sendEvents = sendEvents;&#13;
        this.shouldFireEvent = true;&#13;
&#13;
        this.setSendEvents = function (value) {&#13;
            this.sendEvents = value;&#13;
        };&#13;
&#13;
        this.push = function (line) {&#13;
            var pair = [], score, i;&#13;
            for (i = 0; i &lt; presenter.elements.length; i++) {&#13;
                if (presenter.elements[i].element.get(0) == line.from.get(0) || presenter.elements[i].element.get(0) == line.to.get(0)) {&#13;
                    pair.push(presenter.elements[i].id);&#13;
                    if (pair.length == 2) {&#13;
                        break;&#13;
                    }&#13;
                }&#13;
            }&#13;
            this.ids.push(pair);&#13;
            this.stack.push(line);&#13;
&#13;
            if (this.sendEvents) {&#13;
                score = presenter.correctConnections.hasLine(line).length &gt; 0 ? 1 : 0;&#13;
                presenter.sendEvent(pair[0], pair[1], 1, score);&#13;
                if(score == 0 &amp;&amp; presenter.blockWrongAnswers){&#13;
                    this.shouldFireEvent = false;&#13;
                    this.remove(line);&#13;
                }&#13;
            }&#13;
        };&#13;
&#13;
        this.length = function () {&#13;
            return this.stack.length;&#13;
        };&#13;
&#13;
        this.get = function (i) {&#13;
            return this.stack[i];&#13;
        };&#13;
&#13;
        this.remove = function (line) {&#13;
            function getID(element) {&#13;
                // innerWrapper -&gt; td -&gt; tr -&gt; tbody -&gt; table (which has id attribute)&#13;
                var rawID = $(element).find('.innerWrapper').parent().parent().parent().parent().attr('id');&#13;
                return rawID.split('connection-')[1];&#13;
            }&#13;
&#13;
            var linePosition = this.stack.indexOf(line);&#13;
            this.stack.splice(linePosition, 1);&#13;
            var lineFromID = getID(line.from);&#13;
            var lineToID = getID(line.to);&#13;
            var pair = [lineFromID, lineToID];&#13;
            var score;&#13;
&#13;
            for (var i = 0; i &lt; this.ids.length; i++) {&#13;
                if ((this.ids[i][0] == pair[0] &amp;&amp; this.ids[i][1] == pair[1]) ||&#13;
                    (this.ids[i][0] == pair[1] &amp;&amp; this.ids[i][1] == pair[0])) {&#13;
                    this.ids.splice(i, 1);&#13;
                    break;&#13;
                }&#13;
            }&#13;
&#13;
            if (this.sendEvents &amp;&amp; this.shouldFireEvent) {&#13;
                score = presenter.correctConnections.hasLine(line).length &gt; 0 ? 1 : 0;&#13;
                presenter.sendEvent(pair[0], pair[1], 0, score);&#13;
            }&#13;
            this.shouldFireEvent = true;&#13;
        };&#13;
&#13;
        this.clear = function () {&#13;
            this.ids.splice(0, this.ids.length);&#13;
            this.stack.splice(0, this.stack.length);&#13;
        };&#13;
&#13;
        this.hasLine = function (line) {&#13;
            for (var i = 0, stackLength = this.stack.length; i &lt; stackLength; i++) {&#13;
                if ((this.stack[i].from.get(0) == line.from.get(0) &amp;&amp; this.stack[i].to.get(0) == line.to.get(0)) ||&#13;
                    (this.stack[i].from.get(0) == line.to.get(0) &amp;&amp; this.stack[i].to.get(0) == line.from.get(0))) {&#13;
                    return [this.stack[i]];&#13;
                }&#13;
            }&#13;
            return [];&#13;
        };&#13;
&#13;
        this.hasPair = function (pair) {&#13;
            for (var i = 0; i &lt; this.ids.length; i++) {&#13;
                if (this.ids[i][0] == pair[0] &amp;&amp; this.ids[i][1] == pair[1] ||&#13;
                    this.ids[i][1] == pair[0] &amp;&amp; this.ids[i][0] == pair[1]) {&#13;
                    return true;&#13;
                }&#13;
            }&#13;
            return false;&#13;
        };&#13;
&#13;
        this.isItemUsed = function (line) {&#13;
            var lines = [];&#13;
            for (var i = 0; i &lt; this.stack.length; i++) {&#13;
                if ((this.stack[i].from.get(0) == line.from.get(0) || this.stack[i].to.get(0) == line.to.get(0)) ||&#13;
                    (this.stack[i].from.get(0) == line.to.get(0) || this.stack[i].to.get(0) == line.from.get(0))) {&#13;
                    lines.push(this.stack[i])&#13;
                }&#13;
            }&#13;
            return lines;&#13;
        }&#13;
    }&#13;
&#13;
    function Line(from, to) {&#13;
        this.from = from;&#13;
        this.to = to;&#13;
&#13;
        this.connects = function (element) {&#13;
            return from.get(0) == element.get(0) || to.get(0) == element.get(0);&#13;
        };&#13;
&#13;
        this.otherSide = function (element) {&#13;
            if (from.get(0) == element.get(0)) {&#13;
                return to;&#13;
            }&#13;
            return from;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.parseDefinitionLinks = function () {&#13;
        $.each($(presenter.view).find('.innerWrapper'), function (index, element) {&#13;
            $(element).html(presenter.textParser.parse($(element).html()));&#13;
        });&#13;
&#13;
        presenter.textParser.connectLinks($(presenter.view));&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        var mathJaxDeferred = new jQuery.Deferred();&#13;
        presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;&#13;
        presenter.mathJaxProcessEnded = mathJaxDeferred.promise();&#13;
&#13;
        MathJax.Hub.Register.MessageHook("End Process", function (message) {&#13;
            if ($(message[1]).hasClass('ic_page')) {&#13;
                presenter.mathJaxProcessEndedDeferred.resolve();&#13;
            }&#13;
        });&#13;
&#13;
        playerController = controller;&#13;
&#13;
        presenter.textParser = new TextParserProxy(controller.getTextParser());&#13;
    };&#13;
&#13;
    presenter.setColumnsWidth = function (view, columnsWidth) {&#13;
        var leftColumn = $(view).find(".connectionLeftColumn:first");&#13;
        var middleColumn = $(view).find(".connectionMiddleColumn:first");&#13;
        var rightColumn = $(view).find(".connectionRightColumn:first");&#13;
&#13;
        var leftWidth = columnsWidth[0].left;&#13;
        var middleWidth = columnsWidth[0].middle;&#13;
        var rightWidth = columnsWidth[0].right;&#13;
&#13;
        if (!leftWidth)&#13;
            leftWidth = "auto";&#13;
        if (!middleWidth)&#13;
            middleWidth = "auto";&#13;
        if (!rightWidth)&#13;
            rightWidth = "auto";&#13;
&#13;
        $(leftColumn).css('width', leftWidth);&#13;
        $(middleColumn).css('width', middleWidth);&#13;
        $(rightColumn).css('width', rightWidth);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.view = view;&#13;
        presenter.model = model;&#13;
        eventBus = playerController.getEventBus();&#13;
        addonID = model.ID;&#13;
        presenter.blockWrongAnswers = ModelValidationUtils.validateBoolean(model.blockWrongAnswers);&#13;
&#13;
        presenter.initialize(presenter.view, presenter.model, false);&#13;
&#13;
        presenter.parseDefinitionLinks();&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.view = view;&#13;
        presenter.model = model;&#13;
        presenter.initialize(presenter.view, presenter.model, true);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        $(presenter.view).css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.initialize = function (view, model, isPreview) {&#13;
        if (isPreview) {&#13;
            presenter.lineStack = new LineStack(false);&#13;
        }&#13;
&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.removeDraggedElement = ModelValidationUtils.validateBoolean(model["removeDraggedElement"]);&#13;
        presenter.isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        isRTL = $(view).css('direction').toLowerCase() === 'rtl';&#13;
        connections = $(view).find('.connections:first');&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
&#13;
        this.setSingleMode(model['Single connection mode']);&#13;
&#13;
        var isRandomLeft = ModelValidationUtils.validateBoolean(model['Random order left column']);&#13;
        var isRandomRight = ModelValidationUtils.validateBoolean(model['Random order right column']);&#13;
&#13;
        if (isPreview) {&#13;
            this.loadElements(view, model, 'connectionLeftColumn', 'Left column', false);&#13;
            this.loadElements(view, model, 'connectionRightColumn', 'Right column', true);&#13;
        } else {&#13;
            if (!isRandomLeft) {&#13;
                this.loadElements(view, model, 'connectionLeftColumn', 'Left column', false);&#13;
            } else {&#13;
                this.loadRandomElementsLeft(view, model, 'connectionLeftColumn', 'Left column', false);&#13;
            }&#13;
&#13;
            if (!isRandomRight) {&#13;
                this.loadElements(view, model, 'connectionRightColumn', 'Right column', true);&#13;
            } else {&#13;
                this.loadRandomElementsRight(view, model, 'connectionRightColumn', 'Right column', true);&#13;
            }&#13;
        }&#13;
&#13;
        this.setColumnsWidth(view, model["Columns width"]);&#13;
&#13;
        if (model['Connection thickness'] != '') {&#13;
            connectionThickness = model['Connection thickness'];&#13;
        }&#13;
        if (model['Default connection color'] != '') {&#13;
            connectionColor = model['Default connection color'];&#13;
        }&#13;
        if (model['Correct connection color'] != '') {&#13;
            correctConnection = model['Correct connection color'];&#13;
        }&#13;
        if (model['Incorrect connection color'] != '') {&#13;
            incorrectConnection = model['Incorrect connection color'];&#13;
        }&#13;
        if (model['Show answers line color'] != '') {&#13;
            showAnswersColor = model['Show answers line color'];&#13;
        }&#13;
&#13;
        if (model['isNotActivity'] != undefined){&#13;
            isNotActivity = (model['isNotActivity'].toLowerCase() === 'true');&#13;
        }&#13;
        else {&#13;
            isNotActivity = false;&#13;
        }&#13;
&#13;
        if (isPreview) {&#13;
            presenter.initializeView(view, model);&#13;
            presenter.drawConfiguredConnections();&#13;
        } else {&#13;
            presenter.mathJaxProcessEnded.then(function () {&#13;
                presenter.initializeView(view, model);&#13;
                presenter.registerListeners(presenter.view);&#13;
            });&#13;
        }&#13;
&#13;
        this.gatherCorrectConnections();&#13;
    };&#13;
&#13;
    function getElementById(id) {&#13;
        for (var i = 0; i &lt; presenter.elements.length; i++) {&#13;
            if (presenter.elements[i].id == id) {&#13;
                return presenter.elements[i].element;&#13;
            }&#13;
        }&#13;
        return -1;&#13;
    }&#13;
&#13;
    presenter.establishElementSide = function (elementID, modelLeftSide, modelRightSide) {&#13;
        var i, arrayLength;&#13;
&#13;
        for (i = 0, arrayLength = modelLeftSide.length; i &lt; arrayLength; i += 1) {&#13;
            if (modelLeftSide[i].id === elementID) {&#13;
                return presenter.ELEMENT_SIDE.LEFT;&#13;
            }&#13;
        }&#13;
&#13;
        for (i = 0, arrayLength = modelRightSide.length; i &lt; arrayLength; i += 1) {&#13;
            if (modelRightSide[i].id === elementID) {&#13;
                return presenter.ELEMENT_SIDE.RIGHT;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function (source, elementFromID, elementToID, model, value, score) {&#13;
        var leftColumn = model["Left column"];&#13;
        var rightColumn = model["Right column"];&#13;
&#13;
        var fromElementSide = presenter.establishElementSide(elementFromID, leftColumn, rightColumn);&#13;
        var itemStr = "";&#13;
        switch (fromElementSide) {&#13;
            case presenter.ELEMENT_SIDE.LEFT:&#13;
                itemStr = elementFromID + '-' + elementToID;&#13;
                break;&#13;
            case presenter.ELEMENT_SIDE.RIGHT:&#13;
                itemStr = elementToID + '-' + elementFromID;&#13;
                break;&#13;
        }&#13;
&#13;
        return {&#13;
            'source': source,&#13;
            'item': itemStr,&#13;
            'value': value.toString(),&#13;
            'score': score.toString()&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendEvent = function (fromID, toID, value, score) {&#13;
        if(!presenter.isShowAnswersActive) {&#13;
        var eventData = presenter.createEventData(addonID, fromID, toID, presenter.model, value, score);&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
            if (presenter.isAllOK()) sendAllOKEvent();&#13;
        }&#13;
    };&#13;
&#13;
    function sendAllOKEvent() {&#13;
        var eventData = {&#13;
            'source': addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    function clickLogic(element) {&#13;
        if (basicClickLogic(element))&#13;
            redraw();&#13;
    }&#13;
&#13;
    function basicClickLogic(element) {&#13;
        // workaround for android webView&#13;
        // http://code.google.com/p/android/issues/detail?id=38808&#13;
        var current = new Date().getTime();&#13;
        var delta = current - presenter.lastClickTime;&#13;
        if (!isSelectionPossible || delta &lt; 50) return;&#13;
        presenter.lastClickTime = current;&#13;
        if (!$(element).hasClass('selected') &amp;&amp; selectedItem == null) {&#13;
            // zaznaczony pierwszy element&#13;
            $(element).parent().find('.connectionItem').removeClass('selected');&#13;
            $(element).addClass('selected');&#13;
            selectedItem = $(element);&#13;
            return;&#13;
        }&#13;
        if (selectedItem != null &amp;&amp; $(element).get(0) == selectedItem.get(0)) {&#13;
            // ponownie klikniÄ™ty juĹĽ zaznaczony element&#13;
            $(element).removeClass('selected');&#13;
            selectedItem = null;&#13;
            return;&#13;
        }&#13;
        if (selectedItem != null &amp;&amp;&#13;
            ($(element).parents('.connectionLeftColumn').get(0) == selectedItem.parents('.connectionLeftColumn').get(0) ||&#13;
                $(element).parents('.connectionRightColumn').get(0) == selectedItem.parents('.connectionRightColumn').get(0))) {&#13;
            // klikniÄ™ty element w tej samej kolumnie&#13;
            var linesToSwitch = [];&#13;
            if (singleMode) {&#13;
                for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
                    if (presenter.lineStack.get(i).connects(selectedItem)) {&#13;
                        linesToSwitch.push(presenter.lineStack.get(i))&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            selectedItem.removeClass('selected');&#13;
            if (linesToSwitch.length == 0) {&#13;
                $(element).addClass('selected');&#13;
                selectedItem = $(element);&#13;
                return;&#13;
            } else {&#13;
                for (i in linesToSwitch) {&#13;
                    presenter.lineStack.remove(linesToSwitch[i]);&#13;
                    pushConnection(new Line($(element), linesToSwitch[i].otherSide(selectedItem)), false);&#13;
                }&#13;
            }&#13;
        } else {&#13;
            if(presenter.checkIfConnectionDisabled($(element).attr('id'), selectedItem.attr('id'))){&#13;
                return;&#13;
            }&#13;
            var line = new Line($(element), selectedItem);&#13;
            var shouldDraw = true;&#13;
&#13;
            if (singleMode) {&#13;
                var usedInLines = presenter.lineStack.isItemUsed(line);&#13;
                if (usedInLines.length == 2) {&#13;
                    shouldDraw = false&#13;
                }&#13;
            }&#13;
            if (shouldDraw) {&#13;
                pushConnection(line, false);&#13;
            }&#13;
        }&#13;
&#13;
        selectedItem.removeClass('selected');&#13;
        selectedItem = null;&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.drawTempLine = function(x,y) {&#13;
        if ($(presenter.view).find('#connection_line_tmp').length &gt; 0) {&#13;
            $(presenter.view).find('#connection_line_tmp').remove();&#13;
        }&#13;
        var m, angle, d, transform,&#13;
            x1 = parseInt(presenter.iconLeft, 10),&#13;
            y1 = parseInt(presenter.iconTop, 10);&#13;
&#13;
        m = (y-y1)/(x-x1);&#13;
        angle = (Math.atan(m))*180/(Math.PI);&#13;
        d = Math.sqrt(((x-x1)*(x-x1)) + ((y-y1)*(y-y1)));&#13;
        if (x &gt;= x1){&#13;
            transform = (360 + angle) % 360;&#13;
        } else {&#13;
            transform = 180 + angle;&#13;
        }&#13;
&#13;
        var div = $('&lt;div&gt;');&#13;
        div.attr('id','connection_line_tmp');&#13;
        div.attr('class','connection_line');&#13;
        div.attr('style','left: '+x1+'px; top: '+y1+'px');&#13;
        $(presenter.view).prepend(div);&#13;
        $(presenter.view).find('#connection_line_tmp').css({&#13;
            'left': x1,&#13;
            'top': y1,&#13;
            'width': d,&#13;
            'background-color': connectionColor,&#13;
            'transform' : 'rotate('+transform+'deg)',&#13;
            'transform-origin' : '0px 0px',&#13;
            '-ms-transform' : 'rotate('+transform+'deg)',&#13;
            '-ms-transform-origin' : '0px 0px',&#13;
            '-moz-transform' : 'rotate('+transform+'deg)',&#13;
            '-moz-transform-origin' : '0px 0px',&#13;
            '-webkit-transform' : 'rotate('+transform+'deg)',&#13;
            '-webkit-transform-origin' : '0px 0px',&#13;
            '-o-transform' : 'rotate('+transform+'deg)',&#13;
            '-o-transform-origin' : '0px 0px'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.registerListeners = function (view) {&#13;
&#13;
        presenter.$connectionContainer = $(view).find('.connectionContainer');&#13;
        presenter.$leftColumn = $(view).find('connectionLeftColumn');&#13;
        presenter.$rightColumn = $(view).find('connectionRightColumn');&#13;
&#13;
        presenter.$connectionContainer.click(function (e){&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$leftColumn.click(function (e){&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$rightColumn.click(function (e){&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        var element = $(view).find('.connectionItem');&#13;
        var draggedElementColumn;&#13;
&#13;
        element.on('touchstart', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
            presenter.lastEvent = e;&#13;
        });&#13;
&#13;
        var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
        if (["4.1.1", "4.2.2", "4.4.2"].indexOf(android_ver) === -1 || window.navigator.userAgent.indexOf('Chrome') &gt; 0) {&#13;
            element.each(function(){&#13;
                var e = $(this);&#13;
                e.draggable({&#13;
                    revert: presenter.removeDraggedElement ? true : "invalid",&#13;
                    opacity: presenter.removeDraggedElement ? 1 : 0.7,&#13;
                    helper: presenter.removeDraggedElement ? "original": "clone",&#13;
                    cursorAt: {&#13;
                        left: Math.round(e.find('.inner').width()/2),&#13;
                        top: Math.round(e.find('.inner').height()/2)&#13;
                    },&#13;
                    start: function (event, ui) {&#13;
                        ui.helper.css("visibility", "hidden");&#13;
                        presenter.iconTop = $(e).find(".iconWrapper").position().top + ($(e).find(".iconWrapper").height()/2);&#13;
                        presenter.iconLeft = $(e).find(".iconWrapper").position().left + $(e).find(".iconWrapper").width();&#13;
&#13;
                        if (!isSelectionPossible) {&#13;
                            event.stopPropagation();&#13;
                            event.preventDefault();&#13;
                            return;&#13;
                        }&#13;
                        $(element).removeClass('selected');&#13;
                        selectedItem = null;&#13;
                        ui.helper.zIndex(100);&#13;
                        clickLogic(this);&#13;
                        if (presenter.removeDraggedElement) {&#13;
                            ui.helper.find('.icon').hide();&#13;
                            ui.helper.removeClass('selected');&#13;
                        } else {&#13;
                            ui.helper.find('.icon').remove();&#13;
                            ui.helper.width($(this).find('.inner').width());&#13;
                            ui.helper.height($(this).find('.inner').height());&#13;
                        }&#13;
                        if ($(this).parents('.connectionLeftColumn').length) {&#13;
                            draggedElementColumn = 'left';&#13;
                        } else {&#13;
                            draggedElementColumn = 'right';&#13;
                        }&#13;
                    },&#13;
                    drag: function (event, ui) {&#13;
                        presenter.mouseSX = parseInt(event.pageX,10) - parseInt($(presenter.view).offset().left,10);&#13;
                        presenter.mouseSY = parseInt(event.pageY,10) - parseInt($(presenter.view).offset().top,10);&#13;
&#13;
                        presenter.drawTempLine(presenter.mouseSX, presenter.mouseSY);&#13;
                    },&#13;
                    stop: function (event, ui) {&#13;
                        ui.helper.zIndex(0);&#13;
                        if (presenter.removeDraggedElement) {&#13;
                            ui.helper.find('.icon').show();&#13;
                        } else {&#13;
                            ui.helper.remove();&#13;
                        }&#13;
                        redraw();&#13;
                        if ($(presenter.view).find('#connection_line_tmp').length &gt; 0) {&#13;
                            $(presenter.view).find('#connection_line_tmp').remove();&#13;
                        }&#13;
                    }&#13;
                });&#13;
&#13;
                e.droppable({&#13;
                    drop: function (event, ui) {&#13;
                        $(this).removeClass('selected');&#13;
                        basicClickLogic(this);&#13;
                        ui.draggable.removeClass('selected');&#13;
                        if (presenter.lastEvent) {&#13;
                            presenter.lastEvent.type = "touchend";&#13;
                        }&#13;
                    },&#13;
                    over: function (event, ui) {&#13;
                        var elementColumn;&#13;
                        if ($(this).parents('.connectionLeftColumn').length) {&#13;
                            elementColumn = 'left';&#13;
                        } else {&#13;
                            elementColumn = 'right';&#13;
                        }&#13;
                        if (elementColumn != draggedElementColumn) {&#13;
                            $(this).addClass('selected');&#13;
                        }&#13;
                    },&#13;
                    out: function (event, ui) {&#13;
                        $(this).removeClass('selected');&#13;
                    }&#13;
                });&#13;
            });&#13;
        } else {&#13;
            element.on('mouseleave', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            element.on('mouseenter', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            element.on('mouseup', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            element.on('mousedown', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            element.on('mouseover', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            element.on('mouseout', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
        }&#13;
        element.on('touchend', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
            if (presenter.lastEvent.type != e.type) {&#13;
                presenter.isClicked = false;&#13;
                clickLogic(this);&#13;
                presenter.isClicked = true;&#13;
            }&#13;
        });&#13;
&#13;
        element.click(function (e) {&#13;
            e.stopPropagation();&#13;
            if(!presenter.isClicked){&#13;
                clickLogic(this);&#13;
            }&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.setSingleMode = function (singleModeString) {&#13;
        singleMode = (singleModeString.toLowerCase() === 'true')&#13;
    };&#13;
&#13;
    presenter.addClassToElement = function (element, additionalClass) {&#13;
        if (additionalClass) {&#13;
            $(element).addClass(additionalClass);&#13;
        }&#13;
&#13;
        return element;&#13;
    };&#13;
&#13;
    presenter.loadElements = function (view, model, columnClass, columnModel, isRightColumn) {&#13;
        var column = $(view).find('.' + columnClass + ':first').find('.content:first');&#13;
        for (var i = 0, columnLength = model[columnModel].length; i &lt; columnLength; i++) {&#13;
            presenter.appendElements(i, model, columnModel, column, isRightColumn);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isIDUnique = function (id) {&#13;
        if (id == '') return true;&#13;
        if ($.inArray(id, presenter.uniqueIDs) &lt; 0) {&#13;
            presenter.uniqueIDs.push(id);&#13;
            return true;&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.appendElements = function (i, model, columnModel, column, isRightColumn) {&#13;
        var id = model[columnModel][i]['id'];&#13;
        if (!this.isIDUnique(id)) {&#13;
            return $(this.view).html(this.ERROR_MESSAGES['ID not unique']);&#13;
        }&#13;
        var element = $('&lt;table class="connectionItem" id="connection-' + id + '"&gt;&lt;/div&gt;');&#13;
        var row = $('&lt;tr&gt;&lt;/tr&gt;');&#13;
        element.append(row);&#13;
        var innerElement = $('&lt;td class="inner"&gt;&lt;/td&gt;');&#13;
        var innerWrapper = $('&lt;div class="innerWrapper"&gt;&lt;/div&gt;');&#13;
        innerWrapper = presenter.addClassToElement(innerWrapper, model[columnModel][i]['additional class']);&#13;
        $(innerWrapper).css('direction', isRTL ? 'rtl' : 'ltr');&#13;
        innerWrapper.html(model[columnModel][i]['content']);&#13;
        innerElement.append(innerWrapper);&#13;
        var iconElement = $('&lt;td class="icon"&gt;&lt;/td&gt;');&#13;
        var iconWrapper = $('&lt;div class="iconWrapper"&gt;&lt;/div&gt;');&#13;
        iconElement.append(iconWrapper);&#13;
        if (isRightColumn) {&#13;
            row.append(iconElement);&#13;
            row.append(innerElement);&#13;
        } else {&#13;
            row.append(innerElement);&#13;
            row.append(iconElement);&#13;
        }&#13;
        presenter.elements.push({&#13;
            element: element,&#13;
            id: id,&#13;
            connects: model[columnModel][i]['connects to']&#13;
        });&#13;
        var newRow = $('&lt;tr&gt;&lt;/tr&gt;');&#13;
        var newCell = $('&lt;td class="connectionItemWrapper"&gt;&lt;/td&gt;');&#13;
        newCell.append(element);&#13;
        newRow.append(newCell);&#13;
        column.append(newRow);&#13;
    };&#13;
&#13;
    presenter.loadRandomElementsLeft = function (view, model, columnClass, columnModel, isRightColumn) {&#13;
        var column = $(view).find('.' + columnClass + ':first').find('.content:first');&#13;
        var elementCounterLeft = 0;&#13;
        var columnLength = model[columnModel].length;&#13;
        while (elementCounterLeft &lt; model[columnModel].length) {&#13;
            var i = Math.floor((Math.random() * columnLength));&#13;
            if (presenter.isElementLeftUnique(i)){&#13;
                presenter.appendElements(i, model, columnModel, column, isRightColumn);&#13;
                elementCounterLeft++;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.loadRandomElementsRight = function (view, model, columnClass, columnModel, isRightColumn) {&#13;
        var column = $(view).find('.' + columnClass + ':first').find('.content:first');&#13;
        var elementCounterRight = 0;&#13;
        var columnLength = model[columnModel].length;&#13;
        while (elementCounterRight &lt; model[columnModel].length) {&#13;
            var i = Math.floor((Math.random() * columnLength));&#13;
            if (presenter.isElementRightUnique(i)){&#13;
                presenter.appendElements(i, model, columnModel, column, isRightColumn);&#13;
                elementCounterRight++;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isElementLeftUnique = function (element) {&#13;
        var isElement = false;&#13;
        for (var i=0; i&lt;presenter.uniqueElementLeft.length; i++){&#13;
            if(presenter.uniqueElementLeft[i] == element){&#13;
              isElement = true;&#13;
            }&#13;
        }&#13;
        if(isElement){&#13;
            return false;&#13;
        }else{&#13;
            presenter.uniqueElementLeft.push(element);&#13;
            return true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isElementRightUnique = function (element) {&#13;
        var isElement = false;&#13;
        for (var i=0; i&lt;presenter.uniqueElementRight.length; i++){&#13;
            if(presenter.uniqueElementRight[i] == element){&#13;
                isElement = true;&#13;
            }&#13;
        }&#13;
        if(isElement){&#13;
            return false;&#13;
        }else{&#13;
            presenter.uniqueElementRight.push(element);&#13;
            return true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.initializeView = function (view, model) {&#13;
        var leftColumnHeight = $(view).find('.connectionLeftColumn:first').outerHeight();&#13;
        var rightColumnHeight = $(view).find('.connectionRightColumn:first').outerHeight();&#13;
        var height = model['Height'];// leftColumnHeight &gt; rightColumnHeight ? leftColumnHeight : rightColumnHeight;&#13;
        var leftColumnWidth = $(view).find('.connectionLeftColumn:first').outerWidth(true);&#13;
        var rightColumnWidth = $(view).find('.connectionRightColumn:first').outerWidth(true);&#13;
        var width = model['Width'] - leftColumnWidth - rightColumnWidth;&#13;
&#13;
        presenter.height = height;&#13;
        presenter.width = width;&#13;
&#13;
        var context = connections[0].getContext('2d');&#13;
        context.canvas.width = width;&#13;
        context.canvas.height = height;&#13;
        connections.css({&#13;
            width: width + 'px',&#13;
            height: height + 'px'&#13;
        });&#13;
        connections.translateCanvas({&#13;
            x: 0.5, y: 0.5&#13;
        });&#13;
    };&#13;
&#13;
    presenter.gatherCorrectConnections = function () {&#13;
        presenter.correctConnections.clear();&#13;
        var elements = presenter.elements;&#13;
        for (var i = 0, elementsLength = elements.length; i &lt; elementsLength; i++) {&#13;
            var connects = elements[i]['connects'].split(',');&#13;
            for (var j = 0; j &lt; connects.length; j++) {&#13;
                if (connects[j] != "" &amp;&amp;&#13;
                    $.inArray(connects[j], presenter.uniqueIDs) &gt;= 0) {&#13;
                    var pair = [elements[i]['id'], connects[j]];&#13;
                    var line = new Line(&#13;
                        getElementById(pair[0]),&#13;
                        getElementById(pair[1])&#13;
                    );&#13;
                   if (!presenter.correctConnections.hasPair(pair)) {&#13;
                        presenter.correctConnections.push(line);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawConfiguredConnections = function () {&#13;
        for (var i = 0; i &lt; presenter.correctConnections.length(); i++) {&#13;
            pushConnection(presenter.correctConnections.get(i), true)&#13;
        }&#13;
        redraw();&#13;
    };&#13;
&#13;
    function getElementSnapPoint(element) {&#13;
        var offset = element.offset();&#13;
        var snapPoint = [0, 0];&#13;
        if (element.parents('.connectionLeftColumn').length &gt; 0) {&#13;
            snapPoint = [offset.left + element.outerWidth(true), offset.top + element.outerHeight() / 2]&#13;
        }&#13;
        if (element.parents('.connectionRightColumn').length &gt; 0) {&#13;
            snapPoint = [offset.left, offset.top + element.outerHeight() / 2]&#13;
        }&#13;
        return snapPoint&#13;
    }&#13;
&#13;
    function pushConnection(line, isPreview) {&#13;
        var addLine = true, linesToRemove = [], existingLines;&#13;
        if (singleMode) {&#13;
            existingLines = presenter.lineStack.isItemUsed(line);&#13;
            if (existingLines.length &gt; 0) {&#13;
                if (!isPreview) {&#13;
                    linesToRemove.push.apply(linesToRemove, existingLines)&#13;
                }&#13;
                if (presenter.lineStack.hasLine(line).length &gt; 0) {&#13;
                    addLine = false&#13;
                }&#13;
            }&#13;
        } else {&#13;
            existingLines = presenter.lineStack.hasLine(line);&#13;
            if (existingLines.length &gt; 0) {&#13;
                if (!isPreview) {&#13;
                    linesToRemove.push.apply(linesToRemove, existingLines);&#13;
                }&#13;
                addLine = false;&#13;
            }&#13;
        }&#13;
        for (var i = 0; i &lt; linesToRemove.length; i++) {&#13;
            presenter.lineStack.remove(linesToRemove[i]);&#13;
        }&#13;
        if (addLine) {&#13;
            presenter.lineStack.push(line);&#13;
        }&#13;
    }&#13;
&#13;
    function redraw() {&#13;
        connections.width = connections.width;&#13;
&#13;
        var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
        if (["4.1.1", "4.1.2", "4.2.2", "4.3", "4.4.2"].indexOf(android_ver) !== -1) {&#13;
            $(presenter.view).find('.connections').remove();&#13;
            var canvas2 = $('&lt;canvas&gt;&lt;/canvas&gt;');&#13;
            canvas2.addClass('connections');&#13;
            $(presenter.view).find('.connectionMiddleColumn').append(canvas2);&#13;
&#13;
            var context = canvas2[0].getContext('2d');&#13;
            context.canvas.width = presenter.width;&#13;
            context.canvas.height = presenter.height;&#13;
            canvas2.css({&#13;
                width: presenter.width + 'px',&#13;
                height: presenter.height + 'px'&#13;
            });&#13;
            canvas2.translateCanvas({&#13;
                x: 0.5, y: 0.5&#13;
            });&#13;
&#13;
            connections = $(presenter.view).find('.connections');&#13;
        }else{&#13;
            connections.clearCanvas();&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
            drawLine(presenter.lineStack.get(i), connectionColor)&#13;
        }&#13;
    }&#13;
&#13;
    function redrawShowAnswers () {&#13;
        connections.width = connections.width;&#13;
        connections.clearCanvas();&#13;
        for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
            drawLine(presenter.lineStack.get(i), showAnswersColor)&#13;
        }&#13;
    }&#13;
&#13;
    function drawLine(line, color) {&#13;
        connections.width = connections.width;&#13;
        var from = getElementSnapPoint(line.from);&#13;
        var to = getElementSnapPoint(line.to);&#13;
        var canvasOffset = connections.offset();&#13;
        connections.drawLine({&#13;
            strokeStyle: color,&#13;
            strokeWidth: connectionThickness,&#13;
            x1: to[0] - canvasOffset.left, y1: to[1] - canvasOffset.top,&#13;
            x2: from[0] - canvasOffset.left, y2: from[1] - canvasOffset.top&#13;
        });&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (isNotActivity) return 0;&#13;
&#13;
        connections.width = connections.width;&#13;
        connections.clearCanvas();&#13;
        for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
            var line = presenter.lineStack.get(i);&#13;
            if (presenter.correctConnections.hasLine(line).length &gt; 0) {&#13;
                drawLine(presenter.lineStack.get(i), correctConnection);&#13;
                var fromElementCorrect = $(presenter.view).find('#'+presenter.lineStack.get(i).from[0].id);&#13;
                var toElementCorrect = $(presenter.view).find('#'+presenter.lineStack.get(i).to[0].id);&#13;
                $(fromElementCorrect).addClass('connectionItem-correct');&#13;
                $(toElementCorrect).addClass('connectionItem-correct');&#13;
            } else {&#13;
                drawLine(presenter.lineStack.get(i), incorrectConnection);&#13;
                var fromElementIncorrect = $(presenter.view).find('#'+presenter.lineStack.get(i).from[0].id);&#13;
                var toElementIncorrect = $(presenter.view).find('#'+presenter.lineStack.get(i).to[0].id);&#13;
                $(fromElementIncorrect).addClass('connectionItem-wrong');&#13;
                $(toElementIncorrect).addClass('connectionItem-wrong');&#13;
            }&#13;
        }&#13;
        $(presenter.view).find('.connectionItem').each(function () {&#13;
           if ($(this).hasClass('connectionItem-correct') &amp;&amp; $(this).hasClass('connectionItem-wrong')) {&#13;
               $(this).removeClass('connectionItem-correct');&#13;
           }&#13;
        });&#13;
        presenter.$connectionContainer.find('.selected').removeClass('selected');&#13;
        selectedItem = null;&#13;
        isSelectionPossible = false;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.gatherCorrectConnections();&#13;
        redraw();&#13;
        $(presenter.view).find('.connectionItem').each(function () {&#13;
            $(this).removeClass('connectionItem-correct');&#13;
            $(this).removeClass('connectionItem-wrong');&#13;
        });&#13;
        isSelectionPossible = true;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.lineStack.clear();&#13;
        isSelectionPossible = true;&#13;
        presenter.$connectionContainer.find('.selected').removeClass('selected');&#13;
        $(presenter.view).find('.connectionItem').each(function () {&#13;
            $(this).removeClass('connectionItem-correct');&#13;
            $(this).removeClass('connectionItem-wrong');&#13;
        });&#13;
&#13;
        redraw();&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
        presenter.isVisible = presenter.isVisibleByDefault;&#13;
        presenter.disabledConnections = [];&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (isNotActivity) return 0;&#13;
&#13;
        var errors = 0;&#13;
        for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
            var line = presenter.lineStack.get(i);&#13;
            if (presenter.correctConnections.hasLine(line).length == 0) {&#13;
                errors++;&#13;
            }&#13;
        }&#13;
        return errors;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if (isNotActivity) return 0;&#13;
&#13;
        return presenter.correctConnections.length();&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if (isNotActivity) return 0;&#13;
&#13;
        var score = 0;&#13;
        for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
            var line = presenter.lineStack.get(i);&#13;
            if (presenter.correctConnections.hasLine(line).length &gt; 0) {&#13;
                score++;&#13;
            }&#13;
        }&#13;
        return score;&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        var id = [];&#13;
        for (var i = 0; i &lt; presenter.lineStack.ids.length; i++) {&#13;
            id.push(presenter.lineStack.ids[i].join(':'))&#13;
        }&#13;
        return JSON.stringify({&#13;
            id: id,&#13;
            isVisible: presenter.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var hookExecuted = false;&#13;
&#13;
        presenter.mathJaxProcessEnded.then(function () {&#13;
            if (state != '' &amp;&amp; !hookExecuted) {&#13;
                presenter.lineStack.setSendEvents(false);&#13;
&#13;
                var parsedState = JSON.parse(state);&#13;
                var id;&#13;
                if(typeof parsedState.isVisible !== "undefined"){&#13;
                    id = parsedState.id;&#13;
                    presenter.setVisibility(parsedState.isVisible);&#13;
                    presenter.isVisible = parsedState.isVisible;&#13;
                }else{&#13;
                    id = parsedState;&#13;
                }&#13;
                for (var i = 0; i &lt; id.length; i++) {&#13;
                    var pair = id[i].split(':');&#13;
                    pushConnection(new Line(getElementById(pair[0]), getElementById(pair[1])), false);&#13;
                }&#13;
&#13;
                presenter.lineStack.setSendEvents(true);&#13;
                redraw();&#13;
            }&#13;
&#13;
            hookExecuted = true;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.validateAdditionalClass = function (view, additionalClass) {&#13;
        var additionalClassElements = $(view).find('.' + additionalClass);&#13;
        var isAdditionalClass = $(view).find('.' + additionalClass).length &gt; 0;&#13;
&#13;
        if (!isAdditionalClass) {&#13;
            return { isPresent: false, count: 0 };&#13;
        }&#13;
&#13;
        return { isPresent: true, count: additionalClassElements.length };&#13;
    };&#13;
&#13;
    presenter.validateView = function (view, searchingKeyword) {&#13;
        var validatedAdditionalClass = presenter.validateAdditionalClass(view, searchingKeyword);&#13;
        if (!validatedAdditionalClass.isPresent) {&#13;
            return { isPresent: false, count: validatedAdditionalClass.count };&#13;
        }&#13;
        return { isPresent: true, count: validatedAdditionalClass.count };&#13;
    };&#13;
&#13;
    presenter.getElementById = function (id) {&#13;
        return getElementById(id);&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.isSelected = function (leftIndex, rightIndex) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var leftElement = getElementById(leftIndex);&#13;
        var rightElement = getElementById(rightIndex);&#13;
        var line = new Line(leftElement, rightElement);&#13;
        return (presenter.lineStack.hasLine(line).length &gt; 0);&#13;
    };&#13;
&#13;
    presenter.isAttempted = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return (presenter.lineStack.stack.length &gt; 0)&#13;
    };&#13;
&#13;
&#13;
    presenter.markAsCorrect = function (leftIndex, rightIndex) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var leftElement = getElementById(leftIndex);&#13;
        var rightElement = getElementById(rightIndex);&#13;
        var line = new Line(leftElement, rightElement);&#13;
        presenter.correctConnections.push(line);&#13;
        if (presenter.lineStack.hasLine(line))&#13;
            drawLine(line, correctConnection);&#13;
&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function (leftIndex, rightIndex) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var leftElement = getElementById(leftIndex);&#13;
        var rightElement = getElementById(rightIndex);&#13;
        var line = new Line(leftElement, rightElement);&#13;
        if (presenter.correctConnections.hasLine(line))&#13;
            presenter.correctConnections.remove(line);&#13;
        if (presenter.lineStack.hasLine(line))&#13;
        drawLine(line, incorrectConnection);&#13;
&#13;
    };&#13;
&#13;
    presenter.isSelectedCommand = function (params) {&#13;
        presenter.isSelected(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.markAsCorrectCommand = function (params) {&#13;
        presenter.markAsCorrect(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.markAsWrongCommand = function (params) {&#13;
        presenter.markAsWrong(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.isAttemptedCommand = function () {&#13;
        return presenter.isAttempted();&#13;
    };&#13;
&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (!isSelectionPossible) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'isSelected': presenter.isSelectedCommand,&#13;
            'markAsCorrect': presenter.markAsCorrectCommand,&#13;
            'markAsWrong': presenter.markAsWrongCommand,&#13;
            'isAttempted' : presenter.isAttemptedCommand,&#13;
            'showAnswers': presenter.showAnswers,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'hideAnswers': presenter.hideAnswers,&#13;
            'disable': presenter.disableCommand,&#13;
            'enable': presenter.enableCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.disableCommand = function (params) {&#13;
        presenter.disable(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.disable = function(id1, id2) {&#13;
        presenter.disabledConnections.push({id1: id1, id2: id2});&#13;
    };&#13;
&#13;
    presenter.enableCommand = function (params) {&#13;
        presenter.enable(params[0], params[1]);&#13;
    };&#13;
&#13;
    function convertIds (id1, id2){&#13;
        id1 = id1.toString();&#13;
        id2 = id2.toString();&#13;
&#13;
        id1 = id1.substr(id1.indexOf("-") + 1);&#13;
        id2 = id2.substr(id2.indexOf("-") + 1);&#13;
&#13;
        return {&#13;
            id1: id1,&#13;
            id2: id2&#13;
        }&#13;
    }&#13;
&#13;
    presenter.enable = function(id1, id2) {&#13;
        var convertedIds = convertIds(id1, id2);&#13;
        id1 = convertedIds.id1;&#13;
        id2 = convertedIds.id2;&#13;
&#13;
        for (var i=0; i &lt; presenter.disabledConnections.length; i++){&#13;
            if((presenter.disabledConnections[i].id1 == id1 &amp;&amp; presenter.disabledConnections[i].id2 == id2) ||&#13;
                (presenter.disabledConnections[i].id1 == id2 &amp;&amp; presenter.disabledConnections[i].id2 == id1)){&#13;
                presenter.disabledConnections.splice(i, 1);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.checkIfConnectionDisabled = function (id1, id2) {&#13;
        var convertedIds = convertIds(id1, id2);&#13;
        id1 = convertedIds.id1;&#13;
        id2 = convertedIds.id2;&#13;
&#13;
        for (var i=0; i &lt; presenter.disabledConnections.length; i++){&#13;
            if((presenter.disabledConnections[i].id1 == id1 &amp;&amp; presenter.disabledConnections[i].id2 == id2) ||&#13;
                (presenter.disabledConnections[i].id1 == id2 &amp;&amp; presenter.disabledConnections[i].id2 == id1)){&#13;
                return true;&#13;
            }&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (isNotActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.tmpElements = [];&#13;
        for (var elem = 0; elem &lt; presenter.lineStack.ids.length; elem++) {&#13;
            presenter.tmpElements.push(presenter.lineStack.ids[elem].join(':'))&#13;
        }&#13;
&#13;
        presenter.lineStack.clear();&#13;
        redraw();&#13;
&#13;
        var elements = presenter.elements;&#13;
        for (var i = 0, elementsLength = elements.length; i &lt; elementsLength; i++) {&#13;
            var connects = elements[i]['connects'].split(',');&#13;
            for (var j = 0; j &lt; connects.length; j++) {&#13;
                if (connects[j] != "" &amp;&amp; $.inArray(connects[j], presenter.uniqueIDs) &gt;= 0) {&#13;
                    var pair = [elements[i]['id'], connects[j]];&#13;
                    var line = new Line(&#13;
                        getElementById(pair[0]),&#13;
                        getElementById(pair[1])&#13;
                    );&#13;
                    presenter.lineStack.push(line);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        redrawShowAnswers();&#13;
        presenter.lineStack.clear();&#13;
        isSelectionPossible = false;&#13;
&#13;
        for (var element = 0; element &lt;  presenter.tmpElements.length; element++) {&#13;
            var pairs =  presenter.tmpElements[element].split(':');&#13;
            pushConnection(new Line(getElementById(pairs[0]), getElementById(pairs[1])), false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (isNotActivity) {&#13;
            return;&#13;
        }&#13;
        redraw();&#13;
        presenter.isShowAnswersActive = false;&#13;
        isSelectionPossible = true;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Connector" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Tasks" nameLabel="Connector_property_tasks" type="list">
			<property name="Source" nameLabel="Connector_property_source" type="string"/>
			<property name="Item" nameLabel="Connector_property_item" type="string"/>
			<property name="Value" nameLabel="Connector_property_value" type="string"/>
			<property name="Score" nameLabel="Connector_property_score" type="string"/>
			<property name="Script" nameLabel="Connector_property_script" type="text"/>
		</property>
	</model>
<css/><view/><preview/><presenter>function AddonConnector_create () {&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        VT_01: "Each task has to be assigned to source Addon!",&#13;
        VT_02: "Each task must have Script section filled!"&#13;
    };&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
    var tasks = [];&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        var scripts = presenter.findMatchingTasks(tasks, eventData);&#13;
&#13;
        for (var i = 0, length = scripts.length; i &lt; length; i += 1) {&#13;
            playerController.getCommands().executeEventCode(scripts[i]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    function presenterLogic (view, model, isPreview) {&#13;
        var validatedTasks = presenter.validateTasks(model.Tasks);&#13;
&#13;
        if (validatedTasks.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_MESSAGES, validatedTasks.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        if (isPreview) return;&#13;
&#13;
        tasks = validatedTasks.tasks;&#13;
        eventBus = playerController.getEventBus();&#13;
        eventBus.addEventListener('ValueChanged', presenter);&#13;
&#13;
        presenter.setVisibility(view, false);&#13;
    }&#13;
&#13;
    presenter.setVisibility = function (view, isVisible) {&#13;
        $(view).css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.getTaskWithSource = function (tasks, source) {&#13;
        for (var i = 0, length = tasks.length; i &lt; length; i += 1) {&#13;
            if (tasks[i].source === source) return { index: i, tasks: tasks[i].tasks };&#13;
        }&#13;
&#13;
        return { index: -1 };&#13;
    };&#13;
&#13;
    presenter.addTask = function (tasks, task) {&#13;
        var index = presenter.getTaskWithSource(tasks, task.source).index;&#13;
&#13;
        if (index === -1) {&#13;
            tasks.push(task);&#13;
        } else {&#13;
            var existingTask = tasks[index];&#13;
&#13;
            for (var i = 0, length = task.tasks.length; i &lt; length; i += 1) {&#13;
                existingTask.tasks.push(task.tasks[i]);&#13;
            }&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateTask = function (task) {&#13;
        var isEmpty = ModelValidationUtils.isArrayElementEmpty(task);&#13;
&#13;
        if (!isEmpty &amp;&amp; !task.Source) return { isError: true, errorCode: "VT_01" };&#13;
        if (!isEmpty &amp;&amp; !task.Script) return { isError: true, errorCode: "VT_02" };&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            isEmpty: isEmpty,&#13;
            task: {&#13;
                source: task.Source,&#13;
                tasks: [{&#13;
                    item: task.Item,&#13;
                    value: task.Value,&#13;
                    score: task.Score,&#13;
                    script: task.Script&#13;
                }]&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateTasks = function (tasks) {&#13;
        if (ModelValidationUtils.isArrayEmpty(tasks)) return { tasks: [], isError: false };&#13;
&#13;
        var tasksArray = [];&#13;
        var isError = false;&#13;
&#13;
        for (var i = 0, length = tasks.length; i &lt; length; i += 1) {&#13;
            var validatedTask = presenter.validateTask(tasks[i]);&#13;
&#13;
            if (validatedTask.isError) return { isError: true, errorCode: validatedTask.errorCode };&#13;
&#13;
            presenter.addTask(tasksArray, validatedTask.task);&#13;
        }&#13;
&#13;
        return { tasks: tasksArray, isError: isError };&#13;
    };&#13;
&#13;
    presenter.FILTER_FIELD = {&#13;
        ITEM: 0,&#13;
        VALUE: 1,&#13;
        SCORE: 2&#13;
    };&#13;
&#13;
    presenter.filterTasks = function (tasks, value, field) {&#13;
        var filteredTasks = [];&#13;
&#13;
        for (var i = 0, length = tasks.length; i &lt; length; i += 1) {&#13;
            var fieldValue = "";&#13;
            switch (field) {&#13;
                case presenter.FILTER_FIELD.ITEM:&#13;
                    fieldValue = tasks[i].item;&#13;
                    break;&#13;
                case presenter.FILTER_FIELD.VALUE:&#13;
                    fieldValue = tasks[i].value;&#13;
                    break;&#13;
                case presenter.FILTER_FIELD.SCORE:&#13;
                    fieldValue = tasks[i].score;&#13;
                    break;&#13;
            }&#13;
&#13;
            if (fieldValue !== '') {&#13;
                var isWildcardExpression = fieldValue.indexOf('*') !== -1;&#13;
                fieldValue = fieldValue.replace('*', '.*');&#13;
                var fieldRegExp = new RegExp(fieldValue);&#13;
&#13;
                if (value.match(fieldRegExp)) {&#13;
                    if (isWildcardExpression) {&#13;
                        filteredTasks.push(tasks[i]);&#13;
                    } else  if (fieldValue.length === value.length) {&#13;
                        filteredTasks.push(tasks[i]);&#13;
                    }&#13;
                }&#13;
            } else {&#13;
                if (value === fieldValue) {&#13;
                    filteredTasks.push(tasks[i]);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return filteredTasks;&#13;
    };&#13;
&#13;
    presenter.findMatchingTasks = function (tasks, eventData) {&#13;
        var matchingTasks = [];&#13;
        var i = 0, length = 0;&#13;
&#13;
&#13;
        var taskWithSource = presenter.getTaskWithSource(tasks, eventData.source);&#13;
        if (taskWithSource.index === -1) {&#13;
            return [];&#13;
        }&#13;
&#13;
        for (i = 0, length = taskWithSource.tasks.length; i &lt; length; i += 1) {&#13;
            matchingTasks.push(taskWithSource.tasks[i]);&#13;
        }&#13;
&#13;
        var tasksFilteredByItem = presenter.filterTasks(matchingTasks, eventData.item, presenter.FILTER_FIELD.ITEM);&#13;
        var tasksFilteredByValue = presenter.filterTasks(tasksFilteredByItem, eventData.value, presenter.FILTER_FIELD.VALUE);&#13;
        var tasksFilteredByScore = presenter.filterTasks(tasksFilteredByValue, eventData.score, presenter.FILTER_FIELD.SCORE);&#13;
&#13;
        var scriptArray = [];&#13;
        for (i = 0, length = tasksFilteredByScore.length; i &lt; length; i += 1) {&#13;
            scriptArray.push(tasksFilteredByScore[i].script);&#13;
        }&#13;
&#13;
        return scriptArray;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Count_and_Graph" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Is not an activity" name="isNotActivity" nameLabel="Count_and_Graph_property_is_not_activity" type="boolean"/>
        <property isLocalized="true" name="X axis description" nameLabel="Count_and_Graph_property_x_axis_description" type="string"/>
        <property name="X axis data" nameLabel="Count_and_Graph_property_x_axis_data" type="list">
            <property name="Answer" nameLabel="Count_and_Graph_property_answer" type="string"/>
            <property name="Color" nameLabel="Count_and_Graph_property_color" type="string"/>
            <property isLocalized="true" name="Description" nameLabel="Count_and_Graph_property_description" type="string"/>
            <property name="Description image" nameLabel="Count_and_Graph_property_description_image" type="image"/>
        </property>
        <property isLocalized="true" name="Y axis description" nameLabel="Count_and_Graph_property_y_axis_description" type="string"/>
        <property name="Y axis maximum value" nameLabel="Count_and_Graph_property_y_axis_minimum_value" type="string"/>
        <property name="Y axis values" nameLabel="Count_and_Graph_property_y_axis_values" type="string"/>
        <property name="Bars width" nameLabel="Count_and_Graph_property_bars_width" type="string"/>
        <property name="Background color" nameLabel="Count_and_Graph_property_background_color" type="string"/>
        <property name="Grid line color" nameLabel="Count_and_Graph_property_grid_line_color" type="string"/>
        <property name="Border" nameLabel="Count_and_Graph_property_border" type="string"/>
    </model>
<css>.main_container {&#13;
    position: relative;&#13;
    background-color: transparent;&#13;
    margin: 5px;&#13;
}&#13;
&#13;
.upper_container {&#13;
    position: relative;&#13;
}&#13;
&#13;
.bottom_container {&#13;
&#13;
}&#13;
&#13;
.graph_container {&#13;
    position: absolute;&#13;
    opacity: 0.8;&#13;
    top: 0px;&#13;
    left: 30px;&#13;
    box-shadow: 3px 0 15px -4px #333;&#13;
}&#13;
&#13;
.column {&#13;
    background-color: white;&#13;
    position: absolute;&#13;
    opacity: 0.9;&#13;
    top: 0.5px;&#13;
    box-shadow: 3px 0 15px -4px #333, -3px 0 8px -4px #333;&#13;
}&#13;
&#13;
.jqplot-xaxis-label {&#13;
    position: absolute;&#13;
}&#13;
&#13;
.jqplot-xaxis {&#13;
    position: relative;&#13;
}&#13;
&#13;
.jqplot-xaxis-tick {&#13;
    position: absolute;&#13;
    font-size: 8px;&#13;
    text-align: center;&#13;
    heigth: 20px;&#13;
    top: 10px;&#13;
}&#13;
&#13;
.countGraph_image {&#13;
    position: absolute;&#13;
    width: 30px;&#13;
    height: 30px;&#13;
    margin-left: -15px;&#13;
}&#13;
&#13;
.axis_x_dash {&#13;
    position: absolute;&#13;
    height: 5px;&#13;
    width: 1px;&#13;
    background-color: black;&#13;
}&#13;
&#13;
.jqplot-yaxis-label {&#13;
    position: absolute;&#13;
    left: 0px;&#13;
    width: 30px;&#13;
    height: 30px;&#13;
}&#13;
&#13;
.jqplot-yaxis-tick {&#13;
    position: absolute;&#13;
    font-size: 10px;&#13;
    left: 10px;&#13;
    height: 15px;&#13;
    vertical-align: middle;&#13;
}&#13;
&#13;
.jqplot-yaxis {&#13;
    position: absolute;&#13;
    background-color: white;&#13;
    opacity: 0.8;&#13;
    top: 0px;&#13;
    left: 0px;&#13;
}&#13;
&#13;
.axis_y_dash {&#13;
    position: absolute;&#13;
    left: 26px;&#13;
    height: 2px;&#13;
    width: 8px;&#13;
    background-color: black;&#13;
}&#13;
</css><view/><preview/><presenter>function AddonCount_and_Graph_create() {&#13;
    /*&#13;
        KNOWN ISSUES:&#13;
            Properties:&#13;
                Float user input - should be noticed but parsed to INT with parseInt, due to backward compatibility issue&#13;
&#13;
                Axis Y Maximum Value:&#13;
                    Validation of property due to earlier versions of working &amp; invalid validation, converts floats to ints,&#13;
                    thats why it have to use parseFloat &amp; parseInt&#13;
&#13;
                Axis Y Values:&#13;
                   Validation requires below requirements due to backward compatibility:&#13;
                   - Supported only 1 cyclic value&#13;
                   - cyclic value is every string ending with "*", and parseInt validated&#13;
&#13;
                Bars width:&#13;
                    - Values between 0-1 are parsed to 1&#13;
&#13;
                Border:&#13;
                    - negative numbers are ignored -&gt; no border&#13;
                    - strings are ignored -&gt; no border&#13;
&#13;
                Axis X Data:&#13;
                    Answers values can be negative numbers or greater than axis Y max. It makes no sense, due to&#13;
                    addon activity is not solvable. Backward compatibility requires showing addon without being solvable.&#13;
                    Preview logic should show message  with addon, that addon configuration is invalid with answers.&#13;
    */&#13;
&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.graph = null;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.errorMode = false;&#13;
    presenter.observer = undefined;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        YAM_01: "Axis Y maximum value cant be lower or equal than 0.",&#13;
        YAM_02: "Axis Y maximum value have to be a integer string.",&#13;
        YAV_01: "Axis Y values cant be a non digit string.",&#13;
        YAV_02: "Axis Y cyclic value cant be equal or lower than 0.",&#13;
        YAV_03: "Axis Y fixed values cant be lower than 0.",&#13;
        YAV_04: "Axis Y values can\'t be greater than \"Axis Y Maximum Value\"",&#13;
        BW_01: "Bars width cant be lower than 0.",&#13;
        BW_02: "Bars width cant be a string.",&#13;
        BC_01: "Background color is not proper #RGB format.",&#13;
        AXD_01: "Axis data answers cant be empty string.",&#13;
        AXD_02: "Axis data answers have to be a positive integer value."&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function (message, substitutions) {&#13;
        var errorContainer;&#13;
        if (typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.getErrorObject = function (errorCode) {&#13;
        return { isValid: false, errorCode: errorCode };&#13;
    };&#13;
&#13;
    presenter.GRAPH_EVENT_TYPE = {&#13;
        BAR_SELECTED: 0,&#13;
        IMAGE_HAS_FINISHED_LOADING: 1,&#13;
        GRAPH_HAS_FINISHED_LOADING: 2&#13;
    };&#13;
&#13;
    presenter.barObject = function (parentColumn, color, width, height, barValue, columnIndex) {&#13;
        this._column = parentColumn;&#13;
        this._color = color;&#13;
        this._width = width;&#13;
        this._height = height;&#13;
        this._barValue = barValue;&#13;
        this._columnIndex = columnIndex;&#13;
        this.$view;&#13;
        this._$innerDiv;&#13;
        this._initView();&#13;
        this._connectEvents();&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._initView = function () {&#13;
        this.$view = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this.$view.css({&#13;
            'background-color': 'white',&#13;
            'height': this._height + "px",&#13;
            'width': this._width + "px",&#13;
            'position': 'relative'&#13;
        });&#13;
&#13;
        this._createInnerDivWithLabel();&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._createInnerDivWithLabel = function () {&#13;
        this._$innerDiv = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this._$innerDiv.addClass(this._getInitialClassName());&#13;
        this._$innerDiv.css({&#13;
            'position': 'absolute',&#13;
            'height': "0px",&#13;
            'width': "0px",&#13;
            'top': (this._height / 2) + "px",&#13;
            'left': (this._width / 2) + "px"&#13;
        });&#13;
&#13;
        this.$view.append(this._$innerDiv);&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._getInitialClassName = function () {&#13;
        return "jqplot-point-label jqplot-series-" + (this._barValue - 1) + " jqplot-point-" + this._columnIndex;&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.restoreInitialClassName = function () {&#13;
        this._$innerDiv.addClass(this._getInitialClassName());&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._connectEvents = function () {&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            this.$view[0].addEventListener("touchend", this, false);&#13;
        } else {&#13;
            this.$view[0].addEventListener("click", this, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.block = function () {&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            this.$view[0].removeEventListener("touchend", this, false);&#13;
        } else {&#13;
            this.$view[0].removeEventListener("click", this, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.unblock = function() {&#13;
        this._connectEvents()&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._notify = function (event) {&#13;
        this._column.update(event);&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.handleEvent = function (event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        switch(event.type) {&#13;
            case "click":&#13;
                var barEvent = this._createSelectEvent();&#13;
                this._highLight();&#13;
                this._notify(barEvent);&#13;
                break;&#13;
            case "touchend":&#13;
                var barEvent = this._createSelectEvent();&#13;
                this._highLight();&#13;
                this._notify(barEvent);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._createSelectEvent = function () {&#13;
        return {&#13;
            type: presenter.GRAPH_EVENT_TYPE.BAR_SELECTED,&#13;
            barValue: this._barValue&#13;
        };&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._highLight = function () {&#13;
        this.$view.css('background-color', 'rgb(224, 223, 219)');&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.setOff = function() {&#13;
        this.$view.css('background-color', 'white');&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.setOn = function() {&#13;
        this.$view.css('background-color', this._color);&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.setCssClass = function (cssClass) {&#13;
        this._$innerDiv.addClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.removeCssClass = function (cssClass) {&#13;
        this._$innerDiv.removeClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.columnObject = function (axisYMaximumValue, color, columnWidth, columnHeight, answer, columnIndex) {&#13;
        this._axisYMaximumValue = axisYMaximumValue;&#13;
        this._barsNumber = axisYMaximumValue;&#13;
        this._barsColor = color;&#13;
        this._topSelectedBarNumber = -1;&#13;
        this._height = columnHeight;&#13;
        this._columnWidth = columnWidth;&#13;
        this._answer = answer;&#13;
        this._columnIndex = columnIndex;&#13;
        this.$view;&#13;
        this._bars;&#13;
        this._initializeColumn();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._initializeColumn = function () {&#13;
        this._bars = this._createBars();&#13;
        this._initView();&#13;
        this._appendBarsToColumn(this._bars);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._appendBarsToColumn = function (barsArray) {&#13;
        for (var i = barsArray.length - 1; i &gt;= 0; i--) {&#13;
            this.$view.append(barsArray[i].$view);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._getBarWidth = function () {&#13;
        return this._columnWidth;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._getBarHeight = function () {&#13;
        return (this._height / this._barsNumber);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._initView = function () {&#13;
        this.$view = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this.$view.addClass("column");&#13;
        this.$view.css({&#13;
            'height': this._height + "px",&#13;
            'width': this._columnWidth + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.update = function (event) {&#13;
        switch(event.type) {&#13;
            case presenter.GRAPH_EVENT_TYPE.BAR_SELECTED:&#13;
                this._selectingBarLogic(event.barValue - 1);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._createBars = function () {&#13;
        var bars = [];&#13;
        var barWidth = this._getBarWidth();&#13;
        var barHeight = this._getBarHeight();&#13;
&#13;
        for(var i = 0; i &lt; this._barsNumber; i++) {&#13;
            var bar = new presenter.barObject(this, this._barsColor, barWidth, barHeight, i + 1, this._columnIndex);&#13;
            bars.push(bar);&#13;
        }&#13;
&#13;
        return bars;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._selectingBarLogic = function (selectedBarIndex) {&#13;
        var previousValue = this._topSelectedBarNumber;&#13;
        var change = "";&#13;
        this._setOffSelectedBar(selectedBarIndex);&#13;
&#13;
        if(this._columnShouldGetRaised(selectedBarIndex)) {&#13;
            this._raiseColumn();&#13;
            change = "increase";&#13;
        } else {&#13;
            this._lowerColumn();&#13;
            change = "decrease";&#13;
        }&#13;
&#13;
        this._sendEvents(change, previousValue);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._sendEvents = function (changeType, previousValue) {&#13;
        if(this._isCorrect()) {&#13;
            presenter.sendEvent(true, this._columnIndex, changeType);&#13;
        } else {&#13;
            this._sendIncorrectEvent(previousValue + 1, changeType);&#13;
        }&#13;
&#13;
        if(presenter.isAllOk()) {&#13;
            presenter.sendEventAllOk();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._sendIncorrectEvent = function (previousValue, changeType) {&#13;
        if (previousValue == this._answer &amp;&amp; changeType === "decrease") {&#13;
            return;&#13;
        }&#13;
&#13;
        if (previousValue &gt;= this._answer) {&#13;
            presenter.sendEvent(false, this._columnIndex, changeType);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._isCorrect = function () {&#13;
        return ((this._topSelectedBarNumber + 1) == this._answer);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._setOffSelectedBar = function (selectedBarIndex) {&#13;
        if (selectedBarIndex &gt; this._topSelectedBarNumber) {&#13;
            this._setOffBar(selectedBarIndex);&#13;
        } else {&#13;
            this._setOnBar(selectedBarIndex);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._columnShouldGetRaised = function (selectedBarIndex) {&#13;
        return (selectedBarIndex &gt; this._topSelectedBarNumber);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._setOffBar = function (barIndex) {&#13;
        this._bars[barIndex].setOff();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._lowerColumn = function () {&#13;
        this._setOffBar(this._topSelectedBarNumber);&#13;
        this._topSelectedBarNumber -= 1;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._raiseColumn = function () {&#13;
        this._setOnBar(this._topSelectedBarNumber + 1);&#13;
        this._topSelectedBarNumber += 1;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._setOnBar = function (barIndex) {&#13;
        this._bars[barIndex].setOn();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.setPosition = function (left) {&#13;
        this.$view.css({&#13;
            left: left + 'px'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.getWidth = function () {&#13;
        return this.$view.width();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.showAnswer = function () {&#13;
        this.cleanSelection();&#13;
        this._drawCorrectAnswer();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.hideAnswer = function () {&#13;
        this.cleanSelection();&#13;
        this._drawUserAnswer();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._drawCorrectAnswer = function () {&#13;
        for(var i = 0; i &lt; this._answer; i++) {&#13;
            this._setOnBar(i);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._drawUserAnswer = function () {&#13;
        for(var i = 0; i &lt;= this._topSelectedBarNumber; i++) {&#13;
            this._setOnBar(i);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.block = function () {&#13;
        this._bars.forEach(function (element) {&#13;
            element.block();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.unblock = function () {&#13;
        this._bars.forEach(function (element) {&#13;
            element.unblock();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.cleanSelection = function () {&#13;
        this._bars.forEach(function (element) {&#13;
            element.setOff();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._resetUserAnswer = function () {&#13;
        this._topSelectedBarNumber = -1;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.reset = function () {&#13;
        this.cleanSelection();&#13;
        this._resetUserAnswer();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.getScore = function () {&#13;
        if(this._isCorrect()) {&#13;
            return 1;&#13;
        }&#13;
&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.setShowErrorsMode = function () {&#13;
        if (this._topSelectedBarNumber &gt; -1) {&#13;
            var cssClass = this._getCssClassForCheckAnswers();&#13;
&#13;
            this._setBarCssClass(this._topSelectedBarNumber, cssClass);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._getCssClassForCheckAnswers = function () {&#13;
        return ("jqplot-point-label jqplot-series-" + this._topSelectedBarNumber + " jqplot-point-" + this._columnIndex +&#13;
                " " + this._getUserAnswerStatus());&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._getUserAnswerStatus = function () {&#13;
        var userAnswer = this._topSelectedBarNumber + 1;&#13;
&#13;
        if (userAnswer == this._answer) {&#13;
            return "ok";&#13;
        }&#13;
&#13;
        if (userAnswer &gt; this._answer) {&#13;
            return "down";&#13;
        }&#13;
&#13;
        return "up";&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._setBarCssClass = function (barIndex, cssClass) {&#13;
        this._bars[barIndex].setCssClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._removeBarCssClass = function (barIndex, cssClass) {&#13;
        this._bars[barIndex].removeCssClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.setWorkMode = function () {&#13;
        if (this._topSelectedBarNumber &gt; -1) {&#13;
            var cssClass = this._getCssClassForCheckAnswers();&#13;
&#13;
            this._removeBarCssClass(this._topSelectedBarNumber, cssClass);&#13;
            this._restoreBarInitialClassName(this._topSelectedBarNumber);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._restoreBarInitialClassName = function (barIndex) {&#13;
        this._bars[barIndex].restoreInitialClassName();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.setState = function (userSelection) {&#13;
        this.reset();&#13;
        this._topSelectedBarNumber = (userSelection - 1);&#13;
        this._drawUserAnswer();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.getState = function () {&#13;
        return (this._topSelectedBarNumber + 1);&#13;
    };&#13;
&#13;
&#13;
    presenter.graphObject = function ($parentDiv, axisYMaximumValue, answers, colors, descriptions, imagesDescriptions,&#13;
                                      barsWidth, backgroundColor, gridLineColor, cyclicValue, fixedValues, axisSpace,&#13;
                                      border, axisYDescription, axisXDescription, axisXImageHeight, axisXImageWidth) {&#13;
        this._axisSpace = axisSpace || 30;&#13;
        this._$parentDiv = $parentDiv;&#13;
        this._axisYMaximumValue = axisYMaximumValue;&#13;
        this._answers = answers;&#13;
        this._columnsNumber = answers.length;&#13;
        this._colors = colors;&#13;
        this._descriptions = descriptions;&#13;
        this._imagesDescriptions = imagesDescriptions;&#13;
        this._barsWidth = barsWidth;&#13;
        this._backgroundColor = backgroundColor;&#13;
        this._gridLineColor = gridLineColor;&#13;
        this._$graphContainer;&#13;
        this.$view;&#13;
        this.$upperContainer;&#13;
        this.$bottomContainer;&#13;
        this._$axisYContainer;&#13;
        this._$axisXContainer;&#13;
        this._columns;&#13;
        this._width = $parentDiv.width();&#13;
        this._height = $parentDiv.height();&#13;
        this._cyclicValue = cyclicValue;&#13;
        this._fixedValues = fixedValues;&#13;
        this._axisX;&#13;
        this._axisY;&#13;
        this._isBlocked = false;&#13;
        this._border = border;&#13;
        this._columnsAtMaxOffset = 10;&#13;
        this._axisXDescription = axisXDescription;&#13;
        this._axisYDescription = axisYDescription;&#13;
        this._axisXImageHeight = axisXImageHeight;&#13;
        this._axisXImageWidth =  axisXImageWidth;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGraphWidth = function () {&#13;
        return (this._width - this._axisSpace);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGraphHeight = function () {&#13;
        if (MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
            return this._getIOSGraphHeight();&#13;
        } else {&#13;
            return this._getDefaultGraphHeight();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getDefaultGraphHeight = function () {&#13;
        return (this._height - this._axisSpace);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getIOSGraphHeight = function () {&#13;
        var barHeight = this._getDefaultGraphHeight() / this._axisYMaximumValue;&#13;
&#13;
        if ((barHeight % 1) != 0) {&#13;
            return (Math.floor(barHeight) * this._axisYMaximumValue);&#13;
        }&#13;
&#13;
        return this._getDefaultGraphHeight();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getAxisYWidth = function () {&#13;
        return this._axisSpace;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getAxisYHeight = function () {&#13;
        return this._getGraphHeight();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getAxisXHeight = function () {&#13;
        return (this._axisXImageHeight || this._axisSpace);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._createGrid = function ($graphContainer) {&#13;
        var width = $graphContainer.width();&#13;
        var height = $graphContainer.height();&#13;
        var gridStep = this._getGridLineStep(height);&#13;
&#13;
        for (var i = 0, step = 0; i &lt;= this._axisYMaximumValue; i++, step += gridStep) {&#13;
            var $grid = this._getGridLine(width);&#13;
            $grid = this._positionGridLine($grid, step);&#13;
            $graphContainer.append($grid);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._positionGridLine = function ($grid, top) {&#13;
        var topRepaired = top;&#13;
&#13;
        if(top == 0) {&#13;
            topRepaired = 0;&#13;
        }&#13;
&#13;
        $grid.css({&#13;
            'position': 'absolute',&#13;
            'top': topRepaired + 'px'&#13;
        });&#13;
&#13;
        return $grid;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGridLineStep = function (height) {&#13;
        return (height / this._axisYMaximumValue);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGridLine = function (width) {&#13;
        var gridLine = $("&lt;div&gt;&lt;/div&gt;");&#13;
&#13;
        gridLine.css({&#13;
            'border-top': '1px solid ' + this._gridLineColor,&#13;
            'width': width + "px",&#13;
            'left': 0 + "px",&#13;
            'height': 1 + "px"&#13;
        });&#13;
&#13;
        return gridLine;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._createGraph = function () {&#13;
        this._$graphContainer = this._getGraphContainer(this._getGraphWidth(), this._getGraphHeight());&#13;
&#13;
        this._createGrid(this._$graphContainer);&#13;
&#13;
        this._columns = this._getColumns(this._getColumnWidth(), this._getGraphHeight());&#13;
&#13;
        this._appendColumns(this._$graphContainer, this._columns);&#13;
        this._positionColumnsInGraph();&#13;
&#13;
        return this._$graphContainer;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._positionColumnsInGraph = function () {&#13;
        var left = 0;&#13;
        var columnsMaxWidth = this._getColumnsMaxWidth();&#13;
        var rigth = columnsMaxWidth;&#13;
        for(var i = 0; i &lt; this._columns.length; i++) {&#13;
&#13;
            var middleOfSection = this._getMiddleOfColumnSection(left, rigth, this._columns[i].getWidth());&#13;
            this._columns[i].setPosition(middleOfSection);&#13;
&#13;
            left += columnsMaxWidth;&#13;
            rigth += columnsMaxWidth;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getBorderOffset = function () {&#13;
        // bars have 1px border, which creates offset for columns, and they dont fit into graph&#13;
        return (this._axisYMaximumValue - 1) * 2&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getMiddleOfColumnSection = function (left, right, columnsWidth) {&#13;
        var range = right - left;&#13;
&#13;
        if(columnsWidth == range) {&#13;
            return left;&#13;
        }&#13;
&#13;
        return ((range - columnsWidth) / 2) + left;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getColumnsMaxWidth = function () {&#13;
        return (this._getGraphWidth() / this._columnsNumber);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getColumnWidth = function () {&#13;
        if(this._barsWidth &gt; this._getColumnsMaxWidth()) {&#13;
            if ((this._getColumnsMaxWidth() - this._columnsAtMaxOffset) &lt; 0) {&#13;
                return 1;&#13;
            }&#13;
&#13;
            return (this._getColumnsMaxWidth() - this._columnsAtMaxOffset);&#13;
        }&#13;
&#13;
        return this._barsWidth;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._appendColumns = function ($container, columnsArray) {&#13;
        columnsArray.forEach(function (element) {&#13;
            $container.append(element.$view);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGraphContainer = function (width, height) {&#13;
        var $graphContainer = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $graphContainer.addClass("graph_container");&#13;
        $graphContainer.css({&#13;
            'background-color': this._backgroundColor + '',&#13;
            'height': height + "px",&#13;
            'width':  width + "px"&#13;
        });&#13;
&#13;
        this._setGraphContainerBorder($graphContainer);&#13;
&#13;
        return $graphContainer;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._setGraphContainerBorder = function ($graphContainer) {&#13;
        if(this._border &gt; 0) {&#13;
            if(this._border &gt; 3) {&#13;
                $graphContainer.css({&#13;
                    "border": "3px solid black",&#13;
                    "margin": "0px",&#13;
                    "padding": "0px"&#13;
                });&#13;
            } else {&#13;
                $graphContainer.css({&#13;
                    border: this._border + "px solid black",&#13;
                    "margin": "0px",&#13;
                    "padding": "0px"&#13;
                });&#13;
            }&#13;
        } else {&#13;
            $graphContainer.css({&#13;
                border: 0 + "px solid black",&#13;
                "margin": "0px",&#13;
                "padding": "0px"&#13;
            })&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._createAxisY = function () {&#13;
        var axisY = new presenter.axisYObject(this._axisYMaximumValue, this._getAxisYWidth(), this._getAxisYHeight(),&#13;
                                              this._cyclicValue, this._fixedValues, this._axisYDescription,&#13;
                                              this._gridLineColor);&#13;
        this._axisY = axisY;&#13;
&#13;
        return axisY.$view;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getColumnsDescriptionsPositions = function () {&#13;
        var values = [];&#13;
        var columnsMaxWidth = this._getColumnsMaxWidth();&#13;
&#13;
        for(var i = 0, left = 0; i &lt; this._columnsNumber; i++, left += columnsMaxWidth) {&#13;
            values.push(left);&#13;
        }&#13;
&#13;
        return values;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._createAxisX = function () {&#13;
        this._axisX = new presenter.axisXObject (&#13;
            this._getGraphWidth(), this._getAxisXHeight(), this._columnsNumber, this._descriptions, this._imagesDescriptions,&#13;
            this._getColumnsDescriptionsPositions(), this._getColumnsMaxWidth(), this._getColumnWidth(), this._axisXDescription,&#13;
            this._$graphContainer.css("border-bottom-width"), this._axisXImageWidth&#13;
        );&#13;
&#13;
        return this._axisX.$view;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGraphHasFinishedLoadingEvent = function () {&#13;
        return {&#13;
            type: presenter.GRAPH_EVENT_TYPE.GRAPH_HAS_FINISHED_LOADING&#13;
        };&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.notify = function () {&#13;
        var event = this._getGraphHasFinishedLoadingEvent();&#13;
        presenter.observer.update(event);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.setCallbackForAddonView = function () {&#13;
        this._$parentDiv.ready(function () {&#13;
            presenter.graph.notify();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.initializeGraph = function () {&#13;
        this.$view = this._createMainContainer();&#13;
&#13;
        this._$graphContainer = this._createGraph();&#13;
        this._appendGraph(this._$graphContainer);&#13;
&#13;
        this._$axisYContainer = this._createAxisY();&#13;
        this._appendAxisY(this._$axisYContainer);&#13;
&#13;
        this._$axisXContainer = this._createAxisX();&#13;
        this._appendAxisX(this._$axisXContainer);&#13;
&#13;
        this._$parentDiv.append(this.$view);&#13;
&#13;
        this.setCallbackForAddonView();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._appendAxisX = function ($axisXContainer) {&#13;
        this._setAxisXPosition($axisXContainer);&#13;
        this.$bottomContainer.append($axisXContainer);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._setAxisXPosition = function ($axisXContainer) {&#13;
        $axisXContainer.css({&#13;
            'left': this._axisSpace + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._appendGraph = function ($graphContainer) {&#13;
        this._setGraphPosition($graphContainer);&#13;
        this.$upperContainer.append($graphContainer);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._createMainContainer = function () {&#13;
        var $view = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $view.addClass("main_container");&#13;
        $view.css({&#13;
            'height': this._height + "px",&#13;
            'width':  this._width + "px"&#13;
        });&#13;
&#13;
        this.$upperContainer = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this.$upperContainer.addClass("upper_container");&#13;
        this.$upperContainer.css({&#13;
            'width': this._width + "px",&#13;
            'height': this._getGraphHeight() + "px"&#13;
        });&#13;
&#13;
        this.$bottomContainer = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this.$bottomContainer.addClass("bottom_container");&#13;
        this.$bottomContainer.css({&#13;
            'width': this._width + "px",&#13;
            height: this._getAxisYWidth()&#13;
        });&#13;
&#13;
        $view.append(this.$upperContainer);&#13;
        $view.append(this.$bottomContainer);&#13;
&#13;
        return $view;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._setGraphPosition = function ($graphContainer) {&#13;
&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._appendAxisY = function ($axisYContainer) {&#13;
        this.$upperContainer.append($axisYContainer);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getColumns = function (columnWidth, height) {&#13;
        var columns = [];&#13;
&#13;
        for(var index = 0; index &lt; this._columnsNumber; index++) {&#13;
            var column = new presenter.columnObject(&#13;
                this._axisYMaximumValue, this._colors[index], columnWidth, height, this._answers[index], index&#13;
            );&#13;
            columns.push(column);&#13;
        }&#13;
&#13;
        return columns;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.showAnswers = function () {&#13;
        this._columns.forEach(function (element) {&#13;
            element.showAnswer();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.hideAnswers = function () {&#13;
        this._columns.forEach(function (element) {&#13;
            element.hideAnswer();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.reset = function () {&#13;
        this._columns.forEach(function (element) {&#13;
            element.reset();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.block = function () {&#13;
        if (!this._isBlocked) {&#13;
            this._columns.forEach(function (element) {&#13;
                element.block();&#13;
            });&#13;
            this._isBlocked = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.unblock = function () {&#13;
        if (this._isBlocked) {&#13;
            this._columns.forEach(function (element) {&#13;
                element.unblock();&#13;
            });&#13;
&#13;
            this._isBlocked = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getMaxScore = function () {&#13;
        return this._columnsNumber;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getScore = function () {&#13;
        return this._columns.map(function (column) {&#13;
            return column.getScore();&#13;
        }).reduce(function (previousValue, nextValue) {&#13;
            return previousValue + nextValue;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getErrorCount = function () {&#13;
        if(!this.isAttempted()) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return (this.getMaxScore() - this.getScore());&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.setShowErrorsMode = function () {&#13;
        this._columns.forEach(function (column) {&#13;
            column.setShowErrorsMode();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.setWorkMode = function () {&#13;
        this._columns.forEach(function (column) {&#13;
            column.setWorkMode();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getState = function () {&#13;
        return this._columns.map(function(column) {&#13;
            return column.getState();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.setState = function (userSelectionArray) {&#13;
        for(var i = 0; i &lt; userSelectionArray.length; i++) {&#13;
            this._columns[i].setState(userSelectionArray[i]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getImagesHeight = function () {&#13;
        return this.$view.find(".countGraph_image").height();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getImagesWidth = function () {&#13;
        return this.$view.find(".countGraph_image").width();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._setRescaledSizes = function () {&#13;
        this._axisXImageHeight = this.getImagesHeight() + this._axisSpace;&#13;
        this._axisXImageWidth = this.getImagesWidth();&#13;
&#13;
        this._height -= this._axisXImageHeight;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.rescale = function () {&#13;
        this._setRescaledSizes();&#13;
&#13;
        var currentState = this.getState();&#13;
&#13;
        this.$view.remove();&#13;
        this.initializeGraph();&#13;
&#13;
        this.setState(currentState);&#13;
    };&#13;
&#13;
    presenter.axisYObject = function (axisYMaximumValue, width, height, cyclicValue, fixedValues, axisYDescription,&#13;
                                      axisYColor) {&#13;
        this._axisYMaximumValue = axisYMaximumValue;&#13;
        this._width = width;&#13;
        this._height = height;&#13;
        this._cyclicValue = cyclicValue;&#13;
        this._fixedValues = fixedValues;&#13;
        this._axisYDescription = axisYDescription;&#13;
        this._$axisYDescription = null;&#13;
        this._axisYColor = axisYColor;&#13;
        this.$view = null;&#13;
        this._init();&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._init = function () {&#13;
        this.$view = this._createAxisYContainer();&#13;
        this._createAxisYDescription();&#13;
&#13;
        this._createTicks(this._getTicksValues());&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._createAxisYDescription = function () {&#13;
        this._$axisYDescription = this._getAxisYDescription();&#13;
        this._appendAxisYDescription(this._$axisYDescription);&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getAxisYDescription = function () {&#13;
        var $div = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $div.addClass("jqplot-yaxis-label");&#13;
        $div.css({&#13;
            top: ((this._height - 30) / 2) + "px"&#13;
        });&#13;
&#13;
        $div.append(this._axisYDescription);&#13;
&#13;
        return $div;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._appendAxisYDescription = function ($axisDescription) {&#13;
        this.$view.append($axisDescription);&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._createTicks = function (tickValues) {&#13;
        var stepsValues = this._getReversedAxisYStepsValues();&#13;
&#13;
        for(var i = 0; i &lt; tickValues.length; i++) {&#13;
            var value = tickValues[i];&#13;
            var $tick = this._getTick(value);&#13;
            this._appendTickToContainer($tick, value, stepsValues);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getReversedAxisYStepsValues = function () {&#13;
        var step = this._getAxisYStep();&#13;
        var values = [];&#13;
&#13;
        for(var i = 0; i &lt;= this._axisYMaximumValue; i++) {&#13;
            values.push((i * step));&#13;
        }&#13;
&#13;
        return values.reverse();&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getTick = function (value) {&#13;
        var $tick = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $tick.addClass("jqplot-yaxis-tick");&#13;
&#13;
        this._setTickCss($tick);&#13;
&#13;
        $tick.append(value);&#13;
&#13;
        return $tick;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._setTickCss = function ($tick) {&#13;
        $tick.css({&#13;
           width: "10px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._appendTickToContainer = function ($tick, value, reversedAxisYSteps) {&#13;
        this.$view.append($tick);&#13;
&#13;
        $tick.css({&#13;
            'top': (reversedAxisYSteps[value] - 7.5) + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._createTicksFromCyclicValue = function () {&#13;
        var ticks = [];&#13;
        var cyclicValue = this._cyclicValue[0];&#13;
&#13;
        for(var i = 0; i &lt;= this._axisYMaximumValue; i += cyclicValue) {&#13;
            ticks.push(i);&#13;
        }&#13;
&#13;
        return ticks;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getTicksValues = function () {&#13;
        if (this._fixedValues) {&#13;
            return this._fixedValues;&#13;
        } else {&#13;
            return this._createTicksFromCyclicValue();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._createAxisYContainer = function () {&#13;
        var $view = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $view.addClass("jqplot-axis");&#13;
        $view.addClass("jqplot-yaxis");&#13;
        $view.css({&#13;
            'background-color': "transparent",&#13;
            'height': this._height + "px",&#13;
            'width':  this._width + "px",&#13;
            'border-right-style': "solid",&#13;
            'border-width': 1 + "px",&#13;
            'border-right-color': this._axisYColor&#13;
        });&#13;
&#13;
        return $view;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getAxisYStep = function () {&#13;
        return (this._height) / this._axisYMaximumValue;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._createAxisYLines = function () {&#13;
        var axisStep = this._getAxisYStep();&#13;
&#13;
        var $firstDash = this._getDash();&#13;
        this._appendDashToContainer($firstDash, -0.5);&#13;
&#13;
        for(var i = 1, step = axisStep; i &lt;= this._axisYMaximumValue; i++, step += axisStep) {&#13;
            var $dash = this._getDash();&#13;
            this._appendDashToContainer($dash, step);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getDash = function () {&#13;
        var $dash = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $dash.css({&#13;
            height: "2px",&#13;
            width: "8px",&#13;
            'background-color': "black"&#13;
        });&#13;
&#13;
        return $dash;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._appendDashToContainer = function ($dash, step) {&#13;
        this.$view.append($dash);&#13;
        $dash.css({&#13;
            position: "absolute",&#13;
            top: (step + 0.5) + "px",&#13;
            left: 26 + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisXObject = function (width, height, numberOfColumns, seriesDescription, seriesImageDescriptions,&#13;
                                      columnsPositions, columnsMaxWidth, columnWidth, axisXDescription,&#13;
                                      graphContainerBorderWidth, imageLeftMargin) {&#13;
        this._width = width;&#13;
        this._height = height;&#13;
        this._numberOfColumns = numberOfColumns;&#13;
        this._seriesDescriptions = seriesDescription;&#13;
        this._seriesImageDescriptions = seriesImageDescriptions;&#13;
        this._columnsPositions = columnsPositions;&#13;
        this._columnsMaxWidth = columnsMaxWidth;&#13;
        this._columnWidth = columnWidth;&#13;
        this._axisXDescription = axisXDescription;&#13;
        this._graphContainerBorderWidth = parseInt(graphContainerBorderWidth, 10);&#13;
        this._$axisXDescription = null;&#13;
        this._imageLeftMargin = ((imageLeftMargin / 2) || 15);&#13;
        this.$view = null;&#13;
        this._initView();&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._initView = function () {&#13;
        this.$view = this._getMainContainer();&#13;
        this._createAxisXDescription();&#13;
        this._createDashes();&#13;
        this._createDescriptions();&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._createAxisXDescription = function () {&#13;
        this._$axisXDescription = this._getAxisXDescription();&#13;
        this._appendAxisXDescription(this._$axisXDescription);&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getAxisXDescription = function () {&#13;
        var $div = $("&lt;div&gt;&lt;/div&gt;");&#13;
&#13;
        $div.addClass("jqplot-xaxis-label");&#13;
        $div.css({&#13;
            top: (this._height - 5) + "px",&#13;
            height: 10 + "px",&#13;
            left: ((this._width - 30) / 2)  + "px"&#13;
        });&#13;
&#13;
        $div.append(this._axisXDescription);&#13;
&#13;
        return $div;&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._appendAxisXDescription = function ($axisDescription) {&#13;
        this.$view.append($axisDescription);&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getMainContainer = function () {&#13;
        var $mainContainer = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $mainContainer.addClass("jqplot-axis");&#13;
        $mainContainer.addClass("jqplot-xaxis");&#13;
        $mainContainer.css({&#13;
            'width': (this._width + 2) + "px",&#13;
            'height': this._height + "px",&#13;
            'background-color': "transparent"&#13;
        });&#13;
&#13;
        return $mainContainer;&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._createDescriptions = function () {&#13;
        for(var i = 0; i &lt; this._seriesDescriptions.length; i++) {&#13;
            var $description;&#13;
            if (this._shouldCreateTextDescription(i)) {&#13;
                $description = this._getTextDescription(i);&#13;
            } else {&#13;
                $description = this._getImageDescription(i);&#13;
            }&#13;
&#13;
            this._setDescriptionPosition($description, i);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._shouldCreateTextDescription = function (index) {&#13;
        return (this._seriesDescriptions[index].length &gt; 0);&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getTextDescription = function (index) {&#13;
        var $description = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $description.addClass("jqplot-xaxis-tick");&#13;
        $description.append(this._seriesDescriptions[index]);&#13;
&#13;
        return $description;&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getImageDescription = function (index) {&#13;
        var $description = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $description.addClass("jqplot-xaxis-tick");&#13;
&#13;
        if (this._seriesImageDescriptions[index].length &gt; 0) {&#13;
            var $image = $("&lt;img/&gt;");&#13;
            this._setCssToImageDescription($image, index);&#13;
&#13;
            $description.append($image);&#13;
        }&#13;
&#13;
        return $description;&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._setCssToImageDescription = function ($image, index) {&#13;
        $image.addClass("countGraph_image");&#13;
        this._addLoadingEventHandler($image);&#13;
        $image.attr('src', this._seriesImageDescriptions[index]);&#13;
        $image.css({&#13;
           "margin-left": -(this._imageLeftMargin) + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getImageHasFinishedLoadingEvent = function (width, height) {&#13;
        return {&#13;
            type: presenter.GRAPH_EVENT_TYPE.IMAGE_HAS_FINISHED_LOADING,&#13;
            data: {&#13;
                width: width,&#13;
                height: height&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._addLoadingEventHandler = function ($image) {&#13;
&#13;
        var callbackFunction = this._notify;&#13;
&#13;
        $image.on("load", function () {&#13;
            var event = this._getImageHasFinishedLoadingEvent($image.width(), $image.height());&#13;
            callbackFunction(event);&#13;
        }.bind(this));&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._notify = function (event) {&#13;
        presenter.observer.update(event);&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._setDescriptionPosition = function ($description, index) {&#13;
        this.$view.append($description);&#13;
&#13;
        $description.css({&#13;
            'left': (this._columnsPositions[index]) + "px",&#13;
            'width': this._columnsMaxWidth + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._createDashes = function () {&#13;
        for(var i = 0; i &lt; this._numberOfColumns + 1; i++) {&#13;
            var $dash = this._getVerticalDash();&#13;
            this.$view.append($dash);&#13;
            this._positionDash($dash, i * this._columnsMaxWidth);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._positionDash = function ($dash, position) {&#13;
        var top = 1 + this._graphContainerBorderWidth;&#13;
        $dash.css({&#13;
            'left': position + "px",&#13;
            'top': top + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getVerticalDash = function () {&#13;
        var $dash = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $dash.addClass("axis_x_dash");&#13;
&#13;
        return $dash;&#13;
    };&#13;
&#13;
    presenter.graphObserver = function () {&#13;
        this._shouldGraphGetRescaled = false;&#13;
        this._imagesHeight = undefined;&#13;
        this._imagesHasFinishedLoading = false;&#13;
        this._graphHasFinishedLoading = false;&#13;
        this._graphHasBeenRescaled = false;&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype.update = function (event) {&#13;
        switch(event.type) {&#13;
            case presenter.GRAPH_EVENT_TYPE.IMAGE_HAS_FINISHED_LOADING:&#13;
                this._imageHasFinishedLoadingHandler(event);&#13;
                break;&#13;
            case presenter.GRAPH_EVENT_TYPE.GRAPH_HAS_FINISHED_LOADING:&#13;
                this._graphHasFinishedLoadingHandler();&#13;
                break;&#13;
        }&#13;
&#13;
        this._updateGraph();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._setGraphShouldGetRescaled = function () {&#13;
        this._shouldGraphGetRescaled = this._areGraphActionsSynchronised() &amp;&amp; this.areImagesRescaled();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._imageHasFinishedLoadingHandler = function (event) {&#13;
        if (!this._imagesHasFinishedLoading) {&#13;
            this._setObserverAfterImagesHasLoaded(event);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._setObserverAfterImagesHasLoaded = function (event) {&#13;
        this._imagesHasFinishedLoading = true;&#13;
        this._imagesHeight = event.data.height;&#13;
        this._setGraphShouldGetRescaled();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._graphHasFinishedLoadingHandler = function () {&#13;
        if (!this._graphHasFinishedLoading) {&#13;
            this._setObserverAfterGraphHasLoaded();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._setObserverAfterGraphHasLoaded = function () {&#13;
        this._graphHasFinishedLoading = true;&#13;
        this._setGraphShouldGetRescaled();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._updateGraph = function () {&#13;
        var task = this._getUpdateGraphTask();&#13;
        task.execute();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._getUpdateGraphTask = function () {&#13;
        if (this._shouldCreateRescalingTask()) {&#13;
            return this._createRescalingTask();&#13;
        }&#13;
        return this._createNullTask();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._shouldCreateRescalingTask = function () {&#13;
        return (this._shouldGraphGetRescaled &amp;&amp; !this._graphHasBeenRescaled);&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype.setGraphHasBeenRescaled = function (graphHasBeenRescaled) {&#13;
        this._graphHasBeenRescaled = graphHasBeenRescaled;&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._createRescalingTask = function () {&#13;
        return {&#13;
            execute: function () {&#13;
                presenter.observer.setGraphHasBeenRescaled(true);&#13;
                presenter.graph.rescale();&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._createNullTask = function () {&#13;
        return {&#13;
            execute: function () {}&#13;
        };&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._areGraphActionsSynchronised = function () {&#13;
        return (this._graphHasFinishedLoading &amp;&amp; this._imagesHasFinishedLoading);&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype.areImagesRescaled = function () {&#13;
        return this._areImagesRescaled(this._imagesHeight);&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._areImagesRescaled = function (height) {&#13;
        if (height == undefined) {&#13;
            return false;&#13;
        }&#13;
&#13;
        return (height != 30);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.runLogic(view, model, false);&#13;
&#13;
        presenter.addEventsListeners();&#13;
    };&#13;
&#13;
    presenter.addEventsListeners = function () {&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedAxisYMaximumValue = presenter.validateAxisYMaximumValue(model);&#13;
        if (!validatedAxisYMaximumValue.isValid) {&#13;
            return validatedAxisYMaximumValue;&#13;
        }&#13;
&#13;
        var validatedAxisYValues = presenter.validateAxisYValues(model, validatedAxisYMaximumValue.value);&#13;
        if (!validatedAxisYValues.isValid) {&#13;
            return validatedAxisYValues;&#13;
        }&#13;
&#13;
        var validatedBarsWidth = presenter.validateBarsWidth(model);&#13;
        if (!validatedBarsWidth.isValid) {&#13;
            return validatedBarsWidth;&#13;
        }&#13;
&#13;
        var validatedBackgroundColor = presenter.validateBackgroundColor(model);&#13;
        if (!validatedBackgroundColor.isValid) {&#13;
            return validatedBackgroundColor;&#13;
        }&#13;
&#13;
        var validatedGridLineColor = presenter.validateGridLineColor(model);&#13;
        if (!validatedGridLineColor.isValid) {&#13;
            return validatedGridLineColor;&#13;
        }&#13;
&#13;
        var validatedBorder = presenter.validateBorder(model);&#13;
        if (!validatedBorder.isValid) {&#13;
            return validatedBorder;&#13;
        }&#13;
&#13;
        var validatedAxisXData = presenter.validateAxisXData(model, validatedAxisYMaximumValue.value);&#13;
        if (!validatedAxisXData.isValid) {&#13;
            return validatedAxisXData;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            ID: model.ID,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            wasFloat: {&#13;
                axisYMaximumValue: validatedAxisYMaximumValue.wasFloat,&#13;
                axisYValues: validatedAxisYValues.wasFloat,&#13;
                axisXData: validatedAxisXData.wasFloat&#13;
            },&#13;
            axisYMaximumValue: validatedAxisYMaximumValue.value,&#13;
            axisYValues: {&#13;
                fixedValues: validatedAxisYValues.fixedValues,&#13;
                cyclicValue: validatedAxisYValues.cyclicValue&#13;
            },&#13;
            barsWidth: validatedBarsWidth.value,&#13;
            backgroundColor: validatedBackgroundColor.value,&#13;
            gridLineColor: validatedGridLineColor.value,&#13;
            border: validatedBorder.value,&#13;
            answers: validatedAxisXData.answers,&#13;
            answersBeyondAxisRange: validatedAxisXData.answersBeyondAxisRange,&#13;
            columnsColors: validatedAxisXData.colors,&#13;
            columnsDescriptions: validatedAxisXData.descriptions,&#13;
            columnsDescriptionsImages: validatedAxisXData.descriptionsImages,&#13;
            columnsNumber: validatedAxisXData.columnsNumber,&#13;
            axisXDescription: model["X axis description"],&#13;
            axisYDescription: model["Y axis description"],&#13;
            isNotActivity: ModelValidationUtils.validateBoolean(model["isNotActivity"])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateAxisYMaximumValue = function (model) {&#13;
        var axisYMax = model["Y axis maximum value"].trim();&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(axisYMax)) {&#13;
            return presenter.getErrorObject("YAM_02");&#13;
        }&#13;
&#13;
        var wasFloat = false;&#13;
        var parsedAxisYMax = parseFloat(axisYMax);&#13;
&#13;
        if (presenter.isFloat(parsedAxisYMax)) {&#13;
            wasFloat = true;&#13;
        }&#13;
&#13;
        if(isNaN(parsedAxisYMax)) {&#13;
            return presenter.getErrorObject("YAM_02");&#13;
        }&#13;
&#13;
        if (parsedAxisYMax &lt;= 0) {&#13;
            return presenter.getErrorObject("YAM_01");&#13;
        }&#13;
&#13;
        return {isValid: true, value: parseInt(parsedAxisYMax), wasFloat: wasFloat};&#13;
    };&#13;
&#13;
    function parseCyclicValue(axisYValues, axisYMaxValue) {&#13;
        var parsedValue = parseFloat(axisYValues);&#13;
&#13;
        if (isNaN(parsedValue)) {&#13;
            return presenter.getErrorObject("YAV_01");&#13;
        }&#13;
&#13;
        if (parsedValue &lt; 1) {&#13;
            return presenter.getErrorObject("YAV_02");&#13;
        }&#13;
&#13;
        if (parsedValue &gt; axisYMaxValue) {&#13;
            return presenter.getErrorObject("YAV_04");&#13;
        }&#13;
&#13;
        return {isValid: true, cyclicValue: [parseInt(parsedValue)], wasFloat: presenter.isFloat(parsedValue)};&#13;
    }&#13;
&#13;
    function isValueNumber (value) {&#13;
        return !isNaN(value);&#13;
    }&#13;
&#13;
    function isValuePositive(value) {&#13;
        return value &gt;= 0;&#13;
    }&#13;
&#13;
    presenter.isFloat = function (value) {&#13;
        return Boolean(value % 1);&#13;
    };&#13;
&#13;
    presenter.isFloatInValues = function (valuesArray) {&#13;
        return valuesArray.filter(presenter.isFloat).length &gt; 0;&#13;
    };&#13;
&#13;
    presenter.isRGB = function (value) {&#13;
        if (value.charAt(0) != "#") {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (value.length != 7) {&#13;
            return false;&#13;
        }&#13;
&#13;
        return value.slice(1, 7).split("").every(function (element) {&#13;
            return ("abcdefABCDEF0123456789".indexOf(element) != -1);&#13;
        })&#13;
    };&#13;
&#13;
    function isInAxisRange(value) {&#13;
        //function for map, requires axisYMax passed to thisArg&#13;
        return value &lt;= this;&#13;
    }&#13;
&#13;
    function parseValueToInt (value) {&#13;
        return parseInt(value);&#13;
    }&#13;
&#13;
    function parseFixedValues(axisYValues, axisYMaxValue) {&#13;
&#13;
        var parsedValues = axisYValues.split(";").map(function (element) {&#13;
            return element.trim();&#13;
        }).map(function (element) {&#13;
            return parseFloat(element);&#13;
        });&#13;
&#13;
        if (!parsedValues.every(isValueNumber)) {&#13;
            return presenter.getErrorObject("YAV_01");&#13;
        }&#13;
&#13;
        if (!parsedValues.every(isValuePositive)) {&#13;
            return presenter.getErrorObject("YAV_03");&#13;
        }&#13;
&#13;
        if (!parsedValues.every(isInAxisRange, axisYMaxValue)) {&#13;
            return presenter.getErrorObject("YAV_04");&#13;
        }&#13;
&#13;
        var parsedIntValues = parsedValues.map(parseValueToInt);&#13;
&#13;
        return {isValid: true, fixedValues: parsedIntValues, wasFloat: presenter.isFloatInValues(parsedValues)};&#13;
    }&#13;
&#13;
    presenter.validateAxisYValues = function (model, axisYMaxValue) {&#13;
        var axisYValues = model["Y axis values"].trim();&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(axisYValues)) {&#13;
            return {isValid: true, cyclicValue: [1], wasFloat: false};&#13;
        }&#13;
&#13;
        if (axisYValues.charAt(axisYValues.length - 1) == "*") {&#13;
            return parseCyclicValue(axisYValues, axisYMaxValue);&#13;
        } else {&#13;
            return parseFixedValues(axisYValues, axisYMaxValue);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateBarsWidth = function (model) {&#13;
        var barsWidth = model["Bars width"].trim();&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(barsWidth)) {&#13;
            return {isValid: true, value: 1};&#13;
        }&#13;
&#13;
        var parsedBarsWidth = parseFloat(barsWidth);&#13;
&#13;
        if (isNaN(parsedBarsWidth)) {&#13;
            return presenter.getErrorObject("BW_02");&#13;
        }&#13;
&#13;
        if (parsedBarsWidth &lt; 0) {&#13;
            return presenter.getErrorObject("BW_01");&#13;
        }&#13;
&#13;
        if (parsedBarsWidth &gt;= 0 &amp;&amp; parsedBarsWidth &lt;= 1) {&#13;
            return {isValid: true, value: 1};&#13;
        }&#13;
&#13;
        return {isValid: true, value: parsedBarsWidth};&#13;
    };&#13;
&#13;
    function validateRGBColor (color, errorCode) {&#13;
        if (color.charAt(0) == "#") {&#13;
            if (!presenter.isRGB(color)) {&#13;
                return presenter.getErrorObject(errorCode);&#13;
            }&#13;
        }&#13;
&#13;
        return {isValid: true, value: color}&#13;
    }&#13;
&#13;
    presenter.validateBackgroundColor = function (model) {&#13;
        var backgroundColor = model["Background color"].trim();&#13;
        var validatedRGB = validateRGBColor(backgroundColor, "BC_01");&#13;
&#13;
        return setDefaultColorToValidatedRGB(validatedRGB, "#F5F5DC");&#13;
    };&#13;
&#13;
    presenter.validateGridLineColor = function (model) {&#13;
        var gridLineColor = model["Grid line color"].trim();&#13;
        var validatedRGB = validateRGBColor(gridLineColor, "GLC_01");&#13;
&#13;
        return setDefaultColorToValidatedRGB(validatedRGB, "black");&#13;
    };&#13;
&#13;
    function setDefaultColorToValidatedRGB (validatedRGB, color) {&#13;
        if (validatedRGB.isValid) {&#13;
            if (ModelValidationUtils.isStringEmpty(validatedRGB.value)) {&#13;
                validatedRGB.value = color;&#13;
            }&#13;
        }&#13;
&#13;
        return validatedRGB;&#13;
    }&#13;
&#13;
    presenter.validateBorder = function (model) {&#13;
        var parsedBorder = parseFloat(model["Border"].trim());&#13;
&#13;
        if (isNaN(parsedBorder)) {&#13;
            return {isValid: true, value: 0};&#13;
        }&#13;
&#13;
        if (parsedBorder &lt; 0) {&#13;
            return {isValid: true, value: 0};&#13;
        }&#13;
&#13;
        return {isValid: true, value: parsedBorder};&#13;
    };&#13;
&#13;
&#13;
    function getAttributeValueFromObject (element) {&#13;
        //function for map, requires passed object to thisArg {"attribute": "attributeString"}&#13;
        return element[this.attribute];&#13;
    }&#13;
&#13;
    function isEmptyStringInValues (valuesArray) {&#13;
        var emptyStringsArray = valuesArray.map(ModelValidationUtils.isStringEmpty).filter(function (element) {&#13;
            return element;&#13;
        });&#13;
&#13;
        return (emptyStringsArray.length &gt; 0)&#13;
    }&#13;
&#13;
    presenter.validateAxisXData = function (model, axisYMaximumValue) {&#13;
        var axisXData = model["X axis data"];&#13;
&#13;
        var answers = axisXData.map(getAttributeValueFromObject, {attribute: "Answer"});&#13;
        var colors = axisXData.map(getAttributeValueFromObject, {attribute: "Color"});&#13;
        var descriptions = axisXData.map(getAttributeValueFromObject, {attribute: "Description"});&#13;
        var descriptionsImages = axisXData.map(getAttributeValueFromObject, {attribute: "Description image"});&#13;
&#13;
        if (isEmptyStringInValues(answers)) {&#13;
            return presenter.getErrorObject("AXD_01");&#13;
        }&#13;
&#13;
        var parsedAnswers = answers.map(function (element) {&#13;
            return Number(element);&#13;
        });&#13;
&#13;
        if (!parsedAnswers.every(isValueNumber)) {&#13;
            return presenter.getErrorObject("AXD_02");&#13;
        }&#13;
&#13;
        var wasFloat = presenter.isFloatInValues(parsedAnswers);&#13;
        var areValuesInScope = parsedAnswers.every(isValuePositive) &amp;&amp; parsedAnswers.every(isInAxisRange, axisYMaximumValue);&#13;
&#13;
        var answersParsedToInt = parsedAnswers.map(parseValueToInt);&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            wasFloat: wasFloat,&#13;
            answersBeyondAxisRange: !areValuesInScope,&#13;
            answers: answersParsedToInt,&#13;
            colors: colors,&#13;
            descriptions: descriptions,&#13;
            descriptionsImages: descriptionsImages,&#13;
            columnsNumber: answersParsedToInt.length&#13;
        };&#13;
    };&#13;
&#13;
    function deleteCommands () {&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.getScore;&#13;
        delete presenter.setState;&#13;
        delete presenter.getState;&#13;
        delete presenter.setWorkMode;&#13;
        delete presenter.setShowErrorsMode;&#13;
        delete presenter.reset;&#13;
    }&#13;
&#13;
    presenter.runLogic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (!presenter.configuration.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[presenter.configuration.errorCode]);&#13;
            deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view.find("div").attr('id', presenter.configuration.ID);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
&#13;
        presenter.observer = new presenter.graphObserver();&#13;
&#13;
        if(!isPreview) {&#13;
            initializeGraphFromConfiguration();&#13;
        } else {&#13;
            initializeGraphFromConfiguration();&#13;
            presenter.graph.block();&#13;
        }&#13;
    };&#13;
&#13;
    function initializeGraphFromConfiguration() {&#13;
        presenter.graph = new presenter.graphObject(&#13;
            presenter.$view,&#13;
            presenter.configuration.axisYMaximumValue,&#13;
            presenter.configuration.answers,&#13;
            presenter.configuration.columnsColors,&#13;
            presenter.configuration.columnsDescriptions,&#13;
            presenter.configuration.columnsDescriptionsImages,&#13;
            presenter.configuration.barsWidth,&#13;
            presenter.configuration.backgroundColor,&#13;
            presenter.configuration.gridLineColor,&#13;
            presenter.configuration.axisYValues.cyclicValue,&#13;
            presenter.configuration.axisYValues.fixedValues,&#13;
            30,&#13;
            presenter.configuration.border,&#13;
            presenter.configuration.axisYDescription,&#13;
            presenter.configuration.axisXDescription&#13;
        );&#13;
&#13;
        presenter.graph.initializeGraph();&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.sendEvent = function (isCorrect, column, change) {&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            'source': presenter.configuration.ID,&#13;
            'item': (column + 1) + (change === "noChange" ? "" : " " + change),&#13;
            'value': '',&#13;
            'score': isCorrect ? '1' : '0'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.sendEventAllOk = function () {&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            'source': presenter.configuration.ID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        });&#13;
    };&#13;
&#13;
    presenter.isAllOk = function () {&#13;
        return (presenter.getScore() == presenter.getMaxScore());&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'getValue': presenter.getValue,&#13;
            'showAnswers' : presenter.showAnswers,&#13;
            'hideAnswers' : presenter.hideAnswers&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.configuration.isNotActivity) return;&#13;
&#13;
        if (presenter.errorMode) {&#13;
            presenter.graph.setWorkMode();&#13;
            presenter.errorMode = false;&#13;
        }&#13;
&#13;
        presenter.graph.block();&#13;
        presenter.graph.showAnswers();&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.configuration.isNotActivity) return;&#13;
&#13;
        presenter.graph.unblock();&#13;
        presenter.graph.hideAnswers();&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.graph.setWorkMode();&#13;
        presenter.graph.reset();&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.graph.unblock();&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if (presenter.configuration.isNotActivity) return 0;&#13;
&#13;
        return presenter.graph.getMaxScore();&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if (presenter.configuration.isNotActivity) return 0;&#13;
&#13;
        return presenter.graph.getScore();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.isAttempted = function () {&#13;
        return !this._columns.every(function(column) {&#13;
            return column.getState() == 0;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (presenter.configuration.isNotActivity) return 0;&#13;
&#13;
        return presenter.graph.getErrorCount();&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if (presenter.configuration.isNotActivity) return;&#13;
&#13;
        if(presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.graph.block();&#13;
        presenter.graph.setShowErrorsMode();&#13;
        presenter.errorMode = true;&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        if (presenter.configuration.isNotActivity) return;&#13;
&#13;
        if(presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.graph.unblock();&#13;
        presenter.graph.setWorkMode();&#13;
        presenter.errorMode = false;&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if(presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var selected = presenter.graph.getState();&#13;
&#13;
        return JSON.stringify({&#13;
            selected: selected,&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        if(!stateString) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        if(presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
        presenter.graph.setState(state.selected);&#13;
        presenter.setVisibility(state.isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Custom_Scoring" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Script" nameLabel="Custom_Scoring_property_script" type="text"/>
		<property name="Max Score" nameLabel="Custom_Scoring_property_max_score" type="string"/>
	</model>
<css/><view/><preview/><presenter>function AddonCustom_Scoring_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'ERR_02': "Invalid max score!"&#13;
    };&#13;
&#13;
    function removeAPIMethods() {&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.getScore;&#13;
        delete presenter.getErrorCount;&#13;
        delete presenter.executeCommand;&#13;
        delete presenter.evaluate;&#13;
        delete presenter.setShowErrorsMode;&#13;
        delete presenter.setScore;&#13;
        delete presenter.setScoreCommand;&#13;
        delete presenter.setErrors;&#13;
        delete presenter.setErrorsCommand;&#13;
    }&#13;
&#13;
    presenter.presenterLogic = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.configuration = presenter.parseModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
&#13;
            removeAPIMethods();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.parseModel = function (model) {&#13;
        var modelMaxScore = model['Max Score'],&#13;
            maxScore = 0;&#13;
&#13;
        if (!ModelValidationUtils.isStringEmpty(modelMaxScore)) {&#13;
            var validatedMaxScore = ModelValidationUtils.validatePositiveInteger(modelMaxScore);&#13;
&#13;
            if (!validatedMaxScore.isValid) {&#13;
                return { isValid: false, errorCode: 'ERR_02'}&#13;
            }&#13;
&#13;
            maxScore = validatedMaxScore.value;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            addonID: model.ID,&#13;
            script: model['Script'],&#13;
            scoring: {&#13;
                maxScore: maxScore,&#13;
                score: 0,&#13;
                errors: 0&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setScore = function (score) {&#13;
        var validatedScore = ModelValidationUtils.validateIntegerInRange(score, presenter.configuration.scoring.maxScore);&#13;
&#13;
        if (validatedScore.isValid) {&#13;
            presenter.configuration.scoring.score = validatedScore.value;&#13;
        } else {&#13;
            presenter.configuration.scoring.score = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setErrors = function (errors) {&#13;
        var validatedErrors = ModelValidationUtils.validatePositiveInteger(errors);&#13;
&#13;
        if (validatedErrors.isValid) {&#13;
            presenter.configuration.scoring.errors = validatedErrors.value;&#13;
        } else {&#13;
            presenter.configuration.scoring.errors = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        return presenter.configuration.scoring.maxScore;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        presenter.evaluateScript();&#13;
&#13;
        return presenter.configuration.scoring.errors;&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        presenter.evaluateScript();&#13;
&#13;
        return presenter.configuration.scoring.score;&#13;
    };&#13;
&#13;
    presenter.evaluateScript = function () {&#13;
        if (!presenter.configuration.script) {&#13;
            return;&#13;
        }&#13;
&#13;
        try {&#13;
            eval(presenter.configuration.script);&#13;
        } catch (error) {&#13;
            Helpers.alertErrorMessage(error, "Custom Score - problem occurred while running scripts!");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.evaluate = function () {&#13;
        presenter.evaluateScript();&#13;
&#13;
        return {&#13;
            score: presenter.configuration.scoring.score,&#13;
            errors: presenter.configuration.scoring.errors&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'evaluate': presenter.evaluate,&#13;
            'setScore': presenter.setScoreCommand,&#13;
            'setErrors': presenter.setErrorsCommand&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.evaluateScript();&#13;
    };&#13;
&#13;
    presenter.setScoreCommand = function (params) {&#13;
        presenter.setScore(params[0]);&#13;
    };&#13;
&#13;
    presenter.setErrorsCommand = function (params) {&#13;
        presenter.setErrors(params[0]);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            score: presenter.configuration.scoring.score,&#13;
            errors: presenter.configuration.scoring.errors&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) return;&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.configuration.scoring.score = parsedState.score;&#13;
        presenter.configuration.scoring.errors = parsedState.errors;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Done" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property isLocalized="true" name="Text" nameLabel="Done_property_text" type="string"/>
	</model>
<css>.done-wrapper,&#13;
.done-wrapper .done-container,&#13;
.done-wrapper .done-container .done-button {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.done-wrapper .done-container .done-button {&#13;
    background: url('resources/done-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.done-wrapper.disabled .done-container .done-button {&#13;
    background: url('resources/done-button-disabled.png') no-repeat center;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="done-wrapper"&gt;&#13;
    &lt;div class="done-container"&gt;&#13;
        &lt;div class="done-button"&gt;&#13;
&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="done-wrapper"&gt;&#13;
    &lt;div class="done-container"&gt;&#13;
        &lt;div class="done-button"&gt;&#13;
&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonDone_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.wasSubmitted = false;&#13;
    presenter.isVisible = null;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
        presenter.eventBus.addEventListener('Submitted', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        } else if (eventName == 'Submitted') {&#13;
            presenter.pageSubmittedDeferred.resolve();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function (additionalEventData) {&#13;
        var eventData = { 'source': presenter.configuration.addonID };&#13;
        for (var key in additionalEventData) {&#13;
            eventData[key] = additionalEventData[key];&#13;
        }&#13;
        return eventData;&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(eventName, eventData) {&#13;
        presenter.eventBus.sendEvent(eventName, eventData);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model, isPreview) {&#13;
        return {&#13;
            'buttonText' : model['Text'],&#13;
            'isVisible' : ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            'addonID' : model['ID']&#13;
        }&#13;
    };&#13;
&#13;
    function getAllOfTheModulesThatImplementIsAttempted() {&#13;
        var pageIndex = presenter.playerController.getCurrentPageIndex(),&#13;
            ids = presenter.playerController.getPresentation().getPage(pageIndex).getModulesAsJS(),&#13;
            modules = [];&#13;
&#13;
        $.each(ids, function() {&#13;
            var id = this.toString(),&#13;
                currentModule = presenter.playerController.getModule(id);&#13;
&#13;
            if (currentModule &amp;&amp; currentModule.isAttempted !== undefined) {&#13;
                modules.push(currentModule);&#13;
            }&#13;
        });&#13;
&#13;
        return modules;&#13;
    }&#13;
&#13;
    function areAllModulesAttempted() {&#13;
        var areAllAttempted = true;&#13;
&#13;
        $.each(presenter.modulesOnPage, function() {&#13;
            if (!this.isAttempted()) {&#13;
                areAllAttempted = false;&#13;
                return false; // break;&#13;
            }&#13;
        });&#13;
&#13;
        return areAllAttempted;&#13;
    }&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
        presenter.pageSubmittedDeferred = new $.Deferred();&#13;
        presenter.pageSubmitted = presenter.pageSubmittedDeferred.promise();&#13;
        presenter.runEndedDeferred = new $.Deferred();&#13;
        presenter.runEnded = presenter.runEndedDeferred.promise();&#13;
&#13;
        presenter.configuration = presenter.validateModel(model, isPreview);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.submitButton = presenter.$view.find('.done-button');&#13;
        presenter.submitButton.html(presenter.configuration.buttonText);&#13;
        presenter.doneWrapper = presenter.$view.find('.done-wrapper');&#13;
        presenter.doneWrapper.addClass('disabled');&#13;
&#13;
        presenter.pageSubmitted.then(function() {&#13;
            presenter.doneWrapper.removeClass('disabled');&#13;
        });&#13;
&#13;
        presenter.pageLoaded.then(function() {&#13;
&#13;
            presenter.modulesOnPage = getAllOfTheModulesThatImplementIsAttempted();&#13;
&#13;
            presenter.submitButton.click(function(e) {&#13;
                e.stopPropagation();&#13;
&#13;
                if (presenter.doneWrapper.hasClass('disabled')) {&#13;
                    if (areAllModulesAttempted()) {&#13;
                        presenter.sendEvent('AllAttempted', presenter.createEventData());&#13;
                    } else {&#13;
                        presenter.sendEvent('NotAllAttempted', presenter.createEventData());&#13;
                    }&#13;
                } else {&#13;
                    presenter.wasSubmitted = true;&#13;
                    presenter.sendEvent('Done', presenter.createEventData());&#13;
                }&#13;
&#13;
            });&#13;
&#13;
            presenter.runEndedDeferred.resolve();&#13;
        });&#13;
&#13;
    }&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {};&#13;
&#13;
    presenter.setWorkMode = function() {};&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.wasSubmitted = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            "show": presenter.show,&#13;
            "hide": presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            'wasSubmitted' : presenter.wasSubmitted,&#13;
            'isVisible' : presenter.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        presenter.wasSubmitted = JSON.parse(state).wasSubmitted;&#13;
        presenter.isVisible = JSON.parse(state).isVisible;&#13;
&#13;
        presenter.runEnded.then(function() {&#13;
            if (presenter.wasSubmitted) { presenter.doneWrapper.removeClass('disabled'); }&#13;
            presenter.setVisibility(presenter.isVisible);&#13;
        });&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Double_State_Button" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Text" nameLabel="Double_State_Button_property_text" type="string"/>
		<property name="Image" nameLabel="Double_State_Button_property_image" type="image"/>
		<property name="onSelected" nameLabel="Double_State_Button_property_on_selected" type="event"/>
		<property isLocalized="true" name="Text selected" nameLabel="Double_State_Button_property_text_selected" type="string"/>
		<property name="Image selected" nameLabel="Double_State_Button_property_image_selected" type="image"/>
		<property name="onDeselected" nameLabel="Double_State_Button_property_on_deselected" type="event"/>
		<property name="isSelected" nameLabel="Double_State_Button_property_is_selected" type="boolean"/>
		<property name="Disable" nameLabel="Double_State_Button_property_disable" type="boolean"/>
	</model>
<css>.doublestate-button-wrapper {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.doublestate-button-element,&#13;
.doublestate-button-element-mouse-hover,&#13;
.doublestate-button-element-mouse-click,&#13;
.doublestate-button-element-selected,&#13;
.doublestate-button-element-selected-mouse-hover,&#13;
.doublestate-button-element-selected-mouse-click {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    background: url('resources/dsb-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.doublestate-button-text,&#13;
.doublestate-button-image {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class="doublestate-button-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="doublestate-button-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonDouble_State_Button_create(){&#13;
    var presenter = function() {};&#13;
&#13;
    var playerController;&#13;
    var isMouseDown = false;&#13;
    var isTouchDown = false;&#13;
    var isMouseBlocked = false;&#13;
&#13;
    presenter.lastEvent = null;&#13;
&#13;
    var CSS_CLASSES = {&#13;
        ELEMENT : "doublestate-button-element",&#13;
        MOUSE_HOVER : "doublestate-button-element-mouse-hover",&#13;
        MOUSE_CLICK : "doublestate-button-element-mouse-click",&#13;
        SELECTED : "doublestate-button-element-selected",&#13;
        SELECTED_MOUSE_HOVER : "doublestate-button-element-selected-mouse-hover",&#13;
        SELECTED_MOUSE_CLICK : "doublestate-button-element-selected-mouse-click"&#13;
    };&#13;
&#13;
    function CSS_CLASSESToString() {&#13;
        return CSS_CLASSES.ELEMENT + " " + CSS_CLASSES.MOUSE_HOVER + " " + CSS_CLASSES.MOUSE_CLICK + " " +&#13;
            CSS_CLASSES.SELECTED + " " + CSS_CLASSES.SELECTED_MOUSE_HOVER + " " + CSS_CLASSES.SELECTED_MOUSE_CLICK;&#13;
    }&#13;
&#13;
    presenter.DISPLAY_CONTENT_TYPE = {&#13;
        NONE: 0,&#13;
        TEXT: 1,&#13;
        IMAGE: 2,&#13;
        BOTH: 3&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function(model) {&#13;
        return presenter.upgradeDisable(model);&#13;
    };&#13;
&#13;
    presenter.upgradeDisable = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["Disable"]) {&#13;
            upgradedModel["Disable"] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.executeUserEventCode = function (eventCode) {&#13;
        playerController.getCommands().executeEventCode(eventCode);&#13;
    };&#13;
&#13;
    presenter.clickHandler = function(event) {&#13;
        event.stopPropagation();&#13;
&#13;
        if (presenter.configuration.isErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var eventCode;&#13;
&#13;
        if(!presenter.configuration.isDisabled) {&#13;
            presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
            eventCode = presenter.isSelected() ? presenter.configuration.selected.event : presenter.configuration.deselected.event;&#13;
            presenter.executeUserEventCode(eventCode);&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
            presenter.sendEventData();&#13;
        }&#13;
    };&#13;
&#13;
    function handleTouchActions() {&#13;
        var element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
&#13;
        element.on('touchstart', function (e) {&#13;
            isMouseBlocked = true;&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
            presenter.lastEvent = e;&#13;
            isTouchDown = true;&#13;
        });&#13;
&#13;
        element.on('touchend', function (e) {&#13;
            e.preventDefault();&#13;
            if (isTouchDown) {&#13;
                if ( presenter.lastEvent.type != e.type ) {&#13;
                    presenter.clickHandler(e);&#13;
                }&#13;
                isTouchDown = false;&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function handleMouseActions() {&#13;
        var element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
		        &#13;
        element.on('mousedown', function(e) {&#13;
            if (!isMouseBlocked) {&#13;
                e.preventDefault();&#13;
                e.stopPropagation();&#13;
                presenter.lastEvent = e;&#13;
                isMouseDown = true;&#13;
            }&#13;
		});&#13;
&#13;
        element.on('click', function(e){&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
		element.on('mouseup', function(e) {&#13;
            if (!isMouseBlocked) {&#13;
                e.preventDefault();&#13;
                e.stopPropagation();&#13;
                if (isMouseDown) {&#13;
                    if (presenter.lastEvent.type != e.type) {&#13;
                        presenter.clickHandler(e);&#13;
                    }&#13;
                    isMouseDown = false;&#13;
                }&#13;
            }&#13;
		});&#13;
&#13;
        element.hover(&#13;
            function() {&#13;
                $(this).removeClass(CSS_CLASSESToString());&#13;
                $(this).addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED_MOUSE_HOVER : CSS_CLASSES.MOUSE_HOVER);&#13;
            },&#13;
            function() {&#13;
                $(this).removeClass(CSS_CLASSESToString());&#13;
                $(this).addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
            }&#13;
        );&#13;
    }&#13;
&#13;
    function setElementsDimensions(model, wrapper, element) {&#13;
        var viewDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var viewDistances = DOMOperationsUtils.calculateOuterDistances(viewDimensions);&#13;
        presenter.$view.css({&#13;
            width:(model.Width - viewDistances.horizontal) + 'px',&#13;
            height:(model.Height - viewDistances.vertical) + 'px'&#13;
        });&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, wrapper);&#13;
        DOMOperationsUtils.setReducedSize(wrapper, element);&#13;
    }&#13;
&#13;
    function createImageElement(element) {&#13;
        var imageElement = document.createElement('img');&#13;
        $(imageElement).addClass('doublestate-button-image');&#13;
        $(imageElement).attr('src', presenter.isSelected() ? presenter.configuration.selected.image : presenter.configuration.deselected.image);&#13;
        $(element).append(imageElement);&#13;
    }&#13;
&#13;
    function createTextElement(element) {&#13;
        var textElement = document.createElement('span');&#13;
        $(textElement).addClass('doublestate-button-text');&#13;
        $(textElement).html(presenter.isSelected() ? presenter.configuration.selected.text : presenter.configuration.deselected.text);&#13;
        $(element).append(textElement);&#13;
    }&#13;
&#13;
    function createElements(wrapper) {&#13;
        var element = document.createElement('div');&#13;
        $(element).addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
&#13;
        createImageElement(element);&#13;
        createTextElement(element);&#13;
&#13;
        wrapper.append(element);&#13;
&#13;
        return element;&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        var wrapper = $(presenter.$view.find('.doublestate-button-wrapper:first')[0]);&#13;
        var element = createElements(wrapper);&#13;
&#13;
        setElementsDimensions(model, wrapper, element);&#13;
        presenter.setElementSelection();&#13;
        presenter.toggleDisable(presenter.configuration.isDisabled);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        if (!preview) {&#13;
            handleTouchActions();&#13;
            handleMouseActions();&#13;
        }&#13;
    }&#13;
&#13;
    function applySelectionStyle(className) {&#13;
        var element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
&#13;
        $(element).removeClass(CSS_CLASSESToString());&#13;
        $(element).addClass(className);&#13;
    }&#13;
&#13;
    presenter.setElementSelection = function() {&#13;
        var element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
        var displayContent = presenter.isSelected() ? presenter.configuration.selected.displayContent : presenter.configuration.deselected.displayContent;&#13;
&#13;
        var textElement = $(element).find('.doublestate-button-text');&#13;
        textElement.html(presenter.isSelected() ? presenter.configuration.selected.text : presenter.configuration.deselected.text);&#13;
&#13;
        var imageElement = $(element).find('.doublestate-button-image');&#13;
        imageElement.attr('src', presenter.isSelected() ? presenter.configuration.selected.image : presenter.configuration.deselected.image);&#13;
&#13;
        switch (displayContent) {&#13;
            case presenter.DISPLAY_CONTENT_TYPE.NONE:&#13;
                $(textElement).hide();&#13;
                $(imageElement).hide();&#13;
                break;&#13;
            case presenter.DISPLAY_CONTENT_TYPE.TEXT:&#13;
                $(textElement).show();&#13;
                $(imageElement).hide();&#13;
                break;&#13;
            case presenter.DISPLAY_CONTENT_TYPE.IMAGE:&#13;
                $(imageElement).show();&#13;
                $(textElement).hide();&#13;
                break;&#13;
            case presenter.DISPLAY_CONTENT_TYPE.BOTH:&#13;
                $(imageElement).show();&#13;
                $(textElement).show();&#13;
                break;&#13;
        }&#13;
&#13;
        applySelectionStyle(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
&#13;
    };&#13;
&#13;
    presenter.updateLaTeX = function () {&#13;
        var textElement = presenter.$view.find('.doublestate-button-text')[0];&#13;
        presenter.mathJaxProcessEnded.then(function () {&#13;
                MathJax.CallBack.Queue().Push(function () {MathJax.Hub.Typeset(textElement)});&#13;
        });&#13;
    };&#13;
&#13;
    presenter.select = function () {&#13;
        if(!presenter.configuration.isSelected){&#13;
            presenter.configuration.isSelected = true;&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.deselect = function () {&#13;
        if(presenter.configuration.isSelected){&#13;
            presenter.configuration.isSelected = false;&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isSelected = function () {&#13;
        return presenter.configuration.isSelected;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'select': presenter.select,&#13;
            'deselect': presenter.deselect,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'enable': presenter.enable,&#13;
            'disable': presenter.disable,&#13;
            'isSelected': presenter.isSelected&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, [], presenter);&#13;
    };&#13;
&#13;
    presenter.isIE9 = function (userAgent) {&#13;
        userAgent = userAgent.toLowerCase();&#13;
&#13;
        if (userAgent.indexOf('msie') != -1) {&#13;
            return parseInt(userAgent.split('msie')[1], 10) == 9;&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        if(presenter.isIE9(navigator.userAgent)) {&#13;
            presenter.$view.css('display', isVisible ? 'block' : "none");&#13;
        }&#13;
&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
        var eventBus = playerController.getEventBus();&#13;
&#13;
        var mathJaxDeferred = new jQuery.Deferred();&#13;
        presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;&#13;
        presenter.mathJaxProcessEnded = mathJaxDeferred.promise();&#13;
&#13;
        MathJax.Hub.Register.MessageHook("End Process", function (message) {&#13;
            if ($(message[1]).hasClass('ic_page')) {&#13;
                if(presenter.mathJaxProcessEndedDeferred.state() != 'resolved'){&#13;
                    presenter.mathJaxProcessEndedDeferred.resolve();&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if (!presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(true);&#13;
            presenter.configuration.isVisible = true;&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(false);&#13;
            presenter.configuration.isVisible = false;&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if (presenter.configuration.isDisabled) {&#13;
            presenter.toggleDisable(false);&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        if (!presenter.configuration.isDisabled) {&#13;
            presenter.toggleDisable(true);&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.toggleDisable = function(disable) {&#13;
        var element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
&#13;
        if(disable) {&#13;
            element.addClass("disable");&#13;
        } else {&#13;
            element.removeClass("disable");&#13;
        }&#13;
&#13;
        presenter.configuration.isDisabled = disable;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.configuration.isSelected = presenter.configuration.isSelectedByDefault;&#13;
        presenter.configuration.isErrorMode = false;&#13;
&#13;
        presenter.setElementSelection();&#13;
&#13;
        if (presenter.configuration.isVisibleByDefault) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.toggleDisable(presenter.configuration.isDisabledByDefault);&#13;
        presenter.updateLaTeX();&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            isSelected: presenter.configuration.isSelected,&#13;
            isDisabled: presenter.configuration.isDisabled&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        if (parsedState.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.toggleDisable(parsedState.isDisabled);&#13;
&#13;
        presenter.configuration.isSelected = parsedState.isSelected;&#13;
        presenter.setElementSelection();&#13;
    };&#13;
&#13;
    presenter.validateString = function (imageSrc) {&#13;
        var isEmpty = ModelValidationUtils.isStringEmpty(imageSrc);&#13;
&#13;
        return {&#13;
            isEmpty: isEmpty,&#13;
            value: isEmpty ? "" : imageSrc&#13;
        };&#13;
    };&#13;
&#13;
    presenter.determineDisplayContent = function(text, image) {&#13;
        var displayContent = presenter.DISPLAY_CONTENT_TYPE.NONE;&#13;
        if (!text.isEmpty &amp;&amp; image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.TEXT;&#13;
        } else if (text.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.IMAGE;&#13;
        } else if (!text.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.BOTH;&#13;
        }&#13;
&#13;
        return displayContent;&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var text = presenter.validateString(model.Text);&#13;
        var image = presenter.validateString(model.Image);&#13;
        var selectedText = presenter.validateString(model["Text selected"]);&#13;
        var selectedImage = presenter.validateString(model["Image selected"]);&#13;
&#13;
        var isDisabled = ModelValidationUtils.validateBoolean(model.Disable);&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        var isSelected = ModelValidationUtils.validateBoolean(model.isSelected);&#13;
&#13;
        return {&#13;
            addonID: model.ID,&#13;
            selected: {&#13;
                text: selectedText.value,&#13;
                image: selectedImage.value,&#13;
                event: model.onSelected,&#13;
                displayContent: presenter.determineDisplayContent(selectedText, selectedImage)&#13;
            },&#13;
            deselected: {&#13;
                text: text.value,&#13;
                image: image.value,&#13;
                event: model.onDeselected,&#13;
                displayContent: presenter.determineDisplayContent(text, image)&#13;
            },&#13;
            isSelected: isSelected,&#13;
            isSelectedByDefault: isSelected,&#13;
            isDisabled: isDisabled,&#13;
            isDisabledByDefault: isDisabled,&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            isErrorMode: false&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createEventData = function() {&#13;
        return {&#13;
            source : presenter.configuration.addonID,&#13;
            item : '',&#13;
            value : presenter.isSelected() ? '1' : '0',&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendEventData = function () {&#13;
        var eventData = presenter.createEventData();&#13;
        if (playerController !== null) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.configuration.isErrorMode = true;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.configuration.isErrorMode = false;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.configuration.isErrorMode = true;&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.configuration.isErrorMode = false;&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Drawing" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Color" nameLabel="Drawing_property_color" type="string"/>
		<property name="Thickness" nameLabel="Drawing_property_thickness" type="string"/>
		<property name="Border" nameLabel="Drawing_property_border" type="string"/>
		<property name="Opacity" nameLabel="Drawing_property_opacity" type="string"/>
	</model>
<css>.drawing .tmp_canvas {&#13;
    position: absolute;&#13;
    left: 0; right: 0;&#13;
    bottom: 0; top: 0;&#13;
&#13;
    cursor: crosshair;&#13;
&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
&#13;
.drawing .tmp_canvas:active {&#13;
    cursor: crosshair;&#13;
}&#13;
</css><view>&lt;div class="drawing"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="drawing"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonDrawing_create() {&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    // work-around for double line in android browser&#13;
    function setOverflowWorkAround(turnOn) {&#13;
&#13;
        if (!MobileUtils.isAndroidWebBrowser(window.navigator.userAgent)) { return false; }&#13;
&#13;
        var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
        if (["4.1.1", "4.1.2", "4.2.2", "4.3", "4.4.2"].indexOf(android_ver) !== -1) {&#13;
&#13;
            presenter.$view.parents("*").each(function() {&#13;
                var overflow = null;&#13;
                if (turnOn) {&#13;
                    $(this).attr("data-overflow", $(this).css("overflow"));&#13;
                    $(this).css("overflow", "visible");&#13;
                } else {&#13;
                    overflow = $(this).attr("data-overflow");&#13;
                    if (overflow !== "") {&#13;
                        $(this).css("overflow", overflow);&#13;
                    }&#13;
                    $(this).removeAttr("data-overflow");&#13;
                }&#13;
            });&#13;
&#13;
        }&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    var element;&#13;
&#13;
    presenter.points = [];&#13;
    presenter.mouse = {x: 0, y: 0};&#13;
    presenter.isStarted = false;&#13;
&#13;
    function getZoom() {&#13;
        var val = $('#_icplayer').css('zoom');&#13;
        if (val == "normal" || val == "") { // IE 11&#13;
            val = 1;&#13;
        }&#13;
&#13;
        val = parseInt(val, 10);&#13;
        if (val == NaN || val == undefined) {&#13;
            val = 1;&#13;
        }&#13;
        return val;&#13;
    }&#13;
&#13;
    presenter.hexToRGBA = function(hex, opacity) {&#13;
        hex = hex.replace('#', '');&#13;
        var r = parseInt(hex.substring(0,2), 16);&#13;
        var g = parseInt(hex.substring(2,4), 16);&#13;
        var b = parseInt(hex.substring(4,6), 16);&#13;
&#13;
        return 'rgba(' + r + ',' + g + ',' + b + ',' + opacity + ')';&#13;
    };&#13;
&#13;
    presenter.colourNameToHex = function(color) {&#13;
&#13;
        var colors = {&#13;
            "aliceblue":"#f0f8ff","antiquewhite":"#faebd7","aqua":"#00ffff","aquamarine":"#7fffd4","azure":"#f0ffff","beige":"#f5f5dc","bisque":"#ffe4c4","black":"#000000","blanchedalmond":"#ffebcd","blue":"#0000ff","blueviolet":"#8a2be2","brown":"#a52a2a","burlywood":"#deb887","cadetblue":"#5f9ea0","chartreuse":"#7fff00","chocolate":"#d2691e","coral":"#ff7f50","cornflowerblue":"#6495ed","cornsilk":"#fff8dc","crimson":"#dc143c","cyan":"#00ffff","darkblue":"#00008b","darkcyan":"#008b8b","darkgoldenrod":"#b8860b","darkgray":"#a9a9a9","darkgreen":"#006400","darkkhaki":"#bdb76b","darkmagenta":"#8b008b","darkolivegreen":"#556b2f","darkorange":"#ff8c00","darkorchid":"#9932cc","darkred":"#8b0000","darksalmon":"#e9967a","darkseagreen":"#8fbc8f","darkslateblue":"#483d8b","darkslategray":"#2f4f4f","darkturquoise":"#00ced1","darkviolet":"#9400d3","deeppink":"#ff1493","deepskyblue":"#00bfff","dimgray":"#696969","dodgerblue":"#1e90ff","firebrick":"#b22222","floralwhite":"#fffaf0","forestgreen":"#228b22","fuchsia":"#ff00ff","gainsboro":"#dcdcdc","ghostwhite":"#f8f8ff","gold":"#ffd700","goldenrod":"#daa520","gray":"#808080","green":"#008000","greenyellow":"#adff2f","honeydew":"#f0fff0","hotpink":"#ff69b4","indianred ":"#cd5c5c","indigo ":"#4b0082","ivory":"#fffff0","khaki":"#f0e68c","lavender":"#e6e6fa","lavenderblush":"#fff0f5","lawngreen":"#7cfc00","lemonchiffon":"#fffacd","lightblue":"#add8e6","lightcoral":"#f08080","lightcyan":"#e0ffff","lightgoldenrodyellow":"#fafad2","lightgrey":"#d3d3d3","lightgreen":"#90ee90","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightseagreen":"#20b2aa","lightskyblue":"#87cefa","lightslategray":"#778899","lightsteelblue":"#b0c4de","lightyellow":"#ffffe0","lime":"#00ff00","limegreen":"#32cd32","linen":"#faf0e6","magenta":"#ff00ff","maroon":"#800000","mediumaquamarine":"#66cdaa","mediumblue":"#0000cd","mediumorchid":"#ba55d3","mediumpurple":"#9370d8","mediumseagreen":"#3cb371","mediumslateblue":"#7b68ee","mediumspringgreen":"#00fa9a","mediumturquoise":"#48d1cc","mediumvioletred":"#c71585","midnightblue":"#191970","mintcream":"#f5fffa","mistyrose":"#ffe4e1","moccasin":"#ffe4b5","navajowhite":"#ffdead","navy":"#000080","oldlace":"#fdf5e6","olive":"#808000","olivedrab":"#6b8e23","orange":"#ffa500","orangered":"#ff4500","orchid":"#da70d6","palegoldenrod":"#eee8aa","palegreen":"#98fb98","paleturquoise":"#afeeee","palevioletred":"#d87093","papayawhip":"#ffefd5","peachpuff":"#ffdab9","peru":"#cd853f","pink":"#ffc0cb","plum":"#dda0dd","powderblue":"#b0e0e6","purple":"#800080","red":"#ff0000","rosybrown":"#bc8f8f","royalblue":"#4169e1","saddlebrown":"#8b4513","salmon":"#fa8072","sandybrown":"#f4a460","seagreen":"#2e8b57","seashell":"#fff5ee","sienna":"#a0522d","silver":"#c0c0c0","skyblue":"#87ceeb","slateblue":"#6a5acd","slategray":"#708090","snow":"#fffafa","springgreen":"#00ff7f","steelblue":"#4682b4","tan":"#d2b48c","teal":"#008080","thistle":"#d8bfd8","tomato":"#ff6347","turquoise":"#40e0d0","violet":"#ee82ee","wheat":"#f5deb3","white":"#ffffff","whitesmoke":"#f5f5f5","yellow":"#ffff00","yellowgreen":"#9acd32"&#13;
        };&#13;
&#13;
        if (typeof colors[color.toLowerCase()] !== 'undefined') {&#13;
            return colors[color.toLowerCase()];&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.onMobilePaint = function(e) {&#13;
        var tmp_canvas;&#13;
        if (presenter.configuration.isPencil) {&#13;
            tmp_canvas = presenter.configuration.tmp_canvas;&#13;
        } else {&#13;
            tmp_canvas = presenter.configuration.canvas;&#13;
        }&#13;
&#13;
        var x = e.targetTouches[0].pageX - $(tmp_canvas).offset().left;&#13;
        var y = e.targetTouches[0].pageY - $(tmp_canvas).offset().top;&#13;
&#13;
        if (presenter.zoom !== 1) {&#13;
            x = x * (1 / presenter.zoom);&#13;
            y = y * (1 / presenter.zoom);&#13;
        }&#13;
&#13;
        presenter.mouse.x = x;&#13;
        presenter.mouse.y = y;&#13;
        presenter.onPaint(e);&#13;
    };&#13;
&#13;
    presenter.onPaint = function(e) {&#13;
        var tmp_canvas, tmp_ctx;&#13;
&#13;
        if (presenter.configuration.isPencil) {&#13;
            tmp_canvas = presenter.configuration.tmp_canvas;&#13;
            tmp_ctx = presenter.configuration.tmp_ctx;&#13;
            tmp_ctx.globalAlpha = presenter.configuration.opacity;&#13;
        } else {&#13;
            tmp_canvas = presenter.configuration.canvas;&#13;
            tmp_ctx = presenter.configuration.context;&#13;
        }&#13;
&#13;
        tmp_ctx.lineWidth = presenter.configuration.thickness;&#13;
        tmp_ctx.lineJoin = 'round';&#13;
        tmp_ctx.lineCap = 'round';&#13;
        tmp_ctx.strokeStyle = presenter.configuration.color;&#13;
        tmp_ctx.fillStyle = presenter.configuration.color;&#13;
&#13;
        presenter.points.push({x: presenter.mouse.x, y: presenter.mouse.y});&#13;
&#13;
        if (presenter.points.length &lt; 3) {&#13;
            var b = presenter.points[0];&#13;
            tmp_ctx.beginPath();&#13;
            tmp_ctx.arc(b.x, b.y, tmp_ctx.lineWidth / 2, 0, Math.PI * 2, !0);&#13;
            tmp_ctx.fill();&#13;
            tmp_ctx.closePath();&#13;
        } else {&#13;
            tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);&#13;
&#13;
            tmp_ctx.beginPath();&#13;
            tmp_ctx.moveTo(presenter.points[0].x, presenter.points[0].y);&#13;
&#13;
            for (var i = 1; i &lt; presenter.points.length - 2; i++) {&#13;
                var c = (presenter.points[i].x + presenter.points[i + 1].x) / 2;&#13;
                var d = (presenter.points[i].y + presenter.points[i + 1].y) / 2;&#13;
&#13;
                tmp_ctx.quadraticCurveTo(presenter.points[i].x, presenter.points[i].y, c, d);&#13;
            }&#13;
&#13;
            tmp_ctx.quadraticCurveTo(&#13;
                presenter.points[i].x,&#13;
                presenter.points[i].y,&#13;
                presenter.points[i + 1].x,&#13;
                presenter.points[i + 1].y&#13;
            );&#13;
            tmp_ctx.stroke();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.turnOnEventListeners = function() {&#13;
        var tmp_canvas = presenter.configuration.tmp_canvas,&#13;
            tmp_ctx = presenter.configuration.tmp_ctx,&#13;
            ctx = presenter.configuration.context;&#13;
&#13;
        // TOUCH&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            connectTouchEvents(tmp_canvas, tmp_ctx, ctx);&#13;
        }&#13;
&#13;
        // MOUSE&#13;
        connectMouseEvents(tmp_canvas, tmp_ctx, ctx);&#13;
&#13;
        tmp_canvas.addEventListener('click', function(e) {&#13;
            e.stopPropagation();&#13;
        }, false);&#13;
    };&#13;
&#13;
    presenter.onMobilePaintWithoutPropagation = function (e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        presenter.onMobilePaint(e);&#13;
    };&#13;
&#13;
    function connectTouchEvents(tmp_canvas, tmp_ctx, ctx) {&#13;
        tmp_canvas.addEventListener('touchstart', function (e) {&#13;
            setOverflowWorkAround(true);&#13;
&#13;
            if (!presenter.configuration.isPencil) {&#13;
                presenter.configuration.context.globalCompositeOperation = "destination-out";&#13;
            }&#13;
&#13;
            presenter.zoom = getZoom();&#13;
            presenter.isStarted = true;&#13;
            presenter.onMobilePaint(e);&#13;
            tmp_canvas.addEventListener('touchmove', presenter.onMobilePaintWithoutPropagation);&#13;
        }, false);&#13;
&#13;
        tmp_canvas.addEventListener('touchend', function (e) {&#13;
            setOverflowWorkAround(false);&#13;
&#13;
            tmp_canvas.removeEventListener('touchmove', presenter.onMobilePaintWithoutPropagation, false);&#13;
            ctx.drawImage(tmp_canvas, 0, 0);&#13;
            tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);&#13;
&#13;
            presenter.points = [];&#13;
        }, false);&#13;
    }&#13;
&#13;
    function connectMouseEvents(tmp_canvas, tmp_ctx, ctx) {&#13;
        tmp_canvas.addEventListener('mousemove', function (e) {&#13;
            e.stopPropagation();&#13;
&#13;
            var x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
            var y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
&#13;
            if (presenter.zoom !== 1) {&#13;
                x = x * (1 / parseInt(presenter.zoom, 10));&#13;
                y = y * (1 / parseInt(presenter.zoom, 10));&#13;
            }&#13;
&#13;
            presenter.mouse.x = x;&#13;
            presenter.mouse.y = y;&#13;
&#13;
        }, false);&#13;
&#13;
        $(tmp_canvas).on('mouseleave', function (e) {&#13;
            setOverflowWorkAround(false);&#13;
&#13;
            tmp_canvas.removeEventListener('mousemove', presenter.onPaint, false);&#13;
            ctx.drawImage(tmp_canvas, 0, 0);&#13;
            tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);&#13;
&#13;
            presenter.points = [];&#13;
        });&#13;
&#13;
        tmp_canvas.addEventListener('mousedown', function (e) {&#13;
            setOverflowWorkAround(true);&#13;
&#13;
            if (!presenter.configuration.isPencil) {&#13;
                presenter.configuration.context.globalCompositeOperation = "destination-out";&#13;
            }&#13;
&#13;
            presenter.zoom = getZoom();&#13;
            if (presenter.zoom == "" || presenter.zoom == undefined) {&#13;
                presenter.zoom = 1;&#13;
            }&#13;
&#13;
            tmp_canvas.addEventListener('mousemove', presenter.onPaint, false);&#13;
            presenter.isStarted = true;&#13;
&#13;
            var x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
            var y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
&#13;
            if (presenter.zoom !== 1) {&#13;
                x = x * (1 / presenter.zoom);&#13;
                y = y * (1 / presenter.zoom);&#13;
            }&#13;
&#13;
            presenter.points.push({x: x, y: y});&#13;
&#13;
            presenter.onPaint(e);&#13;
        }, false);&#13;
&#13;
        tmp_canvas.addEventListener('mouseup', function (e) {&#13;
            setOverflowWorkAround(false);&#13;
&#13;
            tmp_canvas.removeEventListener('mousemove', presenter.onPaint, false);&#13;
            ctx.drawImage(tmp_canvas, 0, 0);&#13;
            tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);&#13;
&#13;
            presenter.points = [];&#13;
        }, false);&#13;
    }&#13;
&#13;
    function getErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        C01: 'Property color cannot be empty',&#13;
        C02: 'Property color has wrong length in hex format, should be # and 6 digits [0 - F]',&#13;
        C03: 'Property color has wrong color name',&#13;
&#13;
        T01: 'Property thickness cannot be empty',&#13;
        T02: 'Property thickness cannot be smaller than 1',&#13;
        T03: 'Property thickness cannot be bigger than 40',&#13;
&#13;
        B01: 'Property border cannot be empty',&#13;
        B02: 'Property border cannot be smaller than 0',&#13;
        B03: 'Property border cannot be bigger than 5',&#13;
&#13;
        O01: 'Property opacity cannot be empty',&#13;
        O02: 'Property opacity cannot be smaller than 0',&#13;
        O03: 'Property opacity cannot be bigger than 1'&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    function resizeCanvas() {&#13;
        var con = presenter.$view.find('.drawing').parent(),&#13;
            canvas = presenter.configuration.canvas[0];&#13;
&#13;
        canvas.width = con.width();&#13;
        canvas.height = con.height();&#13;
    }&#13;
&#13;
    presenter.presenterLogic = function(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration.isPencil = true;&#13;
        presenter.configuration.pencilThickness = presenter.configuration.thickness;&#13;
        presenter.opacityByDefault = presenter.configuration.opacity;&#13;
&#13;
        presenter.$view.find('.drawing').append("&lt;canvas class='canvas'&gt;element canvas is not supported by your browser&lt;/canvas&gt;");&#13;
&#13;
        var border = presenter.configuration.border;&#13;
&#13;
        presenter.configuration.canvas = presenter.$view.find('canvas');&#13;
        presenter.configuration.context = presenter.configuration.canvas[0].getContext("2d");&#13;
&#13;
        $(presenter.$view.find('.drawing')[0]).css('opacity', presenter.configuration.opacity);&#13;
        resizeCanvas();&#13;
&#13;
        presenter.configuration.tmp_canvas = document.createElement('canvas');&#13;
        presenter.configuration.tmp_ctx = presenter.configuration.tmp_canvas.getContext('2d');&#13;
        $(presenter.configuration.tmp_canvas).addClass('tmp_canvas');&#13;
        presenter.configuration.tmp_canvas.width = presenter.configuration.canvas.width();&#13;
        presenter.configuration.tmp_canvas.height = presenter.configuration.canvas.height();&#13;
&#13;
        presenter.$view.find('.drawing')[0].appendChild(presenter.configuration.tmp_canvas);&#13;
&#13;
        if (presenter.configuration.border !== 0) {&#13;
            presenter.$view.find('canvas').css('border', border + 'px solid black');&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.turnOnEventListeners();&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.setColor = function(color) {&#13;
        if (typeof color === "object") color = color[0];&#13;
&#13;
        presenter.configuration.isPencil = true;&#13;
        presenter.configuration.thickness = presenter.configuration.pencilThickness;&#13;
        presenter.configuration.context.globalCompositeOperation = "source-over";&#13;
        presenter.configuration.color = presenter.parseColor(color).color;&#13;
        presenter.beforeEraserColor = presenter.configuration.color;&#13;
    };&#13;
&#13;
    presenter.setThickness = function(thickness) {&#13;
        if (typeof thickness === "object") thickness = thickness[0];&#13;
&#13;
        presenter.configuration.pencilThickness = presenter.parseThickness(thickness).thickness;&#13;
        if (presenter.configuration.isPencil) {&#13;
            presenter.configuration.thickness = presenter.configuration.pencilThickness;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setOpacity = function(opacity) {&#13;
        if (typeof opacity === "object") opacity = opacity[0];&#13;
&#13;
        presenter.configuration.opacity = presenter.parseOpacity(opacity).opacity;&#13;
    };&#13;
&#13;
    presenter.setEraserOff = function () {&#13;
        if (presenter.beforeEraserColor == undefined) {&#13;
            presenter.setColor(presenter.configuration.color);&#13;
        } else {&#13;
            presenter.setColor(presenter.beforeEraserColor);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setEraserOn = function() {&#13;
        presenter.configuration.isPencil = false;&#13;
&#13;
        presenter.configuration.thickness = presenter.configuration.eraserThickness;&#13;
&#13;
        presenter.configuration.context.globalCompositeOperation = "destination-out";&#13;
        presenter.beforeEraserColor = presenter.configuration.color;&#13;
    };&#13;
&#13;
    presenter.setEraserThickness = function(thickness) {&#13;
        presenter.configuration.eraserThickness = presenter.parseThickness(thickness).thickness;&#13;
        if (!presenter.configuration.isPencil) {&#13;
            presenter.configuration.thickness = presenter.configuration.eraserThickness;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(model.Color)) {&#13;
            return getErrorObject('C01');&#13;
        }&#13;
&#13;
        var parsedColor = presenter.parseColor(model.Color);&#13;
        if (!parsedColor.isValid) {&#13;
            return getErrorObject(parsedColor.errorCode);&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(model.Thickness)) {&#13;
            return getErrorObject('T01');&#13;
        }&#13;
&#13;
        var parsedThickness = presenter.parseThickness(model.Thickness);&#13;
        if (!parsedThickness.isValid) {&#13;
            return getErrorObject(parsedThickness.errorCode);&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(model.Border)) {&#13;
            return getErrorObject('B01');&#13;
        }&#13;
&#13;
        var parsedBorder = presenter.parseBorder(model.Border);&#13;
        if (!parsedBorder.isValid) {&#13;
            return getErrorObject(parsedBorder.errorCode);&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(model.Opacity)) {&#13;
            return getErrorObject('O01');&#13;
        }&#13;
&#13;
        var parsedOpacity = presenter.parseOpacity(model.Opacity);&#13;
        if (!parsedOpacity.isValid) {&#13;
            return getErrorObject(parsedOpacity.errorCode);&#13;
        }&#13;
&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            color: parsedColor.color,&#13;
            thickness: parsedThickness.thickness,&#13;
            border: parsedBorder.border,&#13;
            opacity: parsedOpacity.opacity,&#13;
&#13;
            canvas: null,&#13;
            context: null,&#13;
&#13;
            width: model.Width,&#13;
            height: model.Height,&#13;
            isValid: true,&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            isExerciseStarted: false&#13;
        };&#13;
    };&#13;
&#13;
    presenter.parseColor = function(color) {&#13;
&#13;
        if (color[0] === '#' &amp;&amp; !(color.length === 7)) {&#13;
            return getErrorObject('C02');&#13;
        }&#13;
&#13;
        if (color[0] !== '#') {&#13;
            color = presenter.colourNameToHex(color);&#13;
        }&#13;
&#13;
        if (!color) {&#13;
            return getErrorObject('C03');&#13;
        }&#13;
&#13;
        return {&#13;
            color: color,&#13;
            isValid: true&#13;
        };&#13;
&#13;
    };&#13;
&#13;
    presenter.parseThickness = function(thickness) {&#13;
&#13;
        if (thickness &lt; 1) {&#13;
            return getErrorObject('T02');&#13;
        }&#13;
&#13;
        if (thickness &gt; 40) {&#13;
            return getErrorObject('T03');&#13;
        }&#13;
&#13;
        return {&#13;
            thickness: thickness,&#13;
            isValid: true&#13;
        };&#13;
&#13;
    };&#13;
&#13;
    presenter.parseBorder = function(border) {&#13;
&#13;
        if (border &lt; 0) {&#13;
            return getErrorObject('B02');&#13;
        }&#13;
&#13;
        if (border &gt; 5) {&#13;
            return getErrorObject('B03');&#13;
        }&#13;
&#13;
        return {&#13;
            border: border,&#13;
            isValid: true&#13;
        };&#13;
&#13;
    };&#13;
&#13;
    presenter.parseOpacity = function(opacity) {&#13;
        if (opacity &lt; 0) {&#13;
            return getErrorObject('O02');&#13;
        }&#13;
&#13;
        if (opacity &gt; 1) {&#13;
            return getErrorObject('O03');&#13;
        }&#13;
&#13;
        return {&#13;
            opacity: opacity,&#13;
            isValid: true&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (!presenter.configuration.isValid) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'setColor': presenter.setColor,&#13;
            'setThickness': presenter.setThickness,&#13;
            'setEraserOn': presenter.setEraserOn,&#13;
            'setEraserThickness': presenter.setEraserThickness,&#13;
            'setOpacity': presenter.setOpacity,&#13;
            'setEraserOff': presenter.setEraserOff&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.configuration.context.clearRect(0, 0, presenter.configuration.canvas[0].width, presenter.configuration.canvas[0].height);&#13;
        presenter.isStarted = false;&#13;
&#13;
        presenter.setColor(presenter.model.Color);&#13;
        presenter.setThickness(presenter.model.Thickness);&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.configuration.opacity = presenter.opacityByDefault;&#13;
        presenter.beforeEraserColor = presenter.configuration.color;&#13;
&#13;
        setOverflowWorkAround(true);&#13;
        setOverflowWorkAround(false);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if (!presenter.isStarted) {&#13;
            return;&#13;
        }&#13;
&#13;
        var isPencil = presenter.configuration.isPencil,&#13;
            color = presenter.configuration.color,&#13;
            pencilThickness = presenter.configuration.pencilThickness,&#13;
            eraserThickness = presenter.configuration.eraserThickness,&#13;
            c = presenter.$view.find("canvas")[0],&#13;
            data = c.toDataURL("image/png");&#13;
&#13;
        return JSON.stringify({&#13;
            isPencil: isPencil,&#13;
            color: color,&#13;
            pencilThickness: pencilThickness,&#13;
            eraserThickness: eraserThickness,&#13;
            data: data,&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            opacity: presenter.configuration.opacity&#13;
        });&#13;
    };&#13;
&#13;
    presenter.upgradeStateForOpacity = function (parsedState) {&#13;
        if (parsedState.opacity == undefined) {&#13;
            parsedState.opacity = 0.9;&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.upgradeState = function (parsedState) {&#13;
        return presenter.upgradeStateForOpacity(parsedState);&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        parsedState = presenter.upgradeState(parsedState);&#13;
&#13;
        var data = JSON.parse(state).data,&#13;
            isPencil = JSON.parse(state).isPencil,&#13;
            color = JSON.parse(state).color,&#13;
            savedImg = new Image();&#13;
&#13;
        savedImg.onload = function() {&#13;
            presenter.configuration.context.drawImage(savedImg, 0, 0);&#13;
        };&#13;
        savedImg.src = data;&#13;
&#13;
        presenter.configuration.pencilThickness = JSON.parse(state).pencilThickness;&#13;
        presenter.configuration.eraserThickness = JSON.parse(state).eraserThickness;&#13;
        presenter.configuration.isVisible = JSON.parse(state).isVisible;&#13;
        presenter.configuration.isPencil = isPencil;&#13;
        presenter.isStarted = true;&#13;
        presenter.configuration.opacity = parsedState.opacity;&#13;
&#13;
        if (isPencil) {&#13;
            presenter.setColor(color);&#13;
        } else {&#13;
            presenter.configuration.thickness = presenter.configuration.eraserThickness;&#13;
            presenter.configuration.color = "rgba(0, 0, 0, 1)";&#13;
        }&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.beforeEraserColor = color;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EdgeAnimation" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Animations" nameLabel="EdgeAnimation_property_animations" type="list">
			<property displayName="Composition Class" name="compositionClass" nameLabel="EdgeAnimation_property_composition_class" type="string"/>
			<property displayName="edge.js" name="edgeFile" nameLabel="EdgeAnimation_property_edge_file" type="file"/>
			<property displayName="edgeActions.js" name="edgeActionsFile" nameLabel="EdgeAnimation_property_edge_actions_file" type="file"/>
		</property>
		<property name="Images" nameLabel="EdgeAnimation_property_images" type="list">
			<property displayName="Animation Item Number" name="animationItem" nameLabel="EdgeAnimation_property_animation_item" type="string"/>
			<property displayName="Edge element IDs (csv)" name="elementId" nameLabel="EdgeAnimation_property_element_id" type="string"/>
			<property displayName="Image File" name="imageFile" nameLabel="EdgeAnimation_property_image_file" type="image"/>
		</property>
		<property displayName="Initial Animation" name="initialAnimation" nameLabel="EdgeAnimation_property_initial_animation" type="string"/>
		<property name="Narration" nameLabel="EdgeAnimation_property_narration" type="narration"/>
	</model>
<css>.edgeMultiAnimWrapper{&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.Stage{&#13;
    position: absolute;&#13;
}&#13;
&#13;
.edge-loading-image{&#13;
    position: absolute;&#13;
    width: 30px;&#13;
    height: 30px;&#13;
    border: 0;&#13;
}&#13;
</css><view>&lt;div class="edgeMultiAnimWrapper"&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="edge-loading-image"/&gt;&#13;
</view><preview>&lt;div class="edgeMultiAnimWrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonEdgeAnimation_create(){&#13;
    var currentAnimationItem = 1;&#13;
&#13;
    var presenter = function(){};&#13;
    var onDocLoaded = null;&#13;
    var Animations;&#13;
    &#13;
    presenter.setStateStatus = false;&#13;
    presenter.commentAlreadyLoaded = false;&#13;
    presenter.$view = null;&#13;
&#13;
    presenter.run = function(view, model){&#13;
        Animations = model.Animations;&#13;
        presenter.Animations = model.Animations;&#13;
        presenter.addonID = model.ID;&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.autoplayState = undefined;&#13;
        &#13;
		presenter.isVisible = model["Is Visible"] == 'True';&#13;
		presenter.setVisibility(presenter.isVisible);&#13;
		&#13;
		//show loading icon&#13;
		var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
		var loadingIconImg = $(view).find('.edge-loading-image')[0];&#13;
		$(loadingIconImg).css({&#13;
            left: (presenter.model.Width/2)-15 + 'px',&#13;
            top: (presenter.model.Height/2)-15 + 'px'&#13;
        });&#13;
		$(loadingIconImg).attr('src',loadingSrc);&#13;
		&#13;
		$(model.Animations).each(function(i, animation){&#13;
			if(animation.compositionClass === '' &amp;&amp; animation.edgeFile === '' &amp;&amp; animation.edgeActionsFile === ''){&#13;
				presenter.errorHandler("This addon needs all files in Animations list to work");&#13;
				return;&#13;
			}&#13;
		});&#13;
		&#13;
        presenter.preloadImages(model.Images, function() {&#13;
            presenter.presenterLogic(view, model);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
		//presenter.run(view,model);&#13;
    };&#13;
	&#13;
	presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
	&#13;
	presenter.errorHandler = function(message){&#13;
		presenter.$view.prepend('&lt;div style="color: red; font-size: 12px; font-family: Arial;"&gt;'+message+'&lt;/span&gt;');&#13;
	};&#13;
	&#13;
    presenter.preloadImages = function(images, callback){&#13;
        var count = images.length;&#13;
        if(count === 1 &amp;&amp; images[0].imageFile === '') {&#13;
            callback();&#13;
        }&#13;
        var loaded = 0;&#13;
        $(images).each(function() {&#13;
            $('&lt;img&gt;').attr('src', this.imageFile).load(function() {&#13;
                loaded++;&#13;
                if (loaded === count) {&#13;
                    callback();&#13;
                }&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    presenter.loadMediaToAnimation = function(model){&#13;
        var CompositionClass;&#13;
        var elementTagName;&#13;
		//IMAGES&#13;
		if(model.Images.length === 1 &amp;&amp; model.Images[0].imageFile === '') {&#13;
            return;&#13;
        }&#13;
        $(model.Images).each(function(index1, value){&#13;
            var animItemsArray = value.animationItem.split(',');&#13;
            var idsArray = value.elementId.split(',');&#13;
&#13;
            $(animItemsArray).each(function(index2, item){&#13;
&#13;
                $(idsArray).each(function(index3, id){&#13;
                    CompositionClass = model.Animations[item - 1].compositionClass;&#13;
&#13;
                    elementTagName = $("#Stage" + model.ID + CompositionClass + "_" + id).prop("tagName");&#13;
                    if(elementTagName == 'DIV'){&#13;
                        $("#Stage" + model.ID + CompositionClass + "_" + id).css("background-image", "url(" + value.imageFile + ")");&#13;
                    } else if(elementTagName=='IMG') {&#13;
                        $("#Stage" + model.ID + CompositionClass + "_" + id).attr('src', value.imageFile);&#13;
                    }&#13;
                });&#13;
&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function(view, model){&#13;
        if(model.initialAnimation === ""){&#13;
            model.initialAnimation = 0;&#13;
        } else {&#13;
            model.initialAnimation = parseInt(model.initialAnimation, 10) - 1;&#13;
        }&#13;
&#13;
        $(model.Animations).each(function(i, animation){&#13;
            var display = "none";&#13;
            if(currentAnimationItem - 1 == i){&#13;
                display = "block";&#13;
            }&#13;
&#13;
            $('head').append('&lt;script&gt;    window.AdobeEdge = window.AdobeEdge || {};    window.AdobeEdge.bootstrapLoading = true; &lt;/script&gt;');&#13;
            $('head').append('&lt;!--Adobe Edge Runtime--&gt;');&#13;
            var headPrependStyle = '&lt;style&gt;.edgeLoad-' + animation.compositionClass + ' { visibility:hidden; }&lt;/style&gt;';&#13;
            $('head').append(headPrependStyle);&#13;
            $('head').append('&lt;!--Adobe Edge Runtime End--&gt;');&#13;
&#13;
            var stage = $('&lt;div&gt;&lt;/div&gt;');&#13;
            var edgeAnimWrapper = $(view).find('.edgeMultiAnimWrapper')[0];&#13;
&#13;
            stage.attr('id', 'Stage' + model.ID + animation.compositionClass);&#13;
            stage.addClass(animation.compositionClass);&#13;
            stage.css('display', display);&#13;
            stage.addClass('Stage');&#13;
            $(edgeAnimWrapper).prepend(stage);&#13;
				&#13;
            run(animation);&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    function run(animation){&#13;
        (function(compId){&#13;
            window.AdobeEdge = window.AdobeEdge || {};&#13;
            window.AdobeEdge.bootstrapLoading = true;&#13;
            // Include yepnope&#13;
            if(!AdobeEdge.yepnope) {&#13;
                /*yepnope1.5.x|WTFPL*/&#13;
                (function(a,b,c){function d(a){return"[object Function]"==o.call(a)}function e(a){return"string"==typeof a}function f(){}function g(a){return!a||"loaded"==a||"complete"==a||"uninitialized"==a}function h(){var a=p.shift();q=1,a?a.t?m(function(){("c"==a.t?B.injectCss:B.injectJs)(a.s,0,a.a,a.x,a.e,1)},0):(a(),h()):q=0}function i(a,c,d,e,f,i,j){function k(b){if(!o&amp;&amp;g(l.readyState)&amp;&amp;(u.r=o=1,!q&amp;&amp;h(),l.onload=l.onreadystatechange=null,b)){"img"!=a&amp;&amp;m(function(){t.removeChild(l)},50);for(var d in y[c])y[c].hasOwnProperty(d)&amp;&amp;y[c][d].onload()}}var j=j||B.errorTimeout,l=b.createElement(a),o=0,r=0,u={t:d,s:c,e:f,a:i,x:j};1===y[c]&amp;&amp;(r=1,y[c]=[]),"object"==a?l.data=c:(l.src=c,l.type=a),l.width=l.height="0",l.onerror=l.onload=l.onreadystatechange=function(){k.call(this,r)},p.splice(e,0,u),"img"!=a&amp;&amp;(r||2===y[c]?(t.insertBefore(l,s?null:n),m(k,j)):y[c].push(l))}function j(a,b,c,d,f){return q=0,b=b||"j",e(a)?i("c"==b?v:u,a,b,this.i++,c,d,f):(p.splice(this.i++,0,a),1==p.length&amp;&amp;h()),this}function k(){var a=B;return a.loader={load:j,i:0},a}var l=b.documentElement,m=a.setTimeout,n=b.getElementsByTagName("script")[0],o={}.toString,p=[],q=0,r="MozAppearance"in l.style,s=r&amp;&amp;!!b.createRange().compareNode,t=s?l:n.parentNode,l=a.opera&amp;&amp;"[object Opera]"==o.call(a.opera),l=!!b.attachEvent&amp;&amp;!l,u=r?"object":l?"script":"img",v=l?"script":u,w=Array.isArray||function(a){return"[object Array]"==o.call(a)},x=[],y={},z={timeout:function(a,b){return b.length&amp;&amp;(a.timeout=b[0]),a}},A,B;B=function(a){function b(a){var a=a.split("!"),b=x.length,c=a.pop(),d=a.length,c={url:c,origUrl:c,prefixes:a},e,f,g;for(f=0;f&lt;d;f++)g=a[f].split("="),(e=z[g.shift()])&amp;&amp;(c=e(c,g));for(f=0;f&lt;b;f++)c=x[f](c);return c}function g(a,e,f,g,h){var i=b(a),j=i.autoCallback;i.url.split(".").pop().split("?").shift(),i.bypass||(e&amp;&amp;(e=d(e)?e:e[a]||e[g]||e[a.split("/").pop().split("?")[0]]),i.instead?i.instead(a,e,f,g,h):(y[i.url]?i.noexec=!0:y[i.url]=1,f.load(i.url,i.forceCSS||!i.forceJS&amp;&amp;"css"==i.url.split(".").pop().split("?").shift()?"c":c,i.noexec,i.attrs,i.timeout),(d(e)||d(j))&amp;&amp;f.load(function(){k(),e&amp;&amp;e(i.origUrl,h,g),j&amp;&amp;j(i.origUrl,h,g),y[i.url]=2})))}function h(a,b){function c(a,c){if(a){if(e(a))c||(j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}),g(a,j,b,0,h);else if(Object(a)===a)for(n in m=function(){var b=0,c;for(c in a)a.hasOwnProperty(c)&amp;&amp;b++;return b}(),a)a.hasOwnProperty(n)&amp;&amp;(!c&amp;&amp;!--m&amp;&amp;(d(j)?j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}:j[n]=function(a){return function(){var b=[].slice.call(arguments);a&amp;&amp;a.apply(this,b),l()}}(k[n])),g(a[n],j,b,n,h))}else!c&amp;&amp;l()}var h=!!a.test,i=a.load||a.both,j=a.callback||f,k=j,l=a.complete||f,m,n;c(h?a.yep:a.nope,!!i),i&amp;&amp;c(i)}var i,j,l=this.yepnope.loader;if(e(a))g(a,0,l,0);else if(w(a))for(i=0;i&lt;a.length;i++)j=a[i],e(j)?g(j,0,l,0):w(j)?B(j):Object(j)===j&amp;&amp;h(j,l);else Object(a)===a&amp;&amp;h(a,l)},B.addPrefix=function(a,b){z[a]=b},B.addFilter=function(a){x.push(a)},B.errorTimeout=1e4,null==b.readyState&amp;&amp;b.addEventListener&amp;&amp;(b.readyState="loading",b.addEventListener("DOMContentLoaded",A=function(){b.removeEventListener("DOMContentLoaded",A,0),b.readyState="complete"},0)),a.yepnope=k(),a.yepnope.executeStack=h,a.yepnope.injectJs=function(a,c,d,e,i,j){var k=b.createElement("script"),l,o,e=e||B.errorTimeout;k.src=a;for(o in d)k.setAttribute(o,d[o]);c=j?h:c||f,k.onreadystatechange=k.onload=function(){!l&amp;&amp;g(k.readyState)&amp;&amp;(l=1,c(),k.onload=k.onreadystatechange=null)},m(function(){l||(l=1,c(1))},e),i?k.onload():n.parentNode.insertBefore(k,n)},a.yepnope.injectCss=function(a,c,d,e,g,i){var e=b.createElement("link"),j,c=i?h:c||f;e.href=a,e.rel="stylesheet",e.type="text/css";for(j in d)e.setAttribute(j,d[j]);g||(n.parentNode.insertBefore(e,n),m(c,0))}})(this,document);AdobeEdge.yepnope = window.yepnope;&#13;
            }&#13;
            // end yepnope&#13;
&#13;
&#13;
            var htFallbacks;&#13;
            var testEle=document.createElement("div");function isSupported(a){var d=testEle.style,e;for(i=0;i&lt;a.length;i++)if(e=a[i],d[e]!==void 0)return!0;return!1}function supportsRGBA(){testEle.cssText="background-color:rgba(150,255,150,.5)";if((""+testEle.style.backgroundColor).indexOf("rgba")==0)return!0;return!1}&#13;
            var hasTransform=isSupported(["transformProperty","WebkitTransform","MozTransform","OTransform","msTransform"]),hasSVG=!!document.createElementNS&amp;&amp;!!document.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect,hasRGBA=supportsRGBA(),hasJSON=window.JSON&amp;&amp;window.JSON.parse&amp;&amp;window.JSON.stringify,readyToPlay=!1;function safeColor(a){a=""+a;if(!hasRGBA&amp;&amp;a.indexOf("rgba")==0){var d=a.lastIndexOf(",");d&gt;0&amp;&amp;(a="rgb("+a.substring(5,d)+")")}return a}&#13;
            AdobeEdge._preloaders=AdobeEdge._preloaders||[];AdobeEdge._preloaders.push(function(){filesToLoad&amp;&amp;(loadResources(filesToLoad),filesToLoad=void 0)});function doLoadResources(){for(var a=0;a&lt;AdobeEdge._preloaders.length;a++)AdobeEdge._preloaders[a]()}AdobeEdge._readyplayers=AdobeEdge._readyplayers||[];AdobeEdge._readyplayers.push(function(){readyToPlay&amp;&amp;AdobeEdge.okToLaunchComposition(compId)});&#13;
            function playWhenReady(){AdobeEdge._playWhenReady=!0;for(var a=0;a&lt;AdobeEdge._readyplayers.length;a++)AdobeEdge._readyplayers[a]()}function edgeCallback(a){htFallbacks[a]&amp;&amp;(a=htFallbacks[a]);AdobeEdge.preload.got[a]=!0;if(a==AdobeEdge.preload.last)!AdobeEdge.bootstrapLoading||AdobeEdge._playWhenReady?AdobeEdge.okToLaunchComposition(compId):readyToPlay=!0,AdobeEdge.preload.busy=!1,AdobeEdge.preload.q.length&gt;0&amp;&amp;(a=AdobeEdge.preload.q.pop(),AdobeEdge.requestResources(a.files,a.callback))}&#13;
            AdobeEdge.requestResources=AdobeEdge.requestResources||function(a,d){AdobeEdge.yepnope.errorTimeout=4E3;AdobeEdge.preload.busy=!0;AdobeEdge.preload.got={};var e,b=a.length,h=[],c;for(e=0;e&lt;b;e++){c=a[e];if(typeof c==="string")url=c,c={load:url};else if(url=c.yep||c.load,c.callback){var k=c.callback;c.callback=function(a,b,c){k(a,b,c)&amp;&amp;d(a,b,c)}}if(!c.callback)c.callback=d;if(!AdobeEdge.preload.got[url])h.push(c),AdobeEdge.preload.last=url}h.length&amp;&amp;AdobeEdge.yepnope(h)};&#13;
            var filesToLoad,dlContent,preContent,doDelayLoad,signaledLoading,loadingEvt,requiresSVG,htLookup={},aLoader,aEffectors;function loadResources(a,d){AdobeEdge.preload=AdobeEdge.preload||[];AdobeEdge.preload.q=AdobeEdge.preload.q||[];d||!isCapable()?filesToLoad=a:AdobeEdge.preload.busy?AdobeEdge.preload.q.push({files:a,callback:edgeCallback}):AdobeEdge.requestResources(a,edgeCallback);}&#13;
            function splitUnits(a){var d={};d.num=parseFloat(a);if(typeof a=="string")d.units=a.match(/[a-zA-Z%]+$/);if(d.units&amp;&amp;typeof d.units=="object")d.units=d.units[0];return d}function defaultUnits(a){var d=a;if(a!=="auto"&amp;&amp;(a=splitUnits(a),!a||!a.units))d+="px";return d}function findNWC(a,d){if(String(a.className).indexOf(d)!=-1)return a;for(var e=a.childNodes,b=0;b&lt;e.length;b++){var h=findNWC(e[b],d);if(h!=!1)return h}return!1}&#13;
            function simpleContent(a,d,e){var b=document.getElementsByTagName("body")[0],e=e||findNWC(b,compId),h,c,k,g;if(e){if(e.style.position!="absolute"&amp;&amp;e.style.position!="relative")e.style.position="relative"}else e=b;for(var m=0;m&lt;a.length;m++){b=a[m];b.type=="image"?(h=document.createElement("img"),h.src=b.fill[1]):h=document.createElement("div");h.id=b.id;g=h.style;if(b.type=="text"){if(c=b.font){if(c[0]&amp;&amp;c[0]!=="")g.fontFamily=c[0];typeof c[1]!="object"&amp;&amp;(c[1]=[c[1]]);c[1][1]||(c[1][1]="px");if(c[1][0]&amp;&amp;&#13;
                c[1][0]!=="")g.fontSize=c[1][0]+c[1][1];if(c[2]&amp;&amp;c[2]!=="")g.color=safeColor(c[2]);if(c[3]&amp;&amp;c[3]!=="")g.fontWeight=c[3];if(c[4]&amp;&amp;c[4]!=="")g.textDecoration=b.font[4];if(c[5]&amp;&amp;c[5]!=="")g.fontStyle=b.font[5]}if(b.align&amp;&amp;b.align!="auto")g.textAlign=b.align;if(b.position)g.position=b.position;if((!b.rect[2]||b.rect[2]&lt;=0)&amp;&amp;(!b.rect[3]||b.rect[3]&lt;=0))g.whiteSpace="nowrap";h.innerHTML=b.text}if(d)h.className=d;g.position="absolute";c=b.rect[0];k=b.rect[1];if(b.transform&amp;&amp;b.transform[0]){var j=b.transform[0][0],&#13;
                f=splitUnits(j);if(f&amp;&amp;f.units&amp;&amp;(j=f.num,f.units=="%"&amp;&amp;b.rect[2])){var f=b.rect[2],l=splitUnits(b.rect[2]);if(l&amp;&amp;l.units)f=l.num,l.units=="%"&amp;&amp;(f=f/100*e.offsetWidth);j=j/100*f;e.offsetWidth&gt;0&amp;&amp;(j=j/e.offsetWidth*100)}if(f=splitUnits(c))c=f.num;c+=j;if(!f.units)f.units="px";c+=f.units;if(b.transform[0].length&gt;1){j=b.transform[0][1];if((f=splitUnits(j))&amp;&amp;f.units)if(j=f.num,f.units=="%"&amp;&amp;b.rect[3]){f=b.rect[3];if((l=splitUnits(b.rect[3]))&amp;&amp;l.units)f=l.num,l.units=="%"&amp;&amp;(f=f/100*e.offsetHeight);j=j/100*&#13;
                f;e.offsetHeight&gt;0&amp;&amp;(j=j/e.offsetHeight*100)}if(f=splitUnits(k))k=f.num;k+=j;if(!f.units)f.units="px";k+=f.units}}g.left=defaultUnits(c);g.top=defaultUnits(k);g.width=defaultUnits(b.rect[2]);g.height=defaultUnits(b.rect[3]);if(b.linkURL)htLookup[h.id]=b,h.onclick=function(){var a=htLookup[this.id];a.linkTarget?window.open(a.linkURL,a.linkTarget):window.location.href=a.linkURL},g.cursor="pointer";e.appendChild(h);if(b.c)for(g=0;g&lt;b.c.length;g++)simpleContent(b.c[g],d,h)}}&#13;
            var fnCycle=function(a){a?fnCycle&amp;&amp;setTimeout(fnCycle,20):a={event:"loading",progress:0};loadingEvt&amp;&amp;loadingEvt(a)},aBootcompsLoaded=[];if(!window.AdobeEdge.bootstrapListeners)window.AdobeEdge.bootstrapListeners=[];window.AdobeEdge.bootstrapCallback=function(a){window.AdobeEdge.bootstrapListeners.push(a);if(aBootcompsLoaded.length&gt;0)for(var d=0;d&lt;aBootcompsLoaded.length;d++)a(aBootcompsLoaded[d])};if(!window.AdobeEdge.preloadComplete)window.AdobeEdge.preloadComplete={};&#13;
		//window.AdobeEdge.preloadComplete&#13;
            window.AdobeEdge.preloadComplete[compId]=function(a){&#13;
				presenter.loadMediaToAnimation(presenter.model);&#13;
                AdobeEdge.$_(".edgePreload"+a).css("display","none");&#13;
				fnCycle=null;loadingEvt&amp;&amp;loadingEvt({event:"done",progress:1,reason:"complete"});aBootcompsLoaded.push(a);for(var d=window.AdobeEdge.bootstrapListeners.length,e=0;e&lt;d;e++)try{window.AdobeEdge.bootstrapListeners[e](a)}catch(b){console.log("bootstrap error "+b)}&#13;
				//hide loading icon&#13;
				var loadingIconImg = presenter.$view.find('.edge-loading-image')[0];&#13;
				$(loadingIconImg).css('display','none');&#13;
			};&#13;
			function isCapable(){if(hasTransform){if(requiresSVG&amp;&amp;!hasSVG)return!1;return!0}return!1}&#13;
            onDocLoaded = function(){window.AdobeEdge.loaded=!0;fnCycle({event:"begin"});isCapable()?(preContent&amp;&amp;preContent.dom&amp;&amp;simpleContent(preContent.dom,"edgePreload"+compId),filesToLoad&amp;&amp;!signaledLoading&amp;&amp;(loadResources(filesToLoad),filesToLoad=void 0)):dlContent&amp;&amp;dlContent.dom&amp;&amp;(loadingEvt&amp;&amp;loadingEvt({event:"done",progress:1,reason:"downlevel"}),simpleContent(dlContent.dom))};&#13;
            window.AdobeEdge = window.AdobeEdge || {};&#13;
            window.AdobeEdge.framework = 'jquery';&#13;
&#13;
            onDocLoaded();&#13;
&#13;
            requiresSVG=false;&#13;
&#13;
            doDelayLoad=false;&#13;
            htFallbacks={&#13;
            };&#13;
&#13;
            var edgeRuntimePath = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "addons/resources/edge2.0.1.268.js");&#13;
&#13;
            aLoader = [&#13;
                { load: edgeRuntimePath},&#13;
                { load: animation.edgeFile},&#13;
                { load: animation.edgeActionsFile}&#13;
            ];&#13;
&#13;
            if (AdobeEdge.bootstrapLoading){&#13;
                signaledLoading = true;&#13;
                AdobeEdge.loadResources=doLoadResources;&#13;
                AdobeEdge.playWhenReady=playWhenReady;&#13;
            }&#13;
&#13;
            loadResources(aLoader, doDelayLoad);&#13;
				&#13;
            preContent={&#13;
                dom: [&#13;
                ]};//simpleContent&#13;
&#13;
            dlContent={dom: [ ]};//simpleContent&#13;
&#13;
            AdobeEdge.loadResources();&#13;
			AdobeEdge.playWhenReady();&#13;
			&#13;
			AdobeEdge.bootstrapCallback(function(compId) {&#13;
				//necessary for situation with identical animations on succeeding pages&#13;
				$.each(AdobeEdge.compositionDefns, function() {&#13;
					this.launched = false;&#13;
				});&#13;
				presenter.setAutoplay(compId);//necessary for handling reset&#13;
			});&#13;
			&#13;
        })(animation.compositionClass);&#13;
    }&#13;
	&#13;
	presenter.setVisibility = function(isVisible) {&#13;
		presenter.isVisible = isVisible;&#13;
		presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
	};&#13;
	&#13;
	presenter.show = function() {&#13;
		presenter.setVisibility(true);&#13;
	};&#13;
	&#13;
	presenter.hide = function() {&#13;
		presenter.setVisibility(false);&#13;
	};	&#13;
	&#13;
	presenter.setAutoplay = function(compId){&#13;
		var myAnim = AdobeEdge.getComposition(compId),&#13;
		mySymbol = myAnim.getStage();&#13;
		presenter.autoplayState = mySymbol.timelines["Default Timeline"].autoPlay;&#13;
	};&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'switchAnimation': presenter.switchAnimation,&#13;
            'getEdgeComposition' : presenter.getEdgeComposition,&#13;
            'getEdgeStage' : presenter.getEdgeStage,&#13;
            'stop': presenter.stop,&#13;
            'play': presenter.play,&#13;
            'pause' : presenter.pause&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.switchAnimation = function(item){&#13;
        currentAnimationItem = item;&#13;
        $(presenter.Animations).each(function(i,v){&#13;
            if(item == (i+1)){&#13;
                $('#Stage' + presenter.addonID + v.compositionClass).css("display", "block");&#13;
            }else{&#13;
                $('#Stage' + presenter.addonID + v.compositionClass).css("display", "none");&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.pause = function(position){&#13;
        var currCompClass = presenter.Animations[currentAnimationItem - 1].compositionClass,&#13;
            myAnim = AdobeEdge.getComposition(currCompClass),&#13;
            mySymbol = myAnim.getSymbols("stage")[0],&#13;
            currentPosition = position != undefined ? position[0] : mySymbol.getPosition();&#13;
&#13;
		//stop "stage" and all its children in their current positions&#13;
        mySymbol.stop(currentPosition);&#13;
        var childSymbols = mySymbol.getChildSymbols();&#13;
		&#13;
		pauseAllRecursively = function(symbols){&#13;
			$.each(symbols,function(i,child){&#13;
				child.stop(child.getPosition());&#13;
				var grandChildren = child.getChildSymbols();&#13;
				if(grandChildren.length&gt;0){&#13;
					pauseAllRecursively(grandChildren);&#13;
				}&#13;
			});&#13;
		};&#13;
		pauseAllRecursively(childSymbols);&#13;
    };&#13;
&#13;
    presenter.stop = function() {&#13;
        var currCompClass = presenter.Animations[currentAnimationItem - 1].compositionClass,&#13;
            myAnim = AdobeEdge.getComposition(currCompClass),&#13;
            mySymbol = myAnim.getSymbols("stage")[0];&#13;
&#13;
		//stop "stage" and all its children in 0&#13;
        mySymbol.stop(0);&#13;
        var childSymbols = mySymbol.getChildSymbols();&#13;
		&#13;
		stopAllRecursively = function(symbols){&#13;
			$.each(symbols,function(i,child){&#13;
				child.stop(0);&#13;
				var grandChildren = child.getChildSymbols();&#13;
				if(grandChildren.length&gt;0){&#13;
					stopAllRecursively(grandChildren);&#13;
				}&#13;
			});&#13;
		};&#13;
		stopAllRecursively(childSymbols);&#13;
    };&#13;
&#13;
    presenter.play = function(position){&#13;
		var currCompClass = presenter.Animations[currentAnimationItem - 1].compositionClass;&#13;
		var myAnim = AdobeEdge.getComposition(currCompClass);&#13;
			mySymbol = myAnim.getStage(),&#13;
			currentPosition = position != undefined ? position[0] : mySymbol.getPosition();&#13;
		&#13;
		//play "stage" and all its children from their current positions&#13;
		mySymbol.play(currentPosition);&#13;
		var childSymbols = mySymbol.getChildSymbols();&#13;
		&#13;
		playAllRecursively = function(symbols){&#13;
			$.each(symbols,function(i,child){&#13;
				child.play(child.getPosition());&#13;
				var grandChildren = child.getChildSymbols();&#13;
				if(grandChildren.length&gt;0){&#13;
					playAllRecursively(grandChildren);&#13;
				}&#13;
			});&#13;
		};&#13;
		playAllRecursively(childSymbols);&#13;
    };&#13;
	&#13;
	presenter.getEdgeComposition = function(Item){&#13;
		var i = Item != undefined ? Item[0] : currentAnimationItem;&#13;
		var currCompClass = presenter.Animations[i - 1].compositionClass;&#13;
&#13;
		return AdobeEdge.getComposition(currCompClass);&#13;
    };&#13;
	&#13;
	presenter.getEdgeStage = function(Item){&#13;
		var i = Item != undefined ? Item[0] : currentAnimationItem;&#13;
		var currCompClass = presenter.Animations[i - 1].compositionClass;&#13;
		var myAnim = AdobeEdge.getComposition(currCompClass);&#13;
		&#13;
		return myAnim.getStage();&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
		return;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function(){&#13;
        return;&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
		var initAnimItem = presenter.model.initialAnimation+1;&#13;
		&#13;
		presenter.switchAnimation(initAnimItem);            &#13;
		&#13;
		presenter.stop(0);&#13;
		if(presenter.autoplayState){&#13;
			presenter.play(0);&#13;
		}&#13;
&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
		//stop "stage" and all its children&#13;
		$(Animations).each(function(i,animation){&#13;
			var currCompClass = animation.compositionClass,&#13;
				myAnim = AdobeEdge.getComposition(currCompClass),&#13;
				mySymbol = myAnim.getSymbols("stage")[0];&#13;
&#13;
			mySymbol.stop(0);&#13;
			var childSymbols = mySymbol.getChildSymbols();&#13;
			&#13;
			stopAllRecursively = function(symbols){&#13;
				$.each(symbols,function(i,child){&#13;
					child.stop(0);&#13;
					var grandChildren = child.getChildSymbols();&#13;
					if(grandChildren.length&gt;0){&#13;
						stopAllRecursively(grandChildren);&#13;
					}&#13;
				});&#13;
			};&#13;
			stopAllRecursively(childSymbols);&#13;
		});&#13;
		&#13;
        return JSON.stringify({&#13;
            'currentAnimationItem' : currentAnimationItem,&#13;
            'isVisible' : presenter.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
        var parsedState = JSON.parse(state);&#13;
	&#13;
		currentAnimationItem = parsedState.currentAnimationItem;&#13;
		presenter.isVisible = parsedState.isVisible;&#13;
		presenter.setVisibility(presenter.isVisible);&#13;
		&#13;
        //setting definitions launched to false, so the AdobeEdge.launchComposition has to create composition again&#13;
        $.each(AdobeEdge.compositionDefns, function() {&#13;
            this.launched = false;&#13;
        });&#13;
    };&#13;
	&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon id="Event_Listener">
	<model>
	</model>
<css>.event-listener-body,&#13;
.event-listener-header,&#13;
.event-listener-clear {&#13;
    text-align: center;&#13;
    font-weight: bold;&#13;
    border: 2px dashed #999999;&#13;
    padding: 3px;&#13;
    color: red;&#13;
    width: 100%;&#13;
}&#13;
&#13;
.event-listener-header {&#13;
    height: 5%;&#13;
}&#13;
&#13;
.event-listener-body {&#13;
    height: 85%;&#13;
    overflow: auto;&#13;
}&#13;
&#13;
.event-info {&#13;
    color: black;&#13;
    border-bottom: 1px dotted black;&#13;
    font-weight: normal;&#13;
}&#13;
&#13;
.event-name {&#13;
    color: red;&#13;
    font-weight: bold;&#13;
}&#13;
&#13;
.event-listener-clear {&#13;
    display: none;&#13;
    color: #00008b;&#13;
    border-top-width: 0;&#13;
    border-bottom-width: 0;&#13;
    cursor: pointer;&#13;
}&#13;
</css><view>&lt;div class="event-listener-header"&gt;No events intercepted&lt;/div&gt;&#13;
&lt;div class="event-listener-clear"&gt;Clear events log&lt;/div&gt;&#13;
&lt;div class="event-listener-body"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="event-listener-header"&gt;No events intercepted&lt;/div&gt;&#13;
&lt;div class="event-listener-clear"&gt;Clear events log&lt;/div&gt;&#13;
&lt;div class="event-listener-body"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonEvent_Listener_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
    var $view;&#13;
    var eventsCount = 0;&#13;
&#13;
    presenter.STANDARD_EVENTS = {&#13;
        'ValueChanged': 'vc',&#13;
        'Definition': 'de',&#13;
        'ItemSelected': 'is',&#13;
        'ItemConsumed': 'ic',&#13;
        'ItemReturned': 'ir',&#13;
        'PageLoaded': 'pl',&#13;
        'PageAllOK': 'pa',&#13;
        'ShowAnswers': 'sa',&#13;
        'HideAnswers': 'ha',&#13;
        'Done': 'do',&#13;
        'AllAttempted': 'aa',&#13;
        'NotAllAttempted': 'naa',&#13;
        'LimitedCheck': 'lc'&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    function insertEventInfo(eventData, infoElement) {&#13;
        for (var eventDataName in eventData) {&#13;
            if (!eventData.hasOwnProperty(eventDataName)) continue;&#13;
&#13;
            var element = document.createElement('div');&#13;
            $(element).text(eventDataName + ': "' + eventData[eventDataName] + '"');&#13;
            $(infoElement).append(element);&#13;
        }&#13;
    }&#13;
&#13;
    function updateHeader() {&#13;
        $view.find('.event-listener-header').text('Intercepted ' + eventsCount + ' events');&#13;
    }&#13;
&#13;
    function createEventInfoElement(eventName) {&#13;
        var eventDateTime = new Date(),&#13;
            eventFormattedDate = eventDateTime.getHours() + ":" +&#13;
            eventDateTime.getMinutes() + ":" + eventDateTime.getSeconds(),&#13;
            eventInfo = document.createElement('div'),&#13;
            eventNameElement = document.createElement('div'),&#13;
            eventDate = document.createElement('div');&#13;
&#13;
        $(eventInfo).addClass('event-info');&#13;
        $(eventNameElement).addClass('event-name');&#13;
        $(eventNameElement).text("Received event of type " + eventName);&#13;
        $(eventInfo).append(eventNameElement);&#13;
&#13;
        $(eventDate).text("Date: " + eventFormattedDate);&#13;
        $(eventInfo).append(eventDate);&#13;
&#13;
        return eventInfo;&#13;
    }&#13;
&#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
        var eventInfo = createEventInfoElement(eventName);&#13;
        insertEventInfo(eventData, eventInfo);&#13;
&#13;
        if (!eventsCount) {&#13;
            $view.find('.event-listener-body').html(eventInfo);&#13;
            $view.find('.event-listener-clear').show();&#13;
        } else {&#13;
            $view.find('.event-listener-body .event-info:first').before(eventInfo);&#13;
        }&#13;
&#13;
        eventsCount++;&#13;
        updateHeader();&#13;
    };&#13;
&#13;
    presenter.run = function(view){&#13;
        eventBus = playerController.getEventBus();&#13;
&#13;
        $.each(presenter.STANDARD_EVENTS, function(name, _) {&#13;
            eventBus.addEventListener(name, presenter);&#13;
        });&#13;
&#13;
        $view = $(view);&#13;
&#13;
        $view.find('.event-listener-clear').click(function () {&#13;
            eventsCount = 0;&#13;
            $view.find('.event-listener-header').text('No events intercepted');&#13;
            $view.find('.event-info').remove();&#13;
            $(this).hide();&#13;
        });&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon id="Event_Sender">
	<model>
	</model>
<css>.event-sender-table {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.event-sender-table-left {&#13;
    width: 40%;&#13;
    font-weight: bold;&#13;
    border-right: 1px dotted black;&#13;
}&#13;
&#13;
.event-sender-table th {&#13;
    font-weight: bold;&#13;
    border-bottom: 1px dotted black;&#13;
}&#13;
&#13;
.event-sender-table button {&#13;
    width: 80%;&#13;
    border: 1px dotted black;&#13;
}&#13;
&#13;
.event-sender-table select {&#13;
    width: 95%;&#13;
}&#13;
</css><view>&lt;table class="event-sender-table"&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;th class="event-sender-table-left"&gt;Field&lt;/th&gt;&#13;
        &lt;th&gt;Value&lt;/th&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="event-sender-table-left"&gt;Type:&lt;/td&gt;&#13;
        &lt;td&gt;&#13;
            &lt;select id="type"&gt;&#13;
                &lt;option value="ValueChanged" selected&gt;ValueChanged&lt;/option&gt;&#13;
                &lt;option value="ItemConsumed"&gt;ItemConsumed&lt;/option&gt;&#13;
                &lt;option value="ItemReturned"&gt;ItemReturned&lt;/option&gt;&#13;
                &lt;option value="ItemSelected"&gt;ItemSelected&lt;/option&gt;&#13;
                &lt;option value="Definition"&gt;Definition&lt;/option&gt;&#13;
            &lt;/select&gt;&#13;
        &lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="event-sender-table-left"&gt;Source:&lt;/td&gt;&#13;
        &lt;td&gt;&lt;input id="source"&gt;&lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="event-sender-table-left"&gt;Item:&lt;/td&gt;&#13;
        &lt;td&gt;&lt;input id="item"&gt;&lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="event-sender-table-left"&gt;Value&lt;/td&gt;&#13;
        &lt;td&gt;&lt;input id="value"&gt;&lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="event-sender-table-left"&gt;Score&lt;/td&gt;&#13;
        &lt;td&gt;&lt;input id="score"&gt;&lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr class="send-button"&gt;&#13;
        &lt;td colspan="2"&gt;&lt;button&gt;Send event&lt;/button&gt;&lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
&lt;/table&gt;&#13;
</view><preview>&lt;table class="event-sender-table"&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;th class="event-sender-table-left"&gt;Field&lt;/th&gt;&#13;
        &lt;th&gt;Value&lt;/th&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="event-sender-table-left"&gt;Type:&lt;/td&gt;&#13;
        &lt;td&gt;&#13;
            &lt;select id="type"&gt;&#13;
                &lt;option value="ValueChanged" selected&gt;ValueChanged&lt;/option&gt;&#13;
                &lt;option value="ItemConsumed"&gt;ItemConsumed&lt;/option&gt;&#13;
                &lt;option value="ItemReturned"&gt;ItemReturned&lt;/option&gt;&#13;
                &lt;option value="ItemSelected"&gt;ItemSelected&lt;/option&gt;&#13;
                &lt;option value="Definition"&gt;Definition&lt;/option&gt;&#13;
            &lt;/select&gt;&#13;
        &lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="event-sender-table-left"&gt;Source:&lt;/td&gt;&#13;
        &lt;td&gt;&lt;input id="source"&gt;&lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="event-sender-table-left"&gt;Item:&lt;/td&gt;&#13;
        &lt;td&gt;&lt;input id="item"&gt;&lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="event-sender-table-left"&gt;Value&lt;/td&gt;&#13;
        &lt;td&gt;&lt;input id="value"&gt;&lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="event-sender-table-left"&gt;Score&lt;/td&gt;&#13;
        &lt;td&gt;&lt;input id="score"&gt;&lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
    &lt;tr class="send-button"&gt;&#13;
        &lt;td colspan="2"&gt;&lt;button&gt;Send event&lt;/button&gt;&lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
&lt;/table&gt;&#13;
</preview><presenter>function AddonEvent_Sender_create() {&#13;
    var presenter = function () {};&#13;
    presenter.playerController = null;&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        $(view).find('.event-sender-table button').click(function() {&#13;
            var eventData = {&#13;
                    source: $(view).find('.event-sender-table #source').val(),&#13;
                    item: $(view).find('.event-sender-table #item').val(),&#13;
                    value: $(view).find('.event-sender-table #value').val(),&#13;
                    score: $(view).find('.event-sender-table #score').val()&#13;
                },&#13;
                type = $(view).find('.event-sender-table #type').val();&#13;
&#13;
            presenter.eventBus.sendEvent(type, eventData);&#13;
        });&#13;
&#13;
        $(view).find("input, select, button").click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="External_Link_Button" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Title" nameLabel="External_Link_Button_property_title" type="string"/>
		<property name="Image" nameLabel="External_Link_Button_property_image" type="image"/>
		<property displayName="URL" name="URI" nameLabel="External_Link_Button_property_uri" type="string"/>
        <property displayName="Target type" name="targetType" nameLabel="External_Link_Button_property_target_type" type="{Blank, Top}"/>
	</model>
<css>.external-link-button-wrapper {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.external-link-button-element {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    background: transparent;&#13;
    background: url('resources/elb-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.external-link-button-title,&#13;
.external-link-button-image {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.external-link-button-title  {&#13;
	color: #00F;&#13;
	text-decoration: none;&#13;
}&#13;
</css><view>&lt;div class="external-link-button-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="external-link-button-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonExternal_Link_Button_create() {&#13;
    var presenter = function() {};&#13;
    &#13;
    presenter.ERROR_CODES = {&#13;
    	'M01': 'URL property cannot be empty!'&#13;
    };&#13;
    &#13;
    presenter.DISPLAY_CONTENT_TYPE = {&#13;
        NONE: 0,&#13;
        TITLE: 1,&#13;
        IMAGE: 2,&#13;
        BOTH: 3&#13;
    };&#13;
&#13;
    presenter.playerController = undefined;&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.setElementsDimensions = function (model, wrapper, element) {&#13;
        var viewDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var viewDistances = DOMOperationsUtils.calculateOuterDistances(viewDimensions);&#13;
&#13;
        presenter.$view.css({&#13;
            width:(model.Width - viewDistances.horizontal) + 'px',&#13;
            height:(model.Height - viewDistances.vertical) + 'px'&#13;
        });&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, wrapper);&#13;
        DOMOperationsUtils.setReducedSize(wrapper, element);&#13;
    };&#13;
&#13;
    presenter.createImageElement = function (element) {&#13;
        var $imageElement = $(document.createElement('img'));&#13;
&#13;
        $imageElement.addClass('external-link-button-image');&#13;
        $imageElement.attr('src', presenter.configuration.image);&#13;
&#13;
        $(element).append($imageElement);&#13;
    };&#13;
    &#13;
    presenter.createTitleElement = function (element) {&#13;
        var $titleElement = $(document.createElement('span'));&#13;
&#13;
        $titleElement.addClass('external-link-button-title');&#13;
        $titleElement.html(presenter.configuration.title);&#13;
&#13;
        $(element).append($titleElement);&#13;
    };&#13;
&#13;
    presenter.createElements = function (wrapper) {&#13;
        var $ahref = $(document.createElement('a'));&#13;
        $ahref.attr('href',presenter.configuration.URI);&#13;
&#13;
        if (presenter.configuration.targetType == 'Blank'){&#13;
            $ahref.attr('target','_blank');&#13;
        } else if (presenter.configuration.targetType == 'Top') {&#13;
            $ahref.attr('target','_top');&#13;
        } else {&#13;
            $ahref.attr('target','_blank');&#13;
        }&#13;
&#13;
        $ahref.click(function (event) { event.stopPropagation(); });&#13;
&#13;
        var $element = $(document.createElement('div'));&#13;
        $element.addClass('external-link-button-element');&#13;
        &#13;
        switch (presenter.configuration.displayContent) {&#13;
	        case presenter.DISPLAY_CONTENT_TYPE.TITLE:&#13;
	            presenter.createTitleElement($element);&#13;
	            break;&#13;
	        case presenter.DISPLAY_CONTENT_TYPE.IMAGE:&#13;
	            presenter.createImageElement($element);&#13;
	            break;&#13;
	        case presenter.DISPLAY_CONTENT_TYPE.BOTH:&#13;
	            presenter.createImageElement($element);&#13;
	            presenter.createTitleElement($element);&#13;
	            break;&#13;
        }&#13;
        &#13;
        $ahref.append($element);&#13;
        wrapper.append($ahref);&#13;
&#13;
        return $element;&#13;
    };&#13;
    &#13;
    presenter.getWrapper = function () {&#13;
    	return presenter.$view.find('.external-link-button-wrapper');&#13;
    };&#13;
&#13;
    presenter.isLocalResource = function (uri) {&#13;
        var regex = new RegExp('^\.\.\/resources\/[0-9]*\.[a-zA-Z]+$');&#13;
&#13;
        return regex.test(uri);&#13;
    };&#13;
&#13;
    presenter.fixLocalResourceURI = function () {&#13;
        var currentPageIndex = presenter.playerController.getCurrentPageIndex(),&#13;
            currentPage = presenter.playerController.getPresentation().getPage(currentPageIndex),&#13;
            pageBaseURL = currentPage.getBaseURL();&#13;
&#13;
        presenter.configuration.URI = pageBaseURL + presenter.configuration.URI;&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model) {&#13;
        presenter.addonID = model.ID;&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
        	DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
        	return;&#13;
        }&#13;
&#13;
        if (presenter.isLocalResource(presenter.configuration.URI)) {&#13;
            presenter.fixLocalResourceURI();&#13;
        }&#13;
&#13;
        var $wrapper = presenter.getWrapper();&#13;
        var $element = presenter.createElements($wrapper);&#13;
        &#13;
        presenter.setElementsDimensions(model, $wrapper, $element);&#13;
        &#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
    	presenter.presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
    	presenter.presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.validateString = function (imageSrc) {&#13;
        var isEmpty = ModelValidationUtils.isStringEmpty(imageSrc);&#13;
&#13;
        return {&#13;
            isEmpty: isEmpty,&#13;
            value: isEmpty ? "" : imageSrc&#13;
        };&#13;
    };&#13;
&#13;
    presenter.determineDisplayContent = function(title, image) {&#13;
        var displayContent = presenter.DISPLAY_CONTENT_TYPE.NONE;&#13;
&#13;
        if (!title.isEmpty &amp;&amp; image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.TITLE;&#13;
        } else if (title.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.IMAGE;&#13;
        } else if (!title.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.BOTH;&#13;
        }&#13;
&#13;
        return displayContent;&#13;
    };&#13;
    &#13;
    presenter.validateModel = function (model) {&#13;
    	if (ModelValidationUtils.isStringEmpty(model.URI)) {&#13;
    		return { isValid: false, errorCode: 'M01' };&#13;
    	}&#13;
    	&#13;
    	var image = presenter.validateString(model.Image);&#13;
    	var title = presenter.validateString(model.Title);&#13;
    	&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        &#13;
        return {&#13;
        	displayContent: presenter.determineDisplayContent(title, image),&#13;
        	isValid: true,&#13;
            title: model.Title,&#13;
            image: image.value,&#13;
            URI: model.URI,&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            targetType: model['targetType']&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };    &#13;
    &#13;
    presenter.show = function() {&#13;
        presenter.configuration.isVisible = true;&#13;
        presenter.setVisibilityFromConfig();&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.configuration.isVisible = false;&#13;
        presenter.setVisibilityFromConfig();&#13;
    };&#13;
    &#13;
    presenter.setVisibilityFromConfig = function() {&#13;
    	presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
    	presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
    	presenter.setVisibilityFromConfig();&#13;
    };&#13;
    &#13;
    presenter.getState = function() {&#13;
    	return JSON.stringify({&#13;
    		isVisible: presenter.configuration.isVisible&#13;
    	});&#13;
    };&#13;
    &#13;
    presenter.setState = function(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
        presenter.setVisibilityFromConfig();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="FigureDrawing" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="3DGrid" nameLabel="FigureDrawing_property_3d_grid" type="boolean"/>
        <property name="ShowGrid" nameLabel="FigureDrawing_property_show_grid" type="boolean"/>
        <property name="Grid" nameLabel="FigureDrawing_property_grid_step" type="string"/>
        <property name="Radius" nameLabel="FigureDrawing_property_point_radius" type="string"/>
        <property name="StartingLines" nameLabel="FigureDrawing_property_starting_lines" type="text"/>
        <property name="Answer" nameLabel="FigureDrawing_property_answer" type="text"/>
        <property name="IsActivity" nameLabel="FigureDrawing_property_is_activity" type="boolean"/>
        <property name="IsDisabled" nameLabel="FigureDrawing_property_is_disabled" type="boolean"/>
        <property name="Coloring" nameLabel="FigureDrawing_property_coloring" type="boolean"/>
        <property name="DefColor" nameLabel="FigureDrawing_property_default_color" type="string"/>
        <property name="StartingColors" nameLabel="FigureDrawing_property_starting_colors" type="text"/>
        <property name="AnswerColors" nameLabel="FigureDrawing_property_answer_colors" type="list">
            <property name="Figure" nameLabel="FigureDrawing_property_figure" type="string"/>
            <property name="Color" nameLabel="FigureDrawing_property_point_and_color" type="string"/>
        </property>
        <property name="BlockColoring" nameLabel="FigureDrawing_property_block_coloring" type="boolean"/>
        <property name="ShowAns" nameLabel="FigureDrawing_property_show_answers_in_editor" type="boolean"/>
    </model>
<css>.figure {&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
.figure.disabled{&#13;
}&#13;
.canvas {&#13;
    position:absolute;&#13;
}&#13;
.chart{&#13;
    position:absolute;&#13;
}&#13;
.chart.disabled{&#13;
    background: rgba(0,0,0,0.1);&#13;
}&#13;
.point {&#13;
    fill: black;&#13;
    stroke-width: 20px;&#13;
    stroke: #A52A2A;&#13;
    stroke-opacity: 0;&#13;
    cursor:pointer;&#13;
}&#13;
&#13;
.point.selected {&#13;
    fill: #0099CC;&#13;
}&#13;
&#13;
.grid {&#13;
    stroke:#7A8B8B;&#13;
    stroke-width:1;&#13;
    stroke-dasharray: 5, 5;&#13;
    stroke-linecap: round;&#13;
}&#13;
.line {&#13;
    stroke:#05B8CC;&#13;
    stroke-width:4;&#13;
    stroke-linecap: round;&#13;
}&#13;
.line.nonremovable {&#13;
    stroke: black;&#13;
}&#13;
.line.correct{&#13;
    stroke: green;&#13;
}&#13;
.line.wrong{&#13;
    stroke: red;&#13;
}&#13;
.line.show-answers{&#13;
    stroke: gray;&#13;
}&#13;
.templine {&#13;
    stroke:#4C92FD;&#13;
    stroke-width:4;&#13;
    stroke-linecap: round;&#13;
}&#13;
.figure .icon-container {&#13;
    border: 1px solid #111111;&#13;
    border-radius: 50%;&#13;
    font-size: 10px;&#13;
    height: 6px;&#13;
    line-height: 6px;&#13;
    padding: 2px;&#13;
    position: absolute;&#13;
    width: 6px;&#13;
    font-weight: bold;&#13;
}&#13;
.coordinates {&#13;
    width: 35px;&#13;
    height: 22px;&#13;
    border: 1px solid #696969;&#13;
    border-radius: 3px;&#13;
    position: absolute;&#13;
    top: -34px;&#13;
    left: 0px;&#13;
    font-size: 9px;&#13;
    padding: 5px;&#13;
    line-height: 11px;&#13;
}&#13;
.figure .icon-container.wrong {&#13;
    background-color: #ff5599;&#13;
}&#13;
.figure .icon-container.correct {&#13;
    background-color: #55ff99;&#13;
}&#13;
.figure .icon-container.correct:after {&#13;
    content: 'v';&#13;
}&#13;
.figure .icon-container.wrong:after {&#13;
    content: 'x';&#13;
}&#13;
.figure.deflines:before {&#13;
    content: 'Starting lines are incorrect!';&#13;
}&#13;
.figure.answerlines:before {&#13;
    content: 'Answer lines are incorrect!';&#13;
}&#13;
.figure.radius:before {&#13;
    content: 'Radius is incorrect!';&#13;
}&#13;
.figure.nonremanswer:before {&#13;
    content: 'At least one of the answers is a nonremovable starting line!';&#13;
}&#13;
.figure.colorerror:before {&#13;
    content: 'Error in the color definition!';&#13;
}&#13;
.figure.startingcolor:before {&#13;
    content: 'Error in the starting color definition!';&#13;
}&#13;
.figure.answerfigure:before {&#13;
    content: 'Error in the answer figure definition!';&#13;
}&#13;
.figure.grid:before {&#13;
    content: 'Enter a correct grid step!';&#13;
}&#13;
.figure.defcolorerror:before {&#13;
    content: 'Enter a correct default color!';&#13;
}&#13;
</css><view>&lt;div class="figure"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="figure"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonFigureDrawing_create(){&#13;
    var presenter = function(){}&#13;
    presenter.error = false;&#13;
    presenter.isEraser = false;&#13;
    presenter.isStarted = false;&#13;
    presenter.isErrorMode = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'isAllOK'.toLowerCase():&#13;
                presenter.isAllOK();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'setColor'.toLowerCase():&#13;
                presenter.setColor(params[0]);&#13;
                break;&#13;
            case 'setDrawMode'.toLowerCase():&#13;
                presenter.setDrawMode();&#13;
                break;&#13;
            case 'setColorMode'.toLowerCase():&#13;
                presenter.setColorMode();&#13;
                break;&#13;
            case 'setEraserOn'.toLowerCase():&#13;
                presenter.setEraserOn();&#13;
                break;&#13;
            case 'allLinesDrawn'.toLowerCase():&#13;
                presenter.allLinesDrawn();&#13;
                break;&#13;
            case 'isDrawn'.toLowerCase():&#13;
                presenter.isDrawn(params[0],params[1],params[2],params[3]);&#13;
                break;&#13;
            case 'countDrawnLines'.toLowerCase():&#13;
                presenter.countDrawnLines();&#13;
                break;&#13;
            case 'markAsCorrect'.toLowerCase():&#13;
                presenter.markAsCorrect();&#13;
                break;&#13;
            case 'markAsWrong'.toLowerCase():&#13;
                presenter.markAsWrong();&#13;
                break;&#13;
            case 'markAsNeutral'.toLowerCase():&#13;
                presenter.markAsNeutral();&#13;
                break;&#13;
        }&#13;
    };&#13;
    presenter.markAsCorrect = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.figure').removeClass('wrong');&#13;
        presenter.$view.find('.figure').addClass('correct');&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.figure').removeClass('correct');&#13;
        presenter.$view.find('.figure').addClass('wrong');&#13;
    };&#13;
&#13;
    presenter.markAsNeutral = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.figure').removeClass('correct');&#13;
        presenter.$view.find('.figure').removeClass('wrong');&#13;
    };&#13;
&#13;
    presenter.isDrawn = function(column1, row1, column2, row2) {&#13;
        var firstRow, firstColumn, secondRow, secondColumn, col1, col2, ro1, ro2, i;&#13;
        if (column1 &lt; column2 || (column1 == column2 &amp;&amp; row1 &lt; row2)) {&#13;
            firstColumn = column1;&#13;
            firstRow = row1;&#13;
            secondColumn = column2;&#13;
            secondRow = row2;&#13;
        } else {&#13;
            firstColumn = column2;&#13;
            firstRow = row2;&#13;
            secondColumn = column1;&#13;
            secondRow = row1;&#13;
        }&#13;
        var steps = Math.abs(gcd(secondRow-firstRow, secondColumn-firstColumn));&#13;
        if (presenter.grid3D &amp;&amp; (secondRow-firstRow+secondColumn-firstColumn)/steps %2 != 0) steps = 0.5 * steps;&#13;
        var stepX = parseInt((secondColumn-firstColumn)/steps);&#13;
        var	stepY = parseInt((secondRow-firstRow)/steps);&#13;
        col1 = firstColumn;&#13;
        ro1 = firstRow;&#13;
        for (i = 1; i &lt;= steps; i++) {&#13;
            col2 = col1 + stepX;&#13;
            ro2 = ro1 + stepY;&#13;
            line = presenter.$view.find('#line_'+col1+'_'+ro1+'_'+col2+'_'+ro2);&#13;
            if (line.length &lt;= 0) {&#13;
                return false&#13;
            }&#13;
            col1 = col2;&#13;
            ro1 = ro2;&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.countDrawnLines = function() {&#13;
        var numberOfLines = presenter.$view.find('.line').not('.nonremovable').length;&#13;
        return numberOfLines;&#13;
    };&#13;
&#13;
    presenter.allLinesDrawn = function() {&#13;
        var answer = true;&#13;
        if (presenter.activity &amp;&amp; !presenter.error) {&#13;
            var i, j, line, line2, color, counter = 0, errorCounter = presenter.$view.find('.line').not('.nonremovable').length, numberOfAnswers = presenter.AnswerLines.length;&#13;
            for (i = 0; i &lt;= numberOfAnswers; i++) {&#13;
                line = presenter.$view.find('#'+presenter.AnswerLines[i]);&#13;
                if (line.length &gt; 0) {&#13;
                    counter++;&#13;
                    errorCounter--;&#13;
                }&#13;
            }&#13;
            if (counter != numberOfAnswers || errorCounter != 0)&#13;
                answer = false;&#13;
        };&#13;
        return answer;&#13;
    };&#13;
    presenter.setDrawMode = function() {&#13;
        presenter.drawingMode = true;&#13;
        presenter.$view.find('.figure').addClass('drawing_mode');&#13;
        presenter.$view.find('.figure').removeClass('coloring_mode');&#13;
    };&#13;
    presenter.setColorMode = function() {&#13;
        if (presenter.coloring &amp;&amp; (!presenter.blockColoring || presenter.allLinesDrawn() || !presenter.drawingMode)) {&#13;
            presenter.drawingMode = false;&#13;
            presenter.$view.find('.figure').addClass('coloring_mode');&#13;
            presenter.$view.find('.selected').removeClass('selected');&#13;
            presenter.$view.find('.figure').removeClass('drawing_mode');&#13;
            presenter.selected.isSelected = false;&#13;
        }&#13;
    };&#13;
    presenter.setColor = function(color) {&#13;
        presenter.isEraser = false;&#13;
        var color = validateColor(color,false,false);&#13;
        if (color != false)&#13;
            presenter.currentColor = color;&#13;
    };&#13;
    presenter.setEraserOn = function() {&#13;
        presenter.isEraser = true;&#13;
        presenter.currentColor = [255,255,255,0];&#13;
    };&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        return presenter.isStarted;&#13;
    };&#13;
    presenter.isAllOK = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        return ((presenter.getScore() == presenter.getMaxScore()) &amp;&amp; (presenter.getErrorCount() === 0));&#13;
    };&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (!(presenter.$view.find('.disabled').length &gt; 0)) {&#13;
            presenter.disabled = true;&#13;
            presenter.$view.find('.figure').addClass('disabled');&#13;
            presenter.$view.find('.chart').addClass('disabled');&#13;
        }&#13;
    };&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.disabled = false;&#13;
        presenter.$view.find('.disabled').removeClass('disabled');&#13;
    };&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        if (presenter.coloring) presenter.$view.find('.canvas').css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
    presenter.updateVisibility = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (presenter.isVisible) {&#13;
            presenter.show();&#13;
        } else&#13;
            presenter.hide();&#13;
    };&#13;
    function validateRadius(radius){&#13;
        if (radius == '' || radius == 0) {&#13;
            return 5;&#13;
        } else if (radius &gt; 0) {&#13;
            return parseInt(radius)&#13;
        } else {&#13;
            presenter.error = 'radius';&#13;
            return 5;&#13;
        }&#13;
    };&#13;
    function validateStartingColor(params){&#13;
        var answer = [], point;&#13;
        if (params == '' || params == undefined) return '';&#13;
        var pointsData = Helpers.splitLines(params);&#13;
        var re = /^\d+;\d+;\d{1,3} \d{1,3} \d{1,3}$/;&#13;
        var testing;&#13;
        $.each(pointsData, function() {&#13;
            if (this != '') {&#13;
                testing = re.test(this);&#13;
                if (!testing) {&#13;
                    presenter.error = 'startingcolor';&#13;
                    return '';&#13;
                }&#13;
                point = this.split(';');&#13;
                if (isNaN(point[0]) || isNaN(point[1]) || point[0] &lt; 0 || point[1] &lt; 0 || point[0] &gt; presenter.canvasWidth || point[1] &gt; presenter.canvasHeight) {&#13;
                    presenter.error = 'startingcolor';&#13;
                    return '';&#13;
                }&#13;
                colors = validateColor(point[2],false,true);&#13;
                answer.push([parseInt(point[0]),parseInt(point[1]),colors[0],colors[1],colors[2],colors[3]]);&#13;
            }&#13;
        });&#13;
        return answer;&#13;
    }&#13;
    function validateLines(lines, draw, coloranswers){&#13;
        presenter.tmpLine = [];&#13;
        if (lines == '' || lines == undefined) return true;&#13;
        var Lines = Helpers.splitLines(lines);&#13;
        var point, x, y, tmpPoint1, tmpPoint2, nonremovable;&#13;
        var re = /^\d+;\d+-\d+;\d+$/;&#13;
        var re2 = /^\d+;\d+-\d+;\d+\*$/;&#13;
        var testing;&#13;
        $.each(Lines, function() {&#13;
            if (this != '') {&#13;
                nonremovable = true;&#13;
                testing = re.test(this);&#13;
                if (draw &amp;&amp; !testing)&#13;
                    testing = re2.test(this);&#13;
                if (!testing) {&#13;
                    draw ? presenter.error = 'deflines' : presenter.error = 'answerlines';&#13;
                    return false;&#13;
                }&#13;
                splittedByDash = this.split('-');&#13;
                point = splittedByDash[0].split(';');&#13;
                if (isNaN(point[0]) || isNaN(point[1]) || (point[0] &gt; presenter.pointsX+1 &amp;&amp; !presenter.grid3D) || (point[0] &gt; 2*presenter.pointsX+1 &amp;&amp; presenter.grid3D) || point[1] &gt; presenter.pointsY+1) {&#13;
                    draw ? presenter.error = 'deflines' : presenter.error = 'answerlines';&#13;
                    return false;&#13;
                }&#13;
                if (presenter.grid3D &amp;&amp; (parseInt(point[0]) + parseInt(point[1])) % 2 == 0) {&#13;
                    draw ? presenter.error = 'deflines' : presenter.error = 'answerlines';&#13;
                    return false;&#13;
                }&#13;
                x = countX(point[0]); y = countY(point[1]);&#13;
                tmpPoint1 = new Point(parseInt(point[1]), parseInt(point[0]), x, y);&#13;
                point = splittedByDash[1].split(';');&#13;
                if (point[1].slice(-1) == '*' &amp;&amp; draw) {&#13;
                    nonremovable = false;&#13;
                    point[1] = point[1].substr(0,point[1].length-1);&#13;
                };&#13;
                if (isNaN(point[0]) || isNaN(point[1]) || (point[0] &gt; presenter.pointsX+1 &amp;&amp; !presenter.grid3D) || point[1] &gt; presenter.pointsY+1 || (point[0] &gt; 2*presenter.pointsX+1 &amp;&amp; presenter.grid3D)) {&#13;
                    draw ? presenter.error = 'deflines' : presenter.error = 'answerlines';&#13;
                    return false;&#13;
                }&#13;
                if (presenter.grid3D &amp;&amp; (parseInt(point[0]) + parseInt(point[1])) % 2 == 0) {&#13;
                    draw ? presenter.error = 'deflines' : presenter.error = 'answerlines';&#13;
                    return false;&#13;
                }&#13;
                y = countY(point[1]);&#13;
                x = countX(point[0]);&#13;
                tmpPoint2 = new Point(parseInt(point[1]), parseInt(point[0]), x, y);&#13;
                presenter.drawLine(tmpPoint1, tmpPoint2, nonremovable,draw, coloranswers,false);&#13;
            }&#13;
        });&#13;
    }&#13;
    function validateAnswersColor(list) {&#13;
        presenter.answersColors = [];&#13;
        var points, color = [], tmpPoint, helpString, tmpData, i, j, k;&#13;
        var re = /^(\d+;\d+-)+(\d+;\d+)$/;&#13;
        var re2 = /^\d+;\d+;\d{1,3} \d{1,3} \d{1,3}$/;&#13;
        var testing;&#13;
        for (i = 0; i &lt; list.length; i++) {&#13;
            points = [];&#13;
            if (tmpPoint == '') {&#13;
                presenter.error = 'answerfigure';&#13;
                return false;&#13;
            }&#13;
            testing = re.test(list[i]['Figure']);&#13;
            if (!testing) {&#13;
                presenter.error = 'answerfigure';&#13;
                return false;&#13;
            }&#13;
            tmpPoint = list[i]['Figure'].split('-');&#13;
            for (j=0; j &lt; tmpPoint.length-1; j++) {&#13;
                helpString = tmpPoint[j] +'-'+tmpPoint[j+1];&#13;
                validateLines(helpString,false, true);&#13;
                for (k=0; k &lt; presenter.tmpLine.length;k++)&#13;
                    points.push(presenter.tmpLine[k]);&#13;
            }&#13;
            if (list[i]['Color'] != '') {&#13;
                testing = re2.test(list[i]['Color']);&#13;
                if (!testing) {&#13;
                    presenter.error = 'colorerror';&#13;
                    return false;&#13;
                }&#13;
                color = validateStartingColor(list[i]['Color'])[0]&#13;
            }&#13;
            tmpData = {&#13;
                lines: points,&#13;
                x: color[0],&#13;
                y: color[1],&#13;
                color: color[2]+' '+color[3]+' '+color[4]+' '+color[5]&#13;
            };&#13;
            if (tmpPoint[0] != tmpPoint[j]) {&#13;
                presenter.error = 'answerfigure';&#13;
                return false;&#13;
            }&#13;
            presenter.answersColors.push(tmpData);&#13;
        }&#13;
    }&#13;
    function validateColor(color,isDefault,isEditor){&#13;
        var rgb = color.split(' ');&#13;
        if (isNaN(rgb[0]) || isNaN(rgb[1]) || isNaN(rgb[2]) || rgb[0] &lt; 0 || rgb[0] &gt; 255 || rgb[1]&lt;0 || rgb[1]&gt;255 || rgb[2]&lt;0 || rgb[2]&gt;255 || rgb.length != 3) {&#13;
            if (isEditor)&#13;
                (isDefault) ? (presenter.error = 'defcolorerror') : (presenter.error = 'colorerror');&#13;
            else&#13;
                return false;&#13;
        };&#13;
        rgb.push('255');&#13;
        return rgb;&#13;
    };&#13;
    function Point (row, column, x, y) {&#13;
        this.row = row;&#13;
        this.column = column;&#13;
        this.x = x;&#13;
        this.y = y;&#13;
    }&#13;
    presenter.selected = {&#13;
        row: 0,&#13;
        column: 0,&#13;
        x: 0,&#13;
        y: 0,&#13;
        isSelected: false&#13;
    }&#13;
    presenter.drawingPoint = {&#13;
        row: 0,&#13;
        column: 0,&#13;
        x: 0,&#13;
        y: 0,&#13;
        isDown: false&#13;
    }&#13;
    var gcd = function(a, b) {&#13;
        if (!b) {&#13;
            return a;&#13;
        }&#13;
        return gcd(b, a % b);&#13;
    }&#13;
    var countX = function(column) {&#13;
        if (presenter.grid3D) return (0.5 * column * presenter.grid)&#13;
        else return ((parseInt(column)-0.5) * presenter.grid);&#13;
    };&#13;
    var countY = function(row) {&#13;
        if (presenter.grid3D) return ((1/3*(parseInt(row)-1) + 0.5) * presenter.grid)&#13;
        else return ((parseInt(row)-0.5) * presenter.grid);&#13;
    };&#13;
    function uniq(a) {&#13;
        return a.sort().filter(function(item, pos) {&#13;
            return !pos || item != a[pos - 1];&#13;
        })&#13;
    }&#13;
    function drawOneLine(point1, point2, nonremovable) {&#13;
        var newLine = document.createElementNS("http://www.w3.org/2000/svg", 'line');&#13;
        newLine.setAttribute("y1",point1.y);&#13;
        newLine.setAttribute("x1",point1.x);&#13;
        newLine.setAttribute("y2",point2.y);&#13;
        newLine.setAttribute("x2",point2.x);&#13;
        newLine.setAttribute("id",'line_'+(point1.column)+'_'+(point1.row)+'_'+(point2.column)+'_'+(point2.row))&#13;
        nonremovable ? newLine.setAttribute("class","line nonremovable") : newLine.setAttribute("class","line");&#13;
        var firstPoint = presenter.$view.find('.point')[0];&#13;
        presenter.$view.find('.chart')[0].insertBefore(newLine,firstPoint);&#13;
        if (!presenter.isShowAnswersActive &amp;&amp; presenter.coloring) drawLineOnCanvas(point1.x,point1.y,point2.x,point2.y);&#13;
    }&#13;
    function drawTempLine(point1, point2) {&#13;
        line = presenter.$view.find('.templine');&#13;
        if (line.length &gt; 0) {&#13;
            line.attr('y1',point1.y);&#13;
            line.attr('x1',point1.x);&#13;
            line.attr('y2',point2.y);&#13;
            line.attr('x2',point2.x);&#13;
        } else {&#13;
            var newLine = document.createElementNS("http://www.w3.org/2000/svg", 'line');&#13;
            newLine.setAttribute("y1",point1.y);&#13;
            newLine.setAttribute("x1",point1.x);&#13;
            newLine.setAttribute("y2",point2.y);&#13;
            newLine.setAttribute("x2",point2.x);&#13;
            newLine.setAttribute("class","templine");&#13;
            var firstPoint = presenter.$view.find('.point')[0];&#13;
            presenter.$view.find('.chart')[0].insertBefore(newLine,firstPoint);&#13;
        }&#13;
    }&#13;
    function drawLineOnCanvas(x1,y1,x2,y2) {&#13;
        presenter.ctx.beginPath();&#13;
        presenter.ctx.moveTo(x1,y1);&#13;
        presenter.ctx.lineTo(x2,y2);&#13;
        presenter.ctx.closePath();&#13;
        presenter.ctx.strokeStyle="rgba(5,5,5,0.8)";&#13;
        presenter.ctx.stroke();&#13;
    }&#13;
    presenter.redrawCanvas = function(showAnswers) {&#13;
        //	presenter.canvas.getContext('2d').clearRect(0,0,presenter.canvasWidth,presenter.canvasHeight);&#13;
        presenter.canvas.width += 0;&#13;
        var line = presenter.$view.find('.line');&#13;
        var i, x1, y1, x2, y2, tmpColor, tmpColor2, tmpPoint;&#13;
        var indexes = new Array();&#13;
        for(i = 0; i &lt; line.length; i++) {&#13;
            indexes = line[i].id.split('_');&#13;
            x1 = countX(indexes[1]); y1 = countY(indexes[2]);&#13;
            x2 = countX(indexes[3]); y2 = countY(indexes[4]);&#13;
            drawLineOnCanvas(x1,y1,x2,y2);&#13;
        }&#13;
        if (showAnswers) {&#13;
            for(i = 0; i &lt; presenter.answersColors.length; i++) {&#13;
                tmpPoint = [presenter.answersColors[i].x,presenter.answersColors[i].y];&#13;
                tmpColor = presenter.answersColors[i].color.split(' ');&#13;
                tmpColor2 = getClickedAreaColor(tmpPoint[0],tmpPoint[1]);&#13;
                if (tmpColor2[0] != tmpColor[0] || tmpColor2[1] != tmpColor[1] || tmpColor2[2] != tmpColor2[2] || tmpColor2[3] != tmpColor[3]) {&#13;
                    floodFill(tmpPoint,tmpColor);&#13;
                }&#13;
            }&#13;
        } else {&#13;
            for(i = 0; i &lt; presenter.coloredAreas.length; i++) {&#13;
                tmpPoint = [presenter.coloredAreas[i][0],presenter.coloredAreas[i][1]];&#13;
                tmpColor = [presenter.coloredAreas[i][2],presenter.coloredAreas[i][3],presenter.coloredAreas[i][4],presenter.coloredAreas[i][5]];&#13;
                tmpColor2 = getClickedAreaColor(tmpPoint[0],tmpPoint[1]);&#13;
                if (tmpColor2[0] != tmpColor[0] || tmpColor2[1] != tmpColor[1] || tmpColor2[2] != tmpColor2[2] || tmpColor2[3] != tmpColor[3]) {&#13;
                    floodFill(tmpPoint,tmpColor);&#13;
                } else&#13;
                    presenter.coloredAreas.splice(i,1);&#13;
            }&#13;
            checkColors();&#13;
        }&#13;
    }&#13;
    presenter.drawLine = function(point1, point2, nonremovable, draw, coloranswers, trigger){&#13;
        var firstPoint, secondPoint, column1, row1, row, column, column2, row2, tmpPoint;&#13;
        var x1, x2, y1, y2, x1N, y1N, x2N, y2N, x, y;&#13;
        var i, line, counter = 0;&#13;
        if (point1.column &lt; point2.column || (point1.column == point2.column &amp;&amp; point1.row &lt; point2.row)) {&#13;
            firstPoint = point1;&#13;
            secondPoint = point2;&#13;
        }  else {&#13;
            firstPoint = point2;&#13;
            secondPoint = point1;&#13;
        }&#13;
        var steps = Math.abs(gcd(secondPoint.row-firstPoint.row, secondPoint.column-firstPoint.column));&#13;
        if (presenter.grid3D &amp;&amp; (secondPoint.row-firstPoint.row+secondPoint.column-firstPoint.column)/steps %2 != 0) steps = 0.5 * steps;&#13;
        var stepX = parseInt((secondPoint.column-firstPoint.column)/steps);&#13;
        var	stepY = parseInt((secondPoint.row-firstPoint.row)/steps);&#13;
        column1 = firstPoint.column;&#13;
        row1 = firstPoint.row;&#13;
        for (i = 1; i &lt;= steps; i++) {&#13;
            column2 = column1 + stepX;&#13;
            row2 = row1 + stepY;&#13;
            line = presenter.$view.find('#line_'+column1+'_'+row1+'_'+column2+'_'+row2);&#13;
            if (line.length &gt; 0)&#13;
                counter++;&#13;
            if (!draw &amp;&amp; (line.length &gt; 0) &amp;&amp; line.attr('class') == 'line nonremovable' &amp;&amp; !coloranswers) {&#13;
                presenter.error = 'nonremanswer';&#13;
                return false;&#13;
            };&#13;
            column1 = column2;&#13;
            row1 = row2;&#13;
        }&#13;
        column1 = firstPoint.column;&#13;
        row1 = firstPoint.row;&#13;
        if (steps == counter &amp;&amp; draw) {&#13;
            for (i = 1; i &lt;= steps; i++) {&#13;
                column2 = column1 + stepX;&#13;
                row2 = row1 + stepY;&#13;
                line = presenter.$view.find('#line_'+column1+'_'+row1+'_'+column2+'_'+row2);&#13;
                if (line.attr('class') != 'line nonremovable')&#13;
                    line.remove();&#13;
                column1 = column2;&#13;
                row1 = row2;&#13;
&#13;
            }&#13;
            var item = 'line_'+point1.column+'_'+point1.row+'_'+point2.column+'_'+point2.row;&#13;
            var value = 0;&#13;
            var score = 0;&#13;
            if (trigger) presenter.triggerEvent(item,value,score);&#13;
        } else {&#13;
            var score = 1;&#13;
            for (i = 1; i &lt;= steps; i++) {&#13;
                column = firstPoint.column + stepX;&#13;
                row = firstPoint.row + stepY;&#13;
                if (presenter.grid3D) {&#13;
                    x = firstPoint.x + stepX * 0.5 * presenter.grid;&#13;
                    y = firstPoint.y + stepY * 1/3 * presenter.grid;&#13;
                } else {&#13;
                    x = firstPoint.x + stepX * presenter.grid;&#13;
                    y = firstPoint.y + stepY * presenter.grid;&#13;
                }&#13;
                tmpPoint = new Point(row, column, x, y);&#13;
                line = 'line_'+firstPoint.column+'_'+firstPoint.row+'_'+tmpPoint.column+'_'+tmpPoint.row;&#13;
                if (presenter.$view.find('#'+line).length &lt;= 0 &amp;&amp; draw) {&#13;
                    drawOneLine(firstPoint, tmpPoint, nonremovable);&#13;
&#13;
                    if (score == 1 &amp;&amp; ($.inArray(line,presenter.AnswerLines) == -1))&#13;
                        score = 0;&#13;
                }&#13;
                if (!draw &amp;&amp; !((presenter.$view.find('#'+line).length &gt; 0) &amp;&amp; presenter.$view.find('#'+line).attr('class') == 'line nonremovable'))&#13;
                    presenter.AnswerLines.push('line_'+firstPoint.column+'_'+firstPoint.row+'_'+tmpPoint.column+'_'+tmpPoint.row);&#13;
                if (coloranswers)&#13;
                    presenter.tmpLine.push('line_'+firstPoint.column+'_'+firstPoint.row+'_'+tmpPoint.column+'_'+tmpPoint.row);&#13;
                firstPoint = tmpPoint;&#13;
            }&#13;
            var item = 'line_'+point1.column+'_'+point1.row+'_'+point2.column+'_'+point2.row;&#13;
            var value = 1;&#13;
            if (trigger) presenter.triggerEvent(item,value,score);&#13;
        }&#13;
    }&#13;
    presenter.initiate = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        presenter.figure = presenter.$view.find('.figure');&#13;
        presenter.setDrawMode();&#13;
        presenter.activity = ModelValidationUtils.validateBoolean(presenter.model['IsActivity']);&#13;
        presenter.disabled = ModelValidationUtils.validateBoolean(presenter.model['IsDisabled']);&#13;
        presenter.initDisabled = presenter.disabled;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(presenter.model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        presenter.grid3D = ModelValidationUtils.validateBoolean(presenter.model['3DGrid']);&#13;
        presenter.showGrid = ModelValidationUtils.validateBoolean(presenter.model['ShowGrid']);&#13;
        presenter.StartingLines = presenter.model['StartingLines'];&#13;
        presenter.Answer = presenter.model['Answer'];&#13;
        presenter.grid = parseInt(presenter.model['Grid']);&#13;
        if (!(presenter.grid &gt; 1))&#13;
            presenter.error = 'grid';&#13;
        presenter.radius = validateRadius(presenter.model['Radius']);&#13;
        presenter.coloring = ModelValidationUtils.validateBoolean(presenter.model['Coloring']);&#13;
        presenter.blockColoring = ModelValidationUtils.validateBoolean(presenter.model['BlockColoring']);&#13;
        presenter.answersColors = [];&#13;
        if (presenter.coloring &amp;&amp; !presenter.error) {&#13;
            presenter.defaultColor = validateColor(presenter.model['DefColor'],true,true);&#13;
            presenter.startingColors = validateStartingColor(presenter.model['StartingColors']);&#13;
        };&#13;
        return true;&#13;
    }&#13;
    presenter.drawGrid = function() {&#13;
        var Width = presenter.figure.width();&#13;
        var Height = presenter.figure.parent().height();&#13;
        var i, j, presentX, presentY;&#13;
        presenter.pointsX = parseInt((Width - presenter.grid) / presenter.grid);&#13;
        presenter.pointsY = parseInt((Height - presenter.grid) / presenter.grid);&#13;
        if (presenter.grid3D) {&#13;
            presenter.pointsY = parseInt(3*(Height - presenter.grid) / presenter.grid);&#13;
            Height = parseInt((presenter.pointsY / 3 + 1) * presenter.grid);&#13;
            presenter.pointsX = parseInt((Width - presenter.grid) / presenter.grid);&#13;
            Width = parseInt((presenter.pointsX + 1) * presenter.grid);&#13;
        } else {&#13;
            Width = (presenter.pointsX + 1) * presenter.grid;&#13;
            Height = (presenter.pointsY + 1) * presenter.grid;&#13;
        }&#13;
        presenter.figure.css({'width' : Width, 'height' : Height});&#13;
        var $svg = '&lt;svg height="'+Height+'" width="'+Width+'" version="1.1" xmlns:xlink="http://www.w3.org/2000/svg" class="chart"&gt;';&#13;
        points = '';&#13;
        for (i = 0; i &lt;= presenter.pointsX; i++) {&#13;
            presentX = (i + 0.5) * presenter.grid;&#13;
            if (presenter.showGrid &amp;&amp; !presenter.grid3D)&#13;
                $svg += '&lt;line id="j_'+(i+1)+'" class ="grid" y2="' + Height +'" x2="'+presentX+'" y1="0" x1="'+presentX+'"&gt;&lt;/line&gt;';&#13;
            if (presenter.showGrid &amp;&amp; presenter.grid3D) {&#13;
                if (presenter.pointsY % 2 == 0) {&#13;
                    $svg += '&lt;line id="j_'+(i+1)+'" class ="grid" y2="' + (Height - 5/6 * presenter.grid) +'" x2="'+presentX+'" y1="'+(5/6*presenter.grid)+'" x1="'+presentX+'"&gt;&lt;/line&gt;';&#13;
                } else {&#13;
                    $svg += '&lt;line id="j_'+(i+1)+'" class ="grid" y2="' + (Height - 1/2*presenter.grid) +'" x2="'+presentX+'" y1="'+(5/6*presenter.grid)+'" x1="'+presentX+'"&gt;&lt;/line&gt;';&#13;
                }&#13;
                if (presenter.grid3D &amp;&amp; i &lt; presenter.pointsX) {&#13;
                    if (presenter.pointsY % 2 == 0) {&#13;
                        $svg += '&lt;line id="j__'+(i+1)+'" class ="grid" y2="' + (Height - 1/2*presenter.grid) +'" x2="'+(presentX+0.5*presenter.grid)+'" y1="'+(0.5*presenter.grid)+'" x1="'+(presentX+0.5*presenter.grid)+'"&gt;&lt;/line&gt;';&#13;
                    } else {&#13;
                        $svg += '&lt;line id="j__'+(i+1)+'" class ="grid" y2="' + (Height - 5/6*presenter.grid) +'" x2="'+(presentX+0.5*presenter.grid)+'" y1="'+(0.5*presenter.grid)+'" x1="'+(presentX+0.5*presenter.grid)+'"&gt;&lt;/line&gt;';&#13;
                    }&#13;
                }&#13;
            }&#13;
            for (j = 0; j &lt;= presenter.pointsY; j++) {&#13;
                if (presenter.grid3D) {&#13;
                    ((j % 2) == 0) ? (presentX = (1 + i)* presenter.grid) : (presentX = (0.5 + i)* presenter.grid);&#13;
                }&#13;
                (presenter.grid3D) ? (presentY = (1/3 * j + 0.5) * presenter.grid) : (presentY = (0.5 + j)* presenter.grid);&#13;
                if (!presenter.grid3D) {&#13;
                    points += '&lt;circle class="point" row="'+(j+1)+'" column ="'+(i+1)+'" r="'+presenter.radius+'" cy="'+presentY+'" cx="'+presentX+'"&gt;&lt;/circle&gt;';&#13;
                } else if (!(i == presenter.pointsX &amp;&amp; (j % 2) == 0)) {&#13;
                    points += '&lt;circle class="point" row="'+(j+1)+'" column ="'+ ((j%2==0) ? (2*(i+1)) : (2*(i+1)-1)) +'" r="'+presenter.radius+'" cy="'+presentY+'" cx="'+presentX+'"&gt;&lt;/circle&gt;';&#13;
                }&#13;
                if (i == 0 &amp;&amp; presenter.showGrid &amp;&amp; !presenter.grid3D) {&#13;
                    $svg += '&lt;line id="i_'+(j+1)+'" class ="grid" y2="'+presentY+'" x2="' + Width +'" y1="'+presentY+'" x1="0"&gt;&lt;/line&gt;';&#13;
                }&#13;
            }&#13;
        }&#13;
        if (presenter.showGrid &amp;&amp; presenter.grid3D) {&#13;
            for (i = 1; i &lt;= (presenter.pointsY/2); i++) {&#13;
                $svg += '&lt;line id="i_'+(i)+'" class ="grid" x1="'+(0.5*presenter.grid)+'" y1="'+((1/6+2/3*i)*presenter.grid)+'" x2="' + (0.5 * presenter.grid * (Math.min((presenter.pointsY-2*i+1),(2*presenter.pointsX)) + 1)) +'" y2="'+(1/3 * presenter.grid * (Math.min((presenter.pointsY-2*i+1),(2*presenter.pointsX)) + 0.5 + 2*i))+'"&gt;&lt;/line&gt;';&#13;
                $svg += '&lt;line id="i_'+(i)+'_" class ="grid" x1="'+(0.5*presenter.grid)+'" y1="'+((1/6+2/3*i)*presenter.grid)+'" x2="' + (0.5 * presenter.grid * (Math.min(2*i-1, 2*presenter.pointsX) + 1)) +'" y2="'+(1/3 * presenter.grid * (0.5 + 2*i - Math.min(2*i-1, 2*presenter.pointsX)))+'"&gt;&lt;/line&gt;';&#13;
            }&#13;
            for (i = 1; i &lt;= presenter.pointsX; i++) {&#13;
                $svg += '&lt;line id="i__'+(i)+'" class ="grid" x1="'+(i*presenter.grid)+'" y1="'+(0.5*presenter.grid)+'" x2="'+ (0.5 * presenter.grid * (Math.min(2*(presenter.pointsX-i)+1, presenter.pointsY) + 2*i)) +'" y2="'+ (presenter.grid * (0.5 + 1/3* Math.min(2*(presenter.pointsX-i)+1, presenter.pointsY))) +'"&gt;&lt;/line&gt;';&#13;
                if (presenter.pointsY % 2 == 0) {&#13;
                    $svg += '&lt;line id="i__'+(i)+'_" class ="grid" x1="'+(i*presenter.grid)+'" y1="'+((presenter.pointsY/3+0.5)*presenter.grid)+'" x2="'+  (0.5 * presenter.grid * (Math.min(2*(presenter.pointsX-i)+1, presenter.pointsY) + 2*i)) +'" y2="'+ (1/3 * presenter.grid * (presenter.pointsY + 1.5 - Math.min(2*(presenter.pointsX-i)+1, presenter.pointsY))) +'"&gt;&lt;/line&gt;';&#13;
                } else {&#13;
                    $svg += '&lt;line id="i__'+(i)+'_" class ="grid" x1="'+((i-0.5)*presenter.grid)+'" y1="'+((presenter.pointsY/3+0.5)*presenter.grid)+'" x2 ="'+ (0.5 * presenter.grid * (Math.min(2*(presenter.pointsX-i)+1, presenter.pointsY-1) + 2*i)) +'" y2="' + (1/3 * presenter.grid * (presenter.pointsY + 1.5 - Math.min(2*(presenter.pointsX-i+1),presenter.pointsY))) +'"&gt;&lt;/line&gt;';&#13;
                }&#13;
            }&#13;
        }&#13;
        $svg += points;&#13;
        $svg += '&lt;/svg&gt;';&#13;
        presenter.figure.prepend($svg);&#13;
        var canvasElement = $('&lt;canvas&gt;&lt;/canvas&gt;');&#13;
        presenter.ctx = canvasElement[0].getContext('2d');&#13;
        canvasElement.attr('width', Width);&#13;
        canvasElement.attr('height', Height);&#13;
        canvasElement.attr('class', 'canvas');&#13;
        presenter.canvasWidth = Width;&#13;
        presenter.canvasHeight = Height;&#13;
        presenter.canvas = canvasElement[0];&#13;
        if (presenter.coloring) presenter.figure.prepend(canvasElement);&#13;
        //double canvas fix&#13;
        if (presenter.coloring &amp;&amp; MobileUtils.isAndroidWebBrowser(window.navigator.userAgent)) {&#13;
            var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
            if (["4.1.1", "4.1.2", "4.2.2", "4.3", "4.4.2"].indexOf(android_ver) !== -1) {&#13;
                presenter.$view.find('.canvas').parents("*").css("overflow", "visible");&#13;
            }&#13;
        }&#13;
    }&#13;
    presenter.run = function(view, model){&#13;
        var row, column, x, y;&#13;
        var timeClick = true, abandon = false;&#13;
        presenter.initiate(view, model);&#13;
        presenter.coloredAreas = [];&#13;
        presenter.down = false;&#13;
        if (!presenter.error) {&#13;
            presenter.drawGrid();&#13;
            validateLines(presenter.StartingLines,true,false);&#13;
            presenter.updateVisibility();&#13;
&#13;
            var coordinations = {x:0, y:0};&#13;
            var tmpColor, i;&#13;
            if (presenter.coloring &amp;&amp; presenter.startingColors != '') {&#13;
                for (i = 0; i &lt; presenter.startingColors.length; i++)&#13;
                    presenter.coloredAreas[i] = presenter.startingColors[i];&#13;
                presenter.redrawCanvas(false);&#13;
            }&#13;
            presenter.currentColor = presenter.defaultColor;&#13;
            if (presenter.disabled) presenter.disable();&#13;
            if (presenter.activity) {&#13;
                presenter.AnswerLines = new Array();&#13;
                validateLines(presenter.Answer,false,false);&#13;
                if (presenter.coloring &amp;&amp; !presenter.error)&#13;
                    if (presenter.model['AnswerColors'].length != 1 || presenter.model['AnswerColors'][0]['Figure'] != '' || presenter.model['AnswerColors'][0]['Color'] != '')&#13;
                        validateAnswersColor(presenter.model['AnswerColors']);&#13;
                // delete duplicates from AnswerLines&#13;
                presenter.AnswerLines = uniq(presenter.AnswerLines);&#13;
            }&#13;
        }&#13;
        if (presenter.error) {&#13;
            presenter.figure.addClass(presenter.error);&#13;
            presenter.$view.find('.chart').remove();&#13;
            presenter.$view.find('.canvas').remove();&#13;
        };&#13;
        var point1, point2;&#13;
        presenter.$view.find('.point').on('mouseup touchend', function(e){&#13;
            if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; presenter.drawingMode &amp;&amp; timeClick) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                abandon = false;&#13;
                if (e.type != 'mouseup') timeClick = false;&#13;
                setTimeout(function(){timeClick = true;},400);&#13;
                if (e.type == 'mouseup') {&#13;
                    row = parseInt($(this).attr('row'),10);&#13;
                    column = parseInt($(this).attr('column'),10);&#13;
                    x = parseInt($(this).attr('cx'),10);&#13;
                    y = parseInt($(this).attr('cy'),10);&#13;
                } else {&#13;
                    row = findClosestPoint(presenter.mouseSX,presenter.mouseSY).row;&#13;
                    column = findClosestPoint(presenter.mouseSX,presenter.mouseSY).column;&#13;
                    x = countX(column);&#13;
                    y = countY(row);&#13;
                    if ((presenter.grid3D &amp;&amp; (column + row) % 2 == 0) || Math.abs(x-presenter.mouseSX) + Math.abs(y-presenter.mouseSY) &gt; 30 || row &lt; 1 || column &lt; 1 || row &gt; presenter.pointsY + 1 || (presenter.grid3D &amp;&amp; column &gt; 2*(presenter.pointsX)+1) || (!presenter.grid3D &amp;&amp; column &gt; presenter.pointsX + 1))&#13;
                        abandon = true;&#13;
                }&#13;
                if (!presenter.selected.isSelected &amp;&amp; !abandon) {&#13;
                    if (presenter.drawingPoint.row == row &amp;&amp; presenter.drawingPoint.column == column) {&#13;
                        presenter.selected.row = row;&#13;
                        presenter.selected.column = column;&#13;
                        presenter.selected.x = x;&#13;
                        presenter.selected.y = y;&#13;
                        presenter.selected.isSelected = true;&#13;
                        $(this).addClass('selected');&#13;
                    } else {&#13;
                        point1 = new Point(presenter.drawingPoint.row, presenter.drawingPoint.column, presenter.drawingPoint.x, presenter.drawingPoint.y);&#13;
                        point2 = new Point(row, column, x, y);&#13;
                        presenter.drawLine(point1,point2,false,true,false,true);&#13;
                        presenter.isStarted = true;&#13;
                        if (presenter.coloring) presenter.redrawCanvas(false);&#13;
                        //if blockColoring mode check if is OK&#13;
                        if (presenter.activity &amp;&amp; presenter.allLinesDrawn()) {&#13;
                            var item = 'lines';&#13;
                            var value = '';&#13;
                            var score = '';&#13;
                            presenter.triggerEvent(item,value,score);&#13;
                            if (presenter.blockColoring) presenter.setColorMode();&#13;
                        }&#13;
                    }&#13;
                } else if (!abandon) {&#13;
                    if (presenter.drawingPoint.row == row &amp;&amp; presenter.drawingPoint.column == column) {&#13;
                        if (presenter.selected.row != row || presenter.selected.column != column) {&#13;
                            point1 = new Point(presenter.selected.row, presenter.selected.column, presenter.selected.x, presenter.selected.y);&#13;
                            point2 = new Point(row, column, x, y);&#13;
                            presenter.drawLine(point1,point2,false,true,false,true);&#13;
                            presenter.isStarted = true;&#13;
                            presenter.selected.isSelected = false;&#13;
                            presenter.$view.find('.point').removeClass('selected');&#13;
                            if (presenter.coloring) presenter.redrawCanvas(false);&#13;
                            //if blockColoring mode check if is OK&#13;
                            if (presenter.activity &amp;&amp; presenter.allLinesDrawn()) {&#13;
                                var item = 'lines';&#13;
                                var value = '';&#13;
                                var score = '';&#13;
                                presenter.triggerEvent(item,value,score);&#13;
                                if (presenter.blockColoring) presenter.setColorMode();&#13;
                            }&#13;
                        }&#13;
                        presenter.selected.isSelected = false;&#13;
                        presenter.$view.find('.point').removeClass('selected');&#13;
                    } else {&#13;
                        point1 = new Point(presenter.drawingPoint.row, presenter.drawingPoint.column, presenter.drawingPoint.x, presenter.drawingPoint.y);&#13;
                        point2 = new Point(row, column, x, y);&#13;
                        presenter.drawLine(point1,point2,false,true,false,true);&#13;
                        presenter.isStarted = true;&#13;
                        if (presenter.coloring) presenter.redrawCanvas(false);&#13;
                        //if blockColoring mode check if is OK&#13;
                        if (presenter.activity &amp;&amp; presenter.allLinesDrawn()) {&#13;
                            var item = 'lines';&#13;
                            var value = '';&#13;
                            var score = '';&#13;
                            presenter.triggerEvent(item,value,score);&#13;
                            if (presenter.blockColoring) presenter.setColorMode();&#13;
                        }&#13;
                    }&#13;
                }&#13;
            };&#13;
            presenter.$view.find('.templine').remove();&#13;
            presenter.drawingPoint.isDown = false;&#13;
        });&#13;
        presenter.$view.find('.point').on('mousedown touchstart', function(e){&#13;
            presenter.$view.find('.templine').remove();&#13;
            if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; presenter.drawingMode) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.drawingPoint.row = parseInt($(this).attr('row'),10);&#13;
                presenter.drawingPoint.column = parseInt($(this).attr('column'),10);&#13;
                presenter.drawingPoint.x = parseInt($(this).attr('cx'),10);&#13;
                presenter.drawingPoint.y = parseInt($(this).attr('cy'),10);&#13;
                presenter.drawingPoint.isDown = true;&#13;
                if (e.type == 'touchstart') {&#13;
                    presenter.mouseSX = presenter.drawingPoint.x;&#13;
                    presenter.mouseSY = presenter.drawingPoint.y;&#13;
                }&#13;
            };&#13;
        });&#13;
        presenter.$view.on('mousedown touchstart', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (presenter.coloring &amp;&amp; !presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActiv &amp;&amp; !presenter.drawingMode) {&#13;
                coordinations.x = e.originalEvent.pageX || e.originalEvent.touches[0].pageX;&#13;
                coordinations.y = e.originalEvent.pageY || e.originalEvent.touches[0].pageY;&#13;
                presenter.mouseSX = parseInt(coordinations.x,10) - parseInt(presenter.figure.offset().left,10);&#13;
                presenter.mouseSY = parseInt(coordinations.y,10) - parseInt(presenter.figure.offset().top,10);&#13;
                var imgData = presenter.ctx.getImageData(0, 0, presenter.canvasWidth, presenter.canvasHeight);&#13;
                var myPoint = (presenter.mouseSX + presenter.mouseSY * presenter.canvasWidth) * 4;&#13;
                var color = getClickedAreaColor(presenter.mouseSX,presenter.mouseSY);&#13;
                var startingPixel = [presenter.mouseSX,presenter.mouseSY];&#13;
                tmpColor = getClickedAreaColor(startingPixel[0],startingPixel[1]);&#13;
                if ((presenter.currentColor[0] != tmpColor[0] || presenter.currentColor[1] != tmpColor[1] || presenter.currentColor[2] != tmpColor[2] || presenter.currentColor[3] != tmpColor[3]) &amp;&amp; (tmpColor[3] &lt; 10 || tmpColor[3] &gt; 245) &amp;&amp; presenter.mouseSX &gt; 0 &amp;&amp; presenter.mouseSY &gt; 0) {&#13;
                    presenter.isStarted = true;&#13;
                    floodFill(startingPixel,presenter.currentColor);&#13;
                    presenter.coloredAreas.push([startingPixel[0],startingPixel[1],presenter.currentColor[0],presenter.currentColor[1],presenter.currentColor[2],presenter.currentColor[3]]);&#13;
                    // checking if this area was not colored previously&#13;
                    checkColors();&#13;
                    var item = startingPixel[0]+' '+startingPixel[1];&#13;
                    var value = presenter.currentColor.join(" ");&#13;
                    var score = '';&#13;
                    presenter.triggerEvent(item,value,score);&#13;
                }&#13;
            }&#13;
        });&#13;
        presenter.$view.on('mousemove touchmove', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; presenter.drawingMode &amp;&amp; presenter.drawingPoint.isDown) {&#13;
                point1 = new Point(presenter.drawingPoint.row, presenter.drawingPoint.column, presenter.drawingPoint.x, presenter.drawingPoint.y);&#13;
                if (e.type == 'mousemove') {&#13;
                    coordinations.x = e.originalEvent.pageX;&#13;
                    coordinations.y = e.originalEvent.pageY;&#13;
                } else {&#13;
                    coordinations.x = e.originalEvent.touches[0].pageX;&#13;
                    coordinations.y = e.originalEvent.touches[0].pageY;&#13;
                };&#13;
                presenter.mouseSX = parseInt(coordinations.x,10) - parseInt(presenter.figure.offset().left,10);&#13;
                presenter.mouseSY = parseInt(coordinations.y,10) - parseInt(presenter.figure.offset().top,10);&#13;
                if (presenter.mouseSX &lt; 0 || presenter.mouseSX &gt; presenter.figure.width() || presenter.mouseSY &lt; 0 || presenter.mouseSY &gt; presenter.figure.height()) {&#13;
                    presenter.drawingPoint.isDown = false;&#13;
                    presenter.$view.find('.templine').remove();&#13;
                } else {&#13;
                    point2 = new Point(0, 0, presenter.mouseSX, presenter.mouseSY);&#13;
                    drawTempLine(point1, point2);&#13;
                }&#13;
            }&#13;
        });&#13;
        presenter.$view.on('mouseup mouseleave touchend touchleave', function(e){&#13;
            presenter.drawingPoint.isDown = false;&#13;
            presenter.$view.find('.templine').remove();&#13;
        });&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    }&#13;
    function checkColors() {&#13;
        for(var i = 0; i &lt; presenter.coloredAreas.length; i++) {&#13;
            var tmpColor = getClickedAreaColor(presenter.coloredAreas[i][0],presenter.coloredAreas[i][1]);&#13;
            if (tmpColor[0] != presenter.coloredAreas[i][2] || tmpColor[1] != presenter.coloredAreas[i][3] || tmpColor[2] != presenter.coloredAreas[i][4] || tmpColor[3] != presenter.coloredAreas[i][5])&#13;
                presenter.coloredAreas.splice(i,1);&#13;
        }&#13;
    }&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") presenter.showAnswers();&#13;
        if (eventName == "HideAnswers") presenter.hideAnswers();&#13;
    };&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
    presenter.createPreview = function(view, model){&#13;
        presenter.initiate(view, model);&#13;
        presenter.coloredAreas = [];&#13;
        var coordinations = {x:0, y:0};&#13;
        if (!presenter.error) {&#13;
            presenter.drawGrid();&#13;
            validateLines(presenter.StartingLines,true,false);&#13;
            if (presenter.activity) {&#13;
                presenter.AnswerLines = new Array();&#13;
                validateLines(presenter.Answer,false,false);&#13;
                if (presenter.coloring &amp;&amp; !presenter.error)&#13;
                    if (presenter.model['AnswerColors'].length != 1 || presenter.model['AnswerColors'][0]['Figure'] != '' || presenter.model['AnswerColors'][0]['Color'] != '')&#13;
                        validateAnswersColor(presenter.model['AnswerColors']);&#13;
            }&#13;
            presenter.updateVisibility();&#13;
            if (presenter.disabled) presenter.disable();&#13;
            if (presenter.coloring &amp;&amp; presenter.startingColors != '') {&#13;
                presenter.coloredAreas = presenter.startingColors;&#13;
                presenter.redrawCanvas(false);&#13;
            }&#13;
            presenter.showAnswersInEditor = ModelValidationUtils.validateBoolean(presenter.model['ShowAns']);&#13;
            if (presenter.activity &amp;&amp; presenter.showAnswersInEditor)&#13;
                presenter.showAnswers();&#13;
            if (presenter.coloring) {&#13;
                var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
                    xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                    yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;');&#13;
                coordinatesContainer.addClass('coordinates');&#13;
                coordinatesContainer.append(xContainer).append(yContainer);&#13;
                presenter.figure.append(coordinatesContainer);&#13;
&#13;
                function setCalculatedPosition(e) {&#13;
                    coordinations.x = e.originalEvent.pageX || e.originalEvent.touches[0].pageX;&#13;
                    coordinations.y = e.originalEvent.pageY || e.originalEvent.touches[0].pageY;&#13;
                    presenter.mouseSX = parseInt(coordinations.x,10) - parseInt(presenter.figure.offset().left,10);&#13;
                    presenter.mouseSY = parseInt(coordinations.y,10) - parseInt(presenter.figure.offset().top,10);&#13;
                    xContainer.find('.value').html(presenter.mouseSX);&#13;
                    yContainer.find('.value').html(presenter.mouseSY);&#13;
                }&#13;
&#13;
                var doesElementExist = function() {&#13;
                    var $moduleSelector = $('.moduleSelector[data-id="'+presenter.addonID+'"]');&#13;
&#13;
                    if ($moduleSelector.length &gt; 0) {&#13;
                        $moduleSelector.on('mousemove', function(e) {&#13;
                            setCalculatedPosition(e);&#13;
                        });&#13;
&#13;
                        clearInterval(interval);&#13;
                    }&#13;
                };&#13;
&#13;
                var interval = setInterval(function() { doesElementExist(); }, 500);&#13;
&#13;
                presenter.figure.on('mousemove', function(e) {&#13;
                    setCalculatedPosition(e);&#13;
                });&#13;
            }&#13;
        };&#13;
        if (presenter.error) {&#13;
            presenter.figure.addClass(presenter.error);&#13;
            presenter.$view.find('.chart').remove();&#13;
            presenter.$view.find('.canvas').remove();&#13;
        }&#13;
    }&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.coloredAreas = [];&#13;
        presenter.drawingMode = true;&#13;
        presenter.setWorkMode();&#13;
        if (presenter.coloring &amp;&amp; presenter.startingColors != '') {&#13;
            for (i = 0; i &lt; presenter.startingColors.length; i++)&#13;
                presenter.coloredAreas[i] = presenter.startingColors[i];&#13;
        }&#13;
        presenter.$view.find('.line').remove();&#13;
        validateLines(presenter.StartingLines,true,false);&#13;
        presenter.isStarted = false;&#13;
        presenter.$view.find('.selected').removeClass('selected');&#13;
        presenter.selected.isSelected = false;&#13;
        presenter.disabled = presenter.initDisabled;&#13;
        if (presenter.disabled) presenter.disable()&#13;
        else presenter.enable();&#13;
        presenter.isVisible = presenter.initIsVisible;&#13;
        presenter.updateVisibility();&#13;
        if (presenter.coloring) presenter.redrawCanvas(false);&#13;
        presenter.isEraser = false;&#13;
        presenter.currentColor = presenter.defaultColor;&#13;
        presenter.setDrawMode();&#13;
    };&#13;
    presenter.getErrorCount = function(){&#13;
        var errorCounter = 0, i, lineCounter, color;&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (presenter.activity &amp;&amp; !presenter.error &amp;&amp; presenter.isStarted) {&#13;
            errorCounter = presenter.$view.find('.line').not('.nonremovable').length;&#13;
            var numberOfAnswers = presenter.AnswerLines.length, line;&#13;
            for (i = 0; i &lt;= numberOfAnswers; i++) {&#13;
                line = presenter.$view.find('#'+presenter.AnswerLines[i]);&#13;
                if (line.length &gt; 0)&#13;
                    errorCounter--;&#13;
            }&#13;
            if (presenter.coloring) {&#13;
                for (i = 0; i &lt; presenter.answersColors.length; i++) {&#13;
                    lineCounter = 0;&#13;
                    for (j = 0; j &lt; presenter.answersColors[i].lines.length; j++) {&#13;
                        line = presenter.$view.find('#'+presenter.answersColors[i].lines[j]);&#13;
                        if (line.length &gt; 0) lineCounter++;&#13;
                    }&#13;
                    color = getClickedAreaColor(presenter.answersColors[i].x,presenter.answersColors[i].y).join(" ");&#13;
                    if (color != presenter.answersColors[i].color &amp;&amp; color != '0 0 0 0' &amp;&amp; lineCounter == presenter.answersColors[i].lines.length)&#13;
                        errorCounter++;&#13;
                }&#13;
            }&#13;
        }&#13;
        return errorCounter;&#13;
    }&#13;
    presenter.getMaxScore = function(){&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (presenter.activity &amp;&amp; !presenter.error &amp;&amp; presenter.coloring)&#13;
            return (presenter.AnswerLines.length + presenter.answersColors.length)&#13;
        else if (presenter.activity &amp;&amp; !presenter.error)&#13;
            return (presenter.AnswerLines.length)&#13;
        else&#13;
            return 0;&#13;
    }&#13;
    presenter.getScore = function(){&#13;
        if (presenter.activity &amp;&amp; !presenter.error &amp;&amp; presenter.isStarted) {&#13;
            var i, j, line, lineCounter, color, counter = 0, numberOfAnswers = presenter.AnswerLines.length;&#13;
            for (i = 0; i &lt;= numberOfAnswers; i++) {&#13;
                line = presenter.$view.find('#'+presenter.AnswerLines[i]);&#13;
                if (line.length &gt; 0)&#13;
                    counter++;&#13;
            }&#13;
            if (presenter.coloring) {&#13;
                for (i = 0; i &lt; presenter.answersColors.length; i++) {&#13;
                    lineCounter = 0;&#13;
                    for (j = 0; j &lt; presenter.answersColors[i].lines.length; j++) {&#13;
                        line = presenter.$view.find('#'+presenter.answersColors[i].lines[j]);&#13;
                        if (line.length &gt; 0) lineCounter++;&#13;
                    }&#13;
                    color = getClickedAreaColor(presenter.answersColors[i].x,presenter.answersColors[i].y).join(" ");&#13;
                    if (lineCounter == presenter.answersColors[i].lines.length &amp;&amp; color == presenter.answersColors[i].color) counter++;&#13;
                }&#13;
            }&#13;
            return counter;&#13;
        } else&#13;
            return 0;&#13;
    }&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.isErrorMode = false;&#13;
        presenter.$view.find('.line').removeClass('correct');&#13;
        presenter.$view.find('.line').removeClass('wrong');&#13;
        presenter.$view.find('.icon-container').remove();&#13;
        presenter.$view.find('.figure').removeClass('correct');&#13;
        presenter.$view.find('.figure').removeClass('wrong');&#13;
    };&#13;
    presenter.setShowErrorsMode = function() {&#13;
        var i, j, line, color, lineCounter;&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isErrorMode = true;&#13;
        presenter.selected.isSelected = false;&#13;
        presenter.$view.find('.point').removeClass('selected');&#13;
        var Lines = presenter.$view.find('.line').not('.nonremovable');&#13;
        var i;&#13;
        if (presenter.activity &amp;&amp; !presenter.error &amp;&amp; presenter.isStarted) {&#13;
            for (i = 0; i &lt; Lines.length; i++) {;&#13;
                if ($.inArray(Lines[i].id,presenter.AnswerLines) != -1)&#13;
                    presenter.$view.find('#'+Lines[i].id).addClass('correct')&#13;
                else&#13;
                    presenter.$view.find('#'+Lines[i].id).addClass('wrong');&#13;
            }&#13;
        }&#13;
        if (presenter.activity &amp;&amp; !presenter.error &amp;&amp; presenter.isStarted &amp;&amp; presenter.coloring) {&#13;
            for (i = 0; i &lt; presenter.answersColors.length; i++) {&#13;
                lineCounter = 0;&#13;
                for (j = 0; j &lt; presenter.answersColors[i].lines.length; j++) {&#13;
                    line = presenter.$view.find('#'+presenter.answersColors[i].lines[j]);&#13;
                    if (line.length &gt; 0) lineCounter++;&#13;
                }&#13;
                color = getClickedAreaColor(presenter.answersColors[i].x,presenter.answersColors[i].y).join(" ");&#13;
                if (lineCounter == presenter.answersColors[i].lines.length &amp;&amp; color == presenter.answersColors[i].color)&#13;
                    presenter.displayIcon(presenter.answersColors[i].x,presenter.answersColors[i].y,true)&#13;
                else if (color != presenter.answersColors[i].color &amp;&amp; color != '0 0 0 0' &amp;&amp; lineCounter == presenter.answersColors[i].lines.length)&#13;
                    presenter.displayIcon(presenter.answersColors[i].x,presenter.answersColors[i].y,false);&#13;
            }&#13;
        }&#13;
    };&#13;
    presenter.displayIcon = function(x,y,isCorrect) {&#13;
        var iconContainer = $('&lt;div class="icon-container"&gt;&lt;/div&gt;');&#13;
        iconContainer.css({&#13;
            top: (y-5) + 'px',&#13;
            left: (x-5) + 'px'&#13;
        });&#13;
        iconContainer.addClass(isCorrect ? 'correct' : 'wrong');&#13;
        presenter.figure.append(iconContainer);&#13;
    }&#13;
    presenter.getState = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        var Lines = presenter.$view.find('.line').not('.nonremovable');&#13;
        var LinesIds = new Array();&#13;
        for (i = 0; i &lt; Lines.length; i++) {&#13;
            LinesIds.push(Lines[i].id);&#13;
        };&#13;
        return JSON.stringify({&#13;
            isStarted : presenter.isStarted,&#13;
            disabled : presenter.disabled,&#13;
            visible : presenter.isVisible,&#13;
            lines : LinesIds,&#13;
            eraser: presenter.isEraser,&#13;
            color: presenter.currentColor,&#13;
            coloredAreas: presenter.coloredAreas,&#13;
            mode: presenter.drawingMode&#13;
        });&#13;
    };&#13;
    presenter.setState = function(state) {&#13;
        var point1, point2, x, y, i;&#13;
        presenter.disabled = JSON.parse(state).disabled;&#13;
        presenter.isEraser = JSON.parse(state).eraser;&#13;
        presenter.currentColor = JSON.parse(state).color;&#13;
        presenter.coloredAreas = JSON.parse(state).coloredAreas;&#13;
        presenter.drawingMode = JSON.parse(state).mode;&#13;
        if (presenter.drawingMode)&#13;
            presenter.setDrawMode()&#13;
        else&#13;
            presenter.setColorMode();&#13;
        if (presenter.disabled)&#13;
            presenter.disable()&#13;
        else&#13;
            presenter.enable();&#13;
        presenter.isVisible = JSON.parse(state).visible;&#13;
        presenter.isStarted = JSON.parse(state).isStarted;&#13;
        presenter.updateVisibility();&#13;
        presenter.$view.find('.line').not('.nonremovable').remove();&#13;
        var LinesIds = JSON.parse(state).lines;&#13;
        var indexes = new Array();&#13;
        for (i = 0; i &lt; LinesIds.length; i++) {&#13;
            indexes = LinesIds[i].split('_');&#13;
            x = countX(indexes[1]); y = countY(indexes[2]);&#13;
            point1 = new Point(indexes[2], indexes[1], x, y);&#13;
            x = countX(indexes[3]); y = countY(indexes[4]);&#13;
            point2 = new Point(indexes[4], indexes[3], x, y);&#13;
            drawOneLine(point1,point2,false);&#13;
        }&#13;
        if (presenter.coloring) presenter.redrawCanvas(false);&#13;
    };&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            var i, x, y, point1, point2;&#13;
            if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.setWorkMode();&#13;
            var Lines = presenter.$view.find('.line').not('.nonremovable');&#13;
            presenter.LinesIds = new Array();&#13;
            for (i = 0; i &lt; Lines.length; i++) {&#13;
                presenter.LinesIds.push(Lines[i].id);&#13;
            }&#13;
            presenter.$view.find('.line').not('.nonremovable').remove();&#13;
            var indexes = new Array();&#13;
            for (i = 0; i &lt; presenter.AnswerLines.length; i++) {&#13;
                indexes = presenter.AnswerLines[i].split('_');&#13;
                x = countX(indexes[1]); y = countY(indexes[2]);&#13;
                point1 = new Point(indexes[2], indexes[1], x, y);&#13;
                x = countX(indexes[3]); y = countY(indexes[4]);&#13;
                point2 = new Point(indexes[4], indexes[3], x, y);&#13;
                drawOneLine(point1,point2,false);&#13;
            }&#13;
            presenter.selected.isSelected = false;&#13;
            presenter.$view.find('.selected').removeClass('selected');&#13;
            presenter.$view.find('.line').not('.nonremovable').addClass('show-answers');&#13;
            if (presenter.coloring) presenter.redrawCanvas(true);&#13;
        }&#13;
    };&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            var i, x, y, point1, point2;&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find('.line').not('.nonremovable').remove();&#13;
            var indexes = new Array();&#13;
            for (i = 0; i &lt; presenter.LinesIds.length; i++) {&#13;
                indexes = presenter.LinesIds[i].split('_');&#13;
                x = countX(indexes[1]); y = countY(indexes[2]);&#13;
                point1 = new Point(indexes[2], indexes[1], x, y);&#13;
                x = countX(indexes[3]); y = countY(indexes[4]);&#13;
                point2 = new Point(indexes[4], indexes[3], x, y);&#13;
                drawOneLine(point1,point2,false);&#13;
            }&#13;
            if (presenter.coloring) presenter.redrawCanvas(false);&#13;
        }&#13;
    }&#13;
    function findClosestPoint(x,y) {&#13;
        if (presenter.grid3D) {&#13;
            var column = parseInt((x * 2 + 0.25 * presenter.grid)/presenter.grid);&#13;
            var row = parseInt(3*(y + 1/6 * presenter.grid - 0.5 * presenter.grid)/presenter.grid)+1;&#13;
        } else {&#13;
            var column = parseInt((x + 0.5 * presenter.grid)/presenter.grid);&#13;
            if (x - countX(column) &gt; 0.5 * presenter.grid) column++;&#13;
            var row = parseInt((y + 0.5 * presenter.grid)/presenter.grid);&#13;
            if (y - countY(row) &gt; 0.5 * presenter.grid) row++;&#13;
        }&#13;
        point = new Point(row, column, x, y);&#13;
        return point;&#13;
    }&#13;
    function floodFill(startingPixel,fillColor) {&#13;
        var imgData = presenter.ctx.getImageData(0, 0, presenter.canvasWidth, presenter.canvasHeight);&#13;
        var pixelStack = [];&#13;
        var newPos, x, y, pixelPos, reachLeft, reachRight;&#13;
        pixelStack.push(startingPixel);&#13;
        var start = getClickedAreaColor(startingPixel[0],startingPixel[1]);&#13;
        while(pixelStack.length) {&#13;
            newPos = pixelStack.pop();&#13;
            x = newPos[0];&#13;
            y = newPos[1];&#13;
            pixelPos = (y*presenter.canvasWidth + x) * 4;&#13;
            while(y-- &gt;= 0 &amp;&amp; matchStartColor(imgData,pixelPos,start)) {&#13;
                pixelPos -= presenter.canvasWidth * 4;&#13;
            }&#13;
            pixelPos += presenter.canvasWidth * 4;&#13;
            ++y;&#13;
            reachLeft = false;&#13;
            reachRight = false;&#13;
            while(y++ &lt; presenter.canvasHeight-1 &amp;&amp; matchStartColor(imgData,pixelPos,start)) {&#13;
                colorPixel(imgData,pixelPos,fillColor);&#13;
                if(x &gt; 0) {&#13;
                    if(matchStartColor(imgData,pixelPos - 4,start)) {&#13;
                        if(!reachLeft){&#13;
                            pixelStack.push([x - 1, y]);&#13;
                            reachLeft = true;&#13;
                        }&#13;
                    } else if(reachLeft) {&#13;
                        reachLeft = false;&#13;
                    }&#13;
                }&#13;
                if(x &lt; presenter.canvasWidth-1) {&#13;
                    if(matchStartColor(imgData,pixelPos + 4,start)) {&#13;
                        if(!reachRight) {&#13;
                            pixelStack.push([x + 1, y]);&#13;
                            reachRight = true;&#13;
                        }&#13;
                    } else if(reachRight) {&#13;
                        reachRight = false;&#13;
                    }&#13;
                }&#13;
                pixelPos += presenter.canvasWidth * 4;&#13;
            }&#13;
        }&#13;
        presenter.ctx.putImageData(imgData, 0, 0);&#13;
    }&#13;
    function matchStartColor(imgData,pixelPos,start) {&#13;
        var r = imgData.data[pixelPos];&#13;
        var g = imgData.data[pixelPos+1];&#13;
        var b = imgData.data[pixelPos+2];&#13;
        var a = imgData.data[pixelPos+3];&#13;
        return (r == start[0] &amp;&amp; g == start[1] &amp;&amp; b == start[2] &amp;&amp; a == start[3]);&#13;
    }&#13;
    function colorPixel(imgData,pixelPos,fillColor) {&#13;
        imgData.data[pixelPos] = fillColor[0];&#13;
        imgData.data[pixelPos+1] = fillColor[1];&#13;
        imgData.data[pixelPos+2] = fillColor[2];&#13;
        imgData.data[pixelPos+3] = fillColor[3];&#13;
    }&#13;
    function getClickedAreaColor(x, y) {&#13;
        var data = presenter.ctx.getImageData(x, y, 1, 1).data, color = [];&#13;
        for (var i = 0; i &lt; data.length; i++) {&#13;
            color.push(data[i]);&#13;
        }&#13;
        return color;&#13;
    }&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
    presenter.createEventData = function(item,value,score) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : item,&#13;
            value : value,&#13;
            score : score&#13;
        };&#13;
    };&#13;
    presenter.triggerEvent = function(item, state, score) {&#13;
        var eventData = presenter.createEventData(item, state, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        if (presenter.getScore() == presenter.getMaxScore() &amp;&amp; presenter.activity &amp;&amp; presenter.getErrorCount() == 0) {&#13;
            eventData = presenter.createEventData('all','','');&#13;
            presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Fractions" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Figure" nameLabel="Fractions_property_figure" type="{---,Rectangular,Circle}"/>
		<property displayName="Rectangular horizontal parts" name="RectHorizontal" nameLabel="Fractions_property_rect_horizontal" type="string"/>
		<property displayName="Rectangular vertical parts" name="RectVertical" nameLabel="Fractions_property_rect_vertical" type="string"/>
		<property displayName="Circle parts" name="CircleParts" type="string"/>
		<property displayName="Number of correct parts" name="Correct" nameLabel="Fractions_property_correct" type="string"/>
		<property displayName="Selected parts" name="selectedParts" nameLabel="Fractions_property_selected_parts" type="string"/>
		<property displayName="Selection color" name="selectionColor" nameLabel="Fractions_property_selection_color" type="string"/>
		<property displayName="Empty color" name="emptyColor" nameLabel="Fractions_property_empty_color" type="string"/>
		<property displayName="Stroke color" name="strokeColor" nameLabel="Fractions_property_stroke_color" type="string"/>
		<property displayName="Stroke width" name="strokeWidth" nameLabel="Fractions_property_stroke_width" type="string"/>
		<property name="isNotActivity" nameLabel="Fractions_property_is_not_activity" type="boolean"/>
		<property name="isDisable" nameLabel="Fractions_property_is_disable" type="boolean"/>
        <property displayName="Image for deselected parts" name="imageDeselect" nameLabel="Fractions_property_is_deselect" type="image"/>
        <property displayName="Image for selected parts" name="imageSelect" nameLabel="Fractions_property_is_select" type="image"/>
	</model>
<css>.FractionsWrapper{&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
</css><view>&lt;p class="FractionsCommandsViewer" style="position: absolute;"&gt;Choose the figure.&lt;/p&gt;&#13;
&lt;div class="FractionsWrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;p class="FractionsCommandsViewer" style="position: absolute;"&gt;Choose the figure.&lt;/p&gt;&#13;
&lt;div class="FractionsWrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonFractions_create(){&#13;
&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.currentSelected = function(){};&#13;
    var Counter = 0;&#13;
    var correctAnswer = 0;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    var isNotActivity = false;&#13;
    presenter.selectionColor = '';&#13;
    presenter.strokeColor = '';&#13;
    presenter.currentSelected.item = [];&#13;
    presenter.strokeWidth = 1;&#13;
    presenter.isVisible = '';&#13;
    presenter.wasVisible = '';&#13;
    presenter.playerController = null;&#13;
    presenter.isDrawn = false;&#13;
    presenter.initialMarks = 0;&#13;
    presenter.validate = false;&#13;
    presenter.isDisable = false;&#13;
    presenter.wasDisable = false;&#13;
    presenter.imageBackgroundTable = ["0"];&#13;
&#13;
    function displayText() {&#13;
        var textToDisplay = presenter.model['Text to be displayed'],&#13;
            isTextColored = presenter.model['Color text'] === 'True',&#13;
            $textContainer = presenter.$view.find('.some-text-container');&#13;
&#13;
        $textContainer.text(textToDisplay);&#13;
        if (isTextColored) {&#13;
            $textContainer.css('color', 'red');&#13;
        }&#13;
    }&#13;
&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.hideAnswers();&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.hideAnswers();&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.hideAnswers();&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.disable = function(){&#13;
        presenter.hideAnswers();&#13;
        presenter.isDisable = true;&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).addClass('disable');&#13;
&#13;
    };&#13;
&#13;
    presenter.enable = function(){&#13;
        presenter.hideAnswers();&#13;
        presenter.isDisable = false;&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.isAttempted = function(){&#13;
        presenter.hideAnswers();&#13;
        if(isNotActivity === true) {&#13;
            return true;&#13;
        }&#13;
        return Counter === (presenter.initialMarks)/2 ? false : true;&#13;
    };&#13;
&#13;
    function getDefaultImageURL(isPreview) {&#13;
        var urlPrefix = isPreview ? '/media/iceditor/' : presenter.playerController.getStaticFilesPath();&#13;
&#13;
        return urlPrefix + "addons/resources/fractions-default-image.png"&#13;
    }&#13;
&#13;
    presenter.init = function(view, model, isPreview){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        correctAnswer = model.Correct;&#13;
&#13;
        presenter.imageSelectChecker = false;&#13;
        presenter.imageDeselectChecker = false;&#13;
&#13;
        if (model['imageSelect'] == undefined || model['imageSelect'].length == 0) {&#13;
            //if(presenter.imageSelect != 'undefined'){&#13;
            presenter.imageSelect = getDefaultImageURL(isPreview);&#13;
        } else{&#13;
            presenter.imageSelectChecker = true;&#13;
            presenter.imageSelect = model.imageSelect;&#13;
        }&#13;
&#13;
        if (model['imageDeselect'] == undefined || model['imageDeselect'].length == 0) {&#13;
            //if(presenter.imageDeselect != 'undefined'){&#13;
            //if(presenter.imageDeselect.length &gt; 0){&#13;
            presenter.imageDeselect = getDefaultImageURL(isPreview);&#13;
        } else{&#13;
            presenter.imageDeselectChecker = true;&#13;
            presenter.imageDeselect = model.imageDeselect;&#13;
        }&#13;
&#13;
        if(model.selectedParts.length &gt; 0) {&#13;
            presenter.selected.selectedString = model.selectedParts;&#13;
        }&#13;
        else {&#13;
            presenter.selected.selectedString = '';&#13;
        }&#13;
        if(model.selectionColor.length &gt; 0) {&#13;
            presenter.selectionColor = model.selectionColor;&#13;
        }&#13;
        else {&#13;
            presenter.selectionColor = '#7FFFD4';&#13;
        }&#13;
        if(model.strokeColor.length &gt; 0) {&#13;
            presenter.strokeColor = model.strokeColor;&#13;
        }&#13;
        else {&#13;
            presenter.strokeColor= '#838B8B';&#13;
        }&#13;
        if(model.emptyColor.length &gt; 0) {&#13;
            presenter.emptyColor = model.emptyColor;&#13;
        }&#13;
        else {&#13;
            presenter.emptyColor = '#eeeeee';&#13;
        }&#13;
&#13;
&#13;
        if(model.strokeWidth.length &gt; 0 ) {&#13;
            presenter.strokeWidth = model.strokeWidth;&#13;
        }&#13;
&#13;
        var radius = 0;&#13;
        var circOX = 0;&#13;
        var circOY = 0;&#13;
&#13;
        $counter = $(view).find('.FractionsCommandsViewer');&#13;
        var myDiv =  $(view).find('.FractionsWrapper')[0];&#13;
&#13;
        if(presenter.checkColor(presenter.selectionColor) &amp;&amp; presenter.checkColor(presenter.strokeColor) &amp;&amp; presenter.checkColor(presenter.emptyColor) &amp;&amp; ( !(isNaN(presenter.strokeWidth)) &amp;&amp; parseFloat(presenter.strokeWidth) == parseInt(presenter.strokeWidth,10) &amp;&amp; parseFloat(presenter.strokeWidth) &gt; 0 ))&#13;
        {&#13;
            presenter.strokeWidth = parseInt(presenter.strokeWidth,10);&#13;
&#13;
            if(model.Figure == 'Rectangular') {&#13;
                if(parseFloat(model.RectHorizontal) &gt; 0 &amp;&amp; parseFloat(model.RectHorizontal) == Math.round(model.RectHorizontal) &amp;&amp; parseFloat(model.RectVertical) &gt; 0 &amp;&amp; parseFloat(model.RectVertical) == Math.round(model.RectVertical))&#13;
                {&#13;
                    if(parseFloat(model.RectHorizontal) &gt; 30 || parseFloat(model.RectVertical) &gt; 30){&#13;
                        $counter.text('Choose rectangular parts less than 30.');&#13;
                        isNotActivity = true;&#13;
                        presenter.validate = false;&#13;
                    } else {&#13;
                        for(var i = 0; i&lt;parseInt(model.RectHorizontal,10) * parseInt(model.RectVertical,10) + 1 ; i++){&#13;
                            presenter.currentSelected.item[i] = false;&#13;
                        }&#13;
                        presenter.currentSelected.item[0] = model.ID;&#13;
&#13;
                        if(correctAnswer.length &gt; 0){&#13;
                            if(!(isNaN(correctAnswer)) &amp;&amp; parseFloat(correctAnswer) == Math.round(correctAnswer) &amp;&amp; parseFloat(correctAnswer) &gt; 0 &amp;&amp; parseFloat(correctAnswer) &lt;= parseInt(model.RectHorizontal,10) * parseInt(model.RectVertical,10)){&#13;
                                $counter.text('');&#13;
                                var figureRect = presenter.drawRect(model.RectHorizontal, model.RectVertical, model.ID, model.Height, model.Width);&#13;
                                $(myDiv).append(figureRect);&#13;
                                $(myDiv).addClass('rect');&#13;
                                presenter.isDrawn = true;&#13;
                                presenter.validate = true;&#13;
                            } else {&#13;
                                if(model.isNotActivity == 'True'){&#13;
                                    $counter.text('');&#13;
                                    var figureRect = presenter.drawRect(model.RectHorizontal, model.RectVertical, model.ID, model.Height, model.Width);&#13;
                                    $(myDiv).append(figureRect);&#13;
                                    $(myDiv).addClass('rect');&#13;
                                    presenter.isDrawn = true;&#13;
                                    presenter.validate = true;&#13;
                                } else{&#13;
                                    $counter.text('Incorrect value for "Number of correct parts" property.');&#13;
                                    isNotActivity = true;&#13;
                                    presenter.validate = false;&#13;
                                }&#13;
                            }&#13;
                        } else{&#13;
                            if(model.isNotActivity == 'True'){&#13;
                                $counter.text('');&#13;
                                var figureRect = presenter.drawRect(model.RectHorizontal, model.RectVertical, model.ID, model.Height, model.Width);&#13;
                                $(myDiv).append(figureRect);&#13;
                                $(myDiv).addClass('rect');&#13;
                                presenter.isDrawn = true;&#13;
                                presenter.validate = true;&#13;
                            } else{&#13;
                                $counter.text('Fill the "Number of correct parts", or check isNotActivity.');&#13;
                                isNotActivity = true;&#13;
                                presenter.validate = false;&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
                else {&#13;
                    $counter.text('Incorrect rectangular parts.');&#13;
                    isNotActivity = true;&#13;
                    presenter.validate = false;&#13;
                }&#13;
            }&#13;
&#13;
            if(model.Figure == 'Circle') {&#13;
                if(model.CircleParts == Math.round(model.CircleParts) &amp;&amp; parseFloat(model.CircleParts) &gt; 0) {&#13;
                    if(parseFloat(model.CircleParts) &lt;100){&#13;
                        for(var i = 0; i&lt; parseInt(model.CircleParts,10) +1; i++){&#13;
                            presenter.currentSelected.item[i] = false;&#13;
                        }&#13;
                        presenter.currentSelected.item[0] = model.ID;&#13;
&#13;
                        if(parseInt(model.Height) &gt;= parseInt(model.Width)){&#13;
                            radius = Math.round((model.Width - 2*presenter.strokeWidth)*50)/100;&#13;
                            circOX = radius + presenter.strokeWidth;&#13;
                            circOY = radius + presenter.strokeWidth;&#13;
                        }&#13;
                        else {&#13;
                            radius = Math.round((model.Height - 2*presenter.strokeWidth)*50)/100;&#13;
                            circOX = radius + presenter.strokeWidth;&#13;
                            circOY = radius + presenter.strokeWidth;&#13;
                        }&#13;
&#13;
                        if(correctAnswer.length &gt; 0){&#13;
                            if(!(isNaN(correctAnswer)) &amp;&amp; parseFloat(correctAnswer) == Math.round(correctAnswer) &amp;&amp; parseFloat(correctAnswer) &gt; 0 &amp;&amp; parseFloat(correctAnswer) &lt;= parseInt(model.CircleParts,10)){&#13;
                                $counter.text('');&#13;
                                var figureCirc = presenter.drawArcs(model.CircleParts,circOX,circOY, radius, model.ID, model.Height, model.Width);&#13;
                                $(myDiv).append(figureCirc);&#13;
                                $(myDiv).addClass('circ');&#13;
                                presenter.isDrawn = true;&#13;
                                isNotActivity = false;&#13;
                                presenter.validate = true;&#13;
&#13;
&#13;
                            } else {&#13;
                                if(model.isNotActivity == 'True'){&#13;
                                    $counter.text('');&#13;
                                    var figureCirc = presenter.drawArcs(model.CircleParts,circOX,circOY, radius, model.ID, model.Height, model.Width);&#13;
                                    $(myDiv).append(figureCirc);&#13;
                                    $(myDiv).addClass('circ');&#13;
                                    presenter.isDrawn = true;&#13;
                                    isNotActivity = false;&#13;
                                    presenter.validate = true;&#13;
                                } else{&#13;
                                    $counter.text('Incorrect value for "Number of correct parts" property.');&#13;
                                    isNotActivity = true;&#13;
                                    presenter.validate = false;&#13;
                                }&#13;
                            }&#13;
                        } else {&#13;
                            if(model.isNotActivity == 'True'){&#13;
                                $counter.text('');&#13;
                                var figureCirc = presenter.drawArcs(model.CircleParts,circOX,circOY, radius, model.ID, model.Height, model.Width);&#13;
                                $(myDiv).append(figureCirc);&#13;
                                $(myDiv).addClass('circ');&#13;
                                presenter.isDrawn = true;&#13;
                                isNotActivity = false;&#13;
                                presenter.validate = true;&#13;
                            }else {&#13;
                                $counter.text('Fill the "Number of correct parts", or check isNotActivity.');&#13;
                                isNotActivity = true;&#13;
                                presenter.validate = false;&#13;
&#13;
                            }&#13;
                        }&#13;
&#13;
                    } else {&#13;
                        $counter.text('Choose circle parts less than 100.');&#13;
                        isNotActivity = true;&#13;
                        presenter.validate = false;&#13;
                    }&#13;
                } else {&#13;
                    $counter.text('Incorrect circle parts.');&#13;
                    isNotActivity = true;&#13;
                }&#13;
            }&#13;
&#13;
            if(model.isNotActivity == 'True') {&#13;
                isNotActivity = true;&#13;
            }&#13;
            if(model.isDisable == 'True') {&#13;
                presenter.isDisable = true;&#13;
                presenter.wasDisable = true;&#13;
                $(myDiv).addClass('disable');&#13;
            }&#13;
&#13;
            presenter.clear();&#13;
&#13;
            if(model.selectedParts.length &gt; 0) {&#13;
                presenter.selected(model.selectedParts);&#13;
            }&#13;
&#13;
        } else {&#13;
            if(!(presenter.checkColor(presenter.selectionColor))) {&#13;
                $counter.text('Incorrect selectionColor.');&#13;
            }&#13;
            else if(!(presenter.checkColor(presenter.strokeColor))) {&#13;
                $counter.text('Incorrect strokeColor.');&#13;
            }&#13;
            else if(!(presenter.checkColor(presenter.emptyColor))) {&#13;
                $counter.text('Incorrect emptyColor.');&#13;
            } else {&#13;
                $counter.text('Incorrect strokeWidth.');&#13;
            }&#13;
        }&#13;
&#13;
        displayText();&#13;
&#13;
    };&#13;
&#13;
    presenter.checkColor = function(color) {&#13;
&#13;
        var regExp = new RegExp("^#[0-9a-fA-F]{6}$");&#13;
        var colorMatch;&#13;
        colorMatch = color.match(regExp);&#13;
        //if(color == 'transparent') return true;&#13;
&#13;
        if(colorMatch === null) return false;&#13;
        else return true;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'setSelectionColor'.toLowerCase():&#13;
                presenter.setSelectionColorButton(params);&#13;
                break;&#13;
            case 'getCurrentNumber'.toLowerCase():&#13;
                presenter.getCurrentNumber();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'markAsCorrect'.toLowerCase():&#13;
                presenter.markAsCorrect();&#13;
                break;&#13;
            case 'markAsWrong'.toLowerCase():&#13;
                presenter.markAsWrong();&#13;
                break;&#13;
            case 'markAsEmpty'.toLowerCase():&#13;
                presenter.markAsEmpty();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'showElementsSA'.toLowerCase():&#13;
                presenter.showElementsSA(params[0]);&#13;
                break;&#13;
            case 'hideElementsSA'.toLowerCase():&#13;
                presenter.hideElementsSA();&#13;
                break;&#13;
            case 'allElements'.toLowerCase():&#13;
                presenter.allElements();&#13;
                break;&#13;
            case 'isErrorCheckMode'.toLowerCase():&#13;
                presenter.isErrorCheckMode(params[0]);&#13;
                break;&#13;
            case 'addShowAnswersClass'.toLowerCase():&#13;
                presenter.addShowAnswersClass();&#13;
                break;&#13;
            case 'removeShowAnswersClass'.toLowerCase():&#13;
                presenter.removeShowAnswersClass();&#13;
                break;&#13;
            case 'getCurrentNumberSA'.toLowerCase():&#13;
                presenter.getCurrentNumberSA();&#13;
                break;&#13;
            case 'isAllOK'.toLowerCase():&#13;
                presenter.isAllOK();&#13;
                break;&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.allElements = function(){&#13;
        return presenter.allElementsCount;&#13;
    };&#13;
&#13;
    presenter.addShowAnswersClass = function(){&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).addClass('showAnswers');&#13;
    };&#13;
&#13;
    presenter.removeShowAnswersClass = function(){&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).removeClass('showAnswers');&#13;
    };&#13;
&#13;
    presenter.isErrorCheckMode = function(value){&#13;
        presenter.isErrorCheckingMode = value;&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function(){&#13;
        presenter.hideAnswers();&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isErrorCheckingMode = true;&#13;
        $($myDiv).removeClass('incorrect');&#13;
        $($myDiv).addClass('correct');&#13;
&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function(){&#13;
        presenter.hideAnswers();&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isErrorCheckingMode = true;&#13;
        $($myDiv).removeClass('correct');&#13;
        $($myDiv).addClass('incorrect');&#13;
    };&#13;
&#13;
    presenter.markAsEmpty = function(){&#13;
        presenter.hideAnswers();&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isErrorCheckingMode = false;&#13;
        $($myDiv).removeClass('incorrect');&#13;
        $($myDiv).removeClass('correct');&#13;
    };&#13;
&#13;
    presenter.setSelectionColor = function(color){&#13;
        presenter.hideAnswers();&#13;
        presenter.selectionColor = color;&#13;
    };&#13;
&#13;
    presenter.setSelectionColorButton = function(color){&#13;
        presenter.hideAnswers();&#13;
        presenter.selectionColor = color[0];&#13;
    };&#13;
&#13;
    presenter.getCurrentNumber = function(){&#13;
        presenter.hideAnswers();&#13;
        return Counter;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function(){&#13;
        presenter.hideAnswers();&#13;
&#13;
        if(isNotActivity === true) {&#13;
            return true;&#13;
        }&#13;
        return Counter == correctAnswer ? true : false;&#13;
    };&#13;
&#13;
&#13;
&#13;
&#13;
    presenter.getCurrentNumberSA = function(){&#13;
        //presenter.hideAnswers();&#13;
        return Counter;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.init(view, model, false);&#13;
&#13;
        if(model.Figure == 'Rectangular') {&#13;
            presenter.allElementsCount = model.RectHorizontal * model.RectVertical;&#13;
        }&#13;
&#13;
        if(model.Figure == 'Circle') {&#13;
            presenter.allElementsCount = model.CircleParts;&#13;
        }&#13;
&#13;
        presenter.isVisible = model["Is Visible"] == 'True';&#13;
        presenter.wasVisible = model["Is Visible"] == 'True';&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
&#13;
        $(view).find('path').click(function(e){&#13;
            presenter.markElementAsClicked(this);&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        var bufforClass = '';&#13;
&#13;
        jQuery(function($){&#13;
            $(view).find('path').on("mouseenter", function() {&#13;
                var classString = $(this).attr('class');&#13;
                var newClass = classString + " mouse-hover";&#13;
                $(this).attr('class', newClass);&#13;
            });&#13;
        });&#13;
&#13;
        jQuery(function($){&#13;
            $(view).find('path').on("mouseleave", function() {&#13;
                var classString = $(this).attr('class');&#13;
                var mouseLeaveClass = classString.replace(' mouse-hover','');&#13;
                $(this).attr("class", mouseLeaveClass);&#13;
            });&#13;
&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        var $myDiv =  presenter.$view.find('path');&#13;
        if(presenter.isDrawn) $($myDiv).remove();&#13;
&#13;
        presenter.init(view, model, true);&#13;
&#13;
        presenter.isVisible = model["Is Visible"] == 'True';&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
    };&#13;
&#13;
    presenter.clear = function(){&#13;
&#13;
        if(presenter.imageBackgroundTable[0] == 0){&#13;
&#13;
            for(var i = 0; i&lt;presenter.currentSelected.item.length - 1 ;i++){&#13;
                presenter.imageBackgroundTable[i] = presenter.$view.find('"#'+presenter.currentSelected.item[0]+'imageBackground' +  (i+1) + '"');&#13;
            }&#13;
        }&#13;
        if(presenter.imageSelectChecker || presenter.imageDeselectChecker){&#13;
            for(var i = 0; i&lt;presenter.currentSelected.item.length - 1 ;i++){&#13;
                var $myDiv =  presenter.$view.find('"#' +  presenter.currentSelected.item[0] + (i+1) + '"');&#13;
                jQuery($myDiv).css('fill', presenter.emptyColor);&#13;
                jQuery($myDiv).removeClass("selected");&#13;
&#13;
                if(presenter.imageDeselectChecker || presenter.imageSelectChecker){&#13;
                    //presenter.$view.find('"#'+presenter.currentSelected.item[0]+'imageBackground' +  (i+1) + '"').attr("xlink:href", presenter.imageDeselect);&#13;
                    presenter.imageBackgroundTable[i].attr("xlink:href", presenter.imageDeselect);&#13;
                }&#13;
            }&#13;
        }else {&#13;
            for(var i = 0; i&lt;presenter.currentSelected.item.length;i++){&#13;
                var $myDiv =  presenter.$view.find('path')[i];&#13;
                $($myDiv).removeClass("selected");&#13;
                $($myDiv).css('fill', presenter.emptyColor);&#13;
            }&#13;
&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.selected = function(selectedString){&#13;
&#13;
        if(presenter.validate){&#13;
            presenter.clear();&#13;
            if(selectedString.indexOf(',') !== -1){&#13;
                var selectedStringBufor = selectedString;&#13;
                while(selectedStringBufor.indexOf(',') !== -1) {&#13;
                    var position = selectedStringBufor.indexOf(',');&#13;
                    var toSelect = selectedStringBufor.slice(0, position);&#13;
                    selectedStringBufor = selectedStringBufor.slice(position + 1, selectedStringBufor.length);&#13;
&#13;
                    if(!(toSelect.isNaN) &amp;&amp; parseFloat(toSelect) === Math.round(toSelect)){&#13;
                        presenter.markElementAsSelected(toSelect);&#13;
                        presenter.currentSelected.item[toSelect] = true;&#13;
                        Counter++;&#13;
                        presenter.initialMarks++;&#13;
                    } else {&#13;
                        presenter.selectRange(toSelect);&#13;
                    }&#13;
                }&#13;
                var toSelect1 = selectedStringBufor;&#13;
                if(!(toSelect1.isNaN) &amp;&amp; parseFloat(toSelect1) === Math.round(toSelect1)){&#13;
                    presenter.markElementAsSelected(toSelect1);&#13;
                    presenter.currentSelected.item[toSelect1] = true;&#13;
                    Counter++;&#13;
                    presenter.initialMarks++;&#13;
                } else {&#13;
                    presenter.selectRange(toSelect1);&#13;
                }&#13;
            } else {&#13;
                var toSelect2 = selectedString;&#13;
                if(!(toSelect2.isNaN) &amp;&amp; parseFloat(toSelect2) === Math.round(toSelect2)){&#13;
                    presenter.markElementAsSelected(toSelect2);&#13;
                    presenter.currentSelected.item[toSelect2] = true;&#13;
                    Counter++;&#13;
                    presenter.initialMarks++;&#13;
                } else {&#13;
                    presenter.selectRange(toSelect2);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.selectRange = function(selectedString){&#13;
&#13;
        var toSelect3 = 1;&#13;
        if(selectedString.indexOf('-') !== -1){&#13;
            var selectedStringBufor = selectedString;&#13;
            var position1 = selectedStringBufor.indexOf('-');&#13;
            var toSelect1 = selectedStringBufor.slice(0, position1);&#13;
&#13;
            selectedStringBufor = selectedStringBufor.slice(position1 + 1, selectedStringBufor.length);&#13;
&#13;
            if(selectedStringBufor.indexOf('-') !== -1){&#13;
                var position2 = selectedStringBufor.indexOf('-');&#13;
                var toSelect2 = selectedStringBufor.slice(0, position2);&#13;
                selectedStringBufor = selectedStringBufor.slice(position2 + 1, selectedStringBufor.length);&#13;
                toSelect3 = selectedStringBufor;&#13;
            } else {&#13;
                var toSelect2 = selectedStringBufor.slice(0, selectedStringBufor.length);&#13;
            }&#13;
&#13;
            if(!(toSelect1.isNaN) &amp;&amp; parseFloat(toSelect1) === Math.round(toSelect1) &amp;&amp; !(toSelect2.isNaN) &amp;&amp; parseFloat(toSelect2) === Math.round(toSelect2) &amp;&amp; !(toSelect3.isNaN) &amp;&amp; parseFloat(toSelect3) === Math.round(toSelect3))&#13;
            {&#13;
                if(parseFloat(toSelect1) &gt; presenter.currentSelected.item.length) {&#13;
                    toSelect1 = presenter.currentSelected.item.length;&#13;
                }&#13;
                if(parseFloat(toSelect2) &gt; presenter.currentSelected.item.length) {&#13;
                    toSelect2 = presenter.currentSelected.item.length;&#13;
                }&#13;
                if(parseFloat(toSelect3) &gt; presenter.currentSelected.item.length) {&#13;
                    toSelect3 = presenter.currentSelected.item.length;&#13;
                }&#13;
&#13;
                if(presenter.validate){&#13;
                    for(var i = parseFloat(toSelect1); i &lt; parseFloat(toSelect2) + 1;i+=parseFloat(toSelect3)){&#13;
                        presenter.markElementAsSelected(i);&#13;
                        presenter.currentSelected.item[i] = true;&#13;
                        Counter++;&#13;
                        presenter.initialMarks++;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.markElementAsClicked = function(element){&#13;
        var clickedElementID=element.id;&#13;
        if(presenter.isErrorCheckingMode === false &amp;&amp; presenter.isDisable === false)&#13;
        {&#13;
            if(presenter.currentSelected.item[clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length)] === false)&#13;
            {&#13;
                element.style.fill = presenter.selectionColor;&#13;
                $(element).addClass("selected");&#13;
                Counter++;&#13;
                if(presenter.imageDeselectChecker || presenter.imageSelectChecker){&#13;
                    //presenter.$view.find('"#'+presenter.currentSelected.item[0]+'imageBackground' +  clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length)+ '"').attr("xlink:href", presenter.imageSelect);&#13;
                    presenter.imageBackgroundTable[clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length) - 1].attr("xlink:href", presenter.imageSelect);&#13;
                }&#13;
                presenter.currentSelected.item[clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length)] = true;&#13;
                presenter.triggerFrameChangeEvent(clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length),1,Counter == correctAnswer ? 1 : 0);&#13;
            } else   {&#13;
                element.style.fill = presenter.emptyColor;&#13;
                $(element).removeClass("selected");&#13;
                presenter.currentSelected.item[clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length)] = false;&#13;
                Counter--;&#13;
                presenter.triggerFrameChangeEvent(clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length),0,Counter == correctAnswer ? 1 : 0);&#13;
&#13;
                if(presenter.imageDeselectChecker || presenter.imageSelectChecker){&#13;
                    //presenter.$view.find('"#'+presenter.currentSelected.item[0]+'imageBackground' +  clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length)+ '"').attr("xlink:href", presenter.imageDeselect);&#13;
                    presenter.imageBackgroundTable[clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length) - 1].attr("xlink:href", presenter.imageDeselect);&#13;
                }&#13;
&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.markElementAsSelected = function(element){&#13;
&#13;
        var $myDiv =  presenter.$view.find('"#' +  presenter.currentSelected.item[0] + element + '"');&#13;
        jQuery($myDiv).css('fill', presenter.selectionColor);&#13;
        presenter.initialMarks++;&#13;
        jQuery($myDiv).addClass("selected");&#13;
        if(presenter.imageSelectChecker || presenter.imageDeselectChecker){&#13;
            //presenter.$view.find('"#'+presenter.currentSelected.item[0]+'imageBackground' +  element + '"').attr("xlink:href", presenter.imageSelect);&#13;
            presenter.imageBackgroundTable[element - 1].attr("xlink:href", presenter.imageSelect);&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.drawRect = function(partsHorizontally, partsVertically,id,addonHeight, addonWidth) {&#13;
        var elementHeight = parseFloat(addonHeight) - 2*parseFloat(presenter.strokeWidth);&#13;
        var elementWidth = parseFloat(addonWidth) - 2*parseFloat(presenter.strokeWidth);&#13;
&#13;
&#13;
&#13;
&#13;
        var fig = '&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"  width="'+ addonWidth+'" height="'+addonHeight+'"&gt;';&#13;
        fig += '&lt;rect id="myBorder" height="'+elementHeight+'" width="'+ elementWidth +'" y="'+presenter.strokeWidth+'" x="'+presenter.strokeWidth+'" stroke-width="'+presenter.strokeWidth+'" stroke="'+presenter.strokeColor+'" style="fill: none"/&gt;';&#13;
&#13;
        var stepx = (addonWidth-(2*presenter.strokeWidth))/partsHorizontally;&#13;
        var stepy = (addonHeight-(2*presenter.strokeWidth))/partsVertically;&#13;
        var k =1;&#13;
        for(var j=0;j&lt;partsVertically ;j++) {&#13;
            for(var i=0;i&lt;partsHorizontally ;i++) {&#13;
                if(presenter.imageDeselectChecker || presenter.imageSelectChecker){&#13;
&#13;
                    fig += '&lt;path id="'+ id + k +'" class="'+id+'" d="M'+ (parseFloat(presenter.strokeWidth) + i*stepx)+',' +(parseFloat(presenter.strokeWidth) +j*stepy) +'h' +stepx +' v' +stepy +' h' +(-stepx) +' v' +(-stepy) +'" stroke-width="'+presenter.strokeWidth+'" style="stroke: '+presenter.strokeColor+'; fill:'+presenter.emptyColor+';" /&gt;';&#13;
                    fig += '&lt;defs&gt;';&#13;
                    fig += '&lt;mask id="' + id + 'mask' + k + '" x="0" y="0" patternUnits="userSpaceOnUse" height="100" width="100"&gt;';&#13;
                    fig += '&lt;path id="' + id + 'maskPath'+k+'" class="image-path" d="M'+ (parseFloat(presenter.strokeWidth) + i*stepx)+',' +(parseFloat(presenter.strokeWidth) +j*stepy) +'h' +stepx +' v' +stepy +' h' +(-stepx) +' v' +(-stepy) +'" stroke-width="'+presenter.strokeWidth+'" style="pointer-events:none;fill:#ffffff;" /&gt;';&#13;
                    fig += '&lt;/mask&gt;';&#13;
                    fig += '&lt;/defs&gt;';&#13;
                    fig += '&lt;image y="' + j*stepy + '" x="' + i*stepx + '" id="' + id + 'imageBackground' + k + '" class="image-background" xlink:href="' + presenter.imageDeselect + '" height="'+stepy+'" width="'+stepx+'" style="pointer-events:none;"  mask="url(#' + id + 'mask'+k+')"/&gt;';&#13;
                    k++;&#13;
                }else{&#13;
                    fig += '&lt;path id="'+ id + k +'" class="'+id+'" d="M'+ (parseFloat(presenter.strokeWidth) + i*stepx)+',' +(parseFloat(presenter.strokeWidth) +j*stepy) +'h' +stepx +' v' +stepy +' h' +(-stepx) +' v' +(-stepy) +'" stroke-width="'+presenter.strokeWidth+'" style="stroke: '+presenter.strokeColor+'; fill: '+presenter.emptyColor+';" /&gt;';&#13;
                    k++;&#13;
                }&#13;
            }&#13;
        }&#13;
        fig += '&lt;/svg&gt;';&#13;
&#13;
        return fig;&#13;
    };&#13;
&#13;
&#13;
    presenter.drawArcs = function(parts,centerX,centerY,radius, id, addonHeight, addonWidth){&#13;
        var step = parseInt(parts,10) + 1;&#13;
        var sectorAngle = Math.round(360/parts*100)/100;&#13;
        var angle = 360 - sectorAngle;&#13;
&#13;
        if(parts == 1) {&#13;
&#13;
            var d = '&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"  width="'+addonWidth+'" height="'+addonHeight+'"&gt;';&#13;
            d += '&lt;path id="'+id +'1" d=" M ' + centerX+', ' +centerY + 'm '+(-radius)+', 0 a ' + radius +',' + radius + ' 0 1,0 ' + (2*radius)+ ',0 a '+ radius+ ',' +radius+ ' 0 1,0 '+ (-2*radius)+',0" fill="'+presenter.emptyColor+'" stroke="'+presenter.strokeColor+'" stroke-width="'+presenter.strokeWidth+'" stroke-linejoin="round" /&gt;';&#13;
            d += '&lt;/svg&gt;';&#13;
&#13;
            return d;&#13;
        } else{&#13;
            var d = '&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"  width="'+ addonWidth+'" height="'+addonHeight+'"&gt;';&#13;
            var x1 = Math.round((centerX + radius*Math.cos(Math.PI*angle/180))*100)/100;&#13;
            var y1 = Math.round((centerY + radius*Math.sin(Math.PI*angle/180))*100)/100;&#13;
            var x2 = Math.round((centerX + radius*Math.cos(Math.PI*angle/180))*100)/100;&#13;
            var y2 = Math.round((centerY + radius*Math.sin(Math.PI*angle/180))*100)/100;&#13;
            angle -= sectorAngle;&#13;
            d += '&lt;path id="'+id +'1" class="'+id+'" d="M'+ centerX + ',' + centerY + 'l ' + radius + ', 0 A' + radius + ',' + radius +' 0 0, 0 ' + (x1) + ',' + (y1) +' z" fill="'+presenter.emptyColor+'" stroke="'+presenter.strokeColor+'" stroke-width="'+presenter.strokeWidth+'" stroke-linejoin="round" /&gt;';&#13;
&#13;
            for(var j=2; j &lt; step ; j++){&#13;
                x1 = x2;&#13;
                y1 = y2;&#13;
                x2 = Math.round((centerX + radius*Math.cos(Math.PI*angle/180))*100)/100;&#13;
                y2 = Math.round((centerY + radius*Math.sin(Math.PI*angle/180))*100)/100;&#13;
&#13;
                var stepX = x1 - centerX;&#13;
                var stepY = y1 - centerY;&#13;
&#13;
                d += '&lt;path id="' + id + j +'" class="'+id+'" d="M'+ centerX + ',' + centerY + 'l ' + stepX + ',' + stepY +' A' + radius + ',' + radius +' 0 0, 0 ' + (x2) + ',' + (y2) +' z" fill="#'+presenter.emptyColor+'" stroke="'+presenter.strokeColor+'" stroke-width="'+presenter.strokeWidth+'" stroke-linejoin="round" /&gt;';&#13;
                angle -= sectorAngle;&#13;
            }&#13;
            d += '&lt;/svg&gt;';&#13;
            return d;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        presenter.isErrorCheckingMode = false;&#13;
        var currentItems = presenter.currentSelected.item;&#13;
        var visible = presenter.isVisible;&#13;
        var initialMarks = presenter.initialMarks;&#13;
        var wasDisable = presenter.wasDisable;&#13;
        var isDisable = presenter.isDisable;&#13;
        return JSON.stringify({&#13;
            Counter: Counter,&#13;
            currentItems: currentItems,&#13;
            visible: visible,&#13;
            initialMarks: initialMarks,&#13;
            wasDisable: wasDisable,&#13;
            isDisable: isDisable&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var parsedState = JSON.parse(state),&#13;
            $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isVisible = parsedState.visible;&#13;
        Counter = parsedState.Counter;&#13;
        presenter.wasDisable = parsedState.wasDisable;&#13;
        presenter.isDisable = parsedState.isDisable;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
        presenter.currentSelected.item = JSON.parse(state).currentItems;&#13;
        presenter.clear();&#13;
&#13;
        for(var j=1;j&lt;presenter.currentSelected.item.length;j++){&#13;
            if(presenter.currentSelected.item[j] === true) {&#13;
                presenter.markElementAsSelected(j);&#13;
            }&#13;
        }&#13;
        presenter.initialMarks = parsedState.initialMarks;&#13;
        presenter.isDisable === true ?  $($myDiv).addClass('disable') : $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if(parseInt(presenter.initialMarks,10)/2 === parseInt(correctAnswer,10)) {&#13;
            return 0;&#13;
        }&#13;
        if(isNotActivity === false) {&#13;
            return 1;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.neutralOption = function(){&#13;
        return Counter === (presenter.initialMarks)/2 ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if(parseInt(presenter.initialMarks,10)/2 === parseInt(correctAnswer,10)) {&#13;
            return 0;&#13;
        }&#13;
        if(isNotActivity === false) {&#13;
            return Counter == correctAnswer ? 1 : 0;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if(isNotActivity === false) {&#13;
&#13;
            if(parseInt(presenter.initialMarks,10)/2 === parseInt(correctAnswer,10) &amp;&amp; parseInt(correctAnswer,10) != Counter) {&#13;
                return 1;&#13;
            }&#13;
&#13;
            if(presenter.neutralOption() == 1) {&#13;
                return 0;&#13;
            }&#13;
            else {&#13;
                return presenter.getMaxScore() - presenter.getScore();&#13;
            }&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.hideAnswers();&#13;
        presenter.isErrorCheckingMode = true;&#13;
&#13;
        if(isNotActivity === false) {&#13;
            var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
&#13;
            if(presenter.neutralOption() === 0) {&#13;
                if (presenter.getScore() === presenter.getMaxScore() &amp;&amp; presenter.getErrorCount() === 0) {&#13;
                    $($myDiv).addClass('correct');&#13;
                } else {&#13;
                    $($myDiv).addClass('incorrect');&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
    };&#13;
&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isErrorCheckingMode = false;&#13;
        $($myDiv).removeClass('correct');&#13;
        $($myDiv).removeClass('incorrect');&#13;
&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.setWorkMode();&#13;
        for(var i = 1; i&lt;presenter.currentSelected.item.length; i++) presenter.currentSelected.item[i] = false;&#13;
        presenter.isErrorCheckingMode = false;&#13;
        Counter = 0;&#13;
        presenter.initialMarks = 0;&#13;
        presenter.selected(presenter.selected.selectedString);&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
        presenter.isDisable = presenter.wasDisable;&#13;
        presenter.isDisable === true ?  $($myDiv).addClass('disable') : $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.isNotActivity = function(){&#13;
        return isNotActivity === 1 ? 1 : 0;&#13;
&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function(partNumber,clickValue,checkScore) {&#13;
        return {&#13;
            source : presenter.currentSelected.item[0],&#13;
            item : "" + partNumber,&#13;
            value : '' + clickValue,&#13;
            score : '' + checkScore&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(partNumber,clickValue,checkScore,element) {&#13;
        var eventData = presenter.createEventData(partNumber,clickValue,checkScore);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
    };&#13;
&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.markCorrectAnswerAsSelected = function(element){&#13;
&#13;
        var $myDiv =  presenter.$view.find('"#' +  presenter.currentSelected.item[0] + element + '"');&#13;
        jQuery($myDiv).css('fill', presenter.selectionColor);&#13;
        jQuery($myDiv).addClass("selected");&#13;
        if(presenter.imageSelectChecker || presenter.imageDeselectChecker){&#13;
            //presenter.$view.find('"#'+presenter.currentSelected.item[0]+'imageBackground' +  element + '"').attr("xlink:href", presenter.imageSelect);&#13;
            presenter.imageBackgroundTable[element - 1].attr("xlink:href", presenter.imageSelect);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(presenter.isErrorCheckingMode == true){&#13;
            presenter.setWorkMode();&#13;
        }&#13;
&#13;
        presenter.isErrorCheckingMode = true; //blokowanie na check&#13;
&#13;
        if(isNotActivity === false) {&#13;
            if(correctAnswer != Counter){&#13;
                if(presenter.clear()){&#13;
                    if(Counter &lt; correctAnswer){&#13;
                        var k = 0;&#13;
                        for(var j=1;j&lt;presenter.currentSelected.item.length;j++){&#13;
                            if(presenter.currentSelected.item[j] === true) {&#13;
                                presenter.markCorrectAnswerAsSelected(j);&#13;
                            }&#13;
                            if(presenter.currentSelected.item[j] === false &amp;&amp; k != correctAnswer - Counter){&#13;
                                presenter.markCorrectAnswerAsSelected(j);&#13;
                                k++;&#13;
                            }&#13;
                        }&#13;
                    } else{&#13;
                        var k = 0;&#13;
                        for(var j=1;j&lt;presenter.currentSelected.item.length;j++){&#13;
                            if(presenter.currentSelected.item[j] === true) {&#13;
                                if(k != correctAnswer){&#13;
                                    presenter.markCorrectAnswerAsSelected(j);&#13;
                                    k++;&#13;
                                }&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
            var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
            $($myDiv).addClass('showAnswers');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isErrorCheckingMode = false;&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).removeClass('showAnswers');&#13;
        presenter.clear();&#13;
&#13;
        for(var j=1;j&lt;presenter.currentSelected.item.length;j++){&#13;
            if(presenter.currentSelected.item[j] === true) {&#13;
                presenter.markCorrectAnswerAsSelected(j);&#13;
            }&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.showElementsSA = function(element){&#13;
&#13;
        var correctAnswerSA = element;&#13;
        presenter.isErrorCheckingMode = true;&#13;
        if(correctAnswerSA != Counter){&#13;
            if(presenter.clear()){&#13;
                if(Counter &lt; correctAnswerSA){&#13;
                    var k = 0;&#13;
                    for(var j=1;j&lt;presenter.currentSelected.item.length;j++){&#13;
                        if(presenter.currentSelected.item[j] === true) {&#13;
                            presenter.markCorrectAnswerAsSelected(j);&#13;
                        }&#13;
                        if(presenter.currentSelected.item[j] === false &amp;&amp; k != correctAnswerSA - Counter){&#13;
                            presenter.markCorrectAnswerAsSelected(j);&#13;
                            k++;&#13;
                        }&#13;
                    }&#13;
                } else{&#13;
                    var k = 0;&#13;
                    for(var j=1;j&lt;presenter.currentSelected.item.length;j++){&#13;
                        if(presenter.currentSelected.item[j] === true) {&#13;
                            if(k != correctAnswerSA){&#13;
                                presenter.markCorrectAnswerAsSelected(j);&#13;
                                k++;&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).addClass('showAnswers');&#13;
    };&#13;
&#13;
    presenter.hideElementsSA = function(item){&#13;
        //presenter.isErrorCheckingMode = false;&#13;
        presenter.hideAnswers();&#13;
    };&#13;
&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="FractionsBinder" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Fractions" name="Addons" nameLabel="FractionsBinder_property_addons" type="text"/>
        <property displayName="Correct Elements" name="CorrectElements" nameLabel="FractionsBinder_property_correct_elements" type="string"/>
    </model>
<css/><view/><preview>&lt;p&gt;FractionBinder&lt;/p&gt;&#13;
</preview><presenter>function AddonFractionsBinder_create(){&#13;
			&#13;
        var presenter = function () {};&#13;
&#13;
    presenter.configuration = {};&#13;
    presenter.loadFirstTime = true;&#13;
    presenter.isPreview = false;&#13;
&#13;
    function presenterLogic () {&#13;
        if(presenter.isPreview) return;&#13;
        presenter.addons = (presenter.model.Addons).split('\n');&#13;
        presenter.$view.css('visible', 'hidden');&#13;
        presenter.CorrectElements = presenter.model.CorrectElements;&#13;
        presenter.check = {};&#13;
        presenter.initialMarks = 0;&#13;
&#13;
        for (var i = 0; i &lt; presenter.addons.length; i++) {&#13;
&#13;
                    if(presenter.getFraction(presenter.addons[i]) != null &amp;&amp; presenter.getFraction(presenter.addons[i]).allElements != undefined){&#13;
                        presenter.check[i] = true;&#13;
                        //presenter.initialMarks = presenter.initialMarks + presenter.getFraction(presenter.addons[i]).getInitialMarks();&#13;
                        presenter.initialMarks = presenter.initialMarks + presenter.getFraction(presenter.addons[i]).getCurrentNumber();&#13;
                    } else{&#13;
                        presenter.check[i] = false;&#13;
                   }&#13;
            }&#13;
&#13;
       presenter.loadFirstTime = false;&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.getFraction = function (moduleID) {&#13;
        return presenter.playerController.getModule(moduleID);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.isPreview = false;&#13;
        //if(presenter.loadFirstTime) presenterLogic();&#13;
&#13;
            presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
            presenter.eventBus.addEventListener('HideAnswers', this);&#13;
            presenter.eventBus.addEventListener('PageLoaded', this);&#13;
            //presenter.eventBus.addEventListener('AddonFractionsBinder', this);&#13;
&#13;
        //presenter.playerController.getEventBus().sendEvent('AddonFractionsBinder', {view,model,false});&#13;
    };&#13;
&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(view,model,isPreview) {&#13;
        presenter.eventBus.sendEvent('AddonFractionsBinder', '');&#13;
&#13;
    };&#13;
&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.isPreview = true;&#13;
&#13;
        if(presenter.loadFirstTime) presenterLogic();&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        var addons = presenter.addons;&#13;
        var check = presenter.check;&#13;
        var loadFirstTime = presenter.loadFirstTime;&#13;
        var initialMarks = presenter.initialMarks;&#13;
        var correct = presenter.CorrectElements;&#13;
        return JSON.stringify({&#13;
            correct: correct,&#13;
            check: check,&#13;
            addons: addons,&#13;
            loadFirstTime : loadFirstTime,&#13;
            initialMarks : initialMarks&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
        presenter.check = parsedState.check;&#13;
        presenter.addons = parsedState.addons;&#13;
        presenter.initialMarks = parsedState.initialMarks;&#13;
        presenter.loadFirstTime = parsedState.loadFirstTime;&#13;
        presenter.CorrectElements = parsedState.correct;&#13;
        /*&#13;
        for (var i = 0; i &lt; presenter.addons.length; i++) {&#13;
&#13;
                    if(presenter.check[i]){&#13;
                        presenter.getFraction(presenter.addons[i]).markAsEmpty();&#13;
                    }&#13;
            }&#13;
            */&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        //if(presenter.loadFirstTime) presenterLogic();&#13;
        if(presenter.initialMarks == presenter.CorrectElements) {&#13;
            return 0;&#13;
        } else {&#13;
            return 1;&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.getScore = function () {&#13;
        //if(presenter.loadFirstTime) presenterLogic();&#13;
&#13;
            if(presenter.initialMarks == presenter.CorrectElements) {&#13;
                return 0;&#13;
            } else{&#13;
                return presenter.currentMarks() == presenter.CorrectElements ? 1 : 0;&#13;
            }&#13;
        //} else {&#13;
          //  return 0;&#13;
        //}&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        //if(!presenter.loadFirstTime){&#13;
            if(presenter.initialMarks == presenter.CorrectElements &amp;&amp; presenter.currentMarks() != presenter.CorrectElements) {&#13;
                return 1;&#13;
            }&#13;
&#13;
            if(presenter.initialMarks == presenter.currentMarks()) {&#13;
                return 0;&#13;
&#13;
            } else {&#13;
                return presenter.getMaxScore() - presenter.getScore();&#13;
&#13;
            }&#13;
        //} else{&#13;
        //    return 0;&#13;
        //}&#13;
    };&#13;
&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        //if(presenter.loadFirstTime) presenterLogic();&#13;
         //fractions markAsCorrect || markAsWrong&#13;
        var current = presenter.currentMarks();&#13;
            if(presenter.initialMarks != current){&#13;
                 if(current == presenter.CorrectElements){&#13;
&#13;
                        for (var i = 0; i &lt; presenter.addons.length; i++) {&#13;
&#13;
                            if(presenter.check[i]){&#13;
                                presenter.getFraction(presenter.addons[i]).markAsCorrect();&#13;
                                //presenter.getFraction(presenter.addons[i]).isErrorCheckMode(true);&#13;
                            }&#13;
                        }&#13;
&#13;
                 } else{&#13;
                        for (var i = 0; i &lt; presenter.addons.length; i++) {&#13;
&#13;
                            if(presenter.check[i]){&#13;
                                presenter.getFraction(presenter.addons[i]).markAsWrong();&#13;
                               //presenter.getFraction(presenter.addons[i]).isErrorCheckMode(true);&#13;
                            }&#13;
                        }&#13;
                 }&#13;
&#13;
&#13;
            }&#13;
&#13;
&#13;
    };&#13;
&#13;
    presenter.currentMarks = function(){&#13;
        var marks = 0;&#13;
        for (var i = 0; i &lt; presenter.addons.length; i++) {&#13;
&#13;
                if(presenter.check[i]){&#13;
                    marks = marks + presenter.getFraction(presenter.addons[i]).getCurrentNumberSA();&#13;
                }&#13;
        }&#13;
        return marks;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
&#13;
            for (var i = 0; i &lt; presenter.addons.length; i++) {&#13;
&#13;
                    if(presenter.check[i]){&#13;
                        presenter.getFraction(presenter.addons[i]).markAsEmpty();&#13;
                        presenter.getFraction(presenter.addons[i]).isErrorCheckMode(false);&#13;
                    }&#13;
            }&#13;
&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        //if(presenter.loadFirstTime) presenterLogic();&#13;
        var elementsLeft = presenter.CorrectElements;&#13;
        var elements = 0;&#13;
        var showElements = 0;&#13;
            for (var i = 0; i &lt; presenter.addons.length; i++) {&#13;
&#13;
                    if(presenter.check[i]){&#13;
                        if(elementsLeft &gt; 0){&#13;
                            elements = presenter.getFraction(presenter.addons[i]).allElements();&#13;
                            showElements = elementsLeft - elements &gt; 0 ? elements : elementsLeft;&#13;
                            elementsLeft = elementsLeft - elements &gt; 0 ? elementsLeft - elements : 0;&#13;
                        } else {&#13;
                            showElements = 0;&#13;
                        }&#13;
                    //console.log(elementsLeft);&#13;
                    //console.log(showElements);&#13;
                        presenter.getFraction(presenter.addons[i]).markAsEmpty();&#13;
&#13;
                            presenter.getFraction(presenter.addons[i]).showElementsSA(showElements);&#13;
                                //presenter.getFraction(presenter.addons[i]).isErrorCheckMode(true);&#13;
&#13;
                        //presenter.getFraction(presenter.addons[i]).addShowAnswersClass();&#13;
                    }&#13;
            }&#13;
&#13;
        //presenter.CorrectElements&#13;
&#13;
        //fractions showElementsSA(ilosc_elementow)&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
&#13;
        for (var i = 0; i &lt; presenter.addons.length; i++) {&#13;
&#13;
                    if(presenter.check[i]){&#13;
                        presenter.getFraction(presenter.addons[i]).hideElementsSA();&#13;
                        //presenter.getFraction(presenter.addons[i]).isErrorCheckMode(false);&#13;
                        //presenter.getFraction(presenter.addons[i]).removeShowAnswersClass();&#13;
                    }&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
&#13;
        //fractions markAsEmpty&#13;
&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
&#13;
        if (eventName == "PageLoaded"){&#13;
            if(presenter.loadFirstTime) presenterLogic();&#13;
        }&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Glossary" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="List of words" nameLabel="Glossary_property_list_of_words" type="list">
            <property name="ID" nameLabel="Glossary_property_id" type="string"/>
            <property isLocalized="true" name="Text" nameLabel="Glossary_property_text" type="string"/>
            <property isLocalized="true" name="Description" nameLabel="Glossary_property_description" type="html"/>
        </property>
        <property displayName="Show In Editor" name="Visible" nameLabel="Glossary_property_show_in_editor" type="boolean"/>
	</model>
<css/><view>&lt;div class="modal-dialog"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="modal-dialog"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonGlossary_create(){&#13;
    var presenter = function() {};&#13;
    presenter.$ICPage = null;&#13;
    presenter.lastReceivedEvent = null;&#13;
    presenter.isPinchZoom = false;&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        UNIQUE_ID: "Id of each word must be unique."&#13;
    };&#13;
&#13;
    presenter.addTitle = function(element, title) {&#13;
        $(element).attr('title', title);&#13;
    };&#13;
&#13;
    presenter.addDescription = function(element, description) {&#13;
        $(element).html(description);&#13;
    };&#13;
&#13;
    presenter.updateLaTeX = function(text) {&#13;
        var div = MathJax.HTML.Element("div", {id: "MathDiv"}, [text] );&#13;
        var math = MathJax.Hub.getAllJax(div)[0];&#13;
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, math]);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validated = true;&#13;
        var idList = [];&#13;
        for(var i = 0; i &lt; model["List of words"].length; i++) {&#13;
            var id = model["List of words"][i]["ID"];&#13;
            if(idList.indexOf(id) &gt;= 0) { // check if id already exist in model&#13;
                validated = false;&#13;
                break;&#13;
            }&#13;
            idList[i] = id;&#13;
        }&#13;
        return validated;&#13;
    };&#13;
&#13;
    presenter.setDisplay = function(element, display) {&#13;
        var currentDisplay = $(element).css('display') === 'block';&#13;
        if (currentDisplay != display) {&#13;
            $(element).css({&#13;
                "display":"block",&#13;
                "width":"95%",&#13;
                "height":"90%"&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getDialogDataById = function(words, wordID) {&#13;
        for(var i = 0; i &lt; words.length; i++) {&#13;
            if(words[i].ID == wordID) {&#13;
                return {&#13;
                    title: words[i].Text,&#13;
                    description: words[i].Description&#13;
                };&#13;
            }&#13;
        }&#13;
&#13;
        return undefined;&#13;
    };&#13;
&#13;
    presenter.findICPage = function () {&#13;
        presenter.$ICPage = $(presenter.$view.parent('.ic_page:first')[0]);&#13;
        if (presenter.$ICPage.offset() == null){&#13;
            presenter.$ICPage = $(presenter.$view.parent('.ic_popup_page:first')[0]);&#13;
        }&#13;
        if (presenter.$ICPage.offset() == null){&#13;
            presenter.$ICPage = $(presenter.$view.parent('.ic_header:first')[0]);&#13;
        }&#13;
        if (presenter.$ICPage.offset() == null){&#13;
            presenter.$ICPage = $(presenter.$view.parent('.ic_footer:first')[0]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.openDialogEventHandler = function(event, ui) {&#13;
        try{&#13;
            var $dialog  = $(event.target).closest('.ui-dialog');&#13;
            var isPreview = $(".gwt-DialogBox").is('.gwt-DialogBox');&#13;
            var isPopup =  $(presenter.$ICPage).is('.ic_popup_page');&#13;
            var isMarginalPage =  $(presenter.$ICPage).is('.ic_footer') || (presenter.$ICPage).is('.ic_header');&#13;
&#13;
            var presentationPosition = $(presenter.$ICPage).offset();&#13;
            var presentationWidth = $(presenter.$ICPage).outerWidth();&#13;
            var presentationHeight = isMarginalPage ?  $('.ic_page').outerHeight() : $(presenter.$ICPage).outerHeight();&#13;
            var dialogWidth = $dialog.outerWidth();&#13;
            var dialogHeight = $dialog.outerHeight();&#13;
            var windowHeight = $(top.window).height();&#13;
            var scrollTop = $(top.window).scrollTop();&#13;
            var previewFrame = 0;&#13;
            var popupTop = 0;&#13;
            var popupLeft = 0;&#13;
            var topPosition = 0;&#13;
&#13;
            if (isPreview) {&#13;
                scrollTop = $(presenter.$ICPage).scrollTop();&#13;
                if (scrollTop &gt; 0)&#13;
                    previewFrame = $(presenter.$ICPage).parent().parent().parent().offset().top - $(".gwt-DialogBox").offset().top;&#13;
                windowHeight = ($(presenter.$ICPage).parent().parent().parent().height());&#13;
                presentationPosition.top = 0;&#13;
            }&#13;
&#13;
            if (isPopup) {&#13;
                scrollTop = $(presenter.$ICPage).scrollTop();&#13;
                popupTop =  presentationPosition.top;&#13;
                if ($(top.window).scrollTop() &gt; 0) presentationPosition.top = 0;&#13;
            }&#13;
&#13;
            var visibleArea = presenter.estimateVisibleArea(presentationPosition.top, presentationHeight, scrollTop, windowHeight);&#13;
            var availableHeight = visibleArea.bottom - visibleArea.top;&#13;
&#13;
            if (dialogHeight &gt;= availableHeight) {&#13;
                dialogHeight = presenter.calculateReducedDialogHeight($dialog, availableHeight);&#13;
                $dialog.css({&#13;
                    height: dialogHeight + 'px'&#13;
                });&#13;
            }&#13;
&#13;
            function getAndroidVersion(ua) {&#13;
                var ua = ua || navigator.userAgent;&#13;
                var match = ua.match(/Android\s([0-9\.]*)/);&#13;
                return match ? match[1] : false;&#13;
            };&#13;
&#13;
            if(parseFloat(getAndroidVersion())=='4.1'){&#13;
                if (window !== window.top) {&#13;
                    var ancestorData;&#13;
                    for (i=0; i&lt;presenter.ancestorsData.length; i++)&#13;
                    {&#13;
                        ancestorData = presenter.ancestorsData[i];&#13;
                        $(ancestorData.wnd).scrollTop(ancestorData.offset);&#13;
                    }&#13;
                    presenter.ancestorsData = undefined;&#13;
                }&#13;
            }&#13;
&#13;
            if (isPopup || isPreview) {&#13;
                popupLeft = presentationPosition.left;&#13;
                topPosition = parseInt((availableHeight - dialogHeight) / 2, 10);&#13;
            }&#13;
            else {&#13;
                topPosition = parseInt(( windowHeight - dialogHeight) / 2, 10) ;&#13;
            }&#13;
&#13;
            var presentationHorizontalOffset = parseInt((presentationWidth - dialogWidth) / 2, 10);&#13;
            var leftPosition = presentationPosition.left + presentationHorizontalOffset;&#13;
&#13;
            // adjust top position if Player was embedded in iframe (i.e. EverTeach)&#13;
            if (window !== window.top) {&#13;
                var iframe = window.parent.document.getElementsByTagName('iframe');&#13;
                var iframeDialogHeight = parseInt($dialog.height(), 10);&#13;
                iframeDialogHeight += DOMOperationsUtils.calculateOuterDistances(DOMOperationsUtils.getOuterDimensions($dialog)).vertical;&#13;
&#13;
                //topPosition -= scrollTop;&#13;
&#13;
                if (topPosition &lt; 0) {&#13;
                    topPosition = 0;&#13;
                } else if (topPosition &gt; $(window).height() - iframeDialogHeight) {&#13;
                    topPosition = $(window).height() - iframeDialogHeight;&#13;
                }&#13;
            }&#13;
&#13;
&#13;
            if ($(window).scrollTop() &gt; popupTop &amp;&amp; isPopup) {&#13;
                topPosition += ($(window).scrollTop() - popupTop);&#13;
            }&#13;
&#13;
            $dialog.css({&#13;
                left: (leftPosition - popupLeft) + 'px',&#13;
                top: (topPosition + scrollTop + previewFrame) + 'px',&#13;
                'font-size': '18px',&#13;
                'font-family': 'Trebuchet MS, Tahoma, Verdana, Arial, sans-serif'&#13;
            });&#13;
&#13;
            $dialog.find('.ui-dialog-content').css({&#13;
                color: 'black'&#13;
            });&#13;
&#13;
            if(isPopup || isPreview) {&#13;
                // For Preview and Popup dialog is moved to appropriate page&#13;
                var $overlay = $(".ui-widget-overlay");&#13;
                $(presenter.$view.closest(".ui-widget-overlay")).remove();&#13;
                if (isPreview) {&#13;
                    $(".ic_page_panel").children(".ic_page").children().last().after($overlay);&#13;
                }&#13;
                else {&#13;
                    $dialog.before($overlay);&#13;
                }&#13;
            }&#13;
&#13;
            // due to the inability to close the dialog, when any video is under close button&#13;
            var videos = presenter.$ICPage.find('video');&#13;
            $.each(videos, function(){&#13;
                $(this).removeAttr('controls');&#13;
            });&#13;
        }catch(e){}&#13;
    };&#13;
&#13;
    presenter.closeDialogEventHandler = function() {&#13;
        // due to the inability to close the dialog, when any video is under close button&#13;
        try{&#13;
            var videos = presenter.$ICPage.find('video');&#13;
            $.each(videos, function(){&#13;
                $(this).attr('controls', 'controls');&#13;
            });&#13;
            presenter.dialog.css("maxHeight", "none");&#13;
&#13;
            if (presenter.ancestorsData !== undefined) {&#13;
                var ancestorData;&#13;
                for (i=0; i&lt;presenter.ancestorsData.length; i++)&#13;
                {&#13;
                    ancestorData = presenter.ancestorsData[i];&#13;
                    $(ancestorData.wnd).scrollTop(ancestorData.offset);&#13;
                }&#13;
                presenter.ancestorsData = undefined;&#13;
            }&#13;
        }catch(e){}&#13;
    };&#13;
&#13;
    presenter.show = function(id) {&#13;
        // due to event propagation player issue, it's necessary to make sure page with glossary still exist.&#13;
        var pageClass = "." + $(presenter.$ICPage).attr('class').split(' ').join('.');&#13;
        if (!$(pageClass).length &gt; 0) {&#13;
            return&#13;
        }&#13;
&#13;
        var dialog = presenter.dialog;&#13;
        var dialogData = presenter.getDialogDataById(presenter.model["List of words"], id);&#13;
        // don't display dialog if glossary hasn't needed ID&#13;
        if (!dialogData) return;&#13;
&#13;
        dialog.dialog("option", "title", dialogData.title);&#13;
        presenter.addDescription(dialog, dialogData.description);&#13;
        dialog.dialog("open");&#13;
        presenter.updateLaTeX(dialogData.description);&#13;
    };&#13;
&#13;
    presenter.catchScroll = function() {&#13;
        try{&#13;
            if (window.parent != window &amp;&amp; presenter.ancestorsData === undefined) {&#13;
                var current_window = window;&#13;
                presenter.ancestorsData = [];&#13;
                while (current_window != current_window.parent) {&#13;
                    presenter.ancestorsData.push({&#13;
                        wnd: current_window.parent,&#13;
                        offset: $(current_window.parent).scrollTop()&#13;
                    });&#13;
                    current_window = current_window.parent;&#13;
                }&#13;
            }&#13;
        }catch(e){}&#13;
    }&#13;
&#13;
    presenter.initializeView = function(view, model) {&#13;
        presenter.model = model;&#13;
        presenter.$view = $(view);&#13;
        presenter.findICPage();&#13;
        presenter.title = "";&#13;
        presenter.description = "";&#13;
&#13;
&#13;
        var dialog = presenter.$view.find(".modal-dialog");&#13;
        dialog.dialog({&#13;
            modal: true,&#13;
            autoOpen: false,&#13;
            draggable: false,&#13;
            width: model.Width,&#13;
            minHeight: 'auto',&#13;
            resizable: false,&#13;
            focus: presenter.catchScroll,&#13;
            open: presenter.openDialogEventHandler,&#13;
            close: presenter.closeDialogEventHandler&#13;
        });&#13;
&#13;
        var $popup = $('#icplayer').parent().find('.ic_popup');&#13;
        var dialogWidget = dialog.dialog("widget");&#13;
        var outsideView = presenter.$view;&#13;
        outsideView.css({'display': 'block',&#13;
                        'width': 0,&#13;
                        'height': 0,&#13;
                        'position': 'static'&#13;
                        });&#13;
        outsideView.append(dialogWidget);&#13;
        if ($popup.is('.ic_popup') &amp;&amp; presenter.$view.parent().is('.ic_popup_page')) {&#13;
            // Dialog must be placed in popup page&#13;
            $popup.children().last().after(outsideView);&#13;
        }&#13;
        else if ($(".gwt-DialogBox").is('.gwt-DialogBox') ) {&#13;
            // Dialog must be placed in preview page&#13;
            $(".ic_page_panel").children(".ic_page").children().last().after(outsideView);&#13;
        }&#13;
        else {&#13;
            // Dialog must be placed outside Player so that position:absolute wouldn't be suppressed by Player's overflow:hidden&#13;
            $('#icplayer').after(outsideView);&#13;
        }&#13;
        presenter.dialog = dialog;&#13;
        presenter.$view = outsideView;&#13;
    };&#13;
&#13;
    presenter.calculateReducedDialogHeight = function($dialog, pageHeight) {&#13;
        var titleHeight = $dialog.find(".ui-dialog-titlebar").outerHeight();&#13;
        var padding = parseInt($dialog.css("padding-top")) + parseInt($dialog.css("padding-bottom"));&#13;
&#13;
        var $content = $dialog.find('.ui-dialog-content');&#13;
        var contentPadding = parseInt($content.css('paddingTop'), 10) + parseInt($content.css('paddingBottom'), 10);&#13;
        var contentBorder = parseInt($content.css('borderTopWidth'), 10) + parseInt($content.css('borderBottomWidth'), 10);&#13;
        var contentMargin = parseInt($content.css('marginTop'), 10) + parseInt($content.css('marginBottom'), 10);&#13;
&#13;
        return pageHeight - padding - titleHeight - contentPadding - contentBorder - contentMargin;&#13;
    };&#13;
&#13;
    presenter.estimateVisibleArea = function(presentationTop, presentationHeight, scrollTop, windowHeight) {&#13;
        var borders = {&#13;
            top: presentationTop,&#13;
            bottom: presentationTop + presentationHeight&#13;
        };&#13;
&#13;
        if (presentationTop &lt; scrollTop) {&#13;
            borders.top = scrollTop;&#13;
        }&#13;
&#13;
        if (presentationTop + presentationHeight &gt; scrollTop + windowHeight) {&#13;
            borders.bottom = scrollTop + windowHeight;&#13;
        }&#13;
&#13;
        return borders;&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        var validated = presenter.validateModel(model);&#13;
        if(validated) {&#13;
            var dialog = $(view).find(".modal-dialog");&#13;
            var visible = ModelValidationUtils.validateBoolean(model["Visible"]);&#13;
            var title = model["List of words"][0]["Text"];&#13;
            var description = model["List of words"][0]["Description"];&#13;
&#13;
            presenter.addTitle(dialog, title);&#13;
            presenter.addDescription(dialog, description);&#13;
&#13;
            dialog.dialog({&#13;
                modal: false,&#13;
                autoOpen: false,&#13;
                zIndex : 0,&#13;
                stack: false,&#13;
                draggable: false,&#13;
                width: model.Width,&#13;
                resizable: false&#13;
            });&#13;
&#13;
            var preview = dialog.dialog("widget");&#13;
            presenter.setDisplay(preview, visible);&#13;
&#13;
            $(view).append(preview);&#13;
        } else {&#13;
            $(view).html(presenter.ERROR_MESSAGES["UNIQUE_ID"]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showCommand = function (params) {&#13;
        presenter.show(params[0]);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.showCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
        presenter.show(eventData.word);&#13;
    };&#13;
&#13;
    function areTwoFingersOnTheScreen(event) {&#13;
        return !!(event.originalEvent.touches.length &gt;= 2);&#13;
    }&#13;
&#13;
    function isTap(event) {&#13;
        return presenter.lastReceivedEvent == "touchstart"&#13;
            &amp;&amp; event.type == "touchend"&#13;
            &amp;&amp; !presenter.isPinchZoom;&#13;
    }&#13;
&#13;
    presenter.shouldCloseDialog = function(event) {&#13;
        if(event.type == "click" || isTap(event)) return true;&#13;
&#13;
        if(areTwoFingersOnTheScreen(event)) {&#13;
            this.isPinchZoom = true;&#13;
            return false;&#13;
        }&#13;
&#13;
        this.isPinchZoom = false;&#13;
        this.lastReceivedEvent = event.type;&#13;
        return false;&#13;
    };&#13;
&#13;
    function bindEvents() {&#13;
        $(".ui-widget-overlay").live("click touchstart touchend touchmove", function(event){&#13;
            if(presenter.shouldCloseDialog(event)){&#13;
                presenter.dialog.dialog("close");&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.initializeView(view, model);&#13;
        eventBus = playerController.getEventBus();&#13;
        eventBus.addEventListener('Definition', this);&#13;
        bindEvents();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Hangman" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Phrases" nameLabel="Hangman_property_phrases" type="list">
			<property isLocalized="true" name="Letters" nameLabel="Hangman_property_letters" type="string"/>
			<property isLocalized="true" name="Phrase" nameLabel="Hangman_property_phrase" type="string"/>
		</property>
		<property name="Possible mistakes" nameLabel="Hangman_property_possible_mistakes" type="string"/>
        <property displayName="Is Not Activity" name="isNotActivity" nameLabel="Hangman_property_is_not_activity" type="boolean"/>
        <property displayName="Keyboard Letters Order" name="Keyboard Letters Order" nameLabel="Hangman_property_keyboard_letters_order" type="string"/>
	</model>
<css>.hangman-wrapper {&#13;
    height: 100%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hangman-letter {&#13;
    float: left;&#13;
    margin: 3px;&#13;
    padding: 3px;&#13;
    border: 1px solid black;&#13;
    border-radius: 3px;&#13;
    width: 20px;&#13;
    height: 20px;&#13;
}&#13;
&#13;
.hangman-letters,&#13;
.hangman-phrase {&#13;
    border: 2px solid black;&#13;
    border-radius: 5px;&#13;
    width: 97%;&#13;
    height: 48%;&#13;
}&#13;
&#13;
.hangman-letters {&#13;
    margin-bottom: 5px;&#13;
}&#13;
&#13;
.hangman-phrase-word {&#13;
    margin-left: 5px;&#13;
    margin-right: 10px;&#13;
    float: left;&#13;
}&#13;
&#13;
.hangman-phrase-word .hangman-letter {&#13;
    border: none;&#13;
    border-radius: 0;&#13;
}&#13;
&#13;
.hangman-phrase-word .hangman-letter.empty {&#13;
    border-bottom: 3px solid black;&#13;
}&#13;
&#13;
.hangman-letters .hangman-letter.selected {&#13;
    background-color: #dcdcdc;&#13;
}&#13;
&#13;
.hangman-letters .hangman-letter.correct {&#13;
    background-color: #adff2f;&#13;
}&#13;
&#13;
.hangman-letters .hangman-letter.incorrect {&#13;
    background-color: red;&#13;
}&#13;
&#13;
.hangman-letters .hangman-letter.show-answers {&#13;
    background-color: blue;&#13;
}&#13;
</css><view>&lt;div class="hangman-wrapper"&gt;&#13;
    &lt;div class="hangman-letters"&gt;&lt;/div&gt;&#13;
    &lt;div class="hangman-phrase"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="hangman-wrapper"&gt;&#13;
    &lt;div class="hangman-letters"&gt;&lt;/div&gt;&#13;
    &lt;div class="hangman-phrase"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonHangman_create() {&#13;
    var presenter = function () {};&#13;
    var playerController = null;&#13;
    var eventBus;&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
        eventBus = playerController.getEventBus();&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.drawElements = function (phraseNumber) {&#13;
        var lettersInOrder = presenter.getLettersInOrder(presenter.configuration.phrases[phraseNumber].letters);&#13;
        presenter.configuration.lettersInCustomOrder = lettersInOrder;&#13;
        presenter.drawLetters(lettersInOrder);&#13;
        presenter.drawPhrase(presenter.$view.find('.hangman-phrase'), presenter.configuration.phrases[phraseNumber].phrase);&#13;
    };&#13;
&#13;
    presenter.getLettersInOrder = function (letters) {&#13;
        if(presenter.configuration.isCustomKeyboardLettersOrderSet) {&#13;
            return presenter.changeLettersOrder(letters);&#13;
        }&#13;
&#13;
        return letters;&#13;
    };&#13;
&#13;
    presenter.getLettersFromKeyboardOrder = function (letters) {&#13;
        var lettersFromKeyboardOrder = [];&#13;
&#13;
        presenter.configuration.keyboardLettersOrder.map(function (element) {&#13;
            if (letters.indexOf(element) != -1) {&#13;
                this.push(element);&#13;
            }&#13;
        }, lettersFromKeyboardOrder);&#13;
&#13;
        return lettersFromKeyboardOrder&#13;
    };&#13;
&#13;
    presenter.getRestOfLetters = function (orderedLetters, letters) {&#13;
        return orderedLetters.concat(letters.filter(function (element) {&#13;
            return this.indexOf(element) == -1;&#13;
        }, orderedLetters));&#13;
    };&#13;
&#13;
    presenter.changeLettersOrder = function (letters) {&#13;
        var orderedLetters = presenter.getLettersFromKeyboardOrder(letters);&#13;
        return presenter.getRestOfLetters(orderedLetters, letters);&#13;
    };&#13;
&#13;
    presenter.drawElementsAndAttachMouseHandlers = function (phraseNumber, isPreview) {&#13;
        presenter.drawElements(phraseNumber);&#13;
&#13;
        if (isPreview) {&#13;
            presenter.showCorrect();&#13;
        } else {&#13;
            presenter.handleMouseActions();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.assignVariablesToPresenter = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.currentPhrase = 0;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.isVisibleByDefault = presenter.isVisible;&#13;
        presenter.$phraseContainer = $(view).find('.hangman-phrase');&#13;
        presenter.$lettersContainer = $(view).find('.hangman-letters');&#13;
        presenter.isErrorCheckingMode = false;&#13;
        presenter.isActivity = !(ModelValidationUtils.validateBoolean(model['isNotActivity']));&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeKeyboardLettersOrder(model);&#13;
    };&#13;
&#13;
    presenter.upgradeKeyboardLettersOrder = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model["Keyboard Letters Order"] == undefined) {&#13;
            upgradedModel["Keyboard Letters Order"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.deleteCommands = function () {&#13;
        delete presenter.setState;&#13;
        delete presenter.getState;&#13;
        delete presenter.getScore;&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.reset;&#13;
        delete presenter.nextPhrase;&#13;
        delete presenter.previousPhrase;&#13;
        delete presenter.isAllOk;&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.configuration = presenter.sanitizeModel(upgradedModel);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            presenter.deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.assignVariablesToPresenter(view, model);&#13;
        presenter.drawElementsAndAttachMouseHandlers(0, isPreview);&#13;
&#13;
        presenter.addMarkedLetter(isPreview);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'L_01': "Letters definition incorrect!",&#13;
        'W_01': "Words definition cannot be empty!",&#13;
        'W_02': "Words definition consist letters that are not specified!",&#13;
        'W_03': "You cannot type more than one exclamation mark next to each other!",&#13;
        'W_04': "Words definition cannot contain only exclemation marks!",&#13;
        'P_01': "At least one phrase must be specified!",&#13;
        'T_01': "Number possible mistakes incorrect!",&#13;
        'KLO_01': "Letters in property Keyboard Letters Order incorrect.",&#13;
        'KLO_02': "Letters cant duplicate in Keyboard Letters Order property."&#13;
    };&#13;
&#13;
    presenter.DEFAULT_LETTERS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',&#13;
        'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    presenter.isArrayWithLettersValid = function (arrayWithLetters) {&#13;
        for (var i = 0, length = arrayWithLetters.length; i &lt; length; i++) {&#13;
            var letter = arrayWithLetters[i].toUpperCase().trim();&#13;
            if (letter) {&#13;
                if (letter.length &gt; 1) {&#13;
                    return false;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    /**&#13;
     Converts string representation of list to array. Additionally trims elements, upper cases them and&#13;
     removes duplicated entries.&#13;
     @method convertStringArray&#13;
     @param {String} letters string containing comma separated, single character elements (whitespaces allowed)&#13;
     @return {Array} converted and sorted (ascending) array&#13;
     */&#13;
    presenter.convertStringArray = function (letters) {&#13;
        if (ModelValidationUtils.isStringEmpty(letters)) return presenter.DEFAULT_LETTERS;&#13;
&#13;
        var list = [];&#13;
        var lettersArray = letters.split(',');&#13;
        for (var i = 0, length = lettersArray.length; i &lt; length; i++) {&#13;
            var letter = lettersArray[i].toUpperCase().trim();&#13;
            if (letter &amp;&amp; list.indexOf(letter) === -1) {&#13;
                list.push(letter);&#13;
            }&#13;
        }&#13;
&#13;
        return list.sort();&#13;
    };&#13;
&#13;
    presenter.wordsMatchLetters = function(letters, words) {&#13;
        var wordsArray = words.split(' ');&#13;
&#13;
        for (var i = 0; i &lt; wordsArray.length; i++) {&#13;
            var word = wordsArray[i];&#13;
&#13;
            for (var j = 0; j &lt; word.length; j++) {&#13;
                if (letters.indexOf(word[j].toUpperCase()) === -1 &amp;&amp; word[j] != '!')  return false;&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.isCorrectCountOfEcxlamationMarks = function(letters, words) {&#13;
        var wordsArray = words.split(' ');&#13;
&#13;
        for (var i = 0; i &lt; wordsArray.length; i++) {&#13;
            var word = wordsArray[i];&#13;
&#13;
            for (var j = 0; j &lt; word.length; j++) {&#13;
                if (word[j] == '!' &amp;&amp; word[j+1] == '!')  return false;&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.isOnlyExclamationMark = function(letters, words) {&#13;
        var wordsArray = words.split(' ');&#13;
&#13;
        for (var i = 0; i &lt; wordsArray.length; i++) {&#13;
            var word = wordsArray[i];&#13;
            if(word == '!') return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.sanitizePhrase = function (phrase) {&#13;
        if (ModelValidationUtils.isStringEmpty(phrase.trim())) return returnErrorObject('W_01');&#13;
&#13;
        var phraseArray = [];&#13;
        var splittedPhrase = phrase.trim().split(' ');&#13;
&#13;
        for (var i = 0; i &lt; splittedPhrase.length; i++) {&#13;
            if (splittedPhrase[i]) {&#13;
                phraseArray.push(splittedPhrase[i].toUpperCase());&#13;
            }&#13;
        }&#13;
&#13;
        return { isError: false, phrase: phraseArray };&#13;
    };&#13;
&#13;
    presenter.sanitizePhrases = function(phrases) {&#13;
        if (ModelValidationUtils.isArrayEmpty(phrases)) {&#13;
            return returnErrorObject('P_01');&#13;
        }&#13;
&#13;
        var sanitisedPhrases = [];&#13;
&#13;
        for (var i = 0; i &lt; phrases.length; i++) {&#13;
            if (!presenter.isArrayWithLettersValid(phrases[i].Letters.split(","))) return returnErrorObject('L_01');&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(phrases[i].Phrase)) return returnErrorObject('W_01');&#13;
&#13;
            var letters = presenter.convertStringArray(phrases[i].Letters);&#13;
            if (!presenter.wordsMatchLetters(letters, phrases[i].Phrase)) return returnErrorObject('W_02');&#13;
            if (!presenter.isCorrectCountOfEcxlamationMarks(letters, phrases[i].Phrase)) return returnErrorObject('W_03');&#13;
            if (!presenter.isOnlyExclamationMark(letters, phrases[i].Phrase)) return returnErrorObject('W_04');&#13;
&#13;
            var sanitisedPhrase = presenter.sanitizePhrase(phrases[i].Phrase);&#13;
            if (sanitisedPhrase.isError) return sanitisedPhrase;&#13;
&#13;
            sanitisedPhrases.push({&#13;
                letters: letters,&#13;
                phrase: sanitisedPhrase.phrase,&#13;
                errorCount: 0,&#13;
                selectedLetters: []&#13;
            });&#13;
        }&#13;
&#13;
        return {isError: false, phrases: sanitisedPhrases };&#13;
    };&#13;
&#13;
    presenter.validateTrialsCount = function (model) {&#13;
        var validatedInt = ModelValidationUtils.validatePositiveInteger(model['Possible mistakes']);&#13;
        if (!validatedInt.isValid) {&#13;
            return { isValid: false, errorCode: "T_01", isError: true};&#13;
        }&#13;
&#13;
        return validatedInt;&#13;
    };&#13;
&#13;
    presenter.sanitizeModel = function (model) {&#13;
        var sanitisedPhrases = presenter.sanitizePhrases(model.Phrases);&#13;
&#13;
        if (sanitisedPhrases.isError) return sanitisedPhrases;&#13;
&#13;
        var validatedTrialsCount = presenter.validateTrialsCount(model);&#13;
        if (!validatedTrialsCount.isValid) return validatedTrialsCount;&#13;
&#13;
        var validatedKeyboardLettersOrder = presenter.validateKeyboardLettersOrder(model);&#13;
        if (validatedKeyboardLettersOrder.isError) {&#13;
            return validatedKeyboardLettersOrder;&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            phrases: sanitisedPhrases.phrases,&#13;
            trialsCount: validatedTrialsCount.value,&#13;
            addonID: model.ID,&#13;
            keyboardLettersOrder: validatedKeyboardLettersOrder.value,&#13;
            isCustomKeyboardLettersOrderSet: validatedKeyboardLettersOrder.isCustomKeyboardLettersOrderSet,&#13;
            lettersInCustomOrder: []&#13;
        };&#13;
    };&#13;
&#13;
    function isNotDuplicated(value) {&#13;
        return (this.filter(function (currentValue) {&#13;
                return (value == currentValue);&#13;
            }).length == 1&#13;
        );&#13;
    }&#13;
&#13;
    presenter.validateKeyboardLettersOrder = function (model) {&#13;
        var keyboardLettersOrder = model["Keyboard Letters Order"];&#13;
        if (ModelValidationUtils.isStringEmpty(keyboardLettersOrder.trim())) {&#13;
            return {&#13;
                isError: false,&#13;
                value: [],&#13;
                isCustomKeyboardLettersOrderSet: false&#13;
            };&#13;
        }&#13;
&#13;
        var preparedData = keyboardLettersOrder.split(",").map(function (element) {&#13;
            return element.trim().toUpperCase();&#13;
        });&#13;
&#13;
        if (!presenter.isArrayWithLettersValid(preparedData)) {&#13;
            return returnErrorObject("KLO_01");&#13;
        }&#13;
&#13;
        if (!preparedData.every(isNotDuplicated, preparedData)) {&#13;
            return returnErrorObject("KLO_02");&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            value: preparedData,&#13;
            isCustomKeyboardLettersOrderSet: true&#13;
        };&#13;
    };&#13;
&#13;
    function generateLetter() {&#13;
        var $element = $(document.createElement('div'));&#13;
        $element.addClass('hangman-letter');&#13;
        $element.text(' ');&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function generateLetterWithText(letter) {&#13;
        var $element = generateLetter();&#13;
        $element.text(letter);&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    presenter.drawLetters = function (letters) {&#13;
        for (var i = 0; i &lt; letters.length; i++) {&#13;
            presenter.$lettersContainer.append(generateLetterWithText(letters[i]));&#13;
        }&#13;
    };&#13;
&#13;
    function generatePhraseWord(word) {&#13;
        var $element = $(document.createElement('div'));&#13;
        $element.addClass('hangman-phrase-word');&#13;
&#13;
        for (var j = 0; j &lt; word.length; j++) {&#13;
            var $letter;&#13;
            if(word[j].indexOf('!') &gt; -1){&#13;
                var $elementLetter = $(document.createElement('div'));&#13;
                $elementLetter.addClass('hangman-letter');&#13;
                $elementLetter.text('!'+word[j+1]);&#13;
                $element.append($elementLetter);&#13;
            }else{&#13;
                $letter = generateLetter();&#13;
                $letter.addClass('empty');&#13;
&#13;
                $element.append($letter);&#13;
            }&#13;
        }&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    presenter.drawPhrase = function ($container, phrase) {&#13;
        for (var i = 0; i &lt; phrase.length; i++) {&#13;
            $container.append(generatePhraseWord(phrase[i]));&#13;
        }&#13;
    };&#13;
&#13;
    presenter.disableRemainingLetters = function () {&#13;
        presenter.$lettersContainer.find('.hangman-letter').each(function (_, element) {&#13;
            if (!$(element).hasClass('selected')) {&#13;
                $(element).unbind('click');&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.unbindAttachedHandlers = function ($element) {&#13;
        $element.unbind('click');&#13;
        if (presenter.$phraseContainer.find('.hangman-letter.empty').length === 0) {&#13;
            presenter.disableRemainingLetters();&#13;
        }&#13;
    };&#13;
    presenter.onLetterSelectedAction = function (letter, currentPhrase, sendEventAndCountError) {&#13;
        var findResult = presenter.findLetterInPhrase(letter, currentPhrase.phrase);&#13;
        var selectionEventData;&#13;
&#13;
        if (findResult.length === 0) {&#13;
            selectionEventData = presenter.createLetterSelectedEventData(letter, false);&#13;
&#13;
            if (sendEventAndCountError) {&#13;
                currentPhrase.errorCount++;&#13;
            }&#13;
            if (currentPhrase.errorCount &gt; presenter.configuration.trialsCount) {&#13;
                presenter.disableRemainingLetters();&#13;
            }&#13;
        } else {&#13;
            presenter.fillPhraseWithLetters(letter, findResult);&#13;
            selectionEventData = presenter.createLetterSelectedEventData(letter, true);&#13;
        }&#13;
&#13;
        if (sendEventAndCountError) {&#13;
            presenter.sendEventData(selectionEventData);&#13;
            if (presenter.isAllOK() &amp;&amp; presenter.isActivity) {&#13;
                presenter.sendAllOKEvent();&#13;
            }&#13;
        }&#13;
        if (currentPhrase.errorCount === presenter.configuration.trialsCount &amp;&amp; presenter.isActivity) {&#13;
            presenter.sendEventData(presenter.createEndOfTrialsEventData());&#13;
        }&#13;
        presenter.unbindAttachedHandlers($(this));&#13;
    };&#13;
&#13;
    presenter.letterClickHandler = function (e) {&#13;
        e.stopPropagation();&#13;
        var sendEventAndCountError = !$(this).hasClass('selected');&#13;
        $(this).addClass('selected');&#13;
        var letter = $(this).text();&#13;
&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
        presenter.addLetterSelectionToPhrase(currentPhrase, letter);&#13;
        presenter.onLetterSelectedAction(letter, currentPhrase, sendEventAndCountError);&#13;
    };&#13;
&#13;
    presenter.handleMouseActions = function () {&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
&#13;
        presenter.$lettersContainer.find('.hangman-letter').each(function (_, element) {&#13;
            var letter = $(element).text();&#13;
&#13;
            if (!presenter.isLetterSelected(currentPhrase, letter)) {&#13;
                $(element).click(presenter.letterClickHandler);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.findLetterInPhrase = function (letter, phrase) {&#13;
        var occurrence = [];&#13;
&#13;
        for (var i = 0; i &lt; phrase.length; i++) {&#13;
            for (var j = 0; j &lt; phrase[i].length; j++) {&#13;
                if (phrase[i][j] === letter) {&#13;
                    occurrence.push({ word: i, index: j});&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return occurrence;&#13;
    };&#13;
&#13;
    presenter.fillPhraseWithLetters = function (letter, letterOccurrence) {&#13;
        var phrase = presenter.configuration.phrases[presenter.currentPhrase].phrase;&#13;
&#13;
        for (var i = 0; i &lt; letterOccurrence.length; i++) {&#13;
            var index = presenter.calculateLetterElementIndex(phrase, letterOccurrence[i]);&#13;
&#13;
            var $letterElement = presenter.$phraseContainer.find('.hangman-letter:eq(' + index + ')');&#13;
            $letterElement.removeClass('empty');&#13;
            $letterElement.text(letter);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.calculateLetterElementIndex = function (phrase, occurrence) {&#13;
        var index = 0;&#13;
&#13;
        for (var i = 0; i &lt; occurrence.word; i++) {&#13;
            index += phrase[i].length;&#13;
        }&#13;
&#13;
        return index + occurrence.index;&#13;
    };&#13;
&#13;
    presenter.getIndexOfLetterInPhrase = function (phrase, letter) {&#13;
        var index = phrase.letters.indexOf(letter);&#13;
&#13;
        if (presenter.configuration.isCustomKeyboardLettersOrderSet) {&#13;
            index = presenter.configuration.lettersInCustomOrder.indexOf(letter);&#13;
        }&#13;
&#13;
        return index;&#13;
    };&#13;
&#13;
    presenter.addLetterSelectionToPhrase = function (phrase, letter) {&#13;
        var index = presenter.getIndexOfLetterInPhrase(phrase, letter);&#13;
&#13;
        phrase.selectedLetters.push(index);&#13;
    };&#13;
&#13;
    presenter.isLetterSelected = function (phrase, letter) {&#13;
        var index = presenter.getIndexOfLetterInPhrase(phrase, letter);&#13;
&#13;
        return phrase.selectedLetters.indexOf(index) !== -1;&#13;
    };&#13;
&#13;
    presenter.showCorrect = function () {&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
        var neededLetters = presenter.getNeededLetters(currentPhrase.phrase);&#13;
        var $letter;&#13;
        for (var i = 0; i &lt; neededLetters.length; i++) {&#13;
            if(neededLetters[i].indexOf('!') &gt; -1){&#13;
                $letter = $('&lt;div&gt;'+neededLetters[i]+'&lt;/div&gt;');&#13;
                $letter.addClass('hangman-letter');&#13;
            }else{&#13;
                $letter = presenter.findLetterElement(neededLetters[i]);&#13;
            }&#13;
&#13;
            if (!presenter.isLetterSelected(currentPhrase, neededLetters[i])) {&#13;
                $letter.addClass('selected');&#13;
                if (presenter.isErrorCheckingMode) {&#13;
                    if(!$letter.hasClass('hangman-tip')){&#13;
                        $letter.addClass('incorrect');&#13;
                    }&#13;
                }&#13;
                presenter.addLetterSelectionToPhrase(currentPhrase, $letter.text());&#13;
                presenter.onLetterSelectedAction(neededLetters[i], currentPhrase, false);&#13;
            } else if (presenter.isErrorCheckingMode) {&#13;
                if(!$letter.hasClass('hangman-tip')){&#13;
                    $letter.addClass('correct');&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.isErrorCheckingMode) {&#13;
            presenter.$lettersContainer.find('.hangman-letter.selected:not(.correct):not(.incorrect)').each(function (_, element) {&#13;
                if(!$(element).hasClass('hangman-tip')){&#13;
                    $(element).addClass('incorrect');&#13;
                }&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showCorrectInSetShowErrorsMode = function () {&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
        var neededLetters = presenter.getNeededLetters(currentPhrase.phrase);&#13;
        var $letter;&#13;
        for (var i = 0; i &lt; neededLetters.length; i++) {&#13;
            if(neededLetters[i].indexOf('!') &gt; -1){&#13;
                $letter = $('&lt;div&gt;'+neededLetters[i]+'&lt;/div&gt;');&#13;
                $letter.addClass('hangman-letter');&#13;
            }else{&#13;
                $letter = presenter.findLetterElement(neededLetters[i]);&#13;
            }&#13;
&#13;
            if (presenter.isLetterSelected(currentPhrase, neededLetters[i])) {&#13;
                if(!$letter.hasClass('hangman-tip')){&#13;
                    $letter.addClass('correct');&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.$lettersContainer.find('.hangman-letter.selected:not(.correct):not(.incorrect)').each(function (_, element) {&#13;
            if(!$(element).hasClass('hangman-tip')){&#13;
                $(element).addClass('incorrect');&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.findLetterElement = function (letter) {&#13;
        var $letters = presenter.$lettersContainer.find('.hangman-letter');&#13;
&#13;
        for (var i = 0; i &lt; $letters.length; i++) {&#13;
            if ($($letters[i]).text() === letter)  return $($letters[i]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getNeededLetters = function (phrase) {&#13;
        var letters = [];&#13;
        for (var i = 0; i &lt; phrase.length; i++) {&#13;
            for (var j = 0; j &lt; phrase[i].length; j++) {&#13;
                if (letters.indexOf(phrase[i][j]) === -1) {&#13;
                    if(phrase[i][j] == '!'){&#13;
                        letters.push('!' + phrase[i][j+1]);&#13;
                    }else{&#13;
                        letters.push(phrase[i][j]);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return letters;&#13;
    };&#13;
&#13;
    presenter.nextPhrase = function () {&#13;
        presenter.switchPhrase(presenter.currentPhrase + 2);&#13;
    };&#13;
&#13;
    presenter.previousPhrase = function () {&#13;
        presenter.switchPhrase(presenter.currentPhrase);&#13;
    };&#13;
&#13;
    presenter.switchPhraseCommand = function (params) {&#13;
        var phraseNumber = parseInt(params[0], 10);&#13;
&#13;
        if (isNaN(phraseNumber) || phraseNumber &lt;= 0 || phraseNumber &gt; presenter.configuration.phrases.length) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.removeChildrenElements(presenter.$phraseContainer);&#13;
        presenter.removeChildrenElements(presenter.$lettersContainer);&#13;
&#13;
        presenter.currentPhrase = phraseNumber - 1;&#13;
        presenter.drawElementsAndAttachMouseHandlers(phraseNumber - 1, false);&#13;
        presenter.applySelection();&#13;
&#13;
        presenter.addMarkedLetter(false);&#13;
    };&#13;
&#13;
    presenter.switchPhrase = function (phraseNumber) {&#13;
        presenter.switchPhraseCommand([phraseNumber]);&#13;
    };&#13;
&#13;
    presenter.applySelection = function () {&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
&#13;
        for (var i = 0; i &lt; currentPhrase.selectedLetters.length; i++) {&#13;
            var $letter = presenter.$lettersContainer.find('.hangman-letter:eq(' + currentPhrase.selectedLetters[i] + ')');&#13;
            $letter.addClass('selected');&#13;
            presenter.onLetterSelectedAction($letter.text(), currentPhrase, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.isErrorCheckingMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'showCorrect': presenter.showCorrect,&#13;
            'nextPhrase': presenter.nextPhrase,&#13;
            'previousPhrase': presenter.previousPhrase,&#13;
            'switchPhrase': presenter.switchPhraseCommand,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isAllOK': presenter.isAllOK&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.removeChildrenElements = function ($element) {&#13;
        $element.children().each(function (_, element) {&#13;
            $(element).remove();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        var phrases = presenter.configuration.phrases;&#13;
&#13;
        for (var i = 0; i &lt; phrases.length; i++) {&#13;
            phrases[i].selectedLetters = [];&#13;
            phrases[i].errorCount = 0;&#13;
        }&#13;
&#13;
        presenter.switchPhrase(1);&#13;
        presenter.isVisible = presenter.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
        presenter.addMarkedLetter(false);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            currentPhrase: presenter.currentPhrase,&#13;
            phrases: presenter.configuration.phrases&#13;
        });&#13;
    };&#13;
&#13;
    presenter.addMarkedLetter = function (isPreview) {&#13;
        presenter.$view.find('.hangman-letter:contains(!)').next().css('display', 'none');&#13;
        var exclamationLetters = [];&#13;
&#13;
        if(!isPreview){&#13;
            presenter.$view.find('.hangman-letter:contains(!)').each(function(_, element) {&#13;
                var text = $(this).text();&#13;
                var correctText = text.substring(1,2);&#13;
                exclamationLetters.push(correctText);&#13;
                $(element).text(correctText);&#13;
            });&#13;
&#13;
            for(var i = 0; i&lt; presenter.configuration.phrases[presenter.currentPhrase].letters.length; i++){&#13;
                var merge = presenter.configuration.phrases[presenter.currentPhrase].phrase.join(),&#13;
                    letter = presenter.configuration.phrases[presenter.currentPhrase].letters[i],&#13;
                    count = merge.split(letter).length - 1,&#13;
                    exclMerge = exclamationLetters.join(),&#13;
                    exclCount = exclMerge.split(letter).length - 1;&#13;
&#13;
                if(count == exclCount &amp;&amp; count &gt; 0 &amp;&amp; exclCount &gt; 0){&#13;
                    var $letter = presenter.$view.find('.hangman-letters').find('.hangman-letter:contains('+letter+')');&#13;
                    $letter.addClass('selected');&#13;
                    $letter.addClass('hangman-tip');&#13;
                    presenter.addLetterSelectionToPhrase(presenter.configuration.phrases[presenter.currentPhrase], $letter.text());&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function (stringifiedState) {&#13;
        var state = JSON.parse(stringifiedState);&#13;
        var phrases = presenter.configuration.phrases;&#13;
&#13;
        for (var i = 0; i &lt; phrases.length; i++) {&#13;
            phrases[i].selectedLetters = state.phrases[i].selectedLetters;&#13;
            phrases[i].errorCount = state.phrases[i].errorCount;&#13;
        }&#13;
&#13;
        presenter.switchPhrase(state.currentPhrase + 1);&#13;
&#13;
        presenter.addMarkedLetter(false)&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if(presenter.isActivity){&#13;
            return presenter.configuration.phrases.length;&#13;
        }else{&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isSelectionSufficient = function (neededLetters, selectedLetters) {&#13;
        if (selectedLetters.length &lt; neededLetters.length) return false;&#13;
&#13;
        var sortedNeededLetters = neededLetters.sort();&#13;
        var sortedSelectedLetters = selectedLetters.sort();&#13;
&#13;
        for (var i = 0; i &lt; sortedNeededLetters.length; i++) {&#13;
            if (sortedSelectedLetters.indexOf(sortedNeededLetters[i]) === -1) return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.getLettersIndexesForScoring = function (neededLetters, phrase) {&#13;
        var neededLettersIndexes = [];&#13;
&#13;
        if (presenter.configuration.isCustomKeyboardLettersOrderSet) {&#13;
            neededLetters.map(function (element) {&#13;
                var index = presenter.configuration.lettersInCustomOrder.indexOf(element);&#13;
                neededLettersIndexes.push(index);&#13;
            }, neededLettersIndexes);&#13;
&#13;
            return neededLettersIndexes&#13;
        } else {&#13;
&#13;
            for (var j = 0; j &lt; neededLetters.length; j++) {&#13;
                neededLettersIndexes.push(phrase.letters.indexOf(neededLetters[j]));&#13;
            }&#13;
&#13;
            return neededLettersIndexes;&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.getScoring = function (phrases) {&#13;
        var neededLetters = [], neededLettersIndexes = [];&#13;
        var score = 0, errors = 0;&#13;
&#13;
        for (var i = 0; i &lt; phrases.length; i++) {&#13;
            neededLetters = presenter.getNeededLetters(phrases[i].phrase);&#13;
&#13;
            for(var k = neededLetters.length; k--;){&#13;
                if (neededLetters[k].indexOf('!') &gt; -1) neededLetters.splice(k, 1);&#13;
            }&#13;
&#13;
            neededLettersIndexes = presenter.getLettersIndexesForScoring(neededLetters, phrases[i]);&#13;
&#13;
            if (presenter.isSelectionSufficient(neededLettersIndexes, phrases[i].selectedLetters)) {&#13;
                score++;&#13;
            } else {&#13;
                errors++;&#13;
            }&#13;
        }&#13;
&#13;
        return { score: score, errors: errors };&#13;
    };&#13;
&#13;
    presenter.getPhraseForScoring = function () {&#13;
        if (presenter.isErrorCheckingMode) {&#13;
            return JSON.parse(presenter.workModeState).phrases;&#13;
        } else {&#13;
            return presenter.configuration.phrases;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isSomethingSelected = function () {&#13;
        return presenter.$view.find('.selected').length &gt; 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if(presenter.isActivity){&#13;
            var phrases = presenter.getPhraseForScoring();&#13;
            return presenter.getScoring(phrases).score;&#13;
        }else{&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if(presenter.isActivity &amp;&amp; presenter.isSomethingSelected()){&#13;
            var phrases = presenter.getPhraseForScoring();&#13;
            return presenter.getScoring(phrases).errors;&#13;
        }else{&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.isErrorCheckingMode = true;&#13;
        if(presenter.isActivity){&#13;
            presenter.workModeState = presenter.getState();&#13;
            presenter.showCorrectInSetShowErrorsMode();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.isErrorCheckingMode = false;&#13;
        if(presenter.isActivity){&#13;
            presenter.setState(presenter.workModeState);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createBaseEventData = function () {&#13;
        return {&#13;
            source: presenter.configuration.addonID,&#13;
            item: "" + (presenter.currentPhrase + 1),&#13;
            value: "",&#13;
            score: ""&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createEndOfTrialsEventData = function () {&#13;
        var eventData = presenter.createBaseEventData();&#13;
&#13;
        eventData.value = 'EOT';&#13;
        eventData.score = '';&#13;
&#13;
        return eventData;&#13;
    };&#13;
&#13;
    presenter.createLetterSelectedEventData = function (letter, isCorrect) {&#13;
        var eventData = presenter.createBaseEventData();&#13;
&#13;
        eventData.value = "" + letter;&#13;
        eventData.score = isCorrect ? "1" : "0";&#13;
&#13;
        return eventData;&#13;
    };&#13;
&#13;
    presenter.sendEventData = function (eventData) {&#13;
        if (playerController !== null) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore();&#13;
    };&#13;
&#13;
    presenter.createAllOKEventData = function (){&#13;
        return{&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        }&#13;
    };&#13;
&#13;
    presenter.sendAllOKEvent = function (){&#13;
        eventBus.sendEvent('ValueChanged', presenter.createAllOKEventData());&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showCorrectSA = function () {&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
        var neededLetters = presenter.getNeededLetters(currentPhrase.phrase);&#13;
        var $letter;&#13;
        for (var i = 0; i &lt; neededLetters.length; i++) {&#13;
            if(neededLetters[i].indexOf('!') &gt; -1){&#13;
                $letter = $('&lt;div&gt;'+neededLetters[i]+'&lt;/div&gt;');&#13;
                $letter.addClass('hangman-letter');&#13;
            }else{&#13;
                $letter = presenter.findLetterElement(neededLetters[i]);&#13;
            }&#13;
            $letter.addClass('show-answers');&#13;
            presenter.addLetterSelectionToPhrase(currentPhrase, $letter.text());&#13;
            presenter.onLetterSelectedAction(neededLetters[i], currentPhrase, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(!presenter.isActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
        if(presenter.isErrorCheckingMode){&#13;
            presenter.setWorkMode();&#13;
        }&#13;
&#13;
        presenter.workModeState = JSON.stringify({&#13;
            currentPhrase: presenter.currentPhrase,&#13;
            phrases: presenter.configuration.phrases&#13;
        });&#13;
        presenter.$view.find('.hangman-letter').each(function (){&#13;
            if($(this).hasClass('selected')){&#13;
                $(this).removeClass('selected');&#13;
            }&#13;
        });&#13;
&#13;
        presenter.showCorrectSA();&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(!presenter.isActivity){&#13;
            return;&#13;
        }&#13;
        presenter.setState(presenter.workModeState);&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Hierarchical_Lesson_Report" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Title label" isLocalized="true" name="titleLabel" nameLabel="Hierarchical_Lesson_Report_property_title_label" type="string"/>
        <property displayName="Show results" name="results" nameLabel="Hierarchical_Lesson_Report_property_results" type="boolean"/>
        <property displayName="Results label" isLocalized="true" name="resultsLabel" nameLabel="Hierarchical_Lesson_Report_property_results_label" type="string"/>
        <property displayName="Show checks" name="checks" nameLabel="Hierarchical_Lesson_Report_property_checks" type="boolean"/>
        <property displayName="Checks label" isLocalized="true" name="checksLabel" nameLabel="Hierarchical_Lesson_Report_property_checks_label" type="string"/>
        <property displayName="Show errors" name="errors" nameLabel="Hierarchical_Lesson_Report_property_errors" type="boolean"/>
        <property displayName="Errors label" isLocalized="true" name="errorsLabel" nameLabel="Hierarchical_Lesson_Report_property_errors_label" type="string"/>
        <property displayName="Show mistakes" name="mistakes" nameLabel="Hierarchical_Lesson_Report_property_mistakes" type="boolean"/>
        <property displayName="Mistakes label" isLocalized="true" name="mistakesLabel" nameLabel="Hierarchical_Lesson_Report_property_mistakes_label" type="string"/>
        <property displayName="Show total" name="total" nameLabel="Hierarchical_Lesson_Report_property_total" type="boolean"/>
        <property displayName="Total label" isLocalized="true" name="totalLabel" nameLabel="Hierarchical_Lesson_Report_property_total_label" type="string"/>
        <property displayName="Depth of expand" name="expandDepth" nameLabel="Hierarchical_Lesson_Report_property_expand_depth" type="string"/>
        <property displayName="Row classes" name="classes" nameLabel="Hierarchical_Lesson_Report_property_classes" type="text"/>
        <property displayName="Show page scores" name="showpagescore" nameLabel="Hierarchical_Lesson_Report_property_show_page_scores" type="boolean"/>
        <property displayName="Page scores label" isLocalized="true" name="pageScoresLabel" nameLabel="Hierarchical_Lesson_Report_property_page_scores_label" type="string"/>
        <property displayName="Show max score award" name="showmaxscorefield" nameLabel="Hierarchical_Lesson_Report_property_show_max_score_fields" type="boolean"/>
        <property displayName="Max score award label" isLocalized="true" name="maxScoreAwardLabel" nameLabel="Hierarchical_Lesson_Report_property_max_score_award_label" type="string"/>
        <property displayName="Unvisited page scores label" isLocalized="true" name="unvisitedPageScoresLabel" nameLabel="Hierarchical_Lesson_Report_property_unvisited_page_scores_label" type="string"/>
        <property displayName="Disable score on pages" name="scoredisabled" nameLabel="Hierarchical_Lesson_Report_property_score_disabled" type="string"/>
    </model>
<css>.hier_report {&#13;
    padding: 15px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid gray;&#13;
    background-color: white;&#13;
    color: gray;&#13;
    overflow: auto;&#13;
}&#13;
&#13;
.hier_report td{&#13;
    padding: 10px;&#13;
}&#13;
&#13;
.hier_report-header{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    background-color: #bde0ff;&#13;
}&#13;
.hier_report-footer{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    background-color: #bde0ff;&#13;
}&#13;
&#13;
.hier_report-chapter{&#13;
    background-color: Lavender;&#13;
}&#13;
&#13;
.hier_report-odd{&#13;
    background-color: AliceBlue;&#13;
}&#13;
&#13;
.hier_report-even{&#13;
    background-color: #f0f1ff;&#13;
}&#13;
&#13;
.hier_report-progress {&#13;
    text-align:center;&#13;
    color:#0A8DBD;&#13;
    display: inline-block;&#13;
    width: 190px;&#13;
}&#13;
&#13;
.hier_report-checks {&#13;
    width: 10%;&#13;
    color: green;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-mistakes {&#13;
    width: 10%;&#13;
    color: #990000;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-errors {&#13;
    width: 10%;&#13;
    color: red;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-page-score {&#13;
    width: 10%;&#13;
    color: blue;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-page-non-max-score, .hier_report-page-max-score {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.ui-progressbar {&#13;
    padding:2px;&#13;
    width:	130px  !important;&#13;
    height: 15px    !important;&#13;
    border-radius: 5px;&#13;
    border:2px solid #02789F;&#13;
    background-color: #3CC6CD;&#13;
    border-radius: 5px;&#13;
    float: left;&#13;
}&#13;
&#13;
.hier_drag-source{&#13;
    border: 1px solid orange;&#13;
}&#13;
&#13;
.hier_report .treegrid-expander {&#13;
	float: left;&#13;
}&#13;
&#13;
.hier_report .treegrid-indent {&#13;
	float: left;&#13;
}&#13;
&#13;
.hier_report .text-wrapper {&#13;
	overflow: hidden;&#13;
}&#13;
</css><view> &lt;div class="hier_report"&gt;&#13;
     &lt;table  style="width: 100%"&gt;&#13;
     &lt;/table&gt;&#13;
 &lt;/div&gt;&#13;
&#13;
</view><preview>&lt;div class="hier_report"&gt;&#13;
    &lt;table  style="width: 100%"&gt;&#13;
    &lt;/table&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonHierarchical_Lesson_Report_create() {&#13;
    var presenter = function () {};&#13;
    var presentationController;&#13;
    var pageIndex = 0;&#13;
    var absolutePageIndex = 0;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        EXPAND_DEPTH_NOT_NUMERIC: "Depth of expand is not proper",&#13;
&#13;
        C01: "Wrong classes name format",&#13;
        C02: "Class names has to be separated by new line",&#13;
&#13;
        D01: "Values in Disable score on pages property should be numeric and non empty",&#13;
        D02: "Values in Disable score on pages property should be greater than 0",&#13;
        D03: "Values in Disable score on pages property should be unique"&#13;
    };&#13;
&#13;
    function returnErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    function returnCorrectObject(v) { return { isValid: true, value: v }; }&#13;
&#13;
    presenter.showErrorMessage = function (message, substitutions) {&#13;
        var errorContainer;&#13;
        if (typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                if (substitutions.hasOwnProperty(key)) {&#13;
                    messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
                }&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presentationController = controller;&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    function addHeader() {&#13;
        var headerHTML = "&lt;td&gt; " + presenter.configuration.labels.title + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showResults) headerHTML += "&lt;td class='hier_report-progress'&gt; " + presenter.configuration.labels.results + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showChecks) headerHTML += "&lt;td class='hier_report-checks'&gt; " + presenter.configuration.labels.checks + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showMistakes) headerHTML += "&lt;td class='hier_report-mistakes'&gt; " + presenter.configuration.labels.mistakes + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showErrors) headerHTML += "&lt;td class='hier_report-errors'&gt; " + presenter.configuration.labels.errors + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showPageScore) headerHTML += "&lt;td class='hier_report-page-score'&gt;" + presenter.configuration.labels.pageScores + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showMaxScoreField) headerHTML += "&lt;td class='hier_report-page-max-score'&gt;" + presenter.configuration.labels.maxScoreAward + "&lt;/td&gt;";&#13;
        $("&lt;tr&gt;&lt;/tr&gt;").prependTo($("#" + presenter.treeID).find('table')).addClass("hier_report-header").html(headerHTML);&#13;
    }&#13;
&#13;
    presenter.calculateLessonScaledScore = function () {&#13;
        if (presenter.lessonScore.pageCount == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return Math.floor((presenter.lessonScore.scaledScore / presenter.lessonScore.pageCount) * 100) / 100;&#13;
    };&#13;
&#13;
    function addFooter() {&#13;
        var row = document.createElement('tr');&#13;
        $(row).appendTo($("#" + presenter.treeID).find('table'));&#13;
        $(row).addClass("hier_report-footer");&#13;
&#13;
        $("&lt;td&gt;&lt;/td&gt;").appendTo($(row)).html(presenter.configuration.labels.total);&#13;
&#13;
        if (presenter.configuration.showResults) {&#13;
            createProgressCell(row, {&#13;
                score: presenter.isPreview ? 0 : presenter.calculateLessonScaledScore(),&#13;
                count: 1&#13;
            });&#13;
        }&#13;
&#13;
        if (presenter.configuration.showChecks) {&#13;
            $("&lt;td&gt;&lt;/td&gt;").appendTo($(row)).addClass("hier_report-checks").html(presenter.lessonScore.checks);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMistakes) {&#13;
            $("&lt;td&gt;&lt;/td&gt;").appendTo($(row)).addClass("hier_report-mistakes").html(presenter.lessonScore.mistakes);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showErrors) {&#13;
            $("&lt;td&gt;&lt;/td&gt;").appendTo($(row)).addClass("hier_report-errors").html(presenter.lessonScore.errors);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showPageScore) {&#13;
            var content = presenter.lessonScore.score + "&lt;span class='hier_report-separator'&gt;/&lt;/span&gt;" + presenter.lessonScore.maxScore;&#13;
            $("&lt;td&gt;&lt;/td&gt;").appendTo($(row)).addClass("hier_report-page-score").html(content);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMaxScoreField) {&#13;
            $("&lt;td&gt;&lt;/td&gt;").appendTo($(row));&#13;
        }&#13;
    }&#13;
&#13;
    function createRow(index, parentIndex, isChapter) {&#13;
        var row = document.createElement('tr');&#13;
&#13;
        $(row).appendTo($("#" + presenter.treeID).find('table'));&#13;
        $(row).addClass("treegrid-" + index);&#13;
        $(row).addClass(presenter.configuration.classes[index % presenter.configuration.classes.length]);&#13;
&#13;
        if (parentIndex != null) {&#13;
            $(row).addClass("treegrid-parent-" + parentIndex);&#13;
        }&#13;
&#13;
        if (isChapter) {&#13;
            $(row).addClass("hier_report-chapter");&#13;
        } else {&#13;
            $(row).addClass(index % 2 &gt; 0 ? "hier_report-odd" : "hier_report-even");&#13;
        }&#13;
&#13;
        return row;&#13;
    }&#13;
&#13;
    function createProgressCell(row, score, index, isChapter) {&#13;
        var progressCell = document.createElement('td');&#13;
        $(progressCell).appendTo($(row)).addClass("hier_report-progress");&#13;
&#13;
        var progressbar = document.createElement('div');&#13;
        $(progressbar).appendTo($(progressCell));&#13;
        $(progressbar).attr("id", "progressbar-" + index);&#13;
        $(progressbar).addClass("hier_report-progressbar");&#13;
        var percent = Math.floor(score.score / score.count * 100);&#13;
&#13;
        var progressInfo = document.createElement('div');&#13;
        $(progressInfo).appendTo($(progressCell)).attr("style", "float: right").html(percent + "%");&#13;
&#13;
        if (!isChapter) {&#13;
            $(progressbar).progressbar({&#13;
                value: Math.floor(score.score * 100),&#13;
                max: 100&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isPageVisited = function (pageId) {&#13;
        return presentationController.getPresentation().getPageById(pageId).isVisited();&#13;
    };&#13;
&#13;
    presenter.getPageScaledScore = function(maxScore, score, isChapter, pageID) {&#13;
        if (maxScore) {&#13;
            return score / maxScore;&#13;
        }&#13;
&#13;
        if (!presenter.isPreview &amp;&amp; !isChapter) {&#13;
            return presenter.isPageVisited(pageID) ? 1 : 0;&#13;
        }&#13;
&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getProperScore = function(score, pageId) {&#13;
        if (!presenter.isPreview) {&#13;
            score.score = score.maxScore !== 0 ? score.score / score.maxScore : presenter.isPageVisited(pageId) ? 1 : 0;&#13;
        } else {&#13;
            score.score = score.maxScore !== 0 ? score.score / score.maxScore : 0;&#13;
        }&#13;
&#13;
        return score.score;&#13;
    };&#13;
&#13;
    function createScoreCells(row, pageId, index, isChapter) {&#13;
        var isScoreEnable = presenter.configuration.disabledScorePages.indexOf(absolutePageIndex) === -1;&#13;
        var score = resetScore();&#13;
        if (!presenter.isPreview) {&#13;
            score = presentationController.getScore().getPageScoreById(pageId);&#13;
        }&#13;
&#13;
        var pageScore = 0;&#13;
&#13;
        if (!isChapter) {&#13;
            pageScore = score.score;&#13;
            score.count = 1;&#13;
            score.score = presenter.getProperScore(score, pageId);&#13;
        }&#13;
&#13;
        if (isScoreEnable) {&#13;
&#13;
            if (presenter.configuration.showResults) {&#13;
                createProgressCell(row, score, index, isChapter);&#13;
            }&#13;
&#13;
            if (!isChapter) {&#13;
                presenter.lessonScore.pageCount++;&#13;
            }&#13;
            presenter.lessonScore.checks += score.checkCount;&#13;
            presenter.lessonScore.mistakes += score.mistakeCount;&#13;
            presenter.lessonScore.errors += score.errorCount;&#13;
            presenter.lessonScore.score += pageScore;&#13;
            presenter.lessonScore.maxScore += score.maxScore;&#13;
            presenter.lessonScore.scaledScore += presenter.getPageScaledScore(score.maxScore, pageScore, isChapter, pageId);&#13;
&#13;
            if (presenter.configuration.showChecks) {&#13;
                var checksCell = document.createElement('td');&#13;
                $(checksCell).appendTo($(row))&#13;
                    .addClass("hier_report-checks")&#13;
                    .html(score.checkCount);&#13;
            }&#13;
&#13;
            if (presenter.configuration.showMistakes) {&#13;
                var mistakesCell = document.createElement('td');&#13;
                $(mistakesCell).appendTo($(row))&#13;
                    .addClass("hier_report-mistakes")&#13;
                    .html(score.mistakeCount);&#13;
            }&#13;
&#13;
            if (presenter.configuration.showErrors) {&#13;
                var errorsCell = document.createElement('td');&#13;
                $(errorsCell).appendTo($(row))&#13;
                    .addClass("hier_report-errors")&#13;
                    .html(score.errorCount);&#13;
            }&#13;
&#13;
            if (presenter.configuration.showPageScore) {&#13;
                $("&lt;td&gt;&lt;/td&gt;").appendTo($(row))&#13;
                    .addClass("hier_report-page-score")&#13;
                    .html(presenter.insertPageScoreValuesToPage(pageScore, score));&#13;
            }&#13;
&#13;
            if (presenter.configuration.showMaxScoreField) {&#13;
                var isMaxScore = pageScore === score.maxScore &amp;&amp; score.maxScore !== 0;&#13;
&#13;
                var $td = $('&lt;td&gt;&lt;/td&gt;');&#13;
                $td.addClass(isMaxScore ? 'hier_report-page-max-score' : 'hier_report-page-non-max-score');&#13;
&#13;
                $(row).append($td);&#13;
            }&#13;
        } else {&#13;
            var c = presenter.configuration;&#13;
            var columns = [c.showResults, c.showChecks, c.showMistakes, c.showErrors, c.showPageScore, c.showMaxScoreField].filter(function(a) { return a }).length;&#13;
            $("&lt;td colspan='" + columns + "'&gt;&lt;/td&gt;").appendTo($(row)).addClass("hier_report-score-disabled-row");&#13;
        }&#13;
    }&#13;
&#13;
    presenter.insertPageScoreValuesToPage = function(pageScore, score) {&#13;
        if (score.score == 0 &amp;&amp; score.maxScore == 0) {&#13;
            return presenter.configuration.labels.unvisitedPageScore;&#13;
        }&#13;
&#13;
        return pageScore + "&lt;span class='hier_report-separator'&gt;/&lt;/span&gt;" + score.maxScore;&#13;
    };&#13;
&#13;
    function generatePageLinks(text, isChapter, pageId) {&#13;
        var $element = $(document.createElement('td')),&#13;
            $link = $("&lt;a&gt;&lt;/a&gt;").text(text).attr('href', '#').attr('data-page-id', pageId);&#13;
&#13;
        $element.append($('&lt;div class="text-wrapper"&gt;').html(isChapter ? text : $link));&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function addRow(name, index, parrentIndex, isChapter, pageId) {&#13;
        var row = createRow(index, parrentIndex, isChapter);&#13;
&#13;
        var nameCell = generatePageLinks(name, isChapter, pageId);&#13;
        $(nameCell).appendTo($(row));&#13;
&#13;
        createScoreCells(row, pageId, index, isChapter);&#13;
    }&#13;
&#13;
    function updateRow(pageIndex, pageScore) {&#13;
        var row = $(".treegrid-" + pageIndex);&#13;
        var hasChildren = pageScore.count &gt; 0;&#13;
&#13;
        if (presenter.configuration.showResults) {&#13;
            var percent = Math.floor((pageScore.score / pageScore.count) * 100) || 0;&#13;
            var progressbar = $(row).find("#progressbar-" + pageIndex);&#13;
            if (hasChildren) {&#13;
                $(progressbar).progressbar({value: Math.floor((pageScore.score / pageScore.count) * 100), max: 100});&#13;
                $(progressbar).closest("div").next().html(percent + '%');&#13;
            } else {&#13;
                $(progressbar).closest("div").next().html('-').attr('style', '');&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.configuration.showChecks) {&#13;
            $(row).find(".hier_report-checks").html(hasChildren ? pageScore.checkCount : '-');&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMistakes) {&#13;
            $(row).find(".hier_report-mistakes").html(hasChildren ? pageScore.mistakeCount : '-');&#13;
        }&#13;
&#13;
        if (presenter.configuration.showErrors) {&#13;
            $(row).find(".hier_report-errors").html(hasChildren ? pageScore.errorCount : '-');&#13;
        }&#13;
&#13;
        if (presenter.configuration.showPageScore) {&#13;
            $(row).find(".hier_report-page-score").html(hasChildren ? presenter.insertPageScoreValuesToChapter(pageScore) : '-');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.insertPageScoreValuesToChapter = function(pageScore) {&#13;
        if (pageScore.countedMaxScore != 0) {&#13;
            return pageScore.countedScore + "&lt;span class='hier_report-separator'&gt;/&lt;/span&gt;" + pageScore.countedMaxScore;&#13;
        } else {&#13;
            return presenter.configuration.labels.unvisitedPageScore;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.updateChapterScore = function(score, update, isEnabled) {&#13;
        if (isEnabled) {&#13;
            score.countedScore += update.countedScore || update.score;&#13;
            score.countedMaxScore += update.countedMaxScore || update.maxScore;&#13;
            score.score += update.maxScore === 0 ? update.score : update.score / update.maxScore;&#13;
            score.errorCount += update.errorCount;&#13;
            score.checkCount += update.checkCount;&#13;
            score.mistakeCount += update.mistakeCount;&#13;
            score.count += update.count;&#13;
        }&#13;
&#13;
        return score;&#13;
    };&#13;
&#13;
    function resetScore() {&#13;
        return {&#13;
            score: 0,&#13;
            countedScore: 0,&#13;
            maxScore: 0,&#13;
            countedMaxScore: 0,&#13;
            errorCount: 0,&#13;
            checkCount: 0,&#13;
            mistakeCount: 0,&#13;
            count: 0&#13;
        };&#13;
    }&#13;
&#13;
    presenter.createPreviewTree = function() {&#13;
        var pagesMockup = [&#13;
            {name : "Page1", parent : null},&#13;
            {name : "Unit1", parent : null},&#13;
            {name : "Page2", parent : 1},&#13;
            {name : "Chapter1", parent : 1},&#13;
            {name : "Page3", parent : 3},&#13;
            {name : "Page4", parent : 3},&#13;
            {name : "Chapter2", parent : 1},&#13;
            {name : "Page5", parent : 6},&#13;
            {name : "Page6", parent : 1},&#13;
            {name : "Page7", parent : null},&#13;
            {name : "Page8", parent : null},&#13;
            {name : "Page9", parent : null},&#13;
            {name : "Page10", parent : null},&#13;
            {name : "Page11", parent : null}&#13;
        ];&#13;
&#13;
        var chapterScore = resetScore();&#13;
        for (var i = 0; i &lt; pagesMockup.length; i++) {&#13;
            addRow(pagesMockup[i].name, i, pagesMockup[i].parent, false, "some_id");&#13;
        }&#13;
        return chapterScore;&#13;
    };&#13;
&#13;
    presenter.createTree = function(root, parrentIndex, pageCount) {&#13;
        var chapterIndex = 0,&#13;
            chapterScore = resetScore(),&#13;
            pageScore = resetScore(),&#13;
            isEmpty = true,&#13;
            values = {},&#13;
            isEnabled = true;&#13;
&#13;
        for (var i = 0; i &lt; pageCount; i++) {&#13;
            var isChapter = root.get(i).type == 'chapter';&#13;
&#13;
            if (!isChapter) {&#13;
                if (root.get(i).isReportable()) {&#13;
                    // at least one page is reportable&#13;
                    isEmpty = false;&#13;
                } else {&#13;
                    absolutePageIndex++;&#13;
                    continue;&#13;
                }&#13;
            }&#13;
&#13;
            var pageId = isChapter ? "chapter" : root.get(i).getId();&#13;
&#13;
            addRow(root.get(i).getName(), pageIndex, parrentIndex, isChapter, pageId);&#13;
            absolutePageIndex++;&#13;
&#13;
            pageScore = presentationController.getScore().getPageScoreById(pageId);&#13;
            pageScore.count = 1;&#13;
            pageIndex++;&#13;
&#13;
            if (isChapter) {&#13;
                chapterIndex = pageIndex - 1;&#13;
                values = presenter.createTree(root.get(i), chapterIndex, root.get(i).size());&#13;
                updateRow(chapterIndex, values.pagesScore);&#13;
                pageScore = values.pagesScore;&#13;
            }&#13;
&#13;
            isEnabled = presenter.configuration.disabledScorePages.indexOf(absolutePageIndex) === -1;&#13;
            chapterScore = presenter.updateChapterScore(chapterScore, pageScore, isEnabled);&#13;
        }&#13;
&#13;
        return { pagesScore: chapterScore, isEmpty: isEmpty };&#13;
    };&#13;
&#13;
    function handleMouseClickActions() {&#13;
        var commander = presentationController.getCommands(),&#13;
            $report = presenter.$view.find('.hier_report tr');&#13;
&#13;
        $report.find('td a').each(function () {&#13;
            $(this).click(function (event) {&#13;
                event.preventDefault();&#13;
                event.stopPropagation();&#13;
                commander.gotoPageId($(this).attr('data-page-id'));&#13;
            });&#13;
        });&#13;
&#13;
        $report.find('.treegrid-expander').each(function () {&#13;
            $(this).click(function (event) {&#13;
                event.preventDefault();&#13;
                event.stopPropagation();&#13;
            });&#13;
        });&#13;
    }&#13;
&#13;
    function expandTree(level) {&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            if ($(this).treegrid('getDepth') &lt; level) {&#13;
                $(this).treegrid('expand');&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function saveTreeState() {&#13;
        var state = [];&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            state.push($(this).treegrid('isExpanded'))&#13;
        });&#13;
        return state;&#13;
    }&#13;
&#13;
    function restoreTreeState(state) {&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            $(this).treegrid(state[$(this).treegrid('getNodeId')] ? 'expand' : 'collapse');&#13;
        });&#13;
    }&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            'treeState': saveTreeState(),&#13;
            'isVisible': presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        restoreTreeState(state.treeState);&#13;
&#13;
        presenter.setVisibility(state.isVisible);&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
    };&#13;
&#13;
    function parseClasses(classes_text) {&#13;
        function isValidClassName(class_name) {&#13;
            return /^[a-z_-][a-z\d_-]*$/i.test(class_name);&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(classes_text)) {&#13;
            return returnCorrectObject([]);&#13;
        }&#13;
&#13;
        var classes = classes_text.split('\n');&#13;
        for (var i=0; i&lt;classes.length; i++) {&#13;
            if (classes[i].indexOf(' ') !== -1) {&#13;
                return returnErrorObject("C02");&#13;
            }&#13;
&#13;
            if (!isValidClassName(classes[i])) {&#13;
                return returnErrorObject("C01");&#13;
            }&#13;
        }&#13;
&#13;
        return returnCorrectObject(classes);&#13;
    }&#13;
&#13;
    function parseScoreDisable(pages_text) {&#13;
        if (ModelValidationUtils.isStringEmpty(pages_text)) {&#13;
            return returnCorrectObject([]);&#13;
        }&#13;
&#13;
        var i;&#13;
&#13;
        var pages = pages_text.split(';');&#13;
        for (i=0; i&lt;pages.length; i++) {&#13;
            var numberObject = ModelValidationUtils.validateInteger(pages[i]);&#13;
            if (!numberObject.isValid) {&#13;
                return returnErrorObject("D01");&#13;
            }&#13;
&#13;
            pages[i] = numberObject.value - 1; // indexing from 0&#13;
&#13;
            if (pages[i] &lt; 0) {&#13;
                return returnErrorObject("D02");&#13;
            }&#13;
        }&#13;
&#13;
        for (i=1; i&lt;pages.length; i++) {&#13;
            if (pages.sort()[i] === pages.sort()[i-1]) {&#13;
                return returnErrorObject("D03");&#13;
            }&#13;
        }&#13;
&#13;
        return returnCorrectObject(pages.sort());&#13;
    }&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var expandDepth = returnCorrectObject(0);&#13;
&#13;
        if (model['expandDepth'].length &gt; 0) {&#13;
            expandDepth = ModelValidationUtils.validateInteger(model['expandDepth']);&#13;
            if (!expandDepth.isValid) {&#13;
                return returnErrorObject('EXPAND_DEPTH_NOT_NUMERIC');&#13;
            }&#13;
        }&#13;
&#13;
        var validatedClasses = parseClasses(model["classes"]);&#13;
        if (!validatedClasses.isValid) {&#13;
            return returnErrorObject(validatedClasses.errorCode);&#13;
        }&#13;
&#13;
        var validatedDisabledScorePages = parseScoreDisable(model["scoredisabled"]);&#13;
        if (!validatedDisabledScorePages.isValid) {&#13;
            return returnErrorObject(validatedDisabledScorePages.errorCode);&#13;
        }&#13;
&#13;
        return {&#13;
            ID: model.ID,&#13;
            isValid: true,&#13;
            width: parseInt(model["Width"], 10),&#13;
            height: parseInt(model["Height"], 10),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            labels: {&#13;
                results: model['resultsLabel'],&#13;
                errors: model['errorsLabel'],&#13;
                checks: model['checksLabel'],&#13;
                mistakes: model['mistakesLabel'],&#13;
                total: model['totalLabel'],&#13;
                title: model['titleLabel'],&#13;
                pageScores: model['pageScoresLabel'] || "",&#13;
                maxScoreAward: model['maxScoreAwardLabel'] || "",&#13;
                unvisitedPageScore: model['unvisitedPageScoresLabel'] || ""&#13;
            },&#13;
            showResults: ModelValidationUtils.validateBoolean(model["results"]),&#13;
            showErrors: ModelValidationUtils.validateBoolean(model["errors"]),&#13;
            showChecks: ModelValidationUtils.validateBoolean(model["checks"]),&#13;
            showMistakes: ModelValidationUtils.validateBoolean(model["mistakes"]),&#13;
            showTotal: ModelValidationUtils.validateBoolean(model["total"]),&#13;
            expandDepth: expandDepth.value,&#13;
            classes: validatedClasses.value,&#13;
            showPageScore: ModelValidationUtils.validateBoolean(model["showpagescore"]),&#13;
            showMaxScoreField: ModelValidationUtils.validateBoolean(model["showmaxscorefield"]),&#13;
            disabledScorePages: validatedDisabledScorePages.value&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.initialize = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.isPreview = isPreview;&#13;
        presenter.lessonScore = {&#13;
            pageCount: 0,&#13;
            checks: 0,&#13;
            errors: 0,&#13;
            mistakes: 0,&#13;
            score: 0,&#13;
            maxScore: 0,&#13;
            scaledScore: 0&#13;
        };&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[presenter.configuration.errorCode]);&#13;
            return;&#13;
        }&#13;
&#13;
        $('.hier_report').attr("style", "height: " + presenter.configuration.height + "px");&#13;
        presenter.treeID = presenter.configuration.ID + (isPreview ? "Preview" : "");&#13;
        presenter.$view.find("div").first().attr('id', presenter.treeID);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        addHeader();&#13;
        if (isPreview) {&#13;
            presenter.createPreviewTree();&#13;
        } else {&#13;
            var presentation = presentationController.getPresentation();&#13;
            presenter.createTree(presentation.getTableOfContents(), null, presentation.getTableOfContents().size());&#13;
        }&#13;
&#13;
        if (presenter.configuration.showTotal) {&#13;
            addFooter();&#13;
        }&#13;
&#13;
        $("#" + presenter.treeID).find('table').not('.hier_report-header').not('.hier_report-footer').treegrid({&#13;
            'initialState': 'collapsed',&#13;
            'expanderTemplate': '&lt;div class="treegrid-expander"&gt;&lt;/div&gt;'&#13;
        });&#13;
&#13;
        expandTree(presenter.configuration.expandDepth);&#13;
        if (!isPreview) {&#13;
            handleMouseClickActions();&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Hierarchical_Table_Of_Contents" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Title label" isLocalized="true" name="titleLabel" nameLabel="Hierarchical_Table_Of_Contents_property_title_label" type="string"/>
        <property displayName="Display only chapters" name="displayOnlyChapters" nameLabel="Hierarchical_Table_Of_Contents_property_display_only_chapters" type="boolean"/>
        <property displayName="Show Pages" isLocalized="true" name="showPages" nameLabel="Hierarchical_Table_Of_Contents_property_show_pages" type="{All, Reportable, Not-reportable}"/>
    </model>
<css>.hier_report {&#13;
    padding: 15px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid gray;&#13;
    background-color: white;&#13;
    color: gray;&#13;
    overflow: auto;&#13;
}&#13;
&#13;
.hier_report td{&#13;
    padding: 10px;&#13;
}&#13;
&#13;
.hier_report-header{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    background-color: #bde0ff;&#13;
}&#13;
.hier_report-footer{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    background-color: #bde0ff;&#13;
}&#13;
&#13;
.hier_report-chapter{&#13;
    background-color: Lavender;&#13;
}&#13;
&#13;
.hier_report-odd{&#13;
    background-color: AliceBlue;&#13;
}&#13;
&#13;
.hier_report-even{&#13;
    background-color: #f0f1ff;&#13;
}&#13;
&#13;
.hier_report-progress {&#13;
    text-align:center;&#13;
    color:#0A8DBD;&#13;
    display: inline-block;&#13;
    width: 190px;&#13;
}&#13;
&#13;
.hier_report-checks {&#13;
    width: 10%;&#13;
    color: green;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-mistakes {&#13;
    width: 10%;&#13;
    color: #990000;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-errors {&#13;
    width: 10%;&#13;
    color: red;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-page-score {&#13;
    width: 10%;&#13;
    color: blue;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-page-non-max-score, .hier_report-page-max-score {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.ui-progressbar {&#13;
    padding:2px;&#13;
    width:	130px  !important;&#13;
    height: 15px    !important;&#13;
    border-radius: 5px;&#13;
    border:2px solid #02789F;&#13;
    background-color: #3CC6CD;&#13;
    border-radius: 5px;&#13;
    float: left;&#13;
}&#13;
&#13;
.hier_drag-source{&#13;
    border: 1px solid orange;&#13;
}&#13;
&#13;
.hier_report .treegrid-expander {&#13;
	float: left;&#13;
}&#13;
&#13;
.hier_report .treegrid-indent {&#13;
	float: left;&#13;
}&#13;
&#13;
.hier_report .text-wrapper {&#13;
	overflow: hidden;&#13;
}&#13;
</css><view> &lt;div class="hier_report"&gt;&#13;
     &lt;table  style="width: 100%"&gt;&#13;
     &lt;/table&gt;&#13;
 &lt;/div&gt;&#13;
&#13;
</view><preview>&lt;div class="hier_report"&gt;&#13;
    &lt;table  style="width: 100%"&gt;&#13;
    &lt;/table&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonHierarchical_Table_Of_Contents_create() {&#13;
    var presenter = function () {};&#13;
    var presentationController;&#13;
    var pageIndex = 0;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
    };&#13;
&#13;
    function returnErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    function returnCorrectObject(v) { return { isValid: true, value: v }; }&#13;
&#13;
    presenter.showErrorMessage = function (message, substitutions) {&#13;
        var errorContainer;&#13;
        if (typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                if (substitutions.hasOwnProperty(key)) {&#13;
                    messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
                }&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presentationController = controller;&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    function addHeader() {&#13;
        var headerHTML = "&lt;td&gt; " + presenter.configuration.labels.title + "&lt;/td&gt;";&#13;
        $("&lt;tr&gt;&lt;/tr&gt;").prependTo($("#" + presenter.treeID).find('table')).addClass("hier_report-header").html(headerHTML);&#13;
    }&#13;
&#13;
    function addFooter() {&#13;
        var row = document.createElement('tr');&#13;
        $(row).appendTo($("#" + presenter.treeID).find('table'));&#13;
        $(row).addClass("hier_report-footer");&#13;
    }&#13;
&#13;
    function createRow(index, parentIndex, isChapter) {&#13;
        var row = document.createElement('tr');&#13;
&#13;
        $(row).appendTo($("#" + presenter.treeID).find('table'));&#13;
        $(row).addClass("treegrid-" + index);&#13;
&#13;
        if (parentIndex != null) {&#13;
            $(row).addClass("treegrid-parent-" + parentIndex);&#13;
        }&#13;
&#13;
        if (isChapter) {&#13;
            $(row).addClass("hier_report-chapter");&#13;
        } else {&#13;
            $(row).addClass(index % 2 &gt; 0 ? "hier_report-odd" : "hier_report-even");&#13;
        }&#13;
&#13;
        return row;&#13;
    }&#13;
&#13;
    function generatePageLinks(text, isChapter, pageId) {&#13;
        var $element = $(document.createElement('td')),&#13;
            $link = $("&lt;a&gt;&lt;/a&gt;").text(text).attr('href', '#').attr('data-page-id', pageId);&#13;
&#13;
        $element.append($('&lt;div class="text-wrapper"&gt;').html(isChapter ? text : $link));&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function addRow(name, index, parrentIndex, isChapter, pageId) {&#13;
        var row = createRow(index, parrentIndex, isChapter);&#13;
&#13;
        var nameCell = generatePageLinks(name, isChapter, pageId);&#13;
        if(row != null){&#13;
            $(nameCell).appendTo($(row));&#13;
        }&#13;
    }&#13;
&#13;
    function resetScore() {&#13;
        return {&#13;
            score: 0,&#13;
            countedScore: 0,&#13;
            maxScore: 0,&#13;
            countedMaxScore: 0,&#13;
            errorCount: 0,&#13;
            checkCount: 0,&#13;
            mistakeCount: 0,&#13;
            count: 0&#13;
        };&#13;
    }&#13;
&#13;
    presenter.createPreviewTree = function() {&#13;
        var pagesMockup = [&#13;
            {name : "Page1", parent : null},&#13;
            {name : "Unit1", parent : null},&#13;
            {name : "Chapter2", parent : 1},&#13;
            {name : "Page5", parent : 6},&#13;
            {name : "Page6", parent : 1},&#13;
            {name : "Page7", parent : null},&#13;
            {name : "Page8", parent : null},&#13;
            {name : "Page9", parent : null},&#13;
            {name : "Page10", parent : null},&#13;
            {name : "Page11", parent : null},&#13;
            {name : "Unit2", parent : null},&#13;
            {name : "Page12", parent : 10},&#13;
            {name : "Page13", parent : 10}&#13;
        ];&#13;
&#13;
        var chapterScore = resetScore();&#13;
        for (var i = 0; i &lt; pagesMockup.length; i++) {&#13;
            if(pagesMockup[i].name == "Unit1" || pagesMockup[i].name == "Unit2"){&#13;
                addRow(pagesMockup[i].name, i, pagesMockup[i].parent, true, "some_id");&#13;
            }else{&#13;
                addRow(pagesMockup[i].name, i, pagesMockup[i].parent, false, "some_id");&#13;
            }&#13;
        }&#13;
        return chapterScore;&#13;
    };&#13;
&#13;
    presenter.createTree = function (root, parrentIndex, pageCount) {&#13;
        var chapterIndex = 0,&#13;
            chapterScore = resetScore(),&#13;
            pageScore = resetScore(),&#13;
            isEmpty = true,&#13;
            values = {},&#13;
            isEnabled = true;&#13;
&#13;
        for (var i = 0; i &lt; pageCount; i++) {&#13;
            var isChapter = (root.get(i).type == "chapter");&#13;
&#13;
            if (!isChapter &amp;&amp; !root.get(i).isReportable() &amp;&amp; presenter.configuration.showPages == "Reportable") continue;&#13;
            if (!isChapter &amp;&amp; root.get(i).isReportable() &amp;&amp; presenter.configuration.showPages == "Not-reportable") continue;&#13;
            if (!isChapter &amp;&amp; root.get(i).isReportable()) {&#13;
                isEmpty = false;&#13;
            }&#13;
            var pageId = "chapter";&#13;
            if (!isChapter) {&#13;
                pageId = root.get(i).getId();&#13;
            }&#13;
            addRow(root.get(i).getName(), pageIndex, parrentIndex, isChapter, pageId);&#13;
            pageScore = presentationController.getScore().getPageScoreById(pageId);&#13;
            pageScore.count = 1;&#13;
            pageIndex++;&#13;
            if (isChapter) {&#13;
                chapterIndex = pageIndex - 1;&#13;
                values = presenter.createTree(root.get(i), chapterIndex, root.get(i).size());&#13;
                pageScore =  values.pagesScore;&#13;
            }&#13;
        }&#13;
&#13;
        return { pagesScore: chapterScore, isEmpty: isEmpty };&#13;
    };&#13;
&#13;
    function handleMouseClickActions() {&#13;
        var commander = presentationController.getCommands(),&#13;
            $report = presenter.$view.find('.hier_report tr');&#13;
&#13;
        $report.find('td a').each(function () {&#13;
            $(this).click(function (event) {&#13;
                event.preventDefault();&#13;
                event.stopPropagation();&#13;
                commander.gotoPageId($(this).attr('data-page-id'));&#13;
            });&#13;
        });&#13;
&#13;
        $report.find('.treegrid-expander').each(function () {&#13;
            $(this).click(function (event) {&#13;
                event.preventDefault();&#13;
                event.stopPropagation();&#13;
            });&#13;
        });&#13;
    }&#13;
&#13;
    function expandTree(level) {&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            if ($(this).treegrid('getDepth') &lt; level) {&#13;
                $(this).treegrid('expand');&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function saveTreeState() {&#13;
        var state = [];&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            state.push($(this).treegrid('isExpanded'))&#13;
        });&#13;
        return state;&#13;
    }&#13;
&#13;
    function restoreTreeState(state) {&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            $(this).treegrid(state[$(this).treegrid('getNodeId')] ? 'expand' : 'collapse');&#13;
        });&#13;
    }&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            'treeState': saveTreeState(),&#13;
            'isVisible': presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        restoreTreeState(state.treeState);&#13;
&#13;
        presenter.setVisibility(state.isVisible);&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        return {&#13;
            ID: model.ID,&#13;
            isValid: true,&#13;
            width: parseInt(model["Width"], 10),&#13;
            height: parseInt(model["Height"], 10),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            labels: {&#13;
                title: model['titleLabel']&#13;
            },&#13;
            displayOnlyChapters: ModelValidationUtils.validateBoolean(model.displayOnlyChapters),&#13;
            showPages: model.showPages&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.initialize = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.isPreview = isPreview;&#13;
        presenter.lessonScore = {&#13;
            pageCount: 0,&#13;
            checks: 0,&#13;
            errors: 0,&#13;
            mistakes: 0,&#13;
            score: 0,&#13;
            maxScore: 0,&#13;
            scaledScore: 0&#13;
        };&#13;
&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[presenter.configuration.errorCode]);&#13;
            return;&#13;
        }&#13;
&#13;
        $('.hier_report').attr("style", "height: " + presenter.configuration.height + "px");&#13;
        presenter.treeID = presenter.configuration.ID + (isPreview ? "Preview" : "");&#13;
        presenter.$view.find("div").first().attr('id', presenter.treeID);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        addHeader();&#13;
        if (isPreview) {&#13;
            presenter.createPreviewTree();&#13;
        } else {&#13;
            var presentation = presentationController.getPresentation();&#13;
            presenter.createTree(presentation.getTableOfContents(), null, presentation.getTableOfContents().size());&#13;
            checkIfChapterHasChildren(false);&#13;
            if(presenter.configuration.displayOnlyChapters){&#13;
                displayOnlyChapters();&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.configuration.showTotal) {&#13;
            addFooter();&#13;
        }&#13;
&#13;
        $("#" + presenter.treeID).find('table').not('.hier_report-header').not('.hier_report-footer').treegrid({&#13;
            'initialState': 'collapsed',&#13;
            'expanderTemplate': '&lt;div class="treegrid-expander"&gt;&lt;/div&gt;'&#13;
        });&#13;
&#13;
        expandTree(presenter.configuration.expandDepth);&#13;
        if (!isPreview) {&#13;
            handleMouseClickActions();&#13;
        }&#13;
&#13;
        if(presenter.configuration.displayOnlyChapters){&#13;
            presenter.$view.find("tr").each(function () {&#13;
                if($(this).hasClass("hier_report-even") || $(this).hasClass("hier_report-odd")){&#13;
                    $(this).remove();&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
        checkIfChapterHasChildren(true);&#13;
    };&#13;
&#13;
    function displayOnlyChapters() {&#13;
        presenter.$view.find(".hier_report-chapter").each(function () {&#13;
            var element = $(this);&#13;
            element.find(".text-wrapper").wrap('&lt;a href=""&gt;&lt;/a&gt;');&#13;
            if(element.next('tr[class*=treegrid-parent]').length &gt; 0){&#13;
                var dataPageId = element.next().find("a").attr("data-page-id");&#13;
                element.find("a").attr("data-page-id", dataPageId);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function checkIfChapterHasChildren (isDisplayOnlyChapters) {&#13;
        presenter.$view.find(".hier_report-chapter").each(function () {&#13;
            if($(this).next('tr[class*=treegrid-parent]').length == 0){&#13;
                if(isDisplayOnlyChapters){&#13;
                    $(this).find(".treegrid-expander").removeClass("treegrid-expander-collapsed").removeClass("treegrid-expander-expanded");&#13;
                }else{&#13;
                    $(this).remove();&#13;
                }&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="IWB_Toolbar" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Floating Images" name="floatingImages" nameLabel="IWB_Toolbar_property_floating_images" type="list">
            <property name="Image" nameLabel="IWB_Toolbar_property_image" type="image"/>
        </property>
        <property displayName="Width When Opened" name="widthWhenOpened" nameLabel="IWB_Toolbar_property_width_when_opened" type="string"/>
        <property name="Fixed Position" nameLabel="IWB_Toolbar_property_fixed_position" type="boolean"/>

        <property displayName="Show for pen" name="forPen" nameLabel="IWB_Toolbar_property_for_pen" type="{---, Color panel, Thickness panel}"/>
        <property displayName="Show for marker" name="forMarker" nameLabel="IWB_Toolbar_property_for_marker" type="{---, Color panel, Thickness panel}"/>
        <property displayName="Keep state and position" name="keepStateAndPosition" nameLabel="IWB_Toolbar_property_keep_state_and_position" type="boolean"/>
    </model>
<css>.iwb-toolbar-panel {&#13;
    padding: 5px 25px;&#13;
    cursor: move;&#13;
    border-radius: 3px;&#13;
    min-width: 30px;&#13;
    width: 30px;&#13;
    min-height: 30px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.6);&#13;
    background-color: rgba(255, 255, 255, 0.8);&#13;
    background-image: url('resources/wb_panel_move_icon.svg'), url('resources/wb_panel_move_icon.svg');&#13;
    background-position: left center, right center;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.running {&#13;
    z-index: 1001;&#13;
    position: fixed;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button-separator {&#13;
    width: 1px;&#13;
    float: left;&#13;
    height: 30px;&#13;
    background-color: rgba(150, 150, 150, 0.6);&#13;
    margin-left: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.clicked {&#13;
    background-color: #7A7A7A;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.clicked-lighter, .iwb-toolbar-panel .button-drawing-details.clicked-lighter, .iwb-toolbar-panel .button-floating-image.clicked-lighter {&#13;
    background-color: #CACACA;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button, .iwb-toolbar-panel .button-drawing-details, .iwb-toolbar-panel .button-floating-image {&#13;
    width: 30px;&#13;
    height: 30px;&#13;
    float: left;&#13;
    text-align: center;&#13;
    border-radius: 3px;&#13;
    font-size: 16px;&#13;
    line-height: 30px;&#13;
    margin-left: 5px;&#13;
    background-position: center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.hidden, .iwb-toolbar-panel .button-separator.hidden {&#13;
    display: none;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.first {&#13;
    margin-left: 0px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.hovered {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.iwb-toolbar-mask {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position: absolute;&#13;
    top: 0px;&#13;
    left: 0px;&#13;
    cursor: crosshair;&#13;
}&#13;
&#13;
.iwb-toolbar-mask.pen-mask {&#13;
    z-index: 999;&#13;
}&#13;
&#13;
.iwb_tmp_canvas {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position: absolute;&#13;
    top: 0px;&#13;
    left: 0px;&#13;
    cursor: crosshair;&#13;
}&#13;
&#13;
.iwb-toolbar-mask.marker-mask {&#13;
    z-index: 1000;&#13;
}&#13;
&#13;
.iwb-toolbar-mask canvas {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.iwb-toolbar-selection {&#13;
    border: 1px dotted #0000ff;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .bottom-panel .container {&#13;
    float: right;&#13;
    margin-top: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .bottom-panel-floating-image {&#13;
    margin-right: 77px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .bottom-panel {&#13;
    display: none;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.close, .iwb-toolbar-panel .button.open {&#13;
    font-size: 10px;&#13;
    line-height: 30px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.open {&#13;
    display: block;&#13;
    background-image: url('resources/wb-panel_open.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.close {&#13;
    background-image: url('resources/wb-panel_close.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.zoom {&#13;
    background-image: url('resources/wb_panel_zoom_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.zoom.clicked {&#13;
    background-image: url('resources/wb_panel_zoom_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.pen {&#13;
    background-image: url('resources/wb_panel_pen_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.pen.clicked {&#13;
    background-image: url('resources/wb_panel_pen_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.marker {&#13;
    background-image: url('resources/wb_panel_marker_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.marker.clicked {&#13;
    background-image: url('resources/wb_panel_marker_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stand-area {&#13;
    background-image: url('resources/wb_panel_blind_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stand-area.clicked {&#13;
    background-image: url('resources/wb_panel_blind_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.hide-area {&#13;
    background-image: url('resources/wb_panel_focus_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.hide-area.clicked {&#13;
    background-image: url('resources/wb_panel_focus_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.eraser {&#13;
    background-image: url('resources/wb_panel_erase_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.eraser.clicked {&#13;
    background-image: url('resources/wb_panel_erase_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.reset {&#13;
    background-image: url('resources/wb_panel_reset_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.reset.clicked {&#13;
    background-image: url('resources/wb_panel_reset_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.default {&#13;
    background-image: url('resources/wb_panel_cursor_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.default.clicked {&#13;
    background-image: url('resources/wb_panel_cursor_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.clock {&#13;
    background-image: url('resources/wb_panel_clock_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.clock.clicked {&#13;
    background-image: url('resources/wb_panel_clock_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stopwatch {&#13;
    background-image: url('resources/wb_panel_stopwatch_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stopwatch.clicked {&#13;
    background-image: url('resources/wb_panel_stopwatch_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.note {&#13;
    background-image: url('resources/wb_panel_note_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.note.clicked {&#13;
    background-image: url('resources/wb_panel_note_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.floating-image {&#13;
    background-image: url('resources/wb_panel_rullers_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.floating-image.clicked {&#13;
    background-image: url('resources/wb_panel_rullers_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.color {&#13;
    background-image: url('resources/wb_panel_color_black_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.thickness.clicked {&#13;
    background-image: url('resources/wb_panel_size1_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.thickness {&#13;
    background-image: url('resources/wb_panel_size1_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-black {&#13;
    background-image: url('resources/wb_panel_color_black_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-blue {&#13;
    background-image: url('resources/wb_panel_color_blue_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-green {&#13;
    background-image: url('resources/wb_panel_color_green_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-orange {&#13;
    background-image: url('resources/wb_panel_color_orange_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-red {&#13;
    background-image: url('resources/wb_panel_color_red_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-violet {&#13;
    background-image: url('resources/wb_panel_color_violet_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-white {&#13;
    background-image: url('resources/wb_panel_color_white_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-yellow {&#13;
    background-image: url('resources/wb_panel_color_yellow_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-1 {&#13;
    background-image: url('resources/wb_panel_size1_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-1.clicked {&#13;
    background-image: url('resources/wb_panel_size1_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-2 {&#13;
    background-image: url('resources/wb_panel_size2_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-2.clicked {&#13;
    background-image: url('resources/wb_panel_size2_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-3 {&#13;
    background-image: url('resources/wb_panel_size3_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-3.clicked {&#13;
    background-image: url('resources/wb_panel_size3_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-4 {&#13;
    background-image: url('resources/wb_panel_size4_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-4.clicked {&#13;
    background-image: url('resources/wb_panel_size4_icon-active.svg');&#13;
}&#13;
&#13;
.button-floating-image.button-floating-image-1 {&#13;
    background-image: url('resources/wb_panel_ruller1_icon.svg');&#13;
}&#13;
&#13;
.button-floating-image.button-floating-image-2 {&#13;
    background-image: url('resources/wb_panel_ruller2_icon.svg');&#13;
}&#13;
&#13;
.button-floating-image.button-floating-image-3 {&#13;
    background-image: url('resources/wb_panel_ruller3_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons #start{&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    float: left;&#13;
    margin-right: 10px;&#13;
    background-image: url('resources/start.png');&#13;
    background-size: 20px;&#13;
    background-position: 6px center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
    border-radius: 20px;&#13;
    padding: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons #stop{&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    float: left;&#13;
    margin-right: 10px;&#13;
    background-image: url('resources/stop.png');&#13;
    background-size: 20px;&#13;
    background-position: center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
    border-radius: 20px;&#13;
    padding: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons #clear{&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    float: left;&#13;
    background-image: url('resources/reset.png');&#13;
    border-radius: 5px;&#13;
    background-size: 20px;&#13;
    background-position: center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
    border-radius: 20px;&#13;
    padding: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons .button-clicked{&#13;
    background-color: #51BB59;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch {&#13;
    top: 0px;&#13;
    width: 180px;&#13;
    height: auto;&#13;
    position: absolute;&#13;
    background: #A6E9B9;&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-header {&#13;
    height: 20px;&#13;
    text-align: center;&#13;
    background: url('resources/wb_panel_stopwatch_icon.svg') no-repeat;&#13;
    background-size: 15px;&#13;
    background-position: 2px;&#13;
    cursor: move;&#13;
    background-color: rgba(255, 255, 255, 0.5);&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-header .stopwatch-close{&#13;
    width: 10%;&#13;
    right: 5px;&#13;
    float: right;&#13;
    position: relative;&#13;
    cursor: pointer;&#13;
    text-align: right;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-header h4{&#13;
    float: left;&#13;
    margin-left: 50px;&#13;
    color: #008000;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons {&#13;
    padding: 5px;&#13;
    margin-left: 30px;&#13;
    font-size: 0.8em;&#13;
    word-wrap: break-word;&#13;
    overflow-wrap: break-word;&#13;
    text-align: center;&#13;
    height: 30px;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons .stopwatch-button{&#13;
    padding: 5px;&#13;
    font-size: 1em;&#13;
    word-wrap: break-word;&#13;
    overflow-wrap: break-word;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.iwb-toolbar-clock {&#13;
    top: 0px;&#13;
    width: 100px;&#13;
    height: auto;&#13;
    position: absolute;&#13;
    background-color: #9ECDFF;&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.iwb-toolbar-clock .clock-header {&#13;
    height: 20px;&#13;
    background-image: url('resources/wb_panel_clock_icon.svg');&#13;
    background-repeat: no-repeat;&#13;
    background-size: 15px;&#13;
    background-position: 2px;&#13;
    cursor: move;&#13;
    background-color: rgba(255, 255, 255, 0.5);&#13;
}&#13;
.iwb-toolbar-clock .clock-header .clock-close{&#13;
    width: 10%;&#13;
    right: 5px;&#13;
    float: right;&#13;
    position: relative;&#13;
    cursor: pointer;&#13;
    text-align: right;&#13;
}&#13;
&#13;
.iwb-toolbar-clock .clock-body {&#13;
    padding: 5px;&#13;
    font-size: 16px;&#13;
    word-wrap: break-word;&#13;
    overflow-wrap: break-word;&#13;
    white-space: pre;&#13;
    text-align: center;&#13;
    color: #006ED3;&#13;
}&#13;
&#13;
.iwb-toolbar-note {&#13;
    top: 0px;&#13;
    width: 185px;&#13;
    min-height: 120px;&#13;
    max-height: 350px;&#13;
    position: absolute;&#13;
    background-color: rgba(255, 255, 155, 0.9);&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    overflow-y: auto;&#13;
    overflow-x: hidden;&#13;
}&#13;
&#13;
.iwb-toolbar-note .note-header {&#13;
    height: 20px;&#13;
    line-height: 20px;&#13;
    background: url('resources/wb_panel_note_icon.svg') no-repeat;&#13;
    background-size: 15px;&#13;
    background-position: 3px;&#13;
    cursor: move;&#13;
    background-color: rgba(255, 204, 0, 0.5);&#13;
}&#13;
&#13;
.iwb-toolbar-note .note-body {&#13;
    padding: 5px;&#13;
    font-size: 0.8em;&#13;
    word-wrap: break-word;&#13;
    overflow-wrap: break-word;&#13;
    white-space: pre;&#13;
}&#13;
&#13;
.iwb-toolbar-note textarea {&#13;
    width: 160px;&#13;
    margin: auto;&#13;
    box-sizing: border-box;&#13;
    min-height: 70px;&#13;
    display: block;&#13;
    resize: vertical;&#13;
}&#13;
&#13;
.iwb-toolbar-note .save {&#13;
    float: right;&#13;
    right: 3px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.iwb-toolbar-note .note-date {&#13;
    font-style: italic;&#13;
    font-size: 12px;&#13;
    width: 80%;&#13;
    position: relative;&#13;
    left: 23px;&#13;
    float: left;&#13;
    color: #D58A00;&#13;
}&#13;
&#13;
.iwb-toolbar-note .note-close {&#13;
    width: 10%;&#13;
    right: 5px;&#13;
    float: right;&#13;
    position: relative;&#13;
    cursor: pointer;&#13;
    text-align: right;&#13;
}&#13;
&#13;
.iwb-toolbar-note .note-close.hovered {&#13;
    color: #696969;&#13;
}&#13;
&#13;
.iwb-toolbar-floating-image {&#13;
    display: none;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button .tooltip {&#13;
    display: none;&#13;
    opacity: 1;&#13;
    position: absolute;&#13;
    top: -20px;&#13;
    font-size: 8px;&#13;
    line-height: 8px;&#13;
    min-width: 30px;&#13;
    padding: 3px;&#13;
    border-radius: 2px;&#13;
    background-color: rgba(255, 255, 255, 0.5);&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.6);&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.default .tooltip span:after {&#13;
    content: 'Default Mode';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.close .tooltip span:after {&#13;
    content: 'Close';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.open .tooltip span:after {&#13;
    content: 'Open';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.zoom .tooltip span:after {&#13;
    content: 'Zoom';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.pen .tooltip span:after {&#13;
    content: 'Pen';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.marker .tooltip span:after {&#13;
    content: 'Marker';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.eraser .tooltip span:after {&#13;
    content: 'Eraser';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.clock .tooltip span:after {&#13;
    content: 'Add Clock';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stopwatch .tooltip span:after {&#13;
    content: 'Add Stopwatch';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.note .tooltip span:after {&#13;
    content: 'Add Note';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.hide-area .tooltip span:after {&#13;
    content: 'Hide Area';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stand-area .tooltip span:after {&#13;
    content: 'Stand Area';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.reset .tooltip span:after {&#13;
    content: 'Undo All';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.floating-image .tooltip span:after {&#13;
    content: 'Rulers';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.color .tooltip span:after {&#13;
    content: 'Color';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.thickness .tooltip span:after {&#13;
    content: 'Thickness';&#13;
}&#13;
&#13;
#iwb_tmp_canvas {&#13;
    -ms-touch-action: none;&#13;
}&#13;
&#13;
canvas {&#13;
    -ms-touch-action: none;&#13;
}&#13;
&#13;
.confirmation-remove-note &gt; span:after {&#13;
     content: 'Are you sure to remove this note?';&#13;
}&#13;
&#13;
.confirmation-remove-note .yes-button &gt; span:after {&#13;
    content: 'Yes';&#13;
}&#13;
&#13;
.confirmation-remove-note .no-button &gt; span:after {&#13;
    content: 'No';&#13;
}&#13;
&#13;
.confirmation-remove-note .no-button {&#13;
    float: right;&#13;
}&#13;
&#13;
.confirmation-remove-note .yes-button {&#13;
    float: left;&#13;
}&#13;
&#13;
.confirmation-remove-note .button {&#13;
    padding: 10px;&#13;
    border-radius: 5px;&#13;
    border: none;&#13;
    width: 50px;&#13;
    text-align: center;&#13;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);&#13;
    cursor: pointer;&#13;
    background: #FFF;&#13;
    color: #000;&#13;
}&#13;
&#13;
.confirmation-remove-note .ui-helper-clearfix {&#13;
    margin-top: 10px;&#13;
}&#13;
&#13;
.confirmation-remove-note {&#13;
    min-height: 50px;&#13;
    padding: 10px;&#13;
    display: none;&#13;
    width: 170px;&#13;
    left: 50%;&#13;
    margin-left: -100px;&#13;
    position: absolute;&#13;
    background-color: #63BAFF;&#13;
    color: #FFF;&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    font-size: 14px;&#13;
    z-index: 1002;&#13;
    padding: 30px 50px;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.confirmation-remove-clock &gt; span:after {&#13;
    content: 'Are you sure to remove this clock?';&#13;
}&#13;
&#13;
.confirmation-remove-clock .yes-button &gt; span:after {&#13;
    content: 'Yes';&#13;
}&#13;
&#13;
.confirmation-remove-clock .no-button &gt; span:after {&#13;
    content: 'No';&#13;
}&#13;
&#13;
.confirmation-remove-clock .no-button {&#13;
    float: right;&#13;
}&#13;
&#13;
.confirmation-remove-clock .yes-button {&#13;
    float: left;&#13;
}&#13;
&#13;
.confirmation-remove-clock .button {&#13;
    padding: 5px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid #696969;&#13;
    width: 50px;&#13;
    text-align: center;&#13;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.confirmation-remove-clock .ui-helper-clearfix {&#13;
    margin-top: 10px;&#13;
}&#13;
&#13;
.confirmation-remove-clock {&#13;
    min-height: 50px;&#13;
    padding: 10px;&#13;
    display: none;&#13;
    width: 200px;&#13;
    left: 50%;&#13;
    margin-left: -100px;&#13;
    position: absolute;&#13;
    background-color: rgba(245, 245, 245, 0.7);&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    font-size: 0.7em;&#13;
    z-index: 1002;&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch &gt; span:after {&#13;
    content: 'Are you sure to remove this stopwatch?';&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .yes-button &gt; span:after {&#13;
    content: 'Yes';&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .no-button &gt; span:after {&#13;
    content: 'No';&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .no-button {&#13;
    float: right;&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .yes-button {&#13;
    float: left;&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .button {&#13;
    padding: 5px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid #696969;&#13;
    width: 50px;&#13;
    text-align: center;&#13;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .ui-helper-clearfix {&#13;
    margin-top: 10px;&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch {&#13;
    min-height: 50px;&#13;
    padding: 10px;&#13;
    display: none;&#13;
    width: 200px;&#13;
    left: 50%;&#13;
    margin-left: -100px;&#13;
    position: absolute;&#13;
    background-color: rgba(245, 245, 245, 0.7);&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    font-size: 0.7em;&#13;
    z-index: 1002;&#13;
}&#13;
&#13;
.ui-helper-clearfix:before, .ui-helper-clearfix:after {&#13;
    content: "";&#13;
    display: table;&#13;
    height: 10px;&#13;
}&#13;
&#13;
#iwb_tmp_canvas {&#13;
    position: absolute;&#13;
    left: 0px; right: 0;&#13;
    bottom: 0; top: 0;&#13;
    cursor: crosshair;&#13;
}&#13;
&#13;
.closed-hide {&#13;
    display: none !important;&#13;
}&#13;
&#13;
.ic_page_panel.iwb-zoom-in {&#13;
    cursor: zoom-in;&#13;
    cursor: -moz-zoom-in;&#13;
    cursor: -webkit-zoom-in;&#13;
}&#13;
&#13;
.ic_page_panel.iwb-zoom-out {&#13;
    cursor: pointer;&#13;
}&#13;
</css><view>&lt;div class="confirmation-remove-note"&gt;&#13;
    &lt;span&gt;&lt;/span&gt; &lt;!-- text goes here --&gt;&#13;
    &lt;div class="ui-helper-clearfix"&gt;&#13;
        &lt;div class="yes-button button"&gt;&#13;
            &lt;span&gt;&lt;/span&gt; &lt;!-- text goes here --&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="no-button button"&gt;&#13;
            &lt;span&gt;&lt;/span&gt; &lt;!-- text goes here --&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="iwb-toolbar-panel"&gt;&#13;
    &lt;div class="button first open" data-name="open"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button first close hidden" data-name="close"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button default hidden" data-name="default"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button zoom hidden" data-name="zoom"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button pen hidden" data-name="pen"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button marker hidden" data-name="marker"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button eraser hidden" data-name="eraser"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button hide-area hidden" data-name="hide-area"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button stand-area hidden" data-name="stand-area"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button-separator hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button color hidden" data-name="color"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button thickness hidden" data-name="thickness"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button-separator hidden" &gt;&lt;/div&gt;&#13;
    &lt;div class="button reset hidden" data-name="reset"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button-separator hidden" &gt;&lt;/div&gt;&#13;
    &lt;div class="button note hidden" data-name="note"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button floating-image hidden" data-name="floating-image"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button clock hidden" data-name="clock"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button stopwatch hidden" data-name="stopwatch"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="bottom-panel ui-helper-clearfix bottom-panel-color"&gt;&#13;
        &lt;div class="container"&gt;&#13;
            &lt;div class="button-drawing-details color-blue" color="blue"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-green" color="green"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-yellow" color="yellow"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-orange" color="orange"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-red" color="red"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-violet" color="violet"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-black" color="black"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-white" color="white"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="bottom-panel ui-helper-clearfix bottom-panel-thickness"&gt;&#13;
        &lt;div class="container"&gt;&#13;
            &lt;div class="button-drawing-details thickness-1" thickness="1"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-2" thickness="2"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-3" thickness="3"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-4" thickness="4"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="bottom-panel ui-helper-clearfix bottom-panel-floating-image"&gt;&#13;
        &lt;div class="container"&gt;&#13;
            &lt;div class="button-floating-image button-floating-image-1" index="0"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-floating-image button-floating-image-2" index="1"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-floating-image button-floating-image-3" index="2"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="iwb-toolbar-panel"&gt;&#13;
    &lt;div class="button first open"&gt;&lt;/div&gt;&#13;
    &lt;div class="button first close hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button default hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button zoom hidden"&gt; &lt;/div&gt;&#13;
    &lt;div class="button pen hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button marker hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button note hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button clock hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button stopwatch hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button hide-area hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button stand-area hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button eraser hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button remove hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button-separator hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button color hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button thickness hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="bottom-panel ui-helper-clearfix bottom-panel-color"&gt;&#13;
        &lt;div class="container"&gt;&#13;
            &lt;div class="button-drawing-details color-blue" color="blue"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-green" color="green"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-yellow" color="yellow"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-orange" color="orange"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-red" color="red"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-violet" color="violet"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-black" color="black"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-white" color="white"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="bottom-panel ui-helper-clearfix bottom-panel-thickness"&gt;&#13;
        &lt;div class="container"&gt;&#13;
            &lt;div class="button-drawing-details thickness-1" thickness="1"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-2" thickness="2"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-3" thickness="3"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-4" thickness="4"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonIWB_Toolbar_create() {&#13;
&#13;
    /*&#13;
     * KNOWN ISSUES:&#13;
     *       Drawing with zoom:&#13;
     *          Because zoom option (provided with zoom.js library) is based on CSS properties 'zoom' and&#13;
     *          '-moz-transform' drawing in such mode is not possible. IWB Toolbar panel is hidden when user activates&#13;
     *          zoom option and it's displayed again after zooming out.&#13;
     *&#13;
     *       Preventing modules and addons click handlers execution in zoom mode:&#13;
     *          Each module and addon can register unlimited number of click handlers to its internal elements. When&#13;
     *          zoom mode is activated, IWB Toolbar needs to prevent execution of those handlers. For instance,&#13;
     *          TextAudio binds a handler to span elements. Those handlers needs to be removed for as long as zoom&#13;
      *         mode is active and reinstated when zoom mode is deactivated.&#13;
      *&#13;
      *      Incomplete erasing on Android:&#13;
      *      Issue occurs sometimes without known reason. The helpful solution was workaround redrawing canvas.&#13;
     */&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.noteObjects = [];&#13;
&#13;
    presenter._kinetic = {};&#13;
    presenter._kinetic.images = [];&#13;
    presenter._kinetic.rotateObj = [];&#13;
    presenter._kinetic.moveObj = [];&#13;
    presenter._kinetic.rotateIcon = [];&#13;
    presenter._kinetic.moveIcon = [];&#13;
    presenter._kinetic.imageObj = [];&#13;
    presenter._hoveredButtons = [];&#13;
    presenter._iwb_buttons = [];&#13;
    presenter._setState = {};&#13;
    presenter._setState.images = [];&#13;
&#13;
    presenter._stopwatchTimer = null;&#13;
    presenter._stopwatch = null;&#13;
&#13;
    presenter._clockwatch = null;&#13;
    presenter._clockwatchTimer = null;&#13;
&#13;
    presenter.buttonClicked = false;&#13;
    presenter.isZoomActive = false;&#13;
    presenter.areZoomEventHandlersAttached = false;&#13;
&#13;
    var DEFAULT_COLOR = '#0fa9f0';&#13;
    presenter.activeButton = '';&#13;
    presenter.activeFunction;&#13;
    presenter.isRecklicked = false;&#13;
&#13;
    presenter.points = [];&#13;
    presenter.mouse = {x: 0, y: 0};&#13;
&#13;
&#13;
    presenter.data = {&#13;
        defaultPenWidth: 1,&#13;
        penColor: DEFAULT_COLOR,&#13;
        markerColor: '#ffff99',&#13;
        markerThickness: 10,&#13;
        eraserThickness: 20&#13;
    };&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.areas = [];&#13;
    presenter.clocks = [];&#13;
    presenter.stopwatches = [];&#13;
    presenter.currentLineColor = DEFAULT_COLOR;&#13;
    presenter.currentLineWidth = presenter.data.defaultPenWidth;&#13;
    presenter.isMouseDown = false;&#13;
    presenter.lastMousePosition = {};&#13;
    presenter.floatingImageGroups = {};&#13;
    presenter.currentFloatingImageIndex = 0;&#13;
    presenter.textAudioEvents = [];&#13;
&#13;
    presenter.penUsed = false;&#13;
    presenter.markerUsed = false;&#13;
&#13;
&#13;
    function getCorrectObject(val) {&#13;
        return {&#13;
            isValid: true,&#13;
            value: val&#13;
        };&#13;
    }&#13;
&#13;
    function getErrorObject(ec) {&#13;
        return {&#13;
            isValid: false,&#13;
            errorCode: ec&#13;
        };&#13;
    }&#13;
&#13;
    function addZero(val) {&#13;
        return (val &gt; 9 ? '' : '0') + val;&#13;
    }&#13;
&#13;
    function getPoint(x, y) {&#13;
        return {&#13;
            x: x,&#13;
            y: y&#13;
        };&#13;
    }&#13;
&#13;
    presenter.DEFAULT_FLOATING_IMAGE = {&#13;
        0: 'it_ruler.png',&#13;
        1: 'it_setsquare.png',&#13;
        2: 'it_protractor.png'&#13;
    };&#13;
&#13;
    presenter.FLOATING_IMAGE_MODE = {&#13;
        ROTATE: 1,&#13;
        MOVE: 2&#13;
    };&#13;
&#13;
    presenter.DRAW_MODE = {&#13;
        MARKER: 1,&#13;
        PEN: 2,&#13;
        ERASER: 3,&#13;
        STAND_AREA: 4,&#13;
        HIDE_AREA: 5,&#13;
        NONE : 6&#13;
    };&#13;
&#13;
    presenter.drawMode = presenter.DRAW_MODE.NONE;&#13;
    presenter.floatingImageMode = presenter.FLOATING_IMAGE_MODE.MOVE;&#13;
&#13;
    presenter.DRAWING_DATA = {&#13;
        'color' : {&#13;
            'black': '#000',&#13;
            'white': '#fff',&#13;
            'yellow':'#FFFF66',&#13;
            'red': '#cf304b',&#13;
            'orange': '#FF9900',&#13;
            'blue': '#0fa9f0',&#13;
            'violet': '#990099',&#13;
            'green': '#05fa98'&#13;
        },&#13;
        'thickness' : {&#13;
            'pen' : {&#13;
                '1': 1,&#13;
                '2': 3,&#13;
                '3': 5,&#13;
                '4': 7&#13;
            },&#13;
            'marker' : {&#13;
                '1': 10,&#13;
                '2': 15,&#13;
                '3': 20,&#13;
                '4': 25&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function getCurrentGroup() {&#13;
        return presenter.floatingImageGroups[presenter.currentFloatingImageIndex];&#13;
    }&#13;
&#13;
    function getCurrentImage() {&#13;
        return presenter.floatingImageGroups[presenter.currentFloatingImageIndex].children[0];&#13;
    }&#13;
&#13;
    function getCurrentMoveIcon() {&#13;
        return presenter.floatingImageGroups[presenter.currentFloatingImageIndex].children[1];&#13;
    }&#13;
&#13;
    function getCurrentRotateIcon() {&#13;
        return presenter.floatingImageGroups[presenter.currentFloatingImageIndex].children[2];&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
        if (eventName == 'PageLoaded' &amp;&amp; eventData.source == 'header') {&#13;
            presenter.headerLoadedDeferred.resolve();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'E01': 'Width can NOT be negative.'&#13;
    };&#13;
&#13;
    presenter.closePanel = function IWB_Toolbar_closePanel() {&#13;
        if (!presenter.$panel.hasClass('animationInProgress')) {&#13;
            presenter.$bottomPanels.addClass('closed-hide');&#13;
&#13;
            presenter.$panel.addClass('animationInProgress');&#13;
            presenter.$panel.children('.button-separator').hide();&#13;
            presenter.$buttonsExceptOpen.addClass('hidden');&#13;
&#13;
            presenter.$panel.animate({&#13;
                'width' : presenter.config.widthWhenClosed - 50 + 'px'&#13;
            }, 1000, function() {&#13;
                presenter.$panel.children('.button.open').show();&#13;
                presenter.$panel.removeClass('animationInProgress');&#13;
                presenter.$panel.removeClass('opened');&#13;
            });&#13;
&#13;
            window.savedPanel.isOpen = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter._openPanelShow = function IWB_Toolbar_openPanelShow() {&#13;
        presenter.$buttonsExceptOpen.removeClass('hidden');&#13;
        presenter.$panel.children('.button.open').hide();&#13;
        presenter.$panel.children('.button-separator').show();&#13;
        presenter.$panel.removeClass('animationInProgress');&#13;
        presenter.$panel.addClass('opened');&#13;
        presenter.$bottomPanels.removeClass('closed-hide');&#13;
        presenter.toogleMasks();&#13;
    };&#13;
&#13;
    presenter.openPanel = function IWB_Toolbar_openPanel(doAnimation) {&#13;
        window.savedPanel.isOpen = true;&#13;
&#13;
        if (doAnimation) {&#13;
            presenter.$panel.addClass('animationInProgress');&#13;
            presenter.$panel.animate({&#13;
                'width' : presenter.config.widthWhenOpened + 'px'&#13;
            }, 1000, presenter._openPanelShow);&#13;
        } else {&#13;
            presenter._openPanelShow();&#13;
            presenter.$panel.css('width', window.savedPanel.widthWhenOpened + 'px');&#13;
        }&#13;
    };&#13;
&#13;
    function setOverflowWorkAround(turnOn) {&#13;
        if (!MobileUtils.isAndroidWebBrowser(window.navigator.userAgent)) { return false; }&#13;
&#13;
        var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
        if (["4.1.1", "4.1.2", "4.2.2", "4.3", "4.4.2"].indexOf(android_ver) !== -1) {&#13;
&#13;
            presenter.$pagePanel.find('.iwb-toolbar-mask').parents("*").each(function() {&#13;
                var overflow = null;&#13;
                if (turnOn) {&#13;
                    $(this).attr("data-overflow", $(this).css("overflow"));&#13;
                    $(this).css("overflow", "visible");&#13;
                } else {&#13;
                    overflow = $(this).attr("data-overflow");&#13;
                    if (overflow !== "") {&#13;
                        $(this).css("overflow", overflow);&#13;
                    }&#13;
                    $(this).removeAttr("data-overflow");&#13;
                }&#13;
            });&#13;
&#13;
        }&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.IWBDraw = function(canvas, ctx, mousePosition) {&#13;
        var grad = ctx.createLinearGradient(0, 0, canvas[0].width, 0);&#13;
        grad.addColorStop(0, presenter.currentLineColor);&#13;
        grad.addColorStop(1, presenter.currentLineColor);&#13;
&#13;
        if (presenter.drawMode == presenter.DRAW_MODE.ERASER){&#13;
            ctx.lineWidth = presenter.currentEraserThickness;&#13;
        }else{&#13;
            ctx.lineWidth = presenter.currentLineWidth;&#13;
        }&#13;
        ctx.strokeStyle = grad;&#13;
        ctx.lineCap = 'round';&#13;
        ctx.lineJoin = 'round';&#13;
&#13;
        ctx.beginPath();&#13;
        ctx.moveTo(presenter.lastMousePosition.x, presenter.lastMousePosition.y);&#13;
        ctx.lineTo(mousePosition.x, mousePosition.y);&#13;
        ctx.stroke();&#13;
    };&#13;
&#13;
    function getCursorPosition(e) {&#13;
        var canvas;&#13;
&#13;
        if(e.target.id == "iwb_tmp_canvas") {&#13;
            canvas = presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas')[0];&#13;
        } else {&#13;
            canvas = presenter.canvas[0];&#13;
        }&#13;
&#13;
        var rect = canvas.getBoundingClientRect();&#13;
        var canvasOffsetLeft = $(canvas).offset().left;&#13;
&#13;
        if(presenter.standHideAreaClicked){&#13;
            canvasOffsetLeft = 0;&#13;
        }&#13;
&#13;
        if (e.clientX) {&#13;
            return getPoint(&#13;
                parseInt(e.clientX - rect.left, 10),&#13;
                parseInt(e.clientY - rect.top, 10)&#13;
            );&#13;
        }&#13;
&#13;
        var t = event.targetTouches[0] || event.touches[0] || event.changedTouches[0];&#13;
        return getPoint(&#13;
            parseInt(t.pageX - canvasOffsetLeft, 10),&#13;
            parseInt(t.pageY - $(canvas).offset().top, 10)&#13;
        );&#13;
    }&#13;
&#13;
    function changeDrawingType(button) {&#13;
        var activeButton = presenter.$pagePanel.find('.clicked');&#13;
&#13;
        if ($(button).parent().parent().hasClass('bottom-panel-thickness')) { // is changing thickness&#13;
            var thickness = $(button).attr('thickness'),&#13;
                drawingType = activeButton.hasClass('pen') ? 'pen' : 'marker';&#13;
            presenter.data.defaultPenWidth = 1;&#13;
            presenter.changeThickness(presenter.DRAWING_DATA['thickness'][drawingType][thickness], button);&#13;
            presenter.buttonThickness = button;&#13;
        } else {&#13;
            var color = $(button).attr('color');&#13;
            presenter.changeColor(presenter.DRAWING_DATA['color'][color], button);&#13;
            presenter.buttonColor = button;&#13;
        }&#13;
    }&#13;
&#13;
    function openBottomPanel(button) {&#13;
        presenter.$pagePanel.find('.bottom-panel').hide();&#13;
&#13;
        var panel;&#13;
        if ($(button).hasClass('color')) {&#13;
            panel = presenter.$pagePanel.find('.bottom-panel-color');&#13;
        } else if ($(button).hasClass('thickness')) {&#13;
            panel = presenter.$pagePanel.find('.bottom-panel-thickness');&#13;
        } else {&#13;
            panel = presenter.$pagePanel.find('.bottom-panel-floating-image');&#13;
        }&#13;
&#13;
        if(panel.hasClass('bottom-panel-floating-image')){&#13;
            if(panel.attr('isHidden') == '0'){&#13;
                panel.hide();&#13;
                panel.attr('isHidden', '1');&#13;
                return;&#13;
            }&#13;
            if (panel.is(':visible')) {&#13;
                panel.hide();&#13;
                panel.attr('isHidden', '1');&#13;
            } else {&#13;
                panel.show();&#13;
                panel.attr('isHidden', '0');&#13;
            }&#13;
        }else{&#13;
            if (panel.is(':visible')) {&#13;
                panel.hide();&#13;
            } else {&#13;
                panel.show();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function applyDoubleTapHandler($element, callback) {&#13;
        var lastEvent = null,&#13;
            tapsCounter = 0;&#13;
&#13;
        $element.on('touchstart', function(e) {&#13;
            lastEvent = e.evt || e;&#13;
        });&#13;
&#13;
        $element.on('touchend', function(e) {&#13;
            if (lastEvent.type == 'touchstart') {&#13;
                tapsCounter++;&#13;
&#13;
                if (tapsCounter == 2) {&#13;
                    callback();&#13;
                    tapsCounter = 0;&#13;
                }&#13;
            }&#13;
            lastEvent = e.evt || e;&#13;
        });&#13;
&#13;
        $element.on('touchmove', function(e) {&#13;
            lastEvent = e.evt || e;&#13;
        });&#13;
    }&#13;
    &#13;
    function getTouchStartOrMouseDownEventName() {&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            return 'touchstart';&#13;
        }else{&#13;
            return 'mousedown';&#13;
        }&#13;
    }&#13;
&#13;
    presenter.onMobilePaint = function(e) {&#13;
        var iwb_tmp_canvas;&#13;
        iwb_tmp_canvas = presenter.iwb_tmp_canvas;&#13;
&#13;
        e.preventDefault();&#13;
        e.stopPropagation();&#13;
&#13;
        var x = e.targetTouches[0].pageX - $(iwb_tmp_canvas).offset().left;&#13;
        var y = e.targetTouches[0].pageY - $(iwb_tmp_canvas).offset().top;&#13;
&#13;
        presenter.mouse.x = x;&#13;
        presenter.mouse.y = y;&#13;
        presenter.onPaint(e);&#13;
    };&#13;
&#13;
    presenter.onPaint = function(e) {&#13;
        var iwb_tmp_canvas, tmp_ctx;&#13;
        iwb_tmp_canvas = presenter.iwb_tmp_canvas;&#13;
        tmp_ctx = presenter.tmp_ctx;&#13;
        tmp_ctx.globalAlpha = 0.4;&#13;
&#13;
        tmp_ctx.lineWidth = presenter.currentMarkerThickness;&#13;
        tmp_ctx.lineJoin = 'round';&#13;
        tmp_ctx.lineCap = 'round';&#13;
        tmp_ctx.strokeStyle = presenter.currentLineColor;&#13;
        tmp_ctx.fillStyle = presenter.currentLineColor;&#13;
&#13;
        presenter.points.push({x: presenter.mouse.x, y: presenter.mouse.y});&#13;
&#13;
        if (presenter.points.length &lt; 3) {&#13;
            var b = presenter.points[0];&#13;
            tmp_ctx.beginPath();&#13;
            tmp_ctx.arc(b.x, b.y, tmp_ctx.lineWidth / 2, 0, Math.PI * 2, !0);&#13;
            tmp_ctx.fill();&#13;
            tmp_ctx.closePath();&#13;
        } else {&#13;
            tmp_ctx.clearRect(0, 0, iwb_tmp_canvas.width, iwb_tmp_canvas.height);&#13;
&#13;
            tmp_ctx.beginPath();&#13;
            tmp_ctx.moveTo(presenter.points[0].x, presenter.points[0].y);&#13;
&#13;
            for (var i = 1; i &lt; presenter.points.length - 2; i++) {&#13;
                var c = (presenter.points[i].x + presenter.points[i + 1].x) / 2;&#13;
                var d = (presenter.points[i].y + presenter.points[i + 1].y) / 2;&#13;
&#13;
                tmp_ctx.quadraticCurveTo(presenter.points[i].x, presenter.points[i].y, c, d);&#13;
            }&#13;
&#13;
            tmp_ctx.quadraticCurveTo(&#13;
                presenter.points[i].x,&#13;
                presenter.points[i].y,&#13;
                presenter.points[i + 1].x,&#13;
                presenter.points[i + 1].y&#13;
            );&#13;
            tmp_ctx.stroke();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onTouchStartCallback = function (e) {&#13;
        e.preventDefault();&#13;
        e.stopPropagation();&#13;
&#13;
        setOverflowWorkAround(true);&#13;
&#13;
            presenter.onMobilePaint(e);&#13;
            presenter.iwb_tmp_canvas.addEventListener('touchmove', presenter.onMobilePaint);&#13;
&#13;
    };&#13;
&#13;
    presenter.onTouchEndEventCallback = function (e) {&#13;
        e.stopPropagation();&#13;
&#13;
        setOverflowWorkAround(false);&#13;
&#13;
        presenter.markerUsed = true;&#13;
&#13;
        presenter.iwb_tmp_canvas.removeEventListener('touchmove', presenter.onMobilePaint, false);&#13;
        presenter.markerCtx.drawImage(presenter.iwb_tmp_canvas, 0, 0);&#13;
        presenter.tmp_ctx.clearRect(0, 0, presenter.iwb_tmp_canvas.width, presenter.iwb_tmp_canvas.height);&#13;
&#13;
        presenter.points = [];&#13;
    };&#13;
&#13;
    presenter.markerMouseDownHandler = function IWB_Toolbar_markerMouseDownHandler(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        presenter.isMouseDown = true;&#13;
        setOverflowWorkAround(true);&#13;
&#13;
        presenter.iwb_tmp_canvas.addEventListener('mousemove', presenter.onPaint, false);&#13;
&#13;
        var x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
        var y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
&#13;
        presenter.points.push({x: x, y: y});&#13;
    };&#13;
&#13;
    presenter.markerMouseMoveHandler = function IWB_Toolbar_mouseMoveHandler(e) {&#13;
        if (presenter.isMouseDown) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (presenter.drawMode == presenter.DRAW_MODE.MARKER) {&#13;
                var x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
                var y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
&#13;
                presenter.mouse.x = x;&#13;
                presenter.mouse.y = y;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.markerMouseUpHandler = function IWB_Toolbar_mouseUpHandler(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
&#13;
        if (presenter.isMouseDown) {&#13;
            presenter.markerUsed = true;&#13;
        }&#13;
&#13;
        presenter.isMouseDown = false;&#13;
        setOverflowWorkAround(false);&#13;
&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mousemove', presenter.onPaint, false);&#13;
        presenter.markerCtx.drawImage(presenter.iwb_tmp_canvas, 0, 0);&#13;
        presenter.tmp_ctx.clearRect(0, 0, presenter.iwb_tmp_canvas.width, presenter.iwb_tmp_canvas.height);&#13;
&#13;
        presenter.points = [];&#13;
    };&#13;
&#13;
    presenter.markerDrawingLogic = function IWB_Toolbar_markerDrawingLogic() {&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            presenter.iwb_tmp_canvas.removeEventListener('touchstart', presenter.onTouchStartCallback, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('touchend', presenter.onTouchEndEventCallback, false);&#13;
        }else{&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mousemove', presenter.markerMouseMoveHandler, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mousedown', presenter.markerMouseDownHandler, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mouseup', presenter.markerMouseUpHandler, false);&#13;
        }&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            presenter.iwb_tmp_canvas.addEventListener('touchstart', presenter.onTouchStartCallback, false);&#13;
            presenter.iwb_tmp_canvas.addEventListener('touchend', presenter.onTouchEndEventCallback, false);&#13;
        } else {&#13;
            // MOUSE&#13;
            presenter.iwb_tmp_canvas.addEventListener('mousemove', presenter.markerMouseMoveHandler, false);&#13;
            $(presenter.iwb_tmp_canvas).on('mouseleave', presenter.markerMouseUpHandler);&#13;
            presenter.iwb_tmp_canvas.addEventListener('mousedown', presenter.markerMouseDownHandler, false);&#13;
            presenter.iwb_tmp_canvas.addEventListener('mouseup', presenter.markerMouseUpHandler, false);&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.penMouseDownHandler = function IWB_Toolbar_penMouseDownHandler(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        presenter.lastMousePosition = getCursorPosition(e);&#13;
        presenter.isMouseDown = true;&#13;
        setOverflowWorkAround(true);&#13;
    };&#13;
&#13;
    presenter.penMouseMoveHandler = function IWB_Toolbar_penMouseMoveHandler(e) {&#13;
        if (presenter.isMouseDown) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (presenter.drawMode == presenter.DRAW_MODE.MARKER) {&#13;
                presenter.IWBDraw(presenter.markerCanvas, presenter.markerCtx, getCursorPosition(e));&#13;
            } else if (presenter.drawMode == presenter.DRAW_MODE.PEN) {&#13;
                presenter.IWBDraw(presenter.canvas, presenter.ctx, getCursorPosition(e));&#13;
            } else if (presenter.drawMode == presenter.DRAW_MODE.ERASER) {&#13;
                presenter.IWBDraw(presenter.markerCanvas, presenter.markerCtx, getCursorPosition(e));&#13;
                presenter.IWBDraw(presenter.canvas, presenter.ctx, getCursorPosition(e));&#13;
&#13;
                var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
                if (["4.1.1", "4.1.2", "4.2.2", "4.3", "4.4.2"].indexOf(android_ver) !== -1) {&#13;
                    $('canvas').css('opacity', '0.99');&#13;
&#13;
                    setTimeout(function() {&#13;
                        $('canvas').css('opacity', '1');&#13;
                    }, 5);&#13;
                }&#13;
            }&#13;
            presenter.lastMousePosition = getCursorPosition(e);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.penMouseUpHandler = function IWB_Toolbar_penMouseUpHandler(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        if (presenter.isMouseDown) {&#13;
            presenter.penUsed = true;&#13;
        }&#13;
        presenter.isMouseDown = false;&#13;
        setOverflowWorkAround(false);&#13;
    };&#13;
&#13;
    presenter.drawingLogic = function IWB_Toolbar_drawingLogic() {&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            presenter.iwb_tmp_canvas.removeEventListener('touchstart', presenter.onTouchStartCallback, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('touchend', presenter.onTouchEndEventCallback, false);&#13;
        }else{&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mousemove', presenter.penMouseMoveHandler, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mousedown', presenter.penMouseDownHandler, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mouseup', presenter.penMouseUpHandler, false);&#13;
        }&#13;
&#13;
        $(presenter.canvas).off('mousedown mousemove mouseup touchstart touchmove touchend');&#13;
        $(presenter.markerCanvas).off('mousedown mousemove mouseup touchstart touchmove touchend');&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            $(presenter.canvas).on('touchstart', function(e) {&#13;
                presenter.penMouseDownHandler(e)&#13;
            });&#13;
            $(presenter.markerCanvas).on('touchstart', function(e) {&#13;
                presenter.penMouseDownHandler(e)&#13;
            });&#13;
        }else{&#13;
            $(presenter.canvas).on('mousedown', presenter.penMouseDownHandler);&#13;
&#13;
            $(presenter.markerCanvas).on('mousedown', presenter.penMouseDownHandler);&#13;
        }&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            $(presenter.markerCanvas).on('touchmove', function(e) {&#13;
                presenter.penMouseMoveHandler(e);&#13;
            });&#13;
&#13;
            $(presenter.canvas).on('touchmove', function(e) {&#13;
                presenter.penMouseMoveHandler(e);&#13;
            });&#13;
        }else{&#13;
            $(presenter.markerCanvas).on('mousemove', presenter.penMouseMoveHandler);&#13;
&#13;
            $(presenter.canvas).on('mousemove', presenter.penMouseMoveHandler);&#13;
        }&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            $(presenter.canvas).on('touchend', function(e) {&#13;
                presenter.penMouseUpHandler(e);&#13;
            });&#13;
&#13;
            $(presenter.markerCanvas).on('touchend', function(e) {&#13;
                presenter.penMouseUpHandler(e);&#13;
            });&#13;
        }else{&#13;
            $(presenter.canvas).on('mouseup', presenter.penMouseUpHandler);&#13;
            $(presenter.markerCanvas).on('mouseup', presenter.penMouseUpHandler);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setBasicConfiguration = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.$panel = $(view).find('.iwb-toolbar-panel');&#13;
        presenter.$panel.attr('id', model['ID'] + '-panel');&#13;
        presenter.$defaultThicknessButton = presenter.$panel.find('.thickness-1');&#13;
        presenter.$defaultColorButton = presenter.$panel.find('.color-blue');&#13;
        presenter.isInFrame = window.parent.location != window.location;&#13;
        presenter.$buttonsExceptOpen = presenter.$panel.children('.button:not(.open)');&#13;
        presenter.buttonWidth = presenter.$buttonsExceptOpen.width();&#13;
&#13;
        presenter.$view.parent().append(presenter.$panel);&#13;
&#13;
        presenter.$view.disableSelection();&#13;
        presenter.$removeConfirmationBox = presenter.$view.find('.confirmation-remove-note');&#13;
        presenter.$removeConfirmationBox.attr('id', 'confirmationBox-' + model['ID']);&#13;
&#13;
        presenter.$pagePanel = presenter.$view.parent().parent('.ic_page_panel');&#13;
        presenter.$pagePanel.find('.ic_page').append(presenter.$removeConfirmationBox);&#13;
        presenter.$pagePanel.find('.ic_page').append(presenter.$removeConfirmationBoxClock);&#13;
        presenter.$pagePanel.find('.ic_page').append(presenter.$removeConfirmationBoxStopwatch);&#13;
        presenter.changeCursor('default');&#13;
&#13;
&#13;
        presenter.$removeConfirmationBoxClock = presenter.$view.find('.confirmation-remove-clock');&#13;
        presenter.$removeConfirmationBoxStopwatch = presenter.$view.find('.confirmation-remove-stopwatch');&#13;
        presenter.$removeConfirmationBoxClock.attr('id', 'confirmationBox-' + model['ID']);&#13;
        presenter.$removeConfirmationBoxStopwatch.attr('id', 'confirmationBox-' + model['ID']);&#13;
&#13;
        presenter.$bottomPanels = $('.bottom-panel-color, .bottom-panel-thickness, .bottom-panel-floating-image');&#13;
&#13;
        presenter.config = validateModel(model);&#13;
    };&#13;
&#13;
    presenter.SHOW_PANEL = {&#13;
        '---': 'NONE',&#13;
        'Color panel': 'COLOR',&#13;
        'Thickness panel': 'THICKNESS',&#13;
        DEFAULT: '---'&#13;
    };&#13;
&#13;
    function validateModel(model) {&#13;
        var validated,&#13;
            widthWhenOpened,&#13;
            widthWhenClosed;&#13;
&#13;
        if (model['widthWhenOpened']) {&#13;
            validated = ModelValidationUtils.validatePositiveInteger(model['widthWhenOpened']);&#13;
        } else {&#13;
            validated = getCorrectObject(538);&#13;
        }&#13;
&#13;
        if (!validated.isValid) {&#13;
            return getErrorObject('E01');&#13;
        }&#13;
&#13;
        widthWhenOpened = validated.value;&#13;
&#13;
        if (model['Width']) {&#13;
            validated = ModelValidationUtils.validatePositiveInteger(model['Width']);&#13;
        } else {&#13;
            validated = getCorrectObject(30);&#13;
        }&#13;
&#13;
        if (!validated.isValid) {&#13;
            return getErrorObject('E01');&#13;
        }&#13;
&#13;
        widthWhenClosed = validated.value;&#13;
&#13;
        return {&#13;
            'isValid': true,&#13;
&#13;
            'widthWhenClosed': widthWhenClosed,&#13;
            'widthWhenOpened': widthWhenOpened,&#13;
            'panelPosition': model['Fixed Position'] == 'True' ? 'absolute' : 'fixed',&#13;
&#13;
            'showForPen': ModelValidationUtils.validateOption(presenter.SHOW_PANEL, model.forPen),&#13;
            'showForMarker': ModelValidationUtils.validateOption(presenter.SHOW_PANEL, model.forMarker)&#13;
        };&#13;
    }&#13;
&#13;
    presenter.setImagePosition = function IWB_Toolbar_setImagePosition() {&#13;
        var topPosition = parseInt(/*$(window).scrollTop() + */(getCurrentImage().height() / 2)+ presenter.$panel.offset().top, 10);&#13;
        var leftPosition = parseInt((getCurrentImage().width() / 2) + presenter.$panel.position().left, 10);&#13;
&#13;
        presenter.floatingImageLayer.draw();&#13;
        getCurrentImage().setAbsolutePosition(getPoint(leftPosition, topPosition));&#13;
        getCurrentMoveIcon().setAbsolutePosition(getPoint(leftPosition - 10, topPosition - 20));&#13;
        getCurrentRotateIcon().setAbsolutePosition(getPoint(leftPosition - 10, topPosition - 20));&#13;
        presenter.floatingImageLayer.draw();&#13;
    };&#13;
&#13;
    presenter.preventClickActionTextAudio = function IWB_Toolbar_preventClickActionTextAudio(event) {&#13;
        if (!presenter.isZoomActive) return;&#13;
&#13;
        event.stopPropagation();&#13;
        event.preventDefault();&#13;
    };&#13;
&#13;
    presenter.disableTextAudioEventHandlers = function () {&#13;
        presenter.textAudioEvents = [];&#13;
&#13;
        // Removes (temporally) event handlers from both words and custom controls.&#13;
        presenter.modules.find('.wrapper-addon-textaudio .textaudio-text span, .wrapper-addon-textaudio .textaudio-player div').each(function (_, element) {&#13;
            // This jQuery API is no longer available in version 1.8+ versions!&#13;
            var events = jQuery(element).data('events'),&#13;
                handlers = [];&#13;
&#13;
            if (!events || !events['click']) {&#13;
                return true; // jQuery.each() continue statement&#13;
            }&#13;
&#13;
            $.each(events['click'], function (_, event) {&#13;
                handlers.push(event.handler);&#13;
            });&#13;
&#13;
            presenter.textAudioEvents.push({&#13;
                element: element,&#13;
                handlers: handlers&#13;
            });&#13;
&#13;
            $(element).unbind('click');&#13;
            $(element).on('click', preventClickActionTextAudio);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.restoreTextAudioEventHandlers = function () {&#13;
        $.each(presenter.textAudioEvents, function (_, textAudioEvent) {&#13;
            var $element = $(textAudioEvent.element);&#13;
&#13;
            $element.unbind('click');&#13;
&#13;
            $.each(textAudioEvent.handlers, function (_, handler) {&#13;
                $element.on('click', handler);&#13;
            });&#13;
        });&#13;
&#13;
        presenter.textAudioEvents = [];&#13;
    };&#13;
&#13;
    presenter.penLineColor = presenter.data.penColor;&#13;
    presenter.penLineWidth = 1;&#13;
&#13;
    presenter.markerLineColor = presenter.data.markerColor;&#13;
    presenter.markerLineWidth = presenter.data.markerThickness;&#13;
&#13;
    presenter.penClickHandler = function IWB_Toolbar_penClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').hide();&#13;
        presenter.$defaultColorButton = presenter.$panel.find('.color-blue');&#13;
&#13;
        presenter.changeColor(presenter.penLineColor);&#13;
        presenter.changeThickness(presenter.penLineWidth);&#13;
        if(presenter.penColorBackground){&#13;
            presenter.$panel.find('.button.color').css('background-image', presenter.penColorBackground);&#13;
        }&#13;
        if(presenter.penThicknessBackground){&#13;
            presenter.$panel.find('.button.thickness').css('background-image', presenter.penThicknessBackground);&#13;
        }&#13;
&#13;
        presenter.toogleMasks();&#13;
&#13;
        presenter.ctx.globalCompositeOperation = 'source-over';&#13;
        presenter.drawMode = presenter.DRAW_MODE.PEN;&#13;
&#13;
        presenter.drawingLogic();&#13;
&#13;
        presenter.toggleBottomPanels();&#13;
    };&#13;
&#13;
    presenter.markerClickHandler = function IWB_Toolbar_markerClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').show();&#13;
        presenter.$defaultColorButton = presenter.$panel.find('.color-yellow');&#13;
        presenter.changeColor(presenter.markerLineColor);&#13;
        presenter.changeThickness(presenter.markerLineWidth);&#13;
        if(presenter.markerColorBackground){&#13;
            presenter.$panel.find('.button.color').css('background-image', presenter.markerColorBackground);&#13;
        }&#13;
        if(presenter.markerThicknessBackground){&#13;
            presenter.$panel.find('.button.thickness').css('background-image', presenter.markerThicknessBackground);&#13;
        }&#13;
        presenter.toogleMasks();&#13;
&#13;
        presenter.markerCtx.globalCompositeOperation = 'source-over';&#13;
        presenter.drawMode = presenter.DRAW_MODE.MARKER;&#13;
&#13;
        presenter.markerDrawingLogic();&#13;
&#13;
        presenter.toggleBottomPanels();&#13;
        presenter.markerClicked = true;&#13;
    };&#13;
&#13;
    presenter.markerCloseHandler = function IWB_Toolbar_markerCloseHandler() {&#13;
        presenter.markerLineColor = presenter.currentLineColor;&#13;
        presenter.markerLineWidth = presenter.currentLineWidth;&#13;
        presenter.markerColorBackground = presenter.$panel.find('.button.color').css('background-image');&#13;
        presenter.markerThicknessBackground = presenter.$panel.find('.button.thickness').css('background-image');&#13;
    };&#13;
&#13;
    presenter.getTheWidestAndHighest = function IWB_Toolbar_getTheWidestAndHighest(elem) {&#13;
        var width = $(elem).outerWidth(),&#13;
            height = $(elem).outerHeight();&#13;
&#13;
        elem.find("*").each(function () {&#13;
            if($(this).outerWidth() &gt; width){&#13;
                width = $(this).outerWidth();&#13;
            }&#13;
&#13;
            if($(this).outerHeight() &gt; height){&#13;
                height = $(this).outerHeight();&#13;
            }&#13;
        });&#13;
&#13;
        return {&#13;
            height: height,&#13;
            width: width&#13;
        };&#13;
    };&#13;
&#13;
    presenter.preventClickAction_zoomClickHandler = function IWB_Toolbar_preventClickAction_zoomClickHandler(event) {&#13;
        event.stopPropagation();&#13;
        event.preventDefault();&#13;
    };&#13;
&#13;
    presenter.zoomClickHandler = function IWB_Toolbar_zoomClickHandler(button){&#13;
        var lastEvent = null;&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').hide();&#13;
&#13;
        presenter.isZoomActive = !presenter.isZoomActive;&#13;
        presenter.$bottomPanels.hide();&#13;
&#13;
        if (!presenter.isZoomActive) {&#13;
            presenter.changeCursor('default');&#13;
        } else {&#13;
            presenter.changeCursor('zoom-in');&#13;
        }&#13;
        presenter.modules = presenter.$pagePanel.find('.ic_page &gt; *:not(.iwb-toolbar-panel,.iwb-toolbar-note,.iwb-toolbar-clock,.iwb-toolbar-stopwatch,.confirmation-remove-note,.iwb-toolbar-mask)');&#13;
&#13;
        if(presenter.isZoomActive){&#13;
            presenter.modules.each(function () {&#13;
               var coverElement = $('&lt;div class="iwb-zoom-cover"&gt;&lt;/div&gt;'),&#13;
                   maxDimensions = presenter.getTheWidestAndHighest($(this));&#13;
               coverElement.css({&#13;
                  position: "absolute",&#13;
                  left: $(this).position().left,&#13;
                  top: $(this).position().top,&#13;
                  width: maxDimensions.width,&#13;
                  height: maxDimensions.height,&#13;
                  display: $(this).css('display'),&#13;
                  visibility: $(this).css('visibility')&#13;
               });&#13;
&#13;
               $('.ic_page').append(coverElement);&#13;
            });&#13;
&#13;
            var iwbCoverElements = $(".iwb-zoom-cover");&#13;
&#13;
            iwbCoverElements.on('click mousedown mouseup', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
            });&#13;
&#13;
            presenter.modules.find('a').on('click', presenter.preventClickAction_zoomClickHandler);&#13;
&#13;
            iwbCoverElements.on('mousedown', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                lastEvent = e;&#13;
                presenter.isMouseDown= true;&#13;
            });&#13;
&#13;
            iwbCoverElements.on('mouseup', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.isMouseDown = false;&#13;
&#13;
                if ((lastEvent.type == 'mousedown'|| lastEvent.type == 'mousemove') &amp;&amp;&#13;
                    !$(e.currentTarget).hasClass('iwb-toolbar-panel') &amp;&amp;&#13;
                    !$(e.currentTarget).hasClass('addon_IWB_Toolbar') &amp;&amp;&#13;
                    !$(e.currentTarget).hasClass('iwb-toolbar-note') &amp;&amp;&#13;
                    !$(e.currentTarget).hasClass('iwb-toolbar-clock') &amp;&amp;&#13;
                    !$(e.currentTarget).hasClass('iwb-toolbar-stopwatch')) { // click&#13;
&#13;
                    presenter.zoomSelectedModule(e.currentTarget);&#13;
                }&#13;
                lastEvent = e;&#13;
            });&#13;
&#13;
            iwbCoverElements.on('mousemove', function(e) {&#13;
                if (presenter.isMouseDown) {&#13;
                    e.stopPropagation();&#13;
                    e.preventDefault();&#13;
                    var currentScrollX = $(window).scrollLeft(),&#13;
                        currentScrollY = $(window).scrollTop(),&#13;
                        differenceX = lastEvent.clientX - e.clientX,&#13;
                        differenceY = lastEvent.clientY - e.clientY;&#13;
&#13;
                    $(window).scrollLeft(currentScrollX + differenceX);&#13;
                    $(window).scrollTop(currentScrollY + differenceY);&#13;
                }&#13;
&#13;
                lastEvent = e;&#13;
            });&#13;
        }else{&#13;
            $(".iwb-zoom-cover").remove();&#13;
        }&#13;
&#13;
        presenter.$pagePanel.disableSelection();&#13;
&#13;
        if (presenter.isZoomActive) {&#13;
            presenter.disableTextAudioEventHandlers();&#13;
        } else {&#13;
            presenter.restoreTextAudioEventHandlers();&#13;
        }&#13;
&#13;
        if (presenter.areZoomEventHandlersAttached) {&#13;
            // We cannot attach multiple times the same event handlers&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.areZoomEventHandlersAttached = true;&#13;
    };&#13;
&#13;
    presenter.zoomCloseHandler = function IWB_Toolbar_zoomCloseHandler() {&#13;
        $(".iwb-zoom-cover").remove();&#13;
    };&#13;
&#13;
    presenter.eraserClickHandler = function IWB_Toolbar_eraserClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').hide();&#13;
&#13;
        if (presenter.ctx) {&#13;
            presenter.ctx.globalCompositeOperation = 'destination-out';&#13;
        }&#13;
        if (presenter.markerCtx) {&#13;
            presenter.markerCtx.globalCompositeOperation = 'destination-out';&#13;
        }&#13;
&#13;
        presenter.$penMask.css('pointer-events', 'auto');&#13;
        presenter.$markerMask.css('pointer-events', 'auto');&#13;
&#13;
        presenter.changeColor('rgba(0, 0, 0, 1)');&#13;
        presenter.changeThickness(presenter.data.eraserThickness);&#13;
        presenter.drawMode = presenter.DRAW_MODE.ERASER;&#13;
        presenter.drawingLogic();&#13;
        presenter.toogleMasks();&#13;
    };&#13;
&#13;
    presenter.eraserUnClickHandler = function IWB_Toolbar_eraserUnClickHandler(button) {&#13;
        presenter.panelView(button);&#13;
&#13;
        presenter.$penMask.css('pointer-events', 'none');&#13;
        presenter.$markerMask.css('pointer-events', 'none');&#13;
    };&#13;
&#13;
    presenter.hideAreaClickHandler = function IWB_Toolbar_hideAreaClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').hide();&#13;
        presenter.toogleMasks();&#13;
        presenter.drawAreaLogic(true);&#13;
&#13;
        presenter.drawMode = presenter.DRAW_MODE.HIDE_AREA;&#13;
        presenter.$defaultColorButton = presenter.$panel.find('.color-black');&#13;
        presenter.changeColor('#000');&#13;
    };&#13;
&#13;
    presenter.standAreaClickHandler = function IWB_Toolbar_standAreaClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').hide();&#13;
        presenter.toogleMasks();&#13;
        presenter.drawAreaLogic(false);&#13;
&#13;
        presenter.drawMode = presenter.DRAW_MODE.STAND_AREA;&#13;
        presenter.$defaultColorButton = presenter.$panel.find('.color-black');&#13;
        presenter.changeColor('#000');&#13;
    };&#13;
&#13;
    presenter.resetClickHandler = function IWB_Toolbar_resetClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.selectingCtx.clearRect(0, 0, presenter.$selectingMask.width(), presenter.$selectingMask.height());&#13;
        presenter.ctx.clearRect(0, 0, presenter.$penMask.width(), presenter.$penMask.height());&#13;
        presenter.markerCtx.clearRect(0, 0, presenter.$markerMask.width(), presenter.$markerMask.height());&#13;
&#13;
        presenter.areas = [];&#13;
        presenter.drawMode = presenter.DRAW_MODE.NONE;&#13;
&#13;
        $(".iwb-zoom-cover").remove();&#13;
&#13;
        presenter._reset(true, false, false, false, false);&#13;
    };&#13;
&#13;
    presenter.noteClickHandler = function IWB_Toolbar_noteClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
&#13;
        var note = presenter.createNote();&#13;
        presenter.noteObjects.push(note);&#13;
&#13;
        var $noteView = note.getView();&#13;
        presenter.$pagePanel.find('.ic_page').append($noteView);&#13;
&#13;
        presenter.$pagePanel.find('.iwb-toolbar-note').click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
        presenter.$pagePanel.find('.note').on('mousedown', function() {&#13;
            presenter.$pagePanel.find('.note').addClass('clicked');&#13;
        });&#13;
        presenter.$pagePanel.find('.note').on('mouseup', function() {&#13;
            presenter.$pagePanel.find('.note').removeClass('clicked');&#13;
        });&#13;
    };&#13;
&#13;
    presenter.floatingImageClickHandler = function IWB_Toolbar_floatingImageClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        $.when.apply($, presenter.allImagesLoadedPromises).then(function() {&#13;
            var display = presenter.$pagePanel.find('.floating-image-mask').css('display');&#13;
            if (display == 'none') {&#13;
                presenter.$floatingImageMask.show();&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').show();&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').attr('isHidden', '1');&#13;
            } else {&#13;
                presenter.$floatingImageMask.hide();&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').hide();&#13;
                presenter.$pagePanel.find('.floating-image').removeClass('clicked');&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').attr('isHidden', '0');&#13;
            }&#13;
            presenter.setImagePosition();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.clockClickHandler = function IWB_Toolbar_clockClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.clock').on('mousedown', function() {&#13;
            presenter.$pagePanel.find('.clock').addClass('clicked');&#13;
        });&#13;
        presenter.$pagePanel.find('.clock').on('mouseup', function() {&#13;
            presenter.$pagePanel.find('.clock').removeClass('clicked');&#13;
        });&#13;
        presenter.createClock();&#13;
    };&#13;
&#13;
    presenter.stopwatchClickHandler = function IWB_Toolbar_stopwatchClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.stopwatch').on('mousedown', function() {&#13;
            presenter.$pagePanel.find('.stopwatch').addClass('clicked');&#13;
        });&#13;
        presenter.$pagePanel.find('.stopwatch').on('mouseup', function() {&#13;
            presenter.$pagePanel.find('.stopwatch').removeClass('clicked');&#13;
        });&#13;
        presenter.createStopwatch();&#13;
    };&#13;
&#13;
    presenter.closeClickHandler = function IWB_Toolbar_closeClickHandler(button) {&#13;
        if(presenter.shouldSaveColor == 'pen' || presenter.shouldSaveColor == 'stand-area' || presenter.shouldSaveColor == 'hide-area'){&#13;
            presenter.closePenColor = presenter.currentLineColor;&#13;
            presenter.closePenThickness = presenter.currentLineWidth;&#13;
&#13;
            presenter.isCloseColor = true;&#13;
        }else if(presenter.shouldSaveColor == 'marker'){&#13;
            presenter.closePenColor = presenter.currentLineColor;&#13;
            presenter.closePenThickness = presenter.currentMarkerThickness;&#13;
&#13;
            presenter.isCloseColor = true;&#13;
        }&#13;
        else{&#13;
            presenter.isCloseColor = false;&#13;
        }&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$panel.find('.clicked').removeClass('clicked');&#13;
        presenter.closePanel();&#13;
        presenter.isPanelOpened = false;&#13;
        if(presenter.activeButton != 'open'){&#13;
            presenter.activeFunction = presenter.activeButton;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.openClickHandler = function IWB_Toolbar_openClickHandler(button){&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        if (!presenter.isPanelOpened) {&#13;
            presenter.openPanel(true);&#13;
        }&#13;
&#13;
        if(presenter.activeFunction){&#13;
            if(presenter.activeFunction != 'clock' &amp;&amp; presenter.activeFunction != 'stopwatch' &amp;&amp; presenter.activeFunction != 'note' &amp;&amp; presenter.activeFunction != 'reset'){&#13;
                if(!presenter.recklick){&#13;
                    presenter.functionButton = presenter.$pagePanel.find('.'+presenter.activeFunction);&#13;
                    presenter.buttonsLogic[presenter.activeFunction].onOpen(presenter.functionButton);&#13;
                }&#13;
                presenter.isRecklicked = false;&#13;
            }&#13;
        }&#13;
&#13;
        presenter.isPanelOpened = true;&#13;
&#13;
        if(presenter.isSavedState){&#13;
            if(presenter.isCloseColor){&#13;
                presenter.changeColor(presenter.closePenColor, presenter.buttonColor);&#13;
                presenter.changeThickness(presenter.closePenThickness, presenter.buttonThickness);&#13;
            }&#13;
            presenter.isSavedState = false;&#13;
        }else{&#13;
            if(presenter.isCloseColor){&#13;
                presenter.changeColor(presenter.closePenColor, presenter.buttonColor);&#13;
                presenter.changeThickness(presenter.closePenThickness, presenter.buttonThickness);&#13;
            }else{&#13;
                presenter.changeColor('#000', presenter.$bottomPanels.find('.color-black'));&#13;
                presenter.changeThickness(1, presenter.$bottomPanels.find('.thickness-1'));&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.panelView = function IWB_Toolbar_panelView (button) {&#13;
        var shouldClosePanels = shouldClosePanelsOnReset(button);&#13;
&#13;
        presenter._reset(shouldClosePanels, false, shouldHideDrawingMasks(button), shouldHideSelectingMasks(button), shouldHideFloatingImage(button));&#13;
        if (!$(button).hasClass('open') &amp;&amp; !$(button).hasClass('close')) {&#13;
            if ($(button).hasClass('clicked')) {&#13;
                $(button).removeClass('clicked');&#13;
            } else {&#13;
                presenter.$panel.find('.clicked').removeClass('clicked');&#13;
                $(button).addClass('clicked');&#13;
            }&#13;
        }&#13;
        if (presenter.isSupportCSSPointerEvents()) {&#13;
            if (!$(button).hasClass('pen') &amp;&amp; !$(button).hasClass('marker') &amp;&amp; !$(button).hasClass('eraser')){&#13;
                presenter.$penMask.css('pointer-events', 'none');&#13;
                presenter.$markerMask.css('pointer-events', 'none');&#13;
            }else{&#13;
                presenter.$penMask.css('pointer-events', 'auto');&#13;
                presenter.$markerMask.css('pointer-events', 'auto');&#13;
            }&#13;
        }&#13;
        changeCurrentFloatingImage(presenter.currentFloatingImageIndex);&#13;
    };&#13;
&#13;
    presenter.colorClickHandler = function IWB_Toolbar_colorClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        if (presenter.areDrawingButtonsActive()) {&#13;
            presenter.$panel.find('.button.clicked-lighter').removeClass('clicked-lighter');&#13;
            $(button).toggleClass('clicked-lighter');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.thicknessClickHandler = function IWB_Toolbar_thicknessClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        if (presenter.areDrawingButtonsActive()) {&#13;
            presenter.$panel.find('.button.clicked-lighter').removeClass('clicked-lighter');&#13;
            $(button).toggleClass('clicked-lighter');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.defaultClickHandler = function IWB_Toolbar_defaultClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
    };&#13;
&#13;
    presenter.penUnclickHandler = function IWB_Toolbar_penUnclickHandler (button) {&#13;
        presenter._reset(true, false, 1, true, true);&#13;
        if ($(button).hasClass('clicked')) {&#13;
            $(button).removeClass('clicked');&#13;
        } else {&#13;
            presenter.$panel.find('.clicked').removeClass('clicked');&#13;
            $(button).addClass('clicked');&#13;
        }&#13;
&#13;
        presenter.$penMask.css('pointer-events', 'none');&#13;
        presenter.$markerMask.css('pointer-events', 'none');&#13;
&#13;
        presenter.penLineColor = presenter.currentLineColor;&#13;
        presenter.penLineWidth = presenter.currentLineWidth;&#13;
        presenter.colorBackground = presenter.$panel.find('.button.color').css('background-image');&#13;
        presenter.penThicknessBackground = presenter.$panel.find('.button.thickness').css('background-image');&#13;
&#13;
        presenter.penClicked = false;&#13;
    };&#13;
&#13;
    presenter.markerUnclickHandler = function IWB_Toolbar_markerUnclickHandler(button) {&#13;
        presenter._reset(true, false, 1, true, true);&#13;
        if ($(button).hasClass('clicked')) {&#13;
            $(button).removeClass('clicked');&#13;
        } else {&#13;
            presenter.$panel.find('.clicked').removeClass('clicked');&#13;
            $(button).addClass('clicked');&#13;
        }&#13;
&#13;
        presenter.$penMask.css('pointer-events', 'none');&#13;
        presenter.$markerMask.css('pointer-events', 'none');&#13;
&#13;
        presenter.markerLineColor = presenter.currentLineColor;&#13;
        presenter.markerLineWidth = presenter.currentLineWidth;&#13;
        presenter.markerColorBackground = presenter.$panel.find('.button.color').css('background-image');&#13;
        presenter.markerThicknessBackground = presenter.$panel.find('.button.thickness').css('background-image');&#13;
        presenter.markerClicked = false;&#13;
    };&#13;
&#13;
    presenter.penCloseHandler = function IWB_Toolbar_penCloseHandler() {&#13;
        presenter.penLineColor = presenter.currentLineColor;&#13;
        presenter.penLineWidth = presenter.currentLineWidth;&#13;
        presenter.penColorBackground = presenter.$panel.find('.button.color').css('background-image');&#13;
        presenter.penThicknessBackground = presenter.$panel.find('.button.thickness').css('background-image');&#13;
    };&#13;
&#13;
    presenter.buttonsLogic = {&#13;
        'pen' : {&#13;
            'onOpen': presenter.penClickHandler,&#13;
            'onClose': presenter.penCloseHandler,&#13;
            'onReclicked': presenter.penUnclickHandler&#13;
        },&#13;
        'marker' : {&#13;
            'onOpen': presenter.markerClickHandler,&#13;
            'onClose': presenter.markerCloseHandler,&#13;
            'onReclicked': presenter.markerUnclickHandler&#13;
        },&#13;
        'default' : {&#13;
            'onOpen': presenter.defaultClickHandler,&#13;
            'onReclicked': presenter.defaultClickHandler&#13;
        },&#13;
        'color' : {&#13;
            'onOpen': presenter.colorClickHandler,&#13;
            'onReclicked': presenter.colorClickHandler&#13;
        },&#13;
        'thickness' : {&#13;
            'onOpen': presenter.thicknessClickHandler,&#13;
            'onReclicked': presenter.thicknessClickHandler&#13;
        },&#13;
        'zoom' : {&#13;
            'onOpen': presenter.zoomClickHandler,&#13;
            'onReclicked': presenter.zoomClickHandler,&#13;
            'onClose': presenter.zoomCloseHandler&#13;
        },&#13;
        'eraser' : {&#13;
            'onOpen': presenter.eraserClickHandler,&#13;
            'onReclicked': presenter.eraserUnClickHandler&#13;
        },&#13;
        'hide-area' : {&#13;
            'onOpen': presenter.hideAreaClickHandler,&#13;
            'onReclicked': presenter.hideAreaClickHandler&#13;
        },&#13;
        'stand-area' : {&#13;
            'onOpen': presenter.standAreaClickHandler,&#13;
            'onClose': '',&#13;
            'onReclicked': presenter.standAreaClickHandler&#13;
        },&#13;
        'reset' : {&#13;
            'onOpen': presenter.resetClickHandler,&#13;
            'onReclicked': presenter.resetClickHandler&#13;
        },&#13;
        'note' : {&#13;
            'onOpen': presenter.noteClickHandler,&#13;
            'onReclicked': presenter.noteClickHandler&#13;
        },&#13;
        'floating-image' : {&#13;
            'onOpen': presenter.floatingImageClickHandler,&#13;
            'onReclicked': presenter.floatingImageClickHandler&#13;
        },&#13;
        'clock' : {&#13;
            'onOpen': presenter.clockClickHandler,&#13;
            'onReclicked': presenter.clockClickHandler&#13;
        },&#13;
        'stopwatch' : {&#13;
            'onOpen': presenter.stopwatchClickHandler,&#13;
            'onReclicked': presenter.stopwatchClickHandler&#13;
        },&#13;
        'close' : {&#13;
            'onOpen': presenter.closeClickHandler&#13;
        },&#13;
        'open' : {&#13;
            'onOpen': presenter.openClickHandler&#13;
        }&#13;
    };&#13;
&#13;
    function clickHandlers (button) {&#13;
        presenter._iwb_buttons.push($(button));&#13;
        var buttonName = $(button).data("name"),&#13;
            sameButton = presenter.$pagePanel.find('.clicked').data("name") == $(button).data("name");&#13;
&#13;
        if(presenter.activeButton != '' &amp;&amp; presenter.buttonsLogic[presenter.activeButton].onClose){&#13;
            presenter.buttonsLogic[presenter.activeButton].onClose(button);&#13;
        }&#13;
&#13;
        if(presenter.activeButton == 'open' &amp;&amp; presenter.buttonClicked &amp;&amp; !presenter.recklick &amp;&amp; sameButton){&#13;
            presenter.activeButton = buttonName;&#13;
        }&#13;
&#13;
        if(buttonName == presenter.activeButton){&#13;
            if(!presenter.isRecklicked){&#13;
                if(presenter.buttonsLogic[presenter.activeButton].onReclicked){&#13;
                    presenter.buttonsLogic[presenter.activeButton].onReclicked(button);&#13;
                }&#13;
                presenter.isRecklicked = true;&#13;
                if(!$(button).hasClass('open') &amp;&amp; !$(button).hasClass('close') &amp;&amp; !$(button).hasClass('reset')) presenter.recklick = true;&#13;
            }else{&#13;
                presenter.buttonsLogic[$(button).attr("data-name")].onOpen(button);&#13;
                presenter.isRecklicked = false;&#13;
                if(!$(button).hasClass('open') &amp;&amp; !$(button).hasClass('close')&amp;&amp; !$(button).hasClass('reset')) presenter.recklick = false;&#13;
            }&#13;
        }else{&#13;
            presenter.buttonsLogic[$(button).attr("data-name")].onOpen(button);&#13;
            presenter.isRecklicked = false;&#13;
            if(!$(button).hasClass('open') &amp;&amp; !$(button).hasClass('close')&amp;&amp; !$(button).hasClass('reset')) presenter.recklick = false;&#13;
        }&#13;
&#13;
        if(!$(button).hasClass('color') &amp;&amp; !$(button).hasClass('thickness')){&#13;
            presenter.activeButton = $(button).attr("data-name");&#13;
        }&#13;
    }&#13;
&#13;
&#13;
&#13;
    presenter.addEventHandlers = function IWB_Toolbar_addEventHandlers() {&#13;
        presenter.$pagePanel.find('.iwb-toolbar-mask').click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$pagePanel.find('.iwb-toolbar-note').click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$panel.click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$pagePanel.find('.button').on(getTouchStartOrMouseDownEventName(), function(e) {&#13;
            if($(this).hasClass('yes-button') || $(this).hasClass('no-button')){&#13;
                return;&#13;
            }&#13;
&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if(presenter.isSavedState){&#13;
                presenter.buttonClicked = true;&#13;
            }&#13;
            clickHandlers(this);&#13;
            if (isDependingOnDrawing(this) &amp;&amp; presenter.areDrawingButtonsActive() || isFloatingImageButton(this)) {&#13;
                openBottomPanel(this);&#13;
            }&#13;
            if ($(this).hasClass('reset')) {&#13;
                $(this).removeClass('clicked');&#13;
            }&#13;
&#13;
            if(!$(this).hasClass('open') &amp;&amp; !$(this).hasClass('note') &amp;&amp; !$(this).hasClass('stopwatch') &amp;&amp; !$(this).hasClass('clock') &amp;&amp; !$(this).hasClass('close')){&#13;
                presenter.buttonClicked = true;&#13;
            }&#13;
            if($(this).hasClass('reset') || $(this).hasClass('default') || $(this).hasClass('note') || $(this).hasClass('stopwatch') || $(this).hasClass('clock')){&#13;
                presenter.buttonClicked = false;&#13;
            }&#13;
&#13;
            var btnName = $(this).data("name");&#13;
&#13;
            if(btnName != 'open' &amp;&amp; btnName != 'close' &amp;&amp; btnName != 'color' &amp;&amp; btnName != 'thickness'){&#13;
                presenter.shouldSaveColor = btnName;&#13;
            }&#13;
        });&#13;
&#13;
        presenter.$pagePanel.find('.button-drawing-details').on(getTouchStartOrMouseDownEventName(), function(e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            changeBottomButtonState(this);&#13;
&#13;
            changeDrawingType(this);&#13;
        });&#13;
&#13;
        presenter.$pagePanel.find('.button-floating-image').on(getTouchStartOrMouseDownEventName(), function(e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            changeBottomButtonState(this);&#13;
&#13;
            changeCurrentFloatingImage(parseInt($(this).attr('index'), 10));&#13;
            presenter.setImagePosition();&#13;
        });&#13;
    };&#13;
&#13;
    function applyOnDblClickHandler() {&#13;
        if (presenter.floatingImageMode == presenter.FLOATING_IMAGE_MODE.MOVE) {&#13;
            presenter.floatingImageMode = presenter.FLOATING_IMAGE_MODE.ROTATE;&#13;
            getCurrentMoveIcon().visible(false);&#13;
            getCurrentRotateIcon().visible(true);&#13;
            getCurrentGroup().draggable(false);&#13;
            presenter.floatingImageLayer.draw();&#13;
        } else {&#13;
            presenter.floatingImageMode = presenter.FLOATING_IMAGE_MODE.MOVE;&#13;
            getCurrentMoveIcon().visible(true);&#13;
            getCurrentRotateIcon().visible(false);&#13;
            getCurrentGroup().draggable(true);&#13;
            presenter.floatingImageLayer.draw();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isLeft = function(center, startPos, currentPos) {&#13;
        return ((startPos.x - center.x)*(currentPos.y - center.y) - (startPos.y - center.y)*(currentPos.x - center.x)) &gt;= 0;&#13;
    };&#13;
&#13;
    function Vector(imageCenterPosition, mousePosition) {&#13;
        this.x = imageCenterPosition.x - mousePosition.x;&#13;
        this.y = imageCenterPosition.y - mousePosition.y;&#13;
        this.length = Math.sqrt(this.x * this.x + this.y * this.y);&#13;
    }&#13;
&#13;
    function calculateVectorsAngle(v1, v2) {&#13;
        return Math.acos((v1.x * v2.x + v1.y * v2.y) / (v1.length * v2.length));&#13;
    }&#13;
&#13;
    function changeCurrentFloatingImage(index) {&#13;
        $.when.apply($, presenter.allImagesLoadedPromises).then(function() {&#13;
            presenter.$panel.find('.button-floating-image-' + (index + 1)).addClass('clicked-lighter');&#13;
            getCurrentGroup().visible(false);&#13;
            presenter.currentFloatingImageIndex = index;&#13;
            getCurrentGroup().visible(true);&#13;
            presenter.floatingImageLayer.draw();&#13;
&#13;
            var isMouseDown = false,&#13;
                startingVector = null;&#13;
&#13;
            function rotateActionStartHandler() {&#13;
                if (presenter.floatingImageMode == presenter.FLOATING_IMAGE_MODE.ROTATE) {&#13;
                    isMouseDown = true;&#13;
                    var imageCenter = {&#13;
                        x: (getCurrentImage().getAbsolutePosition().x),&#13;
                        y: (getCurrentImage().getAbsolutePosition().y)&#13;
                    };&#13;
&#13;
                    startingVector = new Vector(imageCenter, presenter.floatingImageStage.getPointerPosition());&#13;
                }&#13;
            }&#13;
&#13;
            presenter.$floatingImageMask.off('mousedown touchstart mouseup touchend touchmove mousemove');&#13;
            presenter.$floatingImageMask.on('mousedown', rotateActionStartHandler);&#13;
            presenter.$floatingImageMask.on('touchstart', rotateActionStartHandler);&#13;
&#13;
            function rotateActionEndHandler() {&#13;
                if (presenter.floatingImageMode == presenter.FLOATING_IMAGE_MODE.ROTATE) {&#13;
                    isMouseDown = false;&#13;
                }&#13;
            }&#13;
&#13;
            presenter.$floatingImageMask.on('mouseup', rotateActionEndHandler);&#13;
            presenter.$floatingImageMask.on('touchend', rotateActionEndHandler);&#13;
&#13;
            var previousPosition = null;&#13;
&#13;
            function rotateActionMoveHandler() {&#13;
                var currentPosition = presenter.floatingImageStage.getPointerPosition();&#13;
&#13;
                if (isMouseDown &amp;&amp; presenter.floatingImageMode == presenter.FLOATING_IMAGE_MODE.ROTATE &amp;&amp; previousPosition) {&#13;
                    var imageCenter = {&#13;
                        x: (getCurrentImage().getAbsolutePosition().x),&#13;
                        y: (getCurrentImage().getAbsolutePosition().y)&#13;
                    };&#13;
&#13;
                    var currentVector = new Vector(imageCenter, presenter.floatingImageStage.getPointerPosition());&#13;
                    var angle = calculateVectorsAngle(startingVector, currentVector);&#13;
                    var isLeft = presenter.isLeft(imageCenter, previousPosition, currentPosition);&#13;
&#13;
                    getCurrentImage().rotate(isLeft ? angle : -angle);&#13;
                    presenter.floatingImageLayer.draw();&#13;
                }&#13;
&#13;
                previousPosition = currentPosition;&#13;
            }&#13;
&#13;
            presenter.$floatingImageMask.on('mousemove', rotateActionMoveHandler);&#13;
            presenter.$floatingImageMask.on('touchmove', rotateActionMoveHandler);&#13;
        });&#13;
    }&#13;
&#13;
    presenter.addFloatingImages = function IWB_Toolbar_addFloatingImages (model) {&#13;
        var $mask = $('&lt;div class="iwb-toolbar-mask floating-image-mask"&gt;&lt;/div&gt;');&#13;
        presenter.$pagePanel.find('.ic_page').append($mask);&#13;
        $mask.hide();&#13;
&#13;
        var stage = new Kinetic.Stage({&#13;
            container: $mask[0],&#13;
            visible: true,&#13;
            width: presenter.$pagePanel.width(),&#13;
            height: presenter.$pagePanel.height()&#13;
        });&#13;
&#13;
        var layer = new Kinetic.Layer();&#13;
&#13;
        presenter.$floatingImageMask = $mask;&#13;
        presenter.floatingImageLayer = layer;&#13;
        presenter.floatingImageStage = stage;&#13;
        presenter.allImagesLoadedPromises = [];&#13;
&#13;
        for (var index = 0; index &lt; 3; index++) {&#13;
            presenter.loadDeferredFloatingImage(index, model, layer, stage);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.loadDeferredFloatingImage = function(index, model, layer, stage) {&#13;
        var imageObj = new Image();&#13;
        var deferredImage = new $.Deferred();&#13;
        presenter._kinetic.imageObj.push(imageObj);&#13;
        $(imageObj).load(function() {&#13;
            var group = new Kinetic.Group({&#13;
                draggable: true,&#13;
                visible: index == presenter.currentFloatingImageIndex&#13;
            });&#13;
&#13;
            var image = new Kinetic.Image({&#13;
                x: imageObj.width / 2,&#13;
                y: $(window).scrollTop() + (imageObj.height / 2)+ presenter.$panel.offset().top,&#13;
                image: imageObj,&#13;
                width: imageObj.width,&#13;
                height: imageObj.height,&#13;
                offset: { x: imageObj.width / 2, y: imageObj.height / 2 }&#13;
            });&#13;
&#13;
            group.on('dblclick', function() {&#13;
                applyOnDblClickHandler();&#13;
            });&#13;
&#13;
            presenter._kinetic.images.push(image);&#13;
&#13;
            applyDoubleTapHandler(group, applyOnDblClickHandler);&#13;
&#13;
            var imageMoveObj = new Image();&#13;
            $(imageMoveObj).load(function() {&#13;
                var moveIcon = new Kinetic.Image({&#13;
                    x: (imageObj.width / 2) - 16, // -16, czyli poĹ‚owa szerokoĹ›ci obrazka&#13;
                    y: (imageObj.height / 2) - 16 + presenter.$panel.offset().top, // -16, czyli poĹ‚owa wysokoĹ›ci obrazka&#13;
                    image: imageMoveObj,&#13;
                    opacity: 0.4&#13;
                });&#13;
&#13;
                presenter._kinetic.moveIcon.push(moveIcon);&#13;
                var imageRotateObj = new Image();&#13;
                $(imageRotateObj).load(function() {&#13;
                    var rotateIcon = new Kinetic.Image({&#13;
                        x: (imageObj.width / 2) - 16, // -16, czyli poĹ‚owa szerokoĹ›ci obrazka&#13;
                        y: (imageObj.height / 2) - 16 + presenter.$panel.offset().top, // -16, czyli poĹ‚owa wysokoĹ›ci obrazka&#13;
                        image: imageRotateObj,&#13;
                        visible: false,&#13;
                        opacity: 0.4&#13;
                    });&#13;
&#13;
                    group.add(image);&#13;
                    group.add(moveIcon);&#13;
                    group.add(rotateIcon);&#13;
                    layer.add(group);&#13;
                    stage.add(layer);&#13;
                    presenter.floatingImageGroups[index] = group;&#13;
                    presenter._kinetic.rotateIcon.push(rotateIcon);&#13;
&#13;
                    deferredImage.resolve();&#13;
                });&#13;
                imageRotateObj.src = DOMOperationsUtils.getResourceFullPath(presenter.playerController, 'addons/resources/it_rotate.png');&#13;
                presenter._kinetic.rotateObj.push(imageRotateObj);&#13;
&#13;
            });&#13;
            imageMoveObj.src = DOMOperationsUtils.getResourceFullPath(presenter.playerController, 'addons/resources/it_move.png');&#13;
&#13;
            presenter._kinetic.moveObj.push(imageMoveObj);&#13;
        });&#13;
&#13;
&#13;
        presenter.allImagesLoadedPromises.push(deferredImage.promise());&#13;
        if (model['floatingImages'] &amp;&amp; model['floatingImages'][index] &amp;&amp; model['floatingImages'][index]['Image'].length &gt; 0) {&#13;
            imageObj.src = model['floatingImages'][index]['Image'];&#13;
        } else {&#13;
            imageObj.src = DOMOperationsUtils.getResourceFullPath(presenter.playerController, 'addons/resources/' + presenter.DEFAULT_FLOATING_IMAGE[index]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isOnScreen = function (element, windowElement) {&#13;
        var topWindow = $(windowElement.parent.document);&#13;
        var coords = {&#13;
            top: topWindow.scrollTop(),&#13;
            left: topWindow.scrollLeft(),&#13;
            right: topWindow.scrollLeft() + topWindow.width(),&#13;
            bottom: topWindow.scrollTop() + topWindow.height()&#13;
        };&#13;
&#13;
        var bounds = element.offset();&#13;
        bounds.right = bounds.left + element.outerWidth();&#13;
        bounds.bottom = bounds.top + element.outerHeight();&#13;
&#13;
        return !(coords.right &lt; bounds.left || coords.left &gt; bounds.right || coords.bottom &lt; bounds.top || coords.top &gt; bounds.bottom);&#13;
    };&#13;
&#13;
    function addScrollHandler() {&#13;
        var difference = 0,&#13;
            lastScrollTop = 0,&#13;
            panelTop = 0;&#13;
&#13;
        $(window.parent.document).scroll(function() {&#13;
            if (presenter.isOnScreen(presenter.$view.parent(), window)) {&#13;
                var containerHeight = presenter.$pagePanel.outerHeight(true),&#13;
                    scrollTop = $(this).scrollTop(),&#13;
                    min = presenter.$pagePanel.offset().top,&#13;
                    headerHeight = $('.ic_header').outerHeight(true)-20,&#13;
                    max = containerHeight + headerHeight;&#13;
                difference = scrollTop - lastScrollTop;&#13;
                panelTop = parseInt(presenter.$panel.css('top'), 10) + difference;&#13;
                lastScrollTop = scrollTop;&#13;
&#13;
                if (panelTop &amp;&amp; (panelTop) &gt; min &amp;&amp; (panelTop) &lt; max) {&#13;
                    presenter.$panel.css({&#13;
                        'top' : (panelTop) + 'px'&#13;
                    });&#13;
                } else if (panelTop &amp;&amp; (panelTop) &gt;= max) {&#13;
                    presenter.$panel.css({&#13;
                        'top' : (containerHeight - presenter.$panel.outerHeight(true) + min) + 'px'&#13;
                    });&#13;
                } else if (panelTop &amp;&amp; (panelTop) &lt;= min){&#13;
                    presenter.$panel.css({&#13;
                        'top' : min + 'px'&#13;
                    });&#13;
                }&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function drawSketch() {&#13;
        var sketch = presenter.$view.parent().find('.selecting');&#13;
        var canvas = sketch.find('canvas');&#13;
        canvas.width = sketch.width;&#13;
        canvas.height = sketch.height;&#13;
&#13;
        var iwb_tmp_canvas = document.createElement('canvas');&#13;
        var tmp_ctx = iwb_tmp_canvas.getContext('2d');&#13;
        iwb_tmp_canvas.id = 'iwb_tmp_canvas';&#13;
        iwb_tmp_canvas.width = canvas.width();&#13;
        iwb_tmp_canvas.height = canvas.height();&#13;
&#13;
        var $tmpCanvas = $('#iwb_tmp_canvas');&#13;
&#13;
        if ($.contains(document, $tmpCanvas[0])) {&#13;
            $tmpCanvas.remove();&#13;
        }&#13;
&#13;
        presenter.$view.parent().find('.selecting').append(iwb_tmp_canvas);&#13;
&#13;
        var mouse = getPoint(0, 0);&#13;
        var start_mouse = getPoint(0, 0);&#13;
&#13;
        /* Mouse Capturing Work */&#13;
        if( /Android|X11|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {&#13;
            iwb_tmp_canvas.addEventListener('touchmove', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
&#13;
                mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
                mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
            }, false);&#13;
&#13;
            iwb_tmp_canvas.addEventListener('touchstart', function(e) {&#13;
                iwb_tmp_canvas.addEventListener('touchmove', onPaint, false);&#13;
&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
                mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
&#13;
                start_mouse.x = mouse.x;&#13;
                start_mouse.y = mouse.y;&#13;
&#13;
                onPaint();&#13;
            }, false);&#13;
&#13;
            iwb_tmp_canvas.addEventListener('touchend', function(e) {&#13;
                iwb_tmp_canvas.removeEventListener('touchmove', onPaint, false);&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                // Writing down to real canvas now&#13;
                // ctx.drawImage(iwb_tmp_canvas, 0, 0);&#13;
                // Clearing tmp canvas&#13;
                tmp_ctx.clearRect(0, 0, iwb_tmp_canvas.width, iwb_tmp_canvas.height);&#13;
            }, false);&#13;
        }else{&#13;
            iwb_tmp_canvas.addEventListener('mousemove', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                mouse.x = typeof e.offsetX !== 'undefined' ?  e.offsetX : e.layerX;&#13;
                mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
            }, false);&#13;
&#13;
            iwb_tmp_canvas.addEventListener('mousedown', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                iwb_tmp_canvas.addEventListener('mousemove', onPaint, false);&#13;
&#13;
                mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
                mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
&#13;
                start_mouse.x = mouse.x;&#13;
                start_mouse.y = mouse.y;&#13;
                onPaint();&#13;
            }, false);&#13;
&#13;
            iwb_tmp_canvas.addEventListener('mouseup', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                iwb_tmp_canvas.removeEventListener('mousemove', onPaint, false);&#13;
                // Writing down to real canvas now&#13;
                // ctx.drawImage(iwb_tmp_canvas, 0, 0);&#13;
                // Clearing tmp canvas&#13;
                tmp_ctx.clearRect(0, 0, iwb_tmp_canvas.width, iwb_tmp_canvas.height);&#13;
            }, false);&#13;
        }&#13;
&#13;
        /* Drawing on Paint App */&#13;
        tmp_ctx.lineWidth = 1;&#13;
        tmp_ctx.lineJoin = 'round';&#13;
        tmp_ctx.lineCap = 'round';&#13;
        tmp_ctx.strokeStyle = 'black';&#13;
        tmp_ctx.fillStyle = 'black';&#13;
&#13;
        var onPaint = function() {&#13;
            // Tmp canvas is always cleared up before drawing.&#13;
            tmp_ctx.clearRect(0, 0, iwb_tmp_canvas.width, iwb_tmp_canvas.height);&#13;
&#13;
            var x = Math.min(mouse.x, start_mouse.x);&#13;
            var y = Math.min(mouse.y, start_mouse.y);&#13;
            var width = Math.abs(mouse.x - start_mouse.x);&#13;
            var height = Math.abs(mouse.y - start_mouse.y);&#13;
            tmp_ctx.strokeRect(x, y, width, height);&#13;
        };&#13;
    }&#13;
&#13;
    presenter.drawAreaLogic = function IWB_Toolbar_drawAreaLogic(isHide) {&#13;
        drawSketch();&#13;
&#13;
        presenter.drawAreaLogic_touchEndCallback = function (event) {&#13;
            var pos = getCursorPosition(event.originalEvent);&#13;
&#13;
            presenter.stopSelection = getPoint(pos.x, pos.y);&#13;
&#13;
            drawArea(isHide);&#13;
            presenter.areas.push({&#13;
                isHide: isHide,&#13;
                width: presenter.startSelection.x - presenter.stopSelection.x,&#13;
                height: presenter.startSelection.y - presenter.stopSelection.y,&#13;
                x: presenter.stopSelection.x,&#13;
                y: presenter.stopSelection.y,&#13;
                color: presenter.currentLineColor&#13;
            });&#13;
            presenter.standHideAreaClicked = false;&#13;
        };&#13;
&#13;
        presenter.drawAreaLogic_mouseUpCallback = function (event) {&#13;
            event.stopPropagation();&#13;
            event.preventDefault();&#13;
&#13;
            var pos = getCursorPosition(event);&#13;
&#13;
            presenter.stopSelection = getPoint(pos.x, pos.y);&#13;
&#13;
            drawArea(isHide);&#13;
            presenter.areas.push({&#13;
                isHide: isHide,&#13;
                width: presenter.startSelection.x - presenter.stopSelection.x,&#13;
                height: presenter.startSelection.y - presenter.stopSelection.y,&#13;
                x: presenter.stopSelection.x,&#13;
                y: presenter.stopSelection.y,&#13;
                color: presenter.currentLineColor&#13;
            });&#13;
            presenter.standHideAreaClicked = false;&#13;
        };&#13;
&#13;
        if( /Android|X11|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {&#13;
            presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas').on('touchstart', presenter.drawAreaLogic_touchStartCallback);&#13;
&#13;
            presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas').on('touchend', presenter.drawAreaLogic_touchEndCallback);&#13;
        }else{&#13;
            presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas').on('mousedown', presenter.drawAreaLogic_mouseDownCallback);&#13;
&#13;
            presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas').on('mouseup', presenter.drawAreaLogic_mouseUpCallback);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawAreaLogic_touchStartCallback = function (event) {&#13;
        event.stopPropagation();&#13;
        event.preventDefault();&#13;
        presenter.standHideAreaClicked = true;&#13;
        var pos = getCursorPosition(event.originalEvent);&#13;
        presenter.startSelection = getPoint(pos.x, pos.y);&#13;
    };&#13;
&#13;
&#13;
&#13;
    presenter.drawAreaLogic_mouseDownCallback = function (event) {&#13;
        event.stopPropagation();&#13;
        event.preventDefault();&#13;
&#13;
        presenter.standHideAreaClicked = true;&#13;
        var pos = getCursorPosition(event);&#13;
        presenter.startSelection = getPoint(pos.x, pos.y);&#13;
    };&#13;
&#13;
    function drawHideArea(context, x, y, width, height, color) {&#13;
        context.beginPath();&#13;
        context.rect(x, y, width, height);&#13;
        context.fillStyle = color;&#13;
        context.fill();&#13;
        context.lineWidth = 1;&#13;
        context.strokeStyle = color;&#13;
        context.stroke();&#13;
    }&#13;
&#13;
    function drawStandArea(context, x, y, width, height, color) {&#13;
        context.clearRect(0, 0, presenter.$selectingMask.width(), presenter.$selectingMask.height());&#13;
        context.fillStyle = color;&#13;
        context.fillRect(0, 0, presenter.$selectingMask.width(), presenter.$selectingMask.height());&#13;
        context.globalCompositeOperation = 'destination-out';&#13;
        context.fillStyle = 'white';&#13;
        context.beginPath();&#13;
        context.rect(x, y, width, height);&#13;
        context.fill();&#13;
    }&#13;
&#13;
    function drawArea(isHide) {&#13;
        var context = presenter.selectingCtx,&#13;
            width = presenter.startSelection.x - presenter.stopSelection.x,&#13;
            height = presenter.startSelection.y - presenter.stopSelection.y;&#13;
&#13;
        context.globalCompositeOperation = 'source-over';&#13;
&#13;
        if (isHide) {&#13;
            drawHideArea(context, presenter.stopSelection.x, presenter.stopSelection.y, width, height, presenter.currentLineColor);&#13;
        } else {&#13;
            drawStandArea(context, presenter.stopSelection.x, presenter.stopSelection.y, width, height, presenter.currentLineColor);&#13;
        }&#13;
    }&#13;
&#13;
    function drawSavedAreas() {&#13;
        $.each(presenter.areas, function() {&#13;
            if (this.isHide) {&#13;
                drawHideArea(presenter.selectingCtx, this.x, this.y, this.width, this.height, this.color);&#13;
            } else {&#13;
                drawStandArea(presenter.selectingCtx, this.x, this.y, this.width, this.height, this.color);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.createStopwatch = function IWB_Toolbar_createStopwatch(savedStopwatch, hours, minutes, seconds, stopClicked, startClicked) {&#13;
        if(!presenter.stopwatchAdded){&#13;
            var stopwatch = $('&lt;div class="iwb-toolbar-stopwatch"&gt;&lt;/div&gt;'),&#13;
                time = $('&lt;h4 class="stopwatch-time"&gt;&lt;time&gt;00:00:00&lt;/time&gt;&lt;/h4&gt;'),&#13;
                header = $('&lt;div class="stopwatch-header"&gt;&lt;/div&gt;'),&#13;
                buttons = $('&lt;div class="stopwatch-buttons"&gt;&lt;/div&gt;'),&#13;
                startButton = $('&lt;div id="start"&gt;&lt;/div&gt;'),&#13;
                stopButton = $('&lt;div id="stop"&gt;&lt;/div&gt;'),&#13;
                clearButton = $('&lt;div id="clear"&gt;&lt;/div&gt;'),&#13;
                closeButton = $('&lt;div class="stopwatch-close"&gt;&amp;times;&lt;/div&gt;');&#13;
&#13;
            closeButton.on('click', function(e) {&#13;
                e.stopPropagation();&#13;
                stopwatch.remove();&#13;
                presenter.$panel.find('.stopwatch.clicked').removeClass('clicked');&#13;
                presenter.stopwatchAdded = false;&#13;
                clearTimeout(presenter._stopwatchTimer);&#13;
                presenter._stopwatchTimer = null;&#13;
            });&#13;
&#13;
            header.append(time);&#13;
            header.append(closeButton);&#13;
            buttons.append(startButton);&#13;
            buttons.append(stopButton);&#13;
            buttons.append(clearButton);&#13;
            stopwatch.append(header);&#13;
            stopwatch.append(buttons);&#13;
&#13;
            var ic_page_height = presenter.$view.parent().height(),&#13;
                panel_top = parseInt(presenter.$panel.css('top'), 10),&#13;
                window_scroll = $(window).scrollTop(),&#13;
                panel_outerHeight = presenter.$panel.outerHeight(true),&#13;
                panel_differance = ic_page_height-panel_top-window_scroll,&#13;
                top=0;&#13;
&#13;
            var offsetTopelement,&#13;
                scrollTop;&#13;
            if (presenter.config.panelPosition == 'fixed') {&#13;
                offsetTopelement = presenter.$pagePanel.offset().top;&#13;
                scrollTop = $(window).scrollTop();&#13;
            } else {&#13;
                offsetTopelement = '';&#13;
                scrollTop = '';&#13;
            }&#13;
&#13;
            if (panel_differance &lt; panel_outerHeight) {&#13;
                top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - presenter.$pagePanel.offset().top - 120&#13;
            } else {&#13;
                top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - offsetTopelement&#13;
            }&#13;
&#13;
            if (!presenter.stopwatchAdded) {&#13;
                stopwatch.draggable({&#13;
                    containment: 'parent',&#13;
                    opacity: 0.35,&#13;
                    create: function(event, _) {&#13;
                        $(event.target).css({&#13;
                            'top' : savedStopwatch ? savedStopwatch.top : top,&#13;
                            'left' : savedStopwatch ? savedStopwatch.left : presenter.$panel.css('left'),&#13;
                            'position' : 'absolute'&#13;
                        });&#13;
                    },&#13;
&#13;
                    stop: function NoteStopFunction() {&#13;
                        $.ui.ddmanager.current = null;&#13;
                    }&#13;
                });&#13;
&#13;
                presenter.$pagePanel.find('.ic_page').append(stopwatch);&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').click(function(e) {&#13;
                    e.stopPropagation();&#13;
                });&#13;
            }&#13;
&#13;
            var h1 = document.getElementsByClassName('stopwatch-time')[0];&#13;
            var start = document.getElementById('start');&#13;
            var stop = document.getElementById('stop');&#13;
            var clear = document.getElementById('clear');&#13;
            presenter.stopButtonClicked = stopClicked;&#13;
            presenter.startButtonClicked = startClicked;&#13;
&#13;
            if (seconds) {&#13;
                presenter.seconds = seconds; presenter.minutes = minutes; presenter.hours = hours;&#13;
                h1.textContent = (presenter.hours ? (presenter.hours &gt; 9 ? presenter.hours : "0" + presenter.hours) : "00") + ":" + (presenter.minutes ? (presenter.minutes &gt; 9 ? presenter.minutes : "0" + presenter.minutes) : "00") + ":" + (presenter.seconds &gt; 9 ? presenter.seconds : "0" + presenter.seconds);&#13;
&#13;
                if (!presenter.stopButtonClicked) {&#13;
                    timer();&#13;
                    presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#start').addClass('button-clicked');&#13;
                }&#13;
            } else {&#13;
                presenter.seconds = 0; presenter.minutes = 0; presenter.hours = 0;&#13;
            }&#13;
&#13;
            function add() {&#13;
                presenter.seconds++;&#13;
                if (presenter.seconds &gt;= 60) {&#13;
                    presenter.seconds = 0;&#13;
                    presenter.minutes++;&#13;
                    if (presenter.minutes &gt;= 60) {&#13;
                        presenter.minutes = 0;&#13;
                        presenter.hours++;&#13;
                    }&#13;
                }&#13;
&#13;
                h1.textContent = (presenter.hours ? addZero(presenter.hours) : "00") + ":" + (presenter.minutes ? addZero(presenter.minutes) : "00") + ":" + addZero(presenter.seconds);&#13;
&#13;
                timer();&#13;
            }&#13;
            function timer() {&#13;
                presenter._stopwatchTimer = setTimeout(add, 1000);&#13;
            }&#13;
&#13;
            function clearClickedButtons (){&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#start').removeClass('button-clicked');&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#stop').removeClass('button-clicked');&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#clear').removeClass('button-clicked');&#13;
            }&#13;
&#13;
            $(start).on('click', function(){&#13;
                if (!presenter.startButtonClicked) {&#13;
                    clearClickedButtons();&#13;
                    presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#start').addClass('button-clicked');&#13;
                    timer();&#13;
                    presenter.stopButtonClicked = false;&#13;
                    presenter.startButtonClicked = true;&#13;
                }&#13;
            });&#13;
&#13;
            $(stop).on('click', function() {&#13;
                clearClickedButtons();&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#stop').addClass('button-clicked');&#13;
                clearTimeout(presenter._stopwatchTimer);&#13;
                presenter.stopButtonClicked = true;&#13;
                presenter.startButtonClicked = false;&#13;
            });&#13;
&#13;
            $(clear).on('click', function() {&#13;
                clearClickedButtons();&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#clear').addClass('button-clicked');&#13;
                h1.textContent = "00:00:00";&#13;
                presenter.seconds = 0; presenter.minutes = 0; presenter.hours = 0;&#13;
                presenter.stopButtonClicked = false;&#13;
            });&#13;
&#13;
            presenter._stopwatch = {&#13;
                stopwatch: stopwatch,&#13;
                closeButton: closeButton,&#13;
                start: start,&#13;
                stop: stop,&#13;
                clear: clear&#13;
            };&#13;
        }&#13;
&#13;
        presenter.stopwatchAdded = true;&#13;
    };&#13;
&#13;
    presenter.createClock = function IWB_Toolbar_createClock(savedClock) {&#13;
        if (!presenter.clockAdded) {&#13;
            var clock = $('&lt;div class="iwb-toolbar-clock"&gt;&lt;/div&gt;'),&#13;
                header = $('&lt;div class="clock-header"&gt;&lt;/div&gt;'),&#13;
                closeButton = $('&lt;div class="clock-close"&gt;&amp;times;&lt;/div&gt;'),&#13;
                clockBody = $('&lt;div class="clock-body"&gt;&lt;/div&gt;');&#13;
&#13;
            closeButton.on('click', function(e) {&#13;
                e.stopPropagation();&#13;
                clock.remove();&#13;
                presenter.$panel.find('.clock.clicked').removeClass('clicked');&#13;
                presenter.clockAdded = false;&#13;
            });&#13;
&#13;
            header.append(closeButton);&#13;
            clock.append(header);&#13;
            clock.append(clockBody);&#13;
&#13;
            var ic_page_height = presenter.$view.parent().height(),&#13;
                panel_top = parseInt(presenter.$panel.css('top'), 10),&#13;
                window_scroll = $(window).scrollTop(),&#13;
                panel_outerHeight = presenter.$panel.outerHeight(true),&#13;
                panel_differance = ic_page_height-panel_top-window_scroll,&#13;
                top=0;&#13;
&#13;
            var offsetTopelement,&#13;
                scrollTop;&#13;
            if (presenter.config.panelPosition == 'fixed') {&#13;
                offsetTopelement = presenter.$pagePanel.offset().top;&#13;
                scrollTop = $(window).scrollTop();&#13;
            } else {&#13;
                offsetTopelement = '';&#13;
                scrollTop = '';&#13;
            }&#13;
&#13;
            if (panel_differance &lt; panel_outerHeight) {&#13;
                top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - presenter.$pagePanel.offset().top - 120&#13;
            } else {&#13;
                top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - offsetTopelement&#13;
            }&#13;
&#13;
            clock.draggable({&#13;
                containment: 'parent',&#13;
                opacity: 0.35,&#13;
                create: function(event, _) {&#13;
                    $(event.target).css({&#13;
                        'top' : savedClock ? savedClock.top : top,&#13;
                        'left' : savedClock ? savedClock.left : presenter.$panel.css('left'),&#13;
                        'position' : 'absolute'&#13;
                    });&#13;
                },&#13;
                stop: function NoteStopFunction() {&#13;
                    $.ui.ddmanager.current = null;&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$pagePanel.find('.ic_page').append(clock);&#13;
            presenter.$pagePanel.find('.iwb-toolbar-clock').click(function(e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            function getTime() {&#13;
                var date = new Date();&#13;
                return addZero(date.getHours()) + ':' + addZero(date.getMinutes()) + ':' + addZero(date.getSeconds());&#13;
            }&#13;
&#13;
            presenter.$pagePanel.find('.iwb-toolbar-clock').find('.clock-body').html(getTime());&#13;
&#13;
            presenter._clockwatchTimer = setInterval(function() {&#13;
                presenter.$pagePanel.find('.iwb-toolbar-clock').find('.clock-body').html(getTime());&#13;
            }, 1000);&#13;
&#13;
            presenter._clockwatch = {&#13;
                clock: clock,&#13;
                closeButton: closeButton&#13;
            };&#13;
        }&#13;
        presenter.clockAdded = true;&#13;
    };&#13;
&#13;
    presenter.Note = function () {&#13;
        this.$note = null;&#13;
        this.$header = null;&#13;
        this.$date = null;&#13;
        this.$closeButton = null;&#13;
        this.$noteBody = null;&#13;
        this.$textarea = null;&#13;
        this.$buttonSave = null;&#13;
        this.currentValue = '';&#13;
    };&#13;
&#13;
&#13;
    presenter.Note._internals = {};&#13;
&#13;
    presenter.Note._internals.getCurrentDate = function () {&#13;
        var day = new Date().getDate(),&#13;
            month = new Date().getMonth() + 1,&#13;
            year = new Date().getFullYear(),&#13;
            hours = new Date().getHours(),&#13;
            minutes = new Date().getMinutes();&#13;
&#13;
        var time = addZero(hours) + ':' + addZero(minutes);&#13;
        return day + '/' + month + '/' + year + ', ' + time;&#13;
    };&#13;
&#13;
    presenter.Note._internals.createView = function () {&#13;
        this.$note = $('&lt;div class="iwb-toolbar-note"&gt;&lt;/div&gt;');&#13;
        this.$header = $('&lt;div class="note-header"&gt;&lt;/div&gt;');&#13;
        this.$date = $('&lt;div class="note-date"&gt;&lt;/div&gt;');&#13;
        this.$closeButton = $('&lt;div class="note-close"&gt;&amp;times;&lt;/div&gt;');&#13;
        this.$noteBody = $('&lt;div class="note-body"&gt;&lt;/div&gt;');&#13;
&#13;
        this.$header.append(this.$date);&#13;
        this.$header.append(this.$closeButton);&#13;
        this.$note.append(this.$header);&#13;
        this.$note.append(this.$noteBody);&#13;
    };&#13;
&#13;
    presenter.Note.prototype.init = function (savedNote) {&#13;
        presenter.Note._internals.createView.call(this);&#13;
&#13;
        this.connectHandlers();&#13;
        this.connectDraggable(savedNote);&#13;
    };&#13;
&#13;
    presenter.Note.prototype.setDate = function (date) {&#13;
        this.$date.html(date);&#13;
    };&#13;
&#13;
    presenter.Note.prototype.setBody = function (body) {&#13;
        this.$noteBody.html(body);&#13;
        this.$textarea = this.$noteBody.find('textarea');&#13;
        this.$buttonSave = this.$noteBody.find('.save');&#13;
    };&#13;
&#13;
    presenter.Note.prototype.getView = function () {&#13;
        return this.$note;&#13;
    };&#13;
&#13;
    presenter.Note.prototype.connectNoteEditHandler = function () {&#13;
        this.$note.on('dblclick', function () {&#13;
            this.noteEditHandler();&#13;
            this.$note.off('dblclick');&#13;
        }.bind(this));&#13;
&#13;
        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {&#13;
            window.EventsUtils.DoubleTap.on(this.$note, function () {&#13;
                this.noteEditHandler();&#13;
                window.EventsUtils.DoubleTap.off(this.$note);&#13;
            }.bind(this));&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Note.prototype.noteEditHandler = function () {&#13;
        this.$textarea = $('&lt;textarea&gt;&lt;/textarea&gt;');&#13;
        this.$buttonSave = $('&lt;button class="save"&gt;Save&lt;/button&gt;');&#13;
&#13;
        this.currentValue = this.$noteBody.html();&#13;
&#13;
        this.$buttonSave.on('click', function() {&#13;
            var value = this.$textarea.val();&#13;
            this.$noteBody.html(value);&#13;
            this.$textarea.remove();&#13;
            this.connectNoteEditHandler();&#13;
        }.bind(this));&#13;
&#13;
        this.$textarea.on('click', function (){&#13;
            var val = this.$textarea.val();&#13;
            this.$textarea.focus().val("").val(val);&#13;
        }.bind(this));&#13;
&#13;
        this.$textarea.val(this.currentValue);&#13;
&#13;
        this.$noteBody.html(this.$textarea);&#13;
        this.$noteBody.append(this.$buttonSave);&#13;
        this.$textarea.focus();&#13;
    };&#13;
&#13;
    presenter.Note.prototype.connectHandlers = function () {&#13;
        this.$closeButton.on('click', function(e) {&#13;
            e.stopPropagation();&#13;
            var confirmation = presenter.$removeConfirmationBox;&#13;
            confirmation.css('top', $(window).scrollTop() + 10 + 'px');&#13;
            confirmation.show();&#13;
            confirmation.find('.no-button').on(getTouchStartOrMouseDownEventName(), function(e) {&#13;
                e.stopPropagation();&#13;
                confirmation.hide();&#13;
            });&#13;
            confirmation.find('.yes-button').on(getTouchStartOrMouseDownEventName(), function(e) {&#13;
                e.stopPropagation();&#13;
                this.destroy();&#13;
                confirmation.hide();&#13;
            }.bind(this));&#13;
        }.bind(this));&#13;
&#13;
        this.connectNoteEditHandler();&#13;
    };&#13;
&#13;
    presenter.Note.prototype.connectDraggable = function (savedNote) {&#13;
        var ic_page_height = presenter.$view.parent().height(),&#13;
            panel_top = parseInt(presenter.$panel.css('top'), 10),&#13;
            window_scroll = $(window).scrollTop(),&#13;
            panel_outerHeight = presenter.$panel.outerHeight(true),&#13;
            panel_differance = ic_page_height-panel_top-window_scroll,&#13;
            top=0;&#13;
&#13;
        var offsetTopelement,&#13;
            scrollTop;&#13;
        if (presenter.config.panelPosition == 'fixed') {&#13;
            offsetTopelement = presenter.$pagePanel.offset().top;&#13;
            scrollTop = $(window).scrollTop();&#13;
        } else {&#13;
            offsetTopelement = '';&#13;
            scrollTop = '';&#13;
        }&#13;
&#13;
        if (panel_differance &lt; panel_outerHeight) {&#13;
            top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - presenter.$pagePanel.offset().top - 120;&#13;
        } else {&#13;
            top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - offsetTopelement;&#13;
        }&#13;
&#13;
        this.$note.draggable({&#13;
            containment: 'parent',&#13;
            opacity: 0.35,&#13;
            create: function(event, _) {&#13;
                $(event.target).css({&#13;
                    'top' : savedNote ? savedNote.top : top,&#13;
                    'left' : savedNote ? savedNote.left : presenter.$panel.css('left'),&#13;
                    'position' : 'absolute'&#13;
                });&#13;
            },&#13;
&#13;
            stop: function NoteStopFunction() {&#13;
                $.ui.ddmanager.current = null;&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.Note.prototype.destroy = function () {&#13;
        var $note = this.$note.draggable("destroy");&#13;
        $note.off();&#13;
        this.$note.off();&#13;
        this.$header.off();&#13;
        this.$date.off();&#13;
        this.$closeButton.off();&#13;
        this.$noteBody.off();&#13;
        if (this.$textarea !== null) {&#13;
            this.$textarea.off();&#13;
        }&#13;
&#13;
        if (this.$buttonSave !== null) {&#13;
            this.$buttonSave.off();&#13;
        }&#13;
&#13;
        window.EventsUtils.DoubleTap.off(this.$note);&#13;
&#13;
        this.$note.remove();&#13;
        this.$note = null;&#13;
        this.$header = null;&#13;
        this.$date = null;&#13;
        this.$closeButton = null;&#13;
        this.$noteBody = null;&#13;
        this.$textarea = null;&#13;
        this.$buttonSave = null;&#13;
    };&#13;
    &#13;
    presenter.Note.prototype.getState = function () {&#13;
        return {&#13;
            'top': this.$note.css('top'),&#13;
            'left': this.$note.css('left'),&#13;
            'date': this.$date.html(),&#13;
            'body': this.$noteBody.html()&#13;
        };&#13;
    };&#13;
&#13;
    presenter.Note.createNote = function (savedNote) {&#13;
        var note = new presenter.Note();&#13;
        note.init(savedNote);&#13;
        &#13;
        if (savedNote) {&#13;
            note.setDate(savedNote.date);&#13;
            note.setBody(savedNote.body);&#13;
        }&#13;
        &#13;
        return note;&#13;
    };&#13;
&#13;
    presenter.createNote = function IWB_Toolbar_createNote(savedNote) {&#13;
        return presenter.Note.createNote(savedNote);&#13;
    };&#13;
&#13;
&#13;
    presenter.zoomSelectedModule = function IWB_Toolbar_zoomSelectedModule(selectedModule) {&#13;
        if (presenter.$pagePanel.find('.zoomed').length &gt; 0) {&#13;
            presenter.$panel.show();&#13;
            zoom.out();&#13;
            $(selectedModule).parent().find('.zoomed').removeClass('zoomed');&#13;
            presenter.changeCursor('zoom-in');&#13;
        } else {&#13;
            presenter.$panel.hide();&#13;
            zoom.to({&#13;
                element: selectedModule&#13;
            });&#13;
            $(selectedModule).addClass('zoomed');&#13;
            presenter.changeCursor('zoom-out');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeCursor = function(type) {&#13;
        presenter.$pagePanel.removeClass('iwb-zoom-in iwb-zoom-out');&#13;
&#13;
        switch (type) {&#13;
            case 'zoom-in':&#13;
                presenter.$pagePanel.addClass('iwb-zoom-in');&#13;
                break;&#13;
            case 'zoom-out':&#13;
                presenter.$pagePanel.addClass('iwb-zoom-out');&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    function isDependingOnDrawing(button) {&#13;
        return $(button).hasClass('color') || $(button).hasClass('thickness');&#13;
    }&#13;
&#13;
    presenter.isDrawingActive = function IWB_Toolbar_isDrawingActive() {&#13;
        return presenter.$pagePanel.find('.button.pen.clicked, .button.marker.clicked').length &gt; 0;&#13;
    };&#13;
&#13;
    presenter.isAreaDrawingActive = function IWB_Toolbar_isAreaDrawingActive() {&#13;
        return presenter.$pagePanel.find('.button.hide-area.clicked, .button.stand-area.clicked').length &gt; 0;&#13;
    };&#13;
&#13;
    presenter.areDrawingButtonsActive = function () {&#13;
        return presenter.isDrawingActive() || presenter.isAreaDrawingActive();&#13;
    };&#13;
&#13;
    function isFloatingImageButton(button) {&#13;
        return $(button).hasClass('floating-image');&#13;
    }&#13;
&#13;
    function shouldHideDrawingMasks(button) {&#13;
        return !$(button).hasClass('pen') &amp;&amp; !$(button).hasClass('marker') &amp;&amp; !$(button).hasClass('eraser');&#13;
    }&#13;
&#13;
    function shouldHideSelectingMasks(button) {&#13;
        return !$(button).hasClass('stand-area') &amp;&amp; !$(button).hasClass('hide-area');&#13;
    }&#13;
&#13;
    function shouldHideFloatingImage(button) {&#13;
        return !$(button).hasClass('reset') &amp;&amp; !$(button).hasClass('floating-image');&#13;
    }&#13;
&#13;
    function shouldClosePanelsOnReset(button) {&#13;
        return !$(button).hasClass('pen') &amp;&amp; !$(button).hasClass('marker');&#13;
    }&#13;
&#13;
    function changeBottomButtonState(button) {&#13;
        presenter.$panel.find('.container .clicked-lighter').removeClass('clicked-lighter');&#13;
        $(button).toggleClass('clicked-lighter');&#13;
    }&#13;
&#13;
    presenter.isSupportCSSPointerEvents = function IWB_Toolbar_isSupportCSSPointerEvents() {&#13;
        var myNav = navigator.userAgent.toLowerCase();&#13;
        var version = (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;&#13;
        return !(version == 9 || version == 10);&#13;
    };&#13;
&#13;
    presenter.toogleMasks = function IWB_Toolbar_toggleMasks() {&#13;
        if (!presenter.isSupportCSSPointerEvents()) {&#13;
            presenter.$penMask.hide();&#13;
            presenter.$markerMask.hide();&#13;
        }&#13;
&#13;
        presenter.$selectingMask.hide();&#13;
        if (presenter.isDrawingActive() || presenter.$pagePanel.find('.eraser').hasClass('clicked')) {&#13;
            presenter.$penMask.show();&#13;
            presenter.$markerMask.show();&#13;
        }&#13;
&#13;
        if (presenter.isAreaDrawingActive()) {&#13;
            presenter.$selectingMask.show();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.toggleBottomPanels = function IWB_Toolbar_toggleBottomPanels() {&#13;
        var $thicknessPanel = presenter.$pagePanel.find('.bottom-panel-thickness');&#13;
        var $colorPanel = presenter.$pagePanel.find('.bottom-panel-color');&#13;
&#13;
        $thicknessPanel.hide();&#13;
        $colorPanel.hide();&#13;
&#13;
        function showPanel($panel) {&#13;
            if ($panel === 'COLOR') {&#13;
                $colorPanel.show();&#13;
            } else if ($panel === 'THICKNESS') {&#13;
                $thicknessPanel.show();&#13;
            } else {&#13;
                // NONE&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.$pagePanel.find('.pen').hasClass('clicked')) {&#13;
            showPanel(presenter.config.showForPen);&#13;
        }&#13;
&#13;
        if (presenter.$pagePanel.find('.marker').hasClass('clicked')) {&#13;
            showPanel(presenter.config.showForMarker);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createCanvases = function () {&#13;
        presenter.createCanvas(&#13;
            function(mask) {&#13;
                presenter.$markerMask = mask;&#13;
                presenter.$markerMask.addClass('marker-mask');&#13;
                return presenter.$markerMask;&#13;
            },&#13;
            function(ctx) {&#13;
                presenter.markerCtx = ctx;&#13;
            },&#13;
            function(canvas) {&#13;
                presenter.markerCanvas = canvas;&#13;
            }&#13;
        );&#13;
&#13;
        presenter.createCanvas(&#13;
            function(mask) {&#13;
                presenter.$penMask = mask;&#13;
                presenter.$penMask.addClass('pen-mask');&#13;
                return presenter.$penMask;&#13;
            },&#13;
            function(ctx) {&#13;
                presenter.ctx = ctx;&#13;
            },&#13;
            function(canvas) {&#13;
                presenter.canvas = canvas;&#13;
            }&#13;
        );&#13;
&#13;
        presenter.createCanvas(&#13;
            function(mask) {&#13;
                presenter.$selectingMask = mask;&#13;
                presenter.$selectingMask.addClass('selecting');&#13;
                return presenter.$selectingMask;&#13;
            },&#13;
            function(ctx) {&#13;
                presenter.selectingCtx = ctx&#13;
            },&#13;
            function(canvas) {&#13;
                presenter.selectingCanvas = canvas;&#13;
            }&#13;
        );&#13;
    };&#13;
&#13;
    presenter.createCanvas = function (setMask, setContext, setCanvas) {&#13;
        var $mask = $('&lt;div class="iwb-toolbar-mask"&gt;&lt;/div&gt;');&#13;
        $mask = setMask($mask);&#13;
        $mask.hide();&#13;
&#13;
        var icPage = presenter.$pagePanel.find('.ic_page');&#13;
        icPage.css('position', 'relative');&#13;
        icPage.append($mask);&#13;
&#13;
        var canvas = $('&lt;canvas&gt;&lt;/canvas&gt;');&#13;
        setCanvas(canvas);&#13;
        setContext(canvas[0].getContext("2d"));&#13;
&#13;
        $mask.append(canvas);&#13;
        canvas[0].width = $mask.width();&#13;
        canvas[0].height = $mask.height();&#13;
    };&#13;
&#13;
    presenter.applyHovered = function (elements) {&#13;
        $.each(elements, function(_, btn) {&#13;
            presenter._hoveredButtons.push($(btn));&#13;
            $(btn).hover(function() {&#13;
                $(this).addClass('hovered');&#13;
                $(this).find('.tooltip').show();&#13;
            }, function() {&#13;
                $(this).removeClass('hovered');&#13;
                $(this).find('.tooltip').hide();&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.model = model;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.isKeepStateAndPosition = ModelValidationUtils.validateBoolean(model['keepStateAndPosition']);&#13;
&#13;
        presenter.setVisibility(presenter.isVisible, true, view);&#13;
        $(view).find('.iwb-toolbar-panel').width(model['Width'] - 50 + 'px');&#13;
&#13;
        var moduleClasses = $(view).attr('class');&#13;
&#13;
        if (moduleClasses.indexOf('addon_IWB_Toolbar') &lt; 0){&#13;
            var moduleCustomClass =  moduleClasses.replace('ice_module', '');&#13;
            $(view).find('.iwb-toolbar-panel').addClass(moduleCustomClass);&#13;
            $(view).removeClass(moduleCustomClass);&#13;
        }else{&#13;
            $(view).find('.iwb-toolbar-panel').addClass('addon_IWB_Toolbar');&#13;
            $(view).removeClass('addon_IWB_Toolbar');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        Kinetic.pixelRatio = 1;&#13;
        presenter.model = model;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.isKeepStateAndPosition = ModelValidationUtils.validateBoolean(model['keepStateAndPosition']);&#13;
&#13;
        presenter.headerLoadedDeferred = new $.Deferred();&#13;
        presenter.headerLoaded = presenter.headerLoadedDeferred.promise();&#13;
&#13;
&#13;
        presenter.setBasicConfiguration(view, model);&#13;
&#13;
        if (!presenter.config.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.ERROR_CODES, presenter.config.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.addFloatingImages(model);&#13;
&#13;
        presenter.createCanvases();&#13;
&#13;
        presenter.iwb_tmp_canvas = document.createElement('canvas');&#13;
        presenter.tmp_ctx = presenter.iwb_tmp_canvas.getContext('2d');&#13;
        $(presenter.iwb_tmp_canvas).addClass('iwb_tmp_canvas');&#13;
&#13;
        presenter.$panel.draggable({&#13;
            containment: 'parent',&#13;
            opacity: 0.35,&#13;
            create: function (event, _) {&#13;
                $(event.target).addClass('running');&#13;
                $(event.target).css('position', presenter.config.panelPosition);&#13;
                if (window.savedPanel &amp;&amp; window.savedPanel.position) {&#13;
                    if (presenter.isKeepStateAndPosition) {&#13;
                        if (presenter.config.panelPosition == 'fixed') {&#13;
                            $(event.target).css('top', window.savedPanel.position.top + presenter.$pagePanel.offset().top + 'px');&#13;
                            $(event.target).css('left', window.savedPanel.position.left + presenter.$pagePanel.offset().left + 'px');&#13;
                        } else {&#13;
                            $(event.target).css('top', window.savedPanel.position.top + 'px');&#13;
                            $(event.target).css('left', window.savedPanel.position.left + 'px');&#13;
                        }&#13;
                    } else {&#13;
                        if (presenter.config.panelPosition == 'fixed') {&#13;
                            $(event.target).css('top', (parseInt(model['Top'], 10)) + presenter.$pagePanel.offset().top + 'px');&#13;
                            $(event.target).css('left', (parseInt(model['Left'], 10)) + presenter.$pagePanel.offset().left + 'px');&#13;
&#13;
                        } else {&#13;
                            $(event.target).css('top', (parseInt(model['Top'], 10)) + 'px');&#13;
                            $(event.target).css('left', (parseInt(model['Left'], 10)) + 'px');&#13;
                        }&#13;
                    }&#13;
                } else {&#13;
                    var offsetTopPrev,&#13;
                        offsetLeftPrev;&#13;
                    if (presenter.config.panelPosition == 'fixed') {&#13;
                        offsetTopPrev = presenter.$pagePanel.offset().top;&#13;
                        offsetLeftPrev = presenter.$pagePanel.offset().left;&#13;
                    } else {&#13;
                        offsetTopPrev = $(presenter.$panel).position().top;&#13;
                        offsetLeftPrev = $(presenter.$panel).position().left;&#13;
                    }&#13;
                    $(event.target).css('top', (offsetTopPrev + parseInt(model['Top'], 10)) + 'px');&#13;
                    $(event.target).css('left', (offsetLeftPrev + parseInt(model['Left'], 10)) + 'px');&#13;
                    presenter.headerLoaded.then(function () {&#13;
                        var offsetTop,&#13;
                            offsetLeft;&#13;
                        if (presenter.config.panelPosition == 'fixed') {&#13;
                            offsetTop = presenter.$pagePanel.offset().top;&#13;
                            offsetLeft = presenter.$pagePanel.offset().left;&#13;
                        } else {&#13;
                            offsetTop = '';&#13;
                            offsetLeft = '';&#13;
                        }&#13;
                        $(event.target).css('top', (offsetTop + parseInt(model['Top'], 10)) + 'px');&#13;
                        $(event.target).css('left', (offsetLeft + parseInt(model['Left'], 10)) + 'px');&#13;
                    });&#13;
                }&#13;
            },&#13;
            stop: function (event, ui) {&#13;
                var top = ui.position.top;&#13;
                var left = ui.position.left;&#13;
&#13;
                if (presenter.config.panelPosition == 'fixed') {&#13;
                    window.savedPanel.position = { top: top - presenter.$pagePanel.offset().top, left: left - presenter.$pagePanel.offset().left};&#13;
                } else {&#13;
                    window.savedPanel.position = { top: top, left: left};&#13;
                }&#13;
&#13;
                $.ui.ddmanager.current = null;&#13;
            }&#13;
        });&#13;
&#13;
&#13;
        presenter.applyHovered([presenter.$panel.find('.button')]);&#13;
        presenter.$panel.width(presenter.config.widthWhenClosed - 50 + 'px');&#13;
&#13;
        window.savedPanel = window.savedPanel || {};&#13;
&#13;
        if (window.savedPanel &amp;&amp; window.savedPanel.isOpen &amp;&amp; presenter.isKeepStateAndPosition) {&#13;
            presenter.openPanel(false);&#13;
        } else {&#13;
            window.savedPanel.widthWhenOpened = presenter.config.widthWhenOpened;&#13;
        }&#13;
&#13;
        presenter.addEventHandlers();&#13;
&#13;
&#13;
        if (presenter.isInFrame &amp;&amp; presenter.config.panelPosition == 'fixed') {&#13;
            addScrollHandler();&#13;
        }&#13;
&#13;
        $(view).hide();&#13;
        presenter.setVisibility(presenter.isVisible, false, view);&#13;
&#13;
        var width = presenter.$pagePanel.find('.marker-mask').find('canvas')[0].width;&#13;
        var height = presenter.$pagePanel.find('.marker-mask').find('canvas')[0].height;&#13;
        presenter.iwb_tmp_canvas.width = width;&#13;
        presenter.iwb_tmp_canvas.height = height;&#13;
        presenter.$pagePanel.find('.marker-mask').append(presenter.iwb_tmp_canvas);&#13;
&#13;
        /**&#13;
         * We're adding addon class to its panel as a way of ensuring custom class styling applies.&#13;
         * Normally addon has custom class set by Player, but in our case the view is hidden and visible part&#13;
         * (panel) is not a child of it.&#13;
         */&#13;
        presenter.$panel.addClass(document.getElementById(model["ID"]).className);&#13;
&#13;
        zoom.init();&#13;
        if(presenter.isKeepStateAndPosition){&#13;
           if(window.savedPanel.tools){&#13;
               presenter.activeFunction = window.savedPanel.tools.activeFunction;&#13;
               presenter.closePenColor = window.savedPanel.tools.stateColor;&#13;
               presenter.closePenThickness = window.savedPanel.tools.stateThickness;&#13;
               presenter.buttonColor = presenter.$bottomPanels.find('[color*='+window.savedPanel.tools.buttonColor+']')[0];&#13;
               presenter.buttonThickness = presenter.$bottomPanels.find('[thickness*='+window.savedPanel.tools.buttonThickness+']')[0];&#13;
               presenter.isCloseColor = window.savedPanel.tools.isCloseColor;&#13;
               presenter.shouldSaveColor = window.savedPanel.tools.shouldSaveColor;&#13;
                   if(presenter.activeFunction){&#13;
                       if(presenter.activeFunction != 'clock' &amp;&amp; presenter.activeFunction != 'stopwatch' &amp;&amp; presenter.activeFunction != 'note' &amp;&amp; presenter.activeFunction != 'reset' &amp;&amp; presenter.activeFunction != 'open'){&#13;
                           if(!presenter.recklick){&#13;
                               presenter.functionButton = presenter.$pagePanel.find('.'+presenter.activeFunction);&#13;
                               if(window.savedPanel.isOpen){&#13;
                                   presenter.buttonsLogic[presenter.activeFunction].onOpen(presenter.functionButton);&#13;
                                   presenter.functionButton.addClass('clicked');&#13;
                               }&#13;
                           }&#13;
                           presenter.isRecklicked = false;&#13;
                       }&#13;
                   }&#13;
               if(presenter.isCloseColor){&#13;
                   presenter.changeColor(presenter.closePenColor, presenter.buttonColor);&#13;
                   presenter.changeThickness(presenter.closePenThickness, presenter.buttonThickness);&#13;
               }&#13;
           }&#13;
        }&#13;
&#13;
        presenter._view = view;&#13;
        view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function (event) {&#13;
        if (event.target !== presenter._view) {&#13;
            return;&#13;
        }&#13;
        &#13;
        presenter.points = [];&#13;
        presenter.points = null;&#13;
        presenter.mouse = null;&#13;
&#13;
        /***&#13;
         * **********************************************&#13;
         * addEventHandlers&#13;
         * **********************************************&#13;
         */&#13;
        presenter.$pagePanel.find('.iwb-toolbar-mask').off();&#13;
        presenter.$pagePanel.find('.note').off();&#13;
&#13;
        //noteObjects&#13;
        presenter.noteObjects.forEach(function (note) {&#13;
            note.destroy();&#13;
            note = null;&#13;
        });&#13;
        presenter.noteObjects = [];&#13;
        presenter.noteObjects = null;&#13;
&#13;
        presenter.Note.prototype.getView = null;&#13;
        presenter.Note.createNote = null;&#13;
        presenter.Note = null;&#13;
        presenter.createNote = null;&#13;
&#13;
        //stopwatch&#13;
        if (presenter._stopwatch !== null) {&#13;
            presenter._stopwatch.stopwatch.off();&#13;
            presenter._stopwatch.stopwatch.draggable('destroy');&#13;
            presenter._stopwatch.closeButton.off();&#13;
            $(presenter._stopwatch.start).off();&#13;
            $(presenter._stopwatch.stop).off();&#13;
            $(presenter._stopwatch.clear).off();&#13;
&#13;
            if (presenter._stopwatchTimer !== null) {&#13;
                clearTimeout(presenter._stopwatchTimer);&#13;
            }&#13;
&#13;
            presenter._stopwatch.stopwatch = null;&#13;
            presenter._stopwatch.closeButton = null;&#13;
            presenter._stopwatch.start = null;&#13;
            presenter._stopwatch.stop = null;&#13;
            presenter._stopwatch.clear = null;&#13;
            presenter._stopwatchTimer = null;&#13;
            presenter._stopwatch = null;&#13;
        }&#13;
&#13;
        //clock&#13;
        if (presenter._clockwatch !== null) {&#13;
&#13;
            if (presenter._clockwatchTimer !== null) {&#13;
                clearInterval(presenter._clockwatchTimer);&#13;
            }&#13;
&#13;
            presenter._clockwatch.clock.off();&#13;
            presenter._clockwatch.clock.draggable('destroy');&#13;
            presenter._clockwatch.closeButton.off();&#13;
&#13;
            presenter._clockwatchTimer = null;&#13;
            presenter._clockwatch.clock = null;&#13;
            presenter._clockwatch.closeButton = null;&#13;
            presenter._clockwatch = null;&#13;
        }&#13;
&#13;
        presenter.$pagePanel.find('.button').off();&#13;
        presenter.$defaultColorButton.off();&#13;
        presenter._iwb_buttons.forEach(function ($btn) {&#13;
           $btn.off();&#13;
        });&#13;
&#13;
        presenter.$pagePanel.off();&#13;
        presenter.$panel.off();&#13;
&#13;
&#13;
        presenter._iwb_buttons.length = 0;&#13;
        presenter._iwb_buttons = null;&#13;
&#13;
        presenter.buttonClicked = null;&#13;
        presenter.isSavedState = null;&#13;
        presenter.buttonsLogic = null;&#13;
        presenter.recklick = null;&#13;
&#13;
        //penClickHandler&#13;
        presenter.iwb_tmp_canvas.removeEventListener('touchstart', presenter.onTouchStartCallback, false);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('touchend', presenter.onTouchEndEventCallback, false);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mousemove', presenter.penMouseMoveHandler, false);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mousedown', presenter.penMouseDownHandler, false);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mouseup', presenter.penMouseUpHandler, false);&#13;
&#13;
        $(presenter.canvas).off('mousedown mousemove mouseup touchstart touchmove touchend');&#13;
        $(presenter.markerCanvas).off('mousedown mousemove mouseup touchstart touchmove touchend');&#13;
&#13;
        presenter.isZoomActive = null;&#13;
        presenter.$defaultColorButton = null;&#13;
        presenter.currentLineColor = null;&#13;
        presenter.drawMode = null;&#13;
&#13;
        //changeThickness&#13;
        presenter.currentLineWidth = null;&#13;
        presenter.currentMarkerThickness = null;&#13;
        presenter.currentEraserThickness = null;&#13;
&#13;
&#13;
        //penCloseHandler&#13;
        presenter.penLineColor = null;&#13;
        presenter.penLineWidth = null;&#13;
        presenter.penColorBackground = null;&#13;
        presenter.penThicknessBackground = null;&#13;
&#13;
        //penUnclickHandler&#13;
        presenter.colorBackground = null;&#13;
        presenter.penClicked = null;&#13;
&#13;
        //markerClicked&#13;
        presenter.iwb_tmp_canvas.removeEventListener('touchstart', presenter.onTouchStartCallback);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('touchend', presenter.onTouchEndEventCallback);&#13;
        // MOUSE&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mousemove', presenter.markerMouseMoveHandler);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mousedown', presenter.markerMouseDownHandler);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mouseup', presenter.markerMouseUpHandler);&#13;
        $(presenter.iwb_tmp_canvas).off();&#13;
        &#13;
        presenter.markerColorBackground = null;&#13;
        presenter.markerThicknessBackground = null;&#13;
        presenter.markerCtx = null;&#13;
        presenter.markerClicked = null;&#13;
        presenter.iwb_tmp_canvas = null;&#13;
&#13;
        //markerCloseHandler&#13;
        presenter.markerLineColor = null;&#13;
        presenter.markerLineWidth = null;&#13;
&#13;
        //markerUnclickHandler&#13;
        //pass&#13;
&#13;
        //defaultClickHandler&#13;
        //pass&#13;
&#13;
        //thicknessClickHandler&#13;
        //pass&#13;
&#13;
        //zoomClickHandler&#13;
        $(".iwb-zoom-cover").off();&#13;
        if (presenter.modules !== undefined) {&#13;
            presenter.modules.find('a').unbind('click', presenter.preventClickAction_zoomClickHandler);&#13;
            presenter.modules.length = 0;&#13;
            presenter.modules = null;&#13;
        }&#13;
&#13;
        //textAudioEvents&#13;
        presenter.textAudioEvents.forEach(function (element) {&#13;
            $(element).unbind('click', preventClickActionTextAudio);&#13;
        });&#13;
        presenter.areZoomEventHandlersAttached = null;&#13;
        presenter.isMouseDown = null;&#13;
&#13;
        //eraserClickHandler&#13;
        presenter.ctx = null;&#13;
        presenter.drawMode = null;&#13;
&#13;
        //eraserUnClickHandler&#13;
        presenter.$penMask = null;&#13;
&#13;
        //hideAreaClickHandler&#13;
        var $hideAreaCanvas = presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas');&#13;
        $hideAreaCanvas.off();&#13;
&#13;
        //standAreaClickHandler&#13;
        //pass&#13;
&#13;
        //resetClickHandler&#13;
        presenter.selectingCtx = null;&#13;
        presenter.areas = [];&#13;
        presenter.areas = null;&#13;
&#13;
        //noteClickHandler&#13;
        //pass&#13;
&#13;
        //floatingImageClickHandler&#13;
        //pass&#13;
&#13;
        //clockClickHandler&#13;
        //pass&#13;
&#13;
        //stopwatchClickHandler&#13;
        //pass&#13;
&#13;
        //closeClickHandler&#13;
        presenter.closePenColor = null;&#13;
        presenter.currentLineColor = null;&#13;
        presenter.closePenThickness = null;&#13;
        presenter.currentLineWidth = null;&#13;
        presenter.isCloseColor = null;&#13;
        presenter.shouldSaveColor = null;&#13;
        presenter.closePenColor = null;&#13;
        presenter.currentLineColor = null;&#13;
        presenter.closePenThickness = null;&#13;
        presenter.currentMarkerThickness = null;&#13;
        presenter.isCloseColor = null;&#13;
        presenter.isCloseColor = null;&#13;
        presenter.isPanelOpened = null;&#13;
        presenter.activeFunction = null;&#13;
        presenter.activeButton = null;&#13;
&#13;
        //openClickHandler&#13;
        presenter.isRecklicked = null;&#13;
&#13;
        /***&#13;
         * *******************************************************************&#13;
         * setBasicConfiguration&#13;
         * *******************************************************************&#13;
         */&#13;
        presenter._view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.$removeConfirmationBox.off();&#13;
        presenter.$removeConfirmationBoxClock.off();&#13;
        presenter.$removeConfirmationBoxStopwatch.off();&#13;
        presenter.$panel.draggable("destroy");&#13;
        presenter.$view.off();&#13;
        presenter.$defaultThicknessButton.off();&#13;
        presenter.$buttonsExceptOpen.off();&#13;
        presenter.$removeConfirmationBox.off();&#13;
        presenter.$removeConfirmationBoxClock.off();&#13;
        presenter.$removeConfirmationBoxStopwatch.off();&#13;
        presenter.$bottomPanels.off();&#13;
&#13;
        presenter.$removeConfirmationBox.remove();&#13;
        presenter.$removeConfirmationBoxClock.remove();&#13;
        presenter.$removeConfirmationBoxStopwatch.remove();&#13;
        presenter.$panel.remove();&#13;
&#13;
        presenter.headerLoadedDeferred = null;&#13;
        presenter.headerLoaded = null;&#13;
&#13;
        presenter.$view = null;&#13;
        presenter.$panel = null;&#13;
        presenter.$defaultThicknessButton = null;&#13;
        presenter.isInFrame = null;&#13;
        presenter.$buttonsExceptOpen = null;&#13;
        presenter.buttonWidth = null;&#13;
&#13;
        presenter.$removeConfirmationBox = null;&#13;
&#13;
        presenter._view = null;&#13;
        presenter.model = null;&#13;
        presenter.isVisible = null;&#13;
        presenter.isKeepStateAndPosition = null;&#13;
&#13;
        presenter.$pagePanel = null;&#13;
        presenter.$removeConfirmationBoxClock = null;&#13;
        presenter.$removeConfirmationBoxStopwatch = null;&#13;
        presenter.$bottomPanels = null;&#13;
&#13;
        presenter.config = null;&#13;
&#13;
        presenter.iwb_tmp_canvas = null;&#13;
        presenter.tmp_ctx = null;&#13;
&#13;
        presenter.$markerMask = null;&#13;
        presenter.markerCanvas = null;&#13;
        presenter.markerCtx = null;&#13;
        presenter.$penMask = null;&#13;
        presenter.ctx = null;&#13;
        presenter.canvas = null;&#13;
        presenter.$selectingMask = null;&#13;
        presenter.selectingCtx = null;&#13;
        presenter.selectingCanvas = null;&#13;
&#13;
        /***&#13;
         * *****************************************&#13;
         * presenter.addFloatingImages - kinetic.js&#13;
         * *****************************************&#13;
         */&#13;
        presenter.$floatingImageMask.off();&#13;
&#13;
        presenter.floatingImageLayer.destroy();&#13;
        presenter.floatingImageStage.destroy();&#13;
        &#13;
        for(var i = 0; i &lt; 3; i++) {&#13;
            presenter._kinetic.images[i].destroy();&#13;
        &#13;
            //imageRotateObj&#13;
            $(presenter._kinetic.rotateObj[i]).off();&#13;
            presenter._kinetic.rotateObj[i].src='';&#13;
        &#13;
            //imageMoveObj&#13;
            $(presenter._kinetic.moveObj[i]).off();&#13;
            presenter._kinetic.moveObj[i].src ='';&#13;
        &#13;
        &#13;
            //imageObj&#13;
            $(presenter._kinetic.imageObj[i]).off();&#13;
            presenter._kinetic.imageObj[i].src='';&#13;
        &#13;
        &#13;
            presenter._kinetic.rotateIcon[i].destroy();&#13;
            presenter._kinetic.moveIcon[i].destroy();&#13;
            presenter.floatingImageGroups[i].destroy();&#13;
        }&#13;
&#13;
        presenter._kinetic.images = [];&#13;
        presenter._kinetic.rotateObj = [];&#13;
        presenter._kinetic.moveObj = [];&#13;
        presenter._kinetic.rotateIcon = [];&#13;
        presenter._kinetic.moveIcon = [];&#13;
&#13;
        presenter._kinetic.groups = null;&#13;
        presenter._kinetic.images = null;&#13;
        presenter._kinetic.rotateObj = null;&#13;
        presenter._kinetic.moveObj = null;&#13;
        presenter._kinetic.rotateIcon = null;&#13;
        presenter._kinetic.moveIcon = null;&#13;
&#13;
        presenter._kinetic.imageObj = [];&#13;
        presenter._kinetic.imageObj.length = 0;&#13;
        presenter._kinetic.imageObj = null;&#13;
&#13;
        presenter._kinetic = null;&#13;
&#13;
        presenter.floatingImageLayer = null;&#13;
        presenter.floatingImageStage = null;&#13;
        presenter.allImagesLoadedPromises = [];&#13;
        presenter.allImagesLoadedPromises.length = 0;&#13;
        presenter.allImagesLoadedPromises = null;&#13;
&#13;
        /***&#13;
         * ***********************************************&#13;
         *  applyHovered&#13;
         * ***********************************************&#13;
         */&#13;
        presenter._hoveredButtons.forEach(function ($btn) {&#13;
            $btn.off();&#13;
        });&#13;
        presenter._hoveredButtons.length = [];&#13;
        presenter._hoveredButtons = null;&#13;
&#13;
        /***&#13;
         * **************************************************&#13;
         * addScrollHandler&#13;
         * **************************************************&#13;
         */&#13;
        $(window.parent.document).unbind('scroll');&#13;
&#13;
        /***&#13;
         * ************************************************ &#13;
         * zoom&#13;
         * ************************************************ &#13;
         */&#13;
        zoom.destroy();&#13;
&#13;
        /***&#13;
         *************************************************&#13;
         * setState&#13;
         *************************************************&#13;
        */&#13;
        presenter._setState.images.forEach(function (image) {&#13;
            $(image).off();&#13;
            image.src = '';&#13;
        });&#13;
        presenter._setState.images.length = 0;&#13;
        presenter._setState.images = null;&#13;
&#13;
        presenter._setState = null;&#13;
&#13;
&#13;
&#13;
        /***&#13;
         * ***********************************************&#13;
         * functions&#13;
         * ***********************************************&#13;
         */&#13;
        presenter.setBasicConfiguration = null;&#13;
        presenter.changeCursor = null;&#13;
        presenter.createCanvases = null;&#13;
        presenter.createCanvas = null;&#13;
        presenter.addFloatingImages = null;&#13;
        presenter.loadDeferredFloatingImage = null;&#13;
        presenter.applyHovered = null;&#13;
        presenter.setVisibility = null;&#13;
        presenter.openPanel = null;&#13;
        presenter._openPanelShow = null;&#13;
        presenter.toogleMasks = null;&#13;
        presenter.isSupportCSSPointerEvents = null;&#13;
        presenter.panelView = null;&#13;
        presenter.markerDrawingLogic = null;&#13;
        applyOnDblClickHandler = null;&#13;
        applyDoubleTapHandler = null;&#13;
&#13;
        //buttonsLogic clearing&#13;
        presenter.addEventHandlers = null;&#13;
        presenter.penClickHandler = null;&#13;
        presenter.penCloseHandler = null;&#13;
        presenter.penUnclickHandler = null;&#13;
        presenter.markerClickHandler = null;&#13;
        presenter.markerCloseHandler = null;&#13;
        presenter.markerUnclickHandler = null;&#13;
        presenter.defaultClickHandler = null;&#13;
        presenter.colorClickHandler = null;&#13;
        presenter.thicknessClickHandler = null;&#13;
        presenter.zoomClickHandler = null;&#13;
        presenter.zoomCloseHandler = null;&#13;
        presenter.eraserClickHandler = null;&#13;
        presenter.eraserUnClickHandler = null;&#13;
        presenter.hideAreaClickHandler = null;&#13;
        presenter.standAreaClickHandler = null;&#13;
        presenter.resetClickHandler = null;&#13;
        presenter.noteClickHandler = null;&#13;
        presenter.floatingImageClickHandler = null;&#13;
        presenter.clockClickHandler = null;&#13;
        presenter.stopwatchClickHandler = null;&#13;
        presenter.closeClickHandler = null;&#13;
        presenter.openClickHandler = null;&#13;
        presenter.areDrawingButtonsActive = null;&#13;
        presenter.isDrawingActive = null;&#13;
        presenter.isAreaDrawingActive = null;&#13;
        presenter.getTheWidestAndHighest = null;&#13;
        presenter.preventClickAction_zoomClickHandler = null;&#13;
        presenter.zoomSelectedModule = null;&#13;
        presenter.drawAreaLogic = null;&#13;
        presenter.setImagePosition = null;&#13;
        presenter.createClock = null;&#13;
        presenter.createStopwatch = null;&#13;
        presenter.closePanel = null;&#13;
&#13;
        //markerDrawingLogicFunctions&#13;
        presenter.onTouchStartCallback = null;&#13;
        presenter.onTouchEndEventCallback = null;&#13;
        presenter.markerMouseMoveHandler = null;&#13;
        presenter.markerMouseDownHandler = null;&#13;
        presenter.markerMouseUpHandler = null;&#13;
&#13;
        //penDrawingLogicFunctions&#13;
        presenter.penMouseMoveHandler = null;&#13;
        presenter.penMouseDownHandler = null;&#13;
        presenter.penMouseUpHandler = null;&#13;
&#13;
        //hideArea&#13;
        presenter.drawAreaLogic_touchStartCallback = null;&#13;
        presenter.drawAreaLogic_touchEndCallback = null;&#13;
        presenter.drawAreaLogic_mouseDownCallback = null;&#13;
        presenter.drawAreaLogic_mouseUpCallback = null;&#13;
&#13;
        presenter.drawAreaLogic = null;&#13;
&#13;
        presenter.disableTextAudioEventHandlers = null;&#13;
        presenter.restoreTextAudioEventHandlers = null;&#13;
        presenter.changeColor = null;&#13;
        presenter.changeThickness = null;&#13;
        presenter.drawingLogic = null;&#13;
        presenter.toggleBottomPanels = null;&#13;
        presenter.reset = null;&#13;
        presenter._reset = null;&#13;
    };&#13;
&#13;
    presenter._reset = function IWB_Toolbar_private_reset(closePanel, shouldClearCanvas, shouldHideDrawingMasks, shouldHideSelectingMasks, shouldHideFloatingImage) {&#13;
        presenter.$panel.find('.clicked-lighter').removeClass('clicked-lighter');&#13;
        presenter.$panel.find('.hovered').removeClass('hovered');&#13;
        presenter.$pagePanel.find('.zoomed').removeClass('zoomed');&#13;
        presenter.$pagePanel.enableSelection();&#13;
        presenter.changeCursor('default');&#13;
&#13;
        if (closePanel) {&#13;
            presenter.$pagePanel.find('.bottom-panel-color').hide();&#13;
            presenter.$pagePanel.find('.bottom-panel-thickness').hide();&#13;
        }&#13;
&#13;
        if (shouldClearCanvas) {&#13;
            presenter.changeColor('#0fa9f0');&#13;
            clearCanvases();&#13;
        }&#13;
&#13;
        if (shouldHideDrawingMasks &amp;&amp; !presenter.isSupportCSSPointerEvents()) {&#13;
            if (presenter.$penMask) {&#13;
                presenter.$penMask.hide();&#13;
            }&#13;
            if (presenter.$markerMask) {&#13;
                presenter.$markerMask.hide();&#13;
            }&#13;
        }&#13;
&#13;
        if (shouldHideSelectingMasks) {&#13;
            if (presenter.$selectingMask) {&#13;
                presenter.$selectingMask.hide();&#13;
            }&#13;
        }&#13;
&#13;
        if(shouldHideFloatingImage){&#13;
            if (presenter.$floatingImageMask) {&#13;
                presenter.$floatingImageMask.hide();&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').hide();&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').attr('isHidden', '1');&#13;
            }&#13;
        }&#13;
&#13;
        setOverflowWorkAround(true);&#13;
        setOverflowWorkAround(false);&#13;
    };&#13;
&#13;
    presenter.changeColor = function IWB_Toolbar_changeColor(color, button) {&#13;
        if (button) {&#13;
            presenter.$panel.find('.button.color').css('background-image', $(button).css('background-image'));&#13;
        } else {&#13;
            presenter.$panel.find('.button.color').css('background-image', presenter.$defaultColorButton.css('background-image'));&#13;
        }&#13;
        presenter.currentLineColor = color;&#13;
    };&#13;
&#13;
    presenter.changeThickness = function IWB_Toolbar_changeThickness(size, button) {&#13;
        if (button) {&#13;
            presenter.$panel.find('.button.thickness').css('background-image', $(button).css('background-image'));&#13;
        } else {&#13;
            presenter.$panel.find('.button.thickness').css('background-image', presenter.$defaultThicknessButton.css('background-image'));&#13;
        }&#13;
        presenter.currentLineWidth = presenter.data.defaultPenWidth === 1 ? size : presenter.data.defaultPenWidth;&#13;
&#13;
        presenter.currentMarkerThickness = presenter.data.markerThickness === 10 ? size : presenter.data.markerThickness;&#13;
        presenter.currentEraserThickness = presenter.data.eraserThickness === 20 ? size : presenter.data.eraserThickness;&#13;
    };&#13;
&#13;
    function clearCanvases() {&#13;
        if (presenter.canvas) {&#13;
            presenter.penUsed = false;&#13;
            presenter.canvas.off('mousemove mousedown mouseup');&#13;
            presenter.ctx.clearRect(0, 0, presenter.canvas[0].width, presenter.canvas[0].height);&#13;
        }&#13;
&#13;
        if (presenter.markerCanvas) {&#13;
            presenter.markerUsed = false;&#13;
            presenter.markerCanvas.off('mousemove mousedown mouseup');&#13;
            presenter.markerCtx.clearRect(0, 0, presenter.markerCanvas[0].width, presenter.markerCanvas[0].height);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true, false, presenter.$view);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false, false, presenter.$view);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible, isPreview, view) {&#13;
        if (!isPreview) {&#13;
            presenter.$panel.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
        } else {&#13;
            $(view).css('visibility', isVisible ? 'visible' : 'hidden');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'open' : presenter.open,&#13;
            'hide' : presenter.hide,&#13;
            'show' : presenter.show,&#13;
            'setPenColor' : presenter.setPenColor,&#13;
            'setMarkerColor' : presenter.setMarkerColor,&#13;
            'setDefaultPenThickness' : presenter.setDefaultPenThickness,&#13;
            'setMarkerThickness': presenter.setMarkerThickness,&#13;
            'setEraserThickness': presenter.setEraserThickness&#13;
        };&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.reset = function IWB_Toolbar_reset() {&#13;
        presenter.$pagePanel.find('.clicked').removeClass('clicked');&#13;
        presenter._reset(true, true, true, true, true);&#13;
&#13;
        presenter.penLineWidth = 1;&#13;
        presenter.data.defaultPenWidth = 1;&#13;
        presenter.markerLineWidth = 10;&#13;
        presenter.data.eraserThickness = 20;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() { return 0; };&#13;
    presenter.getMaxScore = function() { return 0; };&#13;
    presenter.getScore = function() { return 0; };&#13;
&#13;
    function getSavedClocks() {&#13;
        var clocks = [];&#13;
        $.each(presenter.$pagePanel.find('.iwb-toolbar-clock'), function() {&#13;
            clocks.push({&#13;
                'top': $(this).css('top'),&#13;
                'left': $(this).css('left')&#13;
            });&#13;
            $(this).remove();&#13;
        });&#13;
        return clocks;&#13;
    }&#13;
&#13;
    function getSavedStopwatches() {&#13;
        var stopwatches = [];&#13;
        $.each(presenter.$pagePanel.find('.iwb-toolbar-stopwatch'), function() {&#13;
            stopwatches.push({&#13;
                'top': $(this).css('top'),&#13;
                'left': $(this).css('left')&#13;
            });&#13;
        });&#13;
        return stopwatches;&#13;
    }&#13;
&#13;
    function isPanelOpened() {&#13;
        return presenter.$panel.hasClass('opened');&#13;
    }&#13;
&#13;
    presenter.getState = function() {&#13;
        zoom.out();&#13;
        var notes = presenter.noteObjects.map(function (note) {&#13;
            return note.getState();&#13;
        });&#13;
&#13;
        var clocks = getSavedClocks(),&#13;
           stopwatches = getSavedStopwatches(),&#13;
           position = presenter.$panel.position(),&#13;
           openedPanel = isPanelOpened(),&#13;
           drawings = {&#13;
               'pen' : (presenter.penUsed &amp;&amp; presenter.canvas) ? presenter.canvas[0].toDataURL('image/png') : null,&#13;
               'marker' : (presenter.markerUsed &amp;&amp; presenter.markerCanvas) ? presenter.markerCanvas[0].toDataURL('image/png') : null&#13;
           };&#13;
&#13;
        clearCanvases();&#13;
&#13;
        var stateColor;&#13;
        var stateThickness;&#13;
        if(openedPanel){&#13;
           if(presenter.shouldSaveColor == 'pen' || presenter.shouldSaveColor == 'stand-area' || presenter.shouldSaveColor == 'hide-area'){&#13;
               presenter.closePenColor = presenter.currentLineColor;&#13;
               presenter.closePenThickness = presenter.currentLineWidth;&#13;
&#13;
               presenter.isCloseColor = true;&#13;
           }else if(presenter.shouldSaveColor == 'marker'){&#13;
               presenter.closePenColor = presenter.currentLineColor;&#13;
               presenter.closePenThickness = presenter.currentMarkerThickness;&#13;
&#13;
               presenter.isCloseColor = true;&#13;
           }&#13;
           else{&#13;
               presenter.isCloseColor = false;&#13;
           }&#13;
&#13;
           if(presenter.activeButton != 'open'){&#13;
               presenter.activeFunction = presenter.activeButton;&#13;
           }&#13;
        }&#13;
&#13;
        if(presenter.shouldSaveColor == 'pen' || presenter.shouldSaveColor == 'stand-area' || presenter.shouldSaveColor == 'hide-area'){&#13;
           stateColor = presenter.closePenColor;&#13;
           stateThickness = presenter.closePenThickness;&#13;
        }else if(presenter.shouldSaveColor == 'marker'){&#13;
           stateColor = presenter.closePenColor;&#13;
           stateThickness = presenter.closePenThickness;&#13;
        }else{&#13;
           stateColor = '';&#13;
           stateThickness = '';&#13;
        }&#13;
&#13;
        if(presenter.isKeepStateAndPosition){&#13;
           if(window.savedPanel.tools){&#13;
               if(!presenter.activeFunction || presenter.activeFunction == 'open' || presenter.activeFunction == 'close'){&#13;
                   presenter.activeFunction = window.savedPanel.tools.activeFunction;&#13;
               }&#13;
           }&#13;
        }&#13;
&#13;
        window.savedPanel.tools = {&#13;
           'activeFunction': presenter.activeFunction,&#13;
           'stateColor': stateColor,&#13;
           'stateThickness': stateThickness,&#13;
           'isCloseColor': presenter.isCloseColor,&#13;
           'buttonColor': $(presenter.buttonColor).attr("color"),&#13;
           'buttonThickness': $(presenter.buttonThickness).attr("thickness"),&#13;
           'shouldSaveColor': presenter.shouldSaveColor&#13;
        };&#13;
&#13;
        return JSON.stringify({&#13;
           'areas' : presenter.areas,&#13;
           'notes' : notes,&#13;
           'clocks' : clocks,&#13;
           'stopwatches' : stopwatches,&#13;
           'drawings' : drawings,&#13;
           'seconds' : presenter.seconds,&#13;
           'minutes' : presenter.minutes,&#13;
           'hours' : presenter.hours,&#13;
           'stopClicked' : presenter.stopButtonClicked,&#13;
           'startClicked' : presenter.startButtonClicked,&#13;
           'isVisible' : presenter.isVisible,&#13;
           'position' : position,&#13;
           'openedPanel' : openedPanel,&#13;
           'activeFunction': presenter.activeFunction,&#13;
           'stateColor': stateColor,&#13;
           'stateThickness': stateThickness,&#13;
           'isCloseColor': presenter.isCloseColor,&#13;
           'buttonColor': $(presenter.buttonColor).attr("color"),&#13;
           'buttonThickness': $(presenter.buttonThickness).attr("thickness"),&#13;
           'shouldSaveColor': presenter.shouldSaveColor&#13;
        });&#13;
    };&#13;
&#13;
    /**&#13;
     * We are omitting state properties as follows:&#13;
     * - hours&#13;
     * - minutes&#13;
     * - seconds&#13;
     * - stopClicked&#13;
     * - startClicked&#13;
     *&#13;
     * Because they are used when creating stopwatches and we assume here that no stopwatches should be created&#13;
     * (hence empty array of them).&#13;
     */&#13;
    presenter.upgradeStateForStopwatchesAndClocks = function(parsedState) {&#13;
        if (parsedState.stopwatches == undefined) {&#13;
            parsedState.stopwatches = [];&#13;
        }&#13;
        if (parsedState.clocks == undefined) {&#13;
            parsedState.clocks = [];&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.upgradeStateForVisibility = function (parsedState) {&#13;
        if (parsedState.isVisible == undefined) {&#13;
            parsedState.isVisible = true;&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.upgradeStateForSavingTools = function (parsedState){&#13;
        if(parsedState.activeFunction == undefined){&#13;
            parsedState.activeFunction = '';&#13;
        }&#13;
        if(parsedState.buttonColor == undefined){&#13;
            parsedState.buttonColor = '';&#13;
        }&#13;
        if(parsedState.buttonThickness == undefined){&#13;
            parsedState.buttonThickness = '';&#13;
        }&#13;
        if(parsedState.isCloseColor == undefined){&#13;
            parsedState.isCloseColor = false;&#13;
        }&#13;
        if(parsedState.shouldSaveColor == undefined){&#13;
            parsedState.shouldSaveColor = '';&#13;
        }&#13;
        if(parsedState.stateColor == undefined){&#13;
            parsedState.stateColor = '#000';&#13;
        }&#13;
        if(parsedState.stateThickness == undefined){&#13;
            parsedState.stateThickness = 1;&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.upgradeState = function (parsedState) {&#13;
        var upgradedState = presenter.upgradeStateForStopwatchesAndClocks(parsedState);&#13;
&#13;
        upgradedState = presenter.upgradeStateForVisibility(upgradedState);&#13;
&#13;
        upgradedState = presenter.upgradeStateForSavingTools(upgradedState);&#13;
&#13;
        return  upgradedState;&#13;
    };&#13;
&#13;
    presenter.shouldRestoreStateAndPosition = function (model, state) {&#13;
        var keepStateAndPosition = model['keepStateAndPosition'];&#13;
&#13;
        if (keepStateAndPosition == undefined || state.position == undefined) {&#13;
            return false;&#13;
        }&#13;
&#13;
        return keepStateAndPosition == 'False';&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (!state) {&#13;
           return;&#13;
        }&#13;
        &#13;
        var parsedState = JSON.parse(state);&#13;
        &#13;
        var upgradedState = presenter.upgradeState(parsedState);&#13;
        &#13;
        presenter.areas = parsedState.areas;&#13;
        presenter.stopwatches = parsedState.stopwatches;&#13;
        presenter.clocks = parsedState.clocks;&#13;
        &#13;
        if (presenter.shouldRestoreStateAndPosition(presenter.model, upgradedState)) {&#13;
           if (upgradedState.openedPanel) {&#13;
               if(presenter.isKeepStateAndPosition){&#13;
                   presenter.openPanel(false);&#13;
               }&#13;
           }&#13;
           presenter.position = upgradedState.position;&#13;
        &#13;
           var visibility = presenter.$panel.css('visibility');&#13;
           var width = presenter.$panel.css('width');&#13;
           var position = presenter.$panel.css('position');&#13;
        &#13;
           presenter.$panel.attr('style', 'position: ' + position + '; top: ' + presenter.position.top + 'px; left: ' + presenter.position.left + 'px; visibility: ' + visibility + '; width: ' + width + ';');&#13;
        }&#13;
&#13;
&#13;
        var image1 = new Image();&#13;
        var image2 = new Image();&#13;
        presenter._setState.images.push(image1);&#13;
        presenter._setState.images.push(image2);&#13;
&#13;
        if (upgradedState.drawings.pen) {&#13;
            presenter.penUsed = true;&#13;
        }&#13;
        if (upgradedState.drawings.marker) {&#13;
            presenter.markerUsed = true;&#13;
        }&#13;
&#13;
        setDrawingState(image1, presenter.ctx, upgradedState.drawings.pen);&#13;
        setDrawingState(image2, presenter.markerCtx, upgradedState.drawings.marker);&#13;
        &#13;
        $.each(parsedState.notes, function(_, noteData) {&#13;
            var note = presenter.createNote(noteData);&#13;
            presenter.noteObjects.push(note);&#13;
            presenter.$pagePanel.find('.ic_page').append(note.getView());&#13;
        });&#13;
        &#13;
        $.each(presenter.clocks, function() {&#13;
           presenter.createClock(this);&#13;
        });&#13;
        &#13;
        $.each(presenter.stopwatches, function() {&#13;
           presenter.createStopwatch(this, upgradedState.hours, upgradedState.minutes, upgradedState.seconds, upgradedState.stopClicked, upgradedState.startClicked);&#13;
        });&#13;
        &#13;
        drawSavedAreas();&#13;
        presenter.isVisible = upgradedState.isVisible;&#13;
        presenter.setVisibility(presenter.isVisible, false, presenter.$view);&#13;
        &#13;
        if (presenter.isSupportCSSPointerEvents()) {&#13;
           presenter.$penMask.show();&#13;
           presenter.$markerMask.show();&#13;
           if(presenter.isKeepStateAndPosition){&#13;
               if(window.savedPanel.tools != undefined){&#13;
                   if(window.savedPanel.tools.activeFunction == 'pen' || window.savedPanel.tools.activeFunction == 'marker'){&#13;
                       if(window.savedPanel.isOpen){&#13;
                           presenter.$penMask.css('pointer-events', 'auto');&#13;
                           presenter.$markerMask.css('pointer-events', 'auto');&#13;
                       }else{&#13;
                           presenter.$penMask.css('pointer-events', 'none');&#13;
                           presenter.$markerMask.css('pointer-events', 'none');&#13;
                       }&#13;
                   }else{&#13;
                       presenter.$penMask.css('pointer-events', 'none');&#13;
                       presenter.$markerMask.css('pointer-events', 'none');&#13;
                   }&#13;
               }else{&#13;
                   presenter.$penMask.css('pointer-events', 'none');&#13;
                   presenter.$markerMask.css('pointer-events', 'none');&#13;
               }&#13;
           }else{&#13;
               presenter.$penMask.css('pointer-events', 'none');&#13;
               presenter.$markerMask.css('pointer-events', 'none');&#13;
           }&#13;
        }&#13;
        &#13;
        if(presenter.isKeepStateAndPosition &amp;&amp; (window.savedPanel.tools != undefined)){&#13;
           presenter.activeFunction = window.savedPanel.tools.activeFunction;&#13;
           presenter.closePenColor = window.savedPanel.tools.stateColor;&#13;
           presenter.closePenThickness = window.savedPanel.tools.stateThickness;&#13;
           presenter.buttonColor = presenter.$bottomPanels.find('[color*='+window.savedPanel.tools.buttonColor+']')[0];&#13;
           presenter.buttonThickness = presenter.$bottomPanels.find('[thickness*='+window.savedPanel.tools.buttonThickness+']')[0];&#13;
           presenter.isCloseColor = window.savedPanel.tools.isCloseColor;&#13;
           presenter.shouldSaveColor = window.savedPanel.tools.shouldSaveColor;&#13;
        }else{&#13;
           presenter.activeFunction = upgradedState.activeFunction;&#13;
           presenter.closePenColor = upgradedState.stateColor;&#13;
           presenter.closePenThickness = upgradedState.stateThickness;&#13;
           presenter.buttonColor = presenter.$bottomPanels.find('[color*='+upgradedState.buttonColor+']')[0];&#13;
           presenter.buttonThickness = presenter.$bottomPanels.find('[thickness*='+upgradedState.buttonThickness+']')[0];&#13;
           presenter.isCloseColor = upgradedState.isCloseColor;&#13;
           presenter.shouldSaveColor = upgradedState.shouldSaveColor;&#13;
        }&#13;
        if(presenter.activeFunction){&#13;
           presenter.activeButton = presenter.activeFunction;&#13;
        }&#13;
        &#13;
        presenter.isSavedState = true;&#13;
        &#13;
        if(!presenter.isKeepStateAndPosition){&#13;
           if(presenter.isCloseColor){&#13;
               presenter.changeColor(presenter.closePenColor, presenter.buttonColor);&#13;
               presenter.changeThickness(presenter.closePenThickness, presenter.buttonThickness);&#13;
           }&#13;
        }&#13;
        &#13;
        setOverflowWorkAround(true);&#13;
        setOverflowWorkAround(false);&#13;
    };&#13;
&#13;
    function setDrawingState(image, ctx, data) {&#13;
        if (data) {&#13;
            $(image).load(function() {&#13;
                ctx.drawImage(image, 0, 0);&#13;
            });&#13;
            image.src = data;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setPenColor = function(color) {&#13;
        color = color[0];&#13;
        presenter.data.penColor = color;&#13;
        if (presenter.$pagePanel.find('.clicked').hasClass('pen')) {&#13;
            presenter.currentLineColor = color;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setMarkerColor = function(color) {&#13;
        color = color[0];&#13;
        presenter.data.markerColor = color;&#13;
        if (presenter.$pagePanel.find('.clicked').hasClass('marker')) {&#13;
            presenter.currentLineColor = color;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setDefaultPenThickness = function(lineWidth) {&#13;
        presenter.data.defaultPenWidth = parseInt(lineWidth, 10);&#13;
        presenter.changeThickness(presenter.data.defaultPenWidth);&#13;
    };&#13;
&#13;
    presenter.setMarkerThickness = function (thickness){&#13;
        presenter.data.markerThickness = parseInt(thickness, 10);&#13;
        presenter.changeThickness(presenter.data.markerThickness);&#13;
    };&#13;
&#13;
    presenter.setEraserThickness = function (thickness){&#13;
        presenter.data.eraserThickness = parseInt(thickness, 10);&#13;
        presenter.changeThickness(presenter.data.eraserThickness);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Iframe" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Iframe URL" name="iframeURL" nameLabel="IFrame_property_iframe_url" type="string"/>
        <property displayName="File List" name="fileList" nameLabel="IFrame_property_file_list" type="list">
            <property displayName="File" name="file" nameLabel="IFrame_property_file" type="file"/>
            <property displayName="ID" name="id" nameLabel="IFrame_property_id" type="string"/>
        </property>
        <property displayName="Index File" name="index" nameLabel="IFrame_property_index_file" type="file"/>
        <property displayName="Communication ID" name="communicationID" nameLabel="IFrame_property_communication_id" type="string"/>
    </model>
<css>.addon-IFrame{&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    border: none;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class="addon-IFrame-wrapper"&gt;&#13;
    &lt;iframe class="addon-IFrame"&gt;&#13;
    &lt;/iframe&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="addon-IFrame-wrapper"&gt;&#13;
    &lt;iframe class="addon-IFrame"&gt;&#13;
    &lt;/iframe&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonIframe_create() {&#13;
    var presenter = function (){};&#13;
&#13;
    presenter.iframeState = undefined;&#13;
    presenter.iframeContent = null;&#13;
    presenter.configuration = null;&#13;
    presenter.$view = null;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.actionID = {&#13;
        SET_WORK_MODE : "SET_WORK_MODE",&#13;
        SET_SHOW_ERRORS_MODE : "SET_SHOW_ERRORS_MODE",&#13;
        RESET : "RESET",&#13;
        STATE_ACTUALIZATION: "STATE_ACTUALIZATION",&#13;
        STATE_REQUEST: "STATE_REQUEST",&#13;
        SHOW_ANSWERS: "SHOW_ANSWERS",&#13;
        HIDE_ANSWERS: "HIDE_ANSWERS",&#13;
        FILE_DICTIONARY_REQUEST: "FILE_DICTIONARY_REQUEST",&#13;
        FILE_DICTIONARY_ACTUALIZATION: "FILE_DICTIONARY_ACTUALIZATION"&#13;
    };&#13;
&#13;
    presenter.iframeScore = {&#13;
            pageCount: 0,&#13;
            checks: 0,&#13;
            errors: 0,&#13;
            mistakes: 0,&#13;
            score: 0,&#13;
            maxScore: 0,&#13;
            scaledScore: 0&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'M01' : "Module must have Index File or IFrame URL",&#13;
        'M02' : "Module must have Communication ID",&#13;
        'F01' : "File must have ID",&#13;
        'F02' : "In File List all elements must have file",&#13;
        'I01' : "Multiple File ID in File List"&#13;
    };&#13;
&#13;
    presenter.validateMessage = function AddonIFrame_Communication_Validate_Message (message) {&#13;
        if (message != undefined) {&#13;
            if ((message.id == presenter.configuration.communicationID) &amp;&amp; (message.actionID != undefined)) {&#13;
                return true;&#13;
            }&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.run = function AddonIFrame_Communication_run (view, model) {&#13;
        presenter.initialize(view, model);&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonIFrame_Communication_create_preview (view, model) {&#13;
        presenter.initialize(view, model);&#13;
    };&#13;
&#13;
    presenter.initialize = function AddonIFrame_Communication_initialize (view, model)  {&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        var iframe = $(view).find("iframe");&#13;
        if(presenter.configuration.haveURL) {&#13;
            iframe.attr("src", presenter.configuration.iframeURL);&#13;
        }&#13;
        else {&#13;
            iframe.attr("src", presenter.configuration.index);&#13;
        }&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.view = view;&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.iframeContent = iframe.get(0).contentWindow;&#13;
&#13;
        window.addEventListener("message",presenter.getMessage,false);&#13;
        view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function () {&#13;
        if (event.target !== this) {&#13;
            return;&#13;
        }&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        window.removeEventListener("message",presenter.getMessage);&#13;
    };&#13;
&#13;
    presenter.validateFile = function AddonIFrame_Communication_Validate_File (file, dictionary) {&#13;
        var trimmedFileID = file.id.trim();&#13;
        var trimmedFile = file.file.trim();&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(trimmedFileID)) {&#13;
            return {isValid: false, errorCode: "F01" };&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(trimmedFile)) {&#13;
            return {isValid: false, errorCode: "F02" };&#13;
        }&#13;
&#13;
        if (dictionary[trimmedFileID] !== undefined) {&#13;
            return {isValid: false, errorCode: "I01" };&#13;
        }&#13;
&#13;
        return {isValid: true, id: trimmedFileID, file: trimmedFile};&#13;
    };&#13;
&#13;
&#13;
    presenter.validateFileList = function AddonIFrame_Communication_Validate_File_List (model) {&#13;
        var fileDictionary = {};&#13;
&#13;
        for (var i = 0; i &lt; model.fileList.length; i++) {&#13;
            if(ModelValidationUtils.isStringEmpty(model.fileList[i].fileDictionary)&#13;
                &amp;&amp; ModelValidationUtils.isStringEmpty(model.fileList[i].file)){&#13;
                continue;&#13;
            }&#13;
            var validateFileResult = presenter.validateFile(model.fileList[i],fileDictionary);&#13;
            if (!validateFileResult.isValid) {&#13;
                return validateFileResult;&#13;
            }&#13;
            else {&#13;
                fileDictionary[validateFileResult.id] = validateFileResult.file;&#13;
            }&#13;
        }&#13;
        return {isValid: true, fileDictionary: fileDictionary};&#13;
    };&#13;
    presenter.validateIFrameSource = function AddonIFrame_Communication_Validate_IFrame_Source (model) {&#13;
        var haveURL = !ModelValidationUtils.isStringEmpty(model.iframeURL.trim());&#13;
&#13;
        if (!haveURL &amp;&amp; ModelValidationUtils.isStringEmpty(model.index.trim()))  {&#13;
            return { isValid: false, errorCode: 'M01'};&#13;
        }&#13;
        return { isValid: true, haveURL: haveURL };&#13;
    };&#13;
&#13;
    presenter.validateCommunicationID = function AddonIFrame_Communication_Validate_Communication_ID (model) {&#13;
       if (ModelValidationUtils.isStringEmpty(model.communicationID.trim()) ) {&#13;
           return { isValid: false, errorCode: 'M02'};&#13;
        }&#13;
        return { isValid: true, value: (model.communicationID.trim()) };&#13;
    };&#13;
&#13;
    presenter.validateModel = function AddonIFrame_Communication_Validate_Model(model) {&#13;
        var validateIFrameSourceResult = presenter.validateIFrameSource(model);&#13;
        if (!validateIFrameSourceResult.isValid) {&#13;
            return validateIFrameSourceResult;&#13;
        }&#13;
&#13;
        var validateCommunicationIDResult = presenter.validateCommunicationID(model);&#13;
        if (!validateCommunicationIDResult.isValid) {&#13;
            return validateCommunicationIDResult;&#13;
        }&#13;
&#13;
        var validateFileListResult = presenter.validateFileList(model);&#13;
        if (!validateFileListResult.isValid) {&#13;
            return validateFileListResult;&#13;
        }&#13;
        return {&#13;
            isValid: true,&#13;
            haveURL: validateIFrameSourceResult.haveURL,&#13;
            iframeURL: model.iframeURL,&#13;
            index: model.index,&#13;
            communicationID: validateCommunicationIDResult.value,&#13;
            addonID : model.ID,&#13;
            fileDictionary: validateFileListResult.fileDictionary,&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model['Is Visible'])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.show = function AddonIFrame_Communication_show () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function AddonIFrame_Communication_hide () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.reset = function AddonIFrame_Communication_reset () {&#13;
        presenter.sendMessage(presenter.actionID.RESET);&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.isVisible = presenter.configuration.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.showAnswers = function AddonIFrame_Communication_show_answers () {&#13;
        presenter.sendMessage(presenter.actionID.SHOW_ANSWERS);&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function AddonIFrame_Communication_hide_answers () {&#13;
        presenter.sendMessage(presenter.actionID.HIDE_ANSWERS);&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function AddonIFrame_Communication_set_work_mode () {&#13;
        presenter.sendMessage(presenter.actionID.SET_WORK_MODE);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function AddonIFrame_Communication_set_show_errors_mode () {&#13;
        presenter.sendMessage(presenter.actionID.SET_SHOW_ERRORS_MODE);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        } else if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function AddonIFrame_Communication_set_state (state) {&#13;
        try {&#13;
            var parsedState = JSON.parse(state);&#13;
            presenter.iframeState = parsedState.iframeState;&#13;
            presenter.iframeScore = parsedState.iframeScore;&#13;
        }&#13;
        catch (error) {&#13;
            presenter.iframeState = undefined;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function AddonIFrame_Communication_get_state () {&#13;
        return JSON.stringify({iframeState: presenter.iframeState, iframeScore: presenter.iframeScore } );&#13;
    };&#13;
&#13;
    presenter.getScore = function AddonIFrame_Communication_get_score () {&#13;
        return presenter.iframeScore.score;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function AddonIFrame_Communication_get_maxScore () {&#13;
        return presenter.iframeScore.maxScore;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function AddonIFrame_Communication_get_error_count () {&#13;
        return presenter.iframeScore.errors;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function AddonIFrame_Communication_execute_Command (name, params) {&#13;
        if (presenter.isErrorCheckingMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
    presenter.createEventData = function AddonIFrame_Communication_create_event_data() {&#13;
        return {&#13;
            source : presenter.configuration.addonID,&#13;
            item : "all",&#13;
            value : '',&#13;
            score : ''&#13;
        };&#13;
&#13;
    };&#13;
&#13;
   presenter.triggerFrameChangeEvent = function AddonIFrame_Communication_trigger_frame_change_event () {&#13;
        if (presenter.eventBus != undefined) {&#13;
            presenter.eventBus.sendEvent('ValueChanged', presenter.createEventData());&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.sendMessage = function AddonIFrame_Communication_send_message (actionID, params) {&#13;
        if (params == undefined) {&#13;
            params = {};&#13;
        }&#13;
        var newMessage = { id : presenter.configuration.communicationID, actionID : actionID, params:params};&#13;
        presenter.iframeContent.postMessage(newMessage, "*");&#13;
    };&#13;
&#13;
    presenter.setStateActualization = function AddonIFrame_Communication_set_state_actualization (state) {&#13;
        if (presenter.validateActualizationModel(state).isValid) {&#13;
            //state undefined nie aktualizwac&#13;
            if(state.iframeState !== undefined) {&#13;
                presenter.iframeState = state.iframeState;&#13;
            }&#13;
            presenter.iframeScore = state.iframeScore;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateActualizationModel = function AddonIFrame_Communication_Validate_Actualization_Model (actualization) {&#13;
        if (actualization === undefined) {&#13;
            return {isValid: false};&#13;
        }&#13;
        var attributes = ["pageCount", "checks", "errors", "mistakes", "score", "maxScore", "scaledScore"];&#13;
        if(actualization.iframeScore === undefined) {&#13;
            return {isValid: false };&#13;
        }&#13;
        for (var i = 0; i&lt; attributes.length; i++) {&#13;
            if (!ModelValidationUtils.validateInteger(actualization.iframeScore[attributes[i]]).isValid) {&#13;
                return {isValid: false };&#13;
            }&#13;
        }&#13;
        return {isValid: true};&#13;
    };&#13;
&#13;
    presenter.getMessage = function AddonIFrame_Communication_get_message (event) {&#13;
        var message = event.data;&#13;
        if (presenter.validateMessage(message)) {&#13;
            switch (message.actionID) {&#13;
                case presenter.actionID.STATE_ACTUALIZATION:&#13;
                    presenter.setStateActualization(message.params);&#13;
                    presenter.triggerFrameChangeEvent();&#13;
                    break;&#13;
&#13;
                case presenter.actionID.STATE_REQUEST:&#13;
                    presenter.sendMessage(presenter.actionID.STATE_ACTUALIZATION, { iframeState: presenter.iframeState, iframeScore: presenter.iframeScore } );&#13;
                    break;&#13;
&#13;
                case presenter.actionID.FILE_DICTIONARY_REQUEST:&#13;
                    presenter.sendMessage(presenter.actionID.FILE_DICTIONARY_ACTUALIZATION, { fileDictionary: presenter.configuration.fileDictionary});&#13;
                    break;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Image_Identification" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Image" nameLabel="Image_Identification_property_image" type="image"/>
		<property name="SelectionCorrect" nameLabel="Image_Identification_property_selection_correct" type="boolean"/>
		<property name="Is not an activity" nameLabel="Image_Identification_property_is_not_an_activity" type="boolean"/>
		<property name="Block in error checking mode" nameLabel="Image_Identification_property_block_in_error_checking_mode" type="boolean"/>
        <property displayName="Block wrong answers" name="blockWrongAnswers" nameLabel="Image_Identification_property_block_wrong_answers" type="boolean"/>
	</model>
<css>.image-identification-element-selected,&#13;
.image-identification-element-correct,&#13;
.image-identification-element-incorrect,&#13;
.image-identification-element-mouse-hover,&#13;
.image-identification-element-show-answers,&#13;
.image-identification-element {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.image-identification-background-image {&#13;
    border: 0 solid white;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    background-size: 100%;&#13;
    background-position: 0 0;&#13;
}&#13;
</css><view/><preview/><presenter>function AddonImage_Identification_create(){&#13;
    var presenter = function() {};&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.lastEvent = null;&#13;
    presenter.isDisabled = false;&#13;
&#13;
    var CSS_CLASSES = {&#13;
        ELEMENT : "image-identification-element",&#13;
        SELECTED : "image-identification-element-selected",&#13;
        CORRECT : "image-identification-element-correct",&#13;
        EMPTY : "image-identification-element-empty",&#13;
        INCORRECT : "image-identification-element-incorrect",&#13;
        MOUSE_HOVER : "image-identification-element-mouse-hover",&#13;
        SHOW_ANSWERS : "image-identification-element-show-answers",&#13;
        MOUSE_HOVER_SELECTED: "image-identification-element-selected-mouse-hover"&#13;
    };&#13;
&#13;
    /**&#13;
     * @return {string}&#13;
     */&#13;
    function CSS_CLASSESToString() {&#13;
        return CSS_CLASSES.ELEMENT + " " + CSS_CLASSES.SELECTED + " " + CSS_CLASSES.CORRECT + " " +&#13;
            CSS_CLASSES.EMPTY + " " + CSS_CLASSES.INCORRECT + " " + CSS_CLASSES.MOUSE_HOVER + " " + CSS_CLASSES.SHOW_ANSWERS + " " + CSS_CLASSES.MOUSE_HOVER_SELECTED;&#13;
    }&#13;
&#13;
    function clickLogic() {&#13;
        if(presenter.isDisabled){&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.configuration.isErrorCheckMode &amp;&amp; (presenter.configuration.isActivity || presenter.configuration.isBlockedInErrorCheckingMode)) return;&#13;
        presenter.toggleSelectionState(true);&#13;
        applySelectionStyle(presenter.configuration.isSelected, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
&#13;
        var score = presenter.configuration.shouldBeSelected ? 1 : 0;&#13;
        if(score == 0 &amp;&amp; presenter.configuration.blockWrongAnswers) {&#13;
            presenter.toggleSelectionState(false);&#13;
            applySelectionStyle(presenter.configuration.isSelected, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.handleMouseActions = function() {&#13;
        var $element = presenter.$view.find('div:first');&#13;
&#13;
        $element.hover(&#13;
            function() {&#13;
                if (presenter.configuration.isErrorCheckMode &amp;&amp; (presenter.configuration.isActivity || presenter.configuration.isBlockedInErrorCheckingMode)) return;&#13;
&#13;
                if (presenter.configuration.isHoverEnabled) {&#13;
                    $(this).removeClass(CSS_CLASSESToString());&#13;
                    $(this).addClass('image-identification-element-mouse-hover');&#13;
                    if(presenter.configuration.isSelected){&#13;
                        $(this).addClass('image-identification-element-selected-mouse-hover');&#13;
                    }&#13;
                }&#13;
            },&#13;
            function() {&#13;
                if (presenter.configuration.isErrorCheckMode &amp;&amp; (presenter.configuration.isActivity || presenter.configuration.isBlockedInErrorCheckingMode)) return;&#13;
&#13;
                if (presenter.configuration.isHoverEnabled) {&#13;
                    $(this).removeClass(CSS_CLASSESToString());&#13;
                    $(this).addClass(presenter.configuration.isSelected ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
                }&#13;
            }&#13;
        );&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart') || MobileUtils.isMobileUserAgent(window.navigator.userAgent)) {&#13;
            connectTouchHandlers($element);&#13;
        }&#13;
&#13;
        connectClickHandlers($element);&#13;
    };&#13;
&#13;
    function connectClickHandlers($element) {&#13;
        $element.on('mousedown', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
&#13;
            presenter.lastEvent = e;&#13;
        });&#13;
&#13;
        $element.on ('mouseup', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
&#13;
            if ( presenter.lastEvent.type != e.type ) {&#13;
                clickLogic();&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function connectTouchHandlers($element) {&#13;
        $element.on('touchstart', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
&#13;
            presenter.lastEvent = e;&#13;
        });&#13;
&#13;
        $element.on('touchend', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
&#13;
            if ( presenter.lastEvent.type != e.type ) {&#13;
                clickLogic();&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function setViewDimensions(model) {&#13;
        var viewDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var viewDistances = DOMOperationsUtils.calculateOuterDistances(viewDimensions);&#13;
&#13;
        presenter.$view.css({&#13;
            width:(model.Width - viewDistances.horizontal) + 'px',&#13;
            height:(model.Height - viewDistances.vertical) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function loadImage(imageSrc, isPreview) {&#13;
        var image = document.createElement('img');&#13;
        $(image).attr('src', imageSrc);&#13;
        $(image).addClass(presenter.configuration.isSelected ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
        presenter.$view.html(image);&#13;
&#13;
        $(image).load(function () {&#13;
            var elementDimensions = DOMOperationsUtils.getOuterDimensions(this);&#13;
            var elementDistances = DOMOperationsUtils.calculateOuterDistances(elementDimensions);&#13;
&#13;
            $(this).remove();&#13;
&#13;
            var element = document.createElement('div');&#13;
            var innerElement = document.createElement('div');&#13;
            $(element).addClass(presenter.configuration.isSelected ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
            $(element).css({&#13;
                width:(presenter.$view.width() - elementDistances.horizontal) + 'px',&#13;
                height:(presenter.$view.height() - elementDistances.vertical) + 'px'&#13;
            });&#13;
&#13;
            $(innerElement).addClass('image-identification-background-image');&#13;
            $(innerElement).css({&#13;
                backgroundImage:"url('" + imageSrc + "')",&#13;
                width:$(element).width() + 'px',&#13;
                height:$(element).height() + 'px'&#13;
            });&#13;
&#13;
            $(element).html(innerElement);&#13;
            presenter.$view.html(element);&#13;
&#13;
            presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
&#13;
            if (!isPreview) {&#13;
                presenter.handleMouseActions();&#13;
            }&#13;
&#13;
            presenter.$view.trigger("onLoadImageCallbackEnd", []);&#13;
            presenter.configuration.isImageLoaded = true;&#13;
        });&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        setViewDimensions(model);&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(presenter.configuration.imageSrc)) {&#13;
            return;&#13;
        }&#13;
&#13;
        loadImage(presenter.configuration.imageSrc, preview);&#13;
    }&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            addonID: model.ID,&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            isSelected: false,&#13;
            imageSrc: model.Image,&#13;
            shouldBeSelected: ModelValidationUtils.validateBoolean(model.SelectionCorrect),&#13;
            isHoverEnabled: true,&#13;
            isActivity: !ModelValidationUtils.validateBoolean(model["Is not an activity"]),&#13;
            isBlockedInErrorCheckingMode: ModelValidationUtils.validateBoolean(model["Block in error checking mode"]),&#13;
            isErrorCheckMode: false,&#13;
            blockWrongAnswers: ModelValidationUtils.validateBoolean(model.blockWrongAnswers)&#13;
        };&#13;
    };&#13;
&#13;
    function applySelectionStyle(selected, selectedClass, unselectedClass) {&#13;
        var element = presenter.$view.find('div:first')[0];&#13;
&#13;
        $(element).removeClass(CSS_CLASSESToString());&#13;
        $(element).addClass(selected ? selectedClass : unselectedClass);&#13;
    }&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.configuration.isActivity &amp;&amp; presenter.configuration.isErrorCheckMode) return;&#13;
&#13;
        var commands = {&#13;
            'select': presenter.select,&#13;
            'deselect': presenter.deselect,&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isSelected': presenter.isSelected,&#13;
            'markAsCorrect': presenter.markAsCorrect,&#13;
            'markAsWrong': presenter.markAsWrong,&#13;
            'markAsEmpty': presenter.markAsEmpty,&#13;
            'removeMark': presenter.removeMark,&#13;
            'showAnswers': presenter.showAnswers,&#13;
            'hideAnswers': presenter.hideAnswers,&#13;
            'disable': presenter.disable,&#13;
            'enable': presenter.enable&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        presenter.isDisabled = true;&#13;
        var $element = presenter.$view.find('div:first');&#13;
        $($element).addClass('image-identification-element-disabled');&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        presenter.isDisabled = false;&#13;
        var $element = presenter.$view.find('div:first');&#13;
        $($element).removeClass('image-identification-element-disabled');&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        eventBus = playerController.getEventBus();&#13;
&#13;
        presenterLogic(view, model, false);&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.configuration.isSelected = false;&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
&#13;
        applySelectionStyle(false, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
&#13;
        if (presenter.configuration.isVisibleByDefault) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
&#13;
        if (!presenter.configuration.isActivity) return;&#13;
&#13;
        applySelectionStyle(presenter.configuration.isSelected, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorCheckMode = true;&#13;
&#13;
        if (!presenter.configuration.isActivity) return;&#13;
&#13;
        if (presenter.configuration.isSelected) {&#13;
            applySelectionStyle(presenter.configuration.isSelected === presenter.configuration.shouldBeSelected, CSS_CLASSES.CORRECT, CSS_CLASSES.INCORRECT);&#13;
        } else {&#13;
            applySelectionStyle(true, CSS_CLASSES.EMPTY, CSS_CLASSES.ELEMENT);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (!presenter.configuration.isActivity) return 0;&#13;
&#13;
        if (!presenter.configuration.shouldBeSelected) {&#13;
            return presenter.configuration.isSelected ? 1 : 0;&#13;
        }&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if (!presenter.configuration.isActivity) return 0;&#13;
&#13;
        if (presenter.configuration.shouldBeSelected) {&#13;
            return 1;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (!presenter.configuration.isActivity) return 0;&#13;
&#13;
        if (presenter.configuration.shouldBeSelected) {&#13;
            return presenter.configuration.isSelected ? 1 : 0;&#13;
        }&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isSelected: presenter.configuration.isSelected,&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            isDisabled: presenter.isDisabled&#13;
        });&#13;
    };&#13;
&#13;
    function loadImageEndCallback() {&#13;
        applySelectionStyle(presenter.configuration.isSelected, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    }&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
        presenter.configuration.isSelected = state.isSelected;&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
&#13;
        presenter.$view.bind("onLoadImageCallbackEnd", function () {&#13;
            loadImageEndCallback();&#13;
        });&#13;
&#13;
        if (presenter.configuration.isImageLoaded) {&#13;
            loadImageEndCallback();&#13;
        }&#13;
&#13;
        if(state.isDisabled != undefined){&#13;
            presenter.isDisabled = state.isDisabled;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function(isSelected, shouldBeSelected) {&#13;
        var score;&#13;
        if (presenter.configuration.isActivity){&#13;
            score = shouldBeSelected ? '1' : '0';&#13;
        } else {&#13;
            score = 0;&#13;
        }&#13;
&#13;
        return {&#13;
            source : presenter.configuration.addonID,&#13;
            item : '',&#13;
            value : isSelected ? '1' : '0',&#13;
            score : score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerSelectionEvent = function(isSelected, shouldBeSelected) {&#13;
        var eventData = this.createEventData(isSelected, shouldBeSelected);&#13;
&#13;
        if (playerController != null) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.select = function () {&#13;
        presenter.configuration.isSelected = true;&#13;
        presenter.triggerSelectionEvent(true, presenter.configuration.shouldBeSelected);&#13;
        applySelectionStyle(true, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.deselect = function () {&#13;
        presenter.configuration.isSelected = false;&#13;
        presenter.triggerSelectionEvent(false, presenter.configuration.shouldBeSelected);&#13;
        applySelectionStyle(false, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.toggleSelectionState = function(shouldSendEvent) {&#13;
        presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
&#13;
        if(shouldSendEvent){&#13;
            presenter.triggerSelectionEvent(presenter.configuration.isSelected, presenter.configuration.shouldBeSelected);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.isSelected = function () {&#13;
        return presenter.configuration.isSelected;&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function() {&#13;
        presenter.configuration.isHoverEnabled = false;&#13;
        presenter.configuration.isMarked = true;&#13;
&#13;
        // Selection can be changed only in activity mode.&#13;
        // When module is not in activity mode we want to be able to restore selection after removing mark classes&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.configuration.isSelected = true;&#13;
        }&#13;
&#13;
        applySelectionStyle(true, CSS_CLASSES.CORRECT, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        presenter.configuration.isHoverEnabled = false;&#13;
        presenter.configuration.isMarked = true;&#13;
&#13;
        // Selection can be changed only in activity mode.&#13;
        // When module is not in activity mode we want to be able to restore selection after removing mark classes&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.configuration.isSelected = true;&#13;
        }&#13;
&#13;
        applySelectionStyle(true, CSS_CLASSES.INCORRECT, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.markAsEmpty = function() {&#13;
        presenter.configuration.isHoverEnabled = false;&#13;
        presenter.configuration.isMarked = true;&#13;
&#13;
        applySelectionStyle(true, CSS_CLASSES.EMPTY, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.removeMark = function() {&#13;
        if (!presenter.configuration.isMarked) return;&#13;
&#13;
        presenter.configuration.isHoverEnabled = true;&#13;
        presenter.configuration.isMarked = false;&#13;
&#13;
        // Selection can be changed only in activity mode.&#13;
        // When module is not in activity mode we want to be able to restore selection after removing mark classes&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.configuration.isSelected = true;&#13;
        }&#13;
&#13;
        applySelectionStyle(presenter.configuration.isSelected, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    function applySelectionStyleShowAnswers (style){&#13;
        var element = presenter.$view.find('div:first')[0];&#13;
        $(element).addClass(style);&#13;
    }&#13;
&#13;
    function applySelectionStyleHideAnswers (style){&#13;
        var element = presenter.$view.find('div:first')[0];&#13;
&#13;
        $(element).removeClass(style);&#13;
    }&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(!presenter.configuration.isActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
&#13;
        presenter.configuration.isErrorCheckMode = true;&#13;
&#13;
        presenter.$view.find('.image-identification-element-incorrect').removeClass(CSS_CLASSES.INCORRECT).addClass("image-identification-element was-selected");&#13;
        presenter.$view.find('.image-identification-element-correct').removeClass(CSS_CLASSES.CORRECT).addClass("image-identification-element was-selected");&#13;
&#13;
        if(presenter.configuration.shouldBeSelected){&#13;
            applySelectionStyleShowAnswers(CSS_CLASSES.SHOW_ANSWERS);&#13;
        }else{&#13;
            presenter.$view.find('.image-identification-element-selected').removeClass(CSS_CLASSES.SELECTED).addClass("image-identification-element was-selected");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(!presenter.configuration.isActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
&#13;
        applySelectionStyleHideAnswers(CSS_CLASSES.SHOW_ANSWERS);&#13;
&#13;
         var elementWasSelected = presenter.$view.find('.was-selected');&#13;
         $(elementWasSelected).addClass(CSS_CLASSES.SELECTED).removeClass("was-selected");&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Image_Viewer_Button_Controlled_Public" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Image" nameLabel="Image_Viewer_Button_Controlled_Public_property_image" type="image"/>
		<property name="Frames" nameLabel="Image_Viewer_Button_Controlled_Public_property_frames" type="string"/>
		<property name="Frame size" nameLabel="Image_Viewer_Button_Controlled_Public_property_frame_size" type="{Original, Keep aspect ratio, Stretch}"/>
		<property name="Sounds" nameLabel="Image_Viewer_Button_Controlled_Public_property_sounds" type="list">
			<property name="MP3 sound" nameLabel="Image_Viewer_Button_Controlled_Public_property_mp3_sound" type="audio"/>
			<property name="OGG sound" nameLabel="Image_Viewer_Button_Controlled_Public_property_ogg_sound" type="audio"/>
			<property name="AAC sound" nameLabel="Image_Viewer_Button_Controlled_Public_property_aac_sound" type="audio"/>
		</property>
		<property name="Frame names" nameLabel="Image_Viewer_Button_Controlled_Public_property_frame_names" type="list">
			<property name="name" nameLabel="Image_Viewer_Button_Controlled_Public_property_name" type="string"/>
			<property name="frame" nameLabel="Image_Viewer_Button_Controlled_Public_property_frames" type="string"/>
		</property>
		<property name="isClickDisabled" nameLabel="Image_Viewer_Button_Controlled_Public_property_is_click_disabled" type="boolean"/>
		<property name="Labels" nameLabel="Image_Viewer_Button_Controlled_Public_property_labels" type="list">
			<property isLocalized="true" name="Text" nameLabel="Image_Viewer_Button_Controlled_Public_property_text" type="string"/>
			<property name="Top" nameLabel="Image_Viewer_Button_Controlled_Public_property_top" type="string"/>
			<property name="Left" nameLabel="Image_Viewer_Button_Controlled_Public_property_left" type="string"/>
			<property name="Frames" nameLabel="Image_Viewer_Button_Controlled_Public_property_frames" type="string"/>
		</property>
		<property name="Show frame" nameLabel="Image_Viewer_Button_Controlled_Public_property_show_frame" type="string"/>
	</model>
<css>.image-viewer {&#13;
    border: none;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    float: left;&#13;
    overflow: hidden;&#13;
    background: no-repeat 0 0;&#13;
}&#13;
&#13;
.image-viewer-audio-wrapper {&#13;
    display: none;&#13;
}&#13;
&#13;
.image-viewer-audio-wrapper audio {&#13;
    display: inherit;&#13;
}&#13;
&#13;
.image-viewer-hidden-image {&#13;
    display: none;&#13;
}&#13;
&#13;
.image-viewer-loading-image {&#13;
    border: 0;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    display: none;&#13;
    position: absolute;&#13;
    z-index: 10;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
}&#13;
&#13;
.image-viewer-label {&#13;
    border: 0;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class='image-viewer'&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="image-viewer-loading-image"/&gt;&#13;
</view><preview>&lt;div class='image-viewer'&gt;&#13;
    &lt;!-- Here goes the image --&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonImage_Viewer_Button_Controlled_Public_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    var viewerElement;&#13;
    var loadingScreen = {&#13;
        element: null,&#13;
        counter: 0&#13;
    };&#13;
    var audioElements = [];&#13;
&#13;
    presenter.lastMovePosition = null;&#13;
    presenter.totalPercentage = 0;&#13;
    presenter.lastReceivedEvent = null;&#13;
    presenter.isMouseDown = false;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'I_01': "Image must be uploaded to display Addon!",&#13;
        'FN_01': "Frame name cannot be empty!",&#13;
        'FN_02': "Frame number must be set to properly display Addon",&#13;
        'FN_03': "Frame number is not a number!",&#13;
        'FN_04': "Frame number must be a positive integer!",&#13;
        'FN_05': "Frame names - frame number must be between 1 and frames count",&#13;
        'L_01': "Label text cannot be empty!",&#13;
        'L_02': "Label top value incorrect!",&#13;
        'L_03': "Label left value incorrect!",&#13;
        'L_04': "All label fields must be filled correctly!",&#13;
        'FL_01': "Label must be assigned to at least one frame!",&#13;
        'FL_02': "Frames list syntax incorrect! Check for separators!",&#13;
        'FL_03': "Frame number is not a number!",&#13;
        'FL_04': "Frame number must be positive integer!",&#13;
        'FL_05': "Frame number cannot be higher than Frames!",&#13;
        'FL_06': "Frame number missing inside list!",&#13;
        'FL_07': "Frame numbers range incorrect!"&#13;
    };&#13;
&#13;
    presenter.FRAME_SIZE = {&#13;
        ORIGINAL: 0,&#13;
        SCALED: 1,&#13;
        STRETCHED: 2&#13;
    };&#13;
&#13;
    function setContainerDimensions(width, height) {&#13;
        var viewerDimensions = DOMOperationsUtils.getOuterDimensions(viewerElement);&#13;
        var viewerDistances = DOMOperationsUtils.calculateOuterDistances(viewerDimensions);&#13;
        var viewerWidth = width - viewerDistances.horizontal;&#13;
        var viewerHeight = height - viewerDistances.vertical;&#13;
&#13;
        $(viewerElement).css({&#13;
            width: viewerWidth,&#13;
            height: viewerHeight&#13;
        });&#13;
&#13;
        presenter.configuration.containerDimensions = {&#13;
            width: viewerWidth,&#13;
            height: viewerHeight&#13;
        };&#13;
    }&#13;
&#13;
    function loadSounds(){&#13;
        // Check for browser audio tag support&#13;
        if (!buzz.isSupported()) {&#13;
            return;&#13;
        }&#13;
&#13;
        buzz.defaults.autoplay = false;&#13;
        buzz.defaults.loop = false;&#13;
        showLoadingScreen();&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.frames; i++) {&#13;
            if ((i &gt; presenter.configuration.sounds.length - 1 ) || presenter.configuration.sounds[i].isEmpty) {&#13;
                audioElements[i] = null;&#13;
            } else {&#13;
                if (presenter.configuration.sounds[i].MP3 !== "" &amp;&amp; buzz.isMP3Supported()) {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].MP3);&#13;
                } else if (presenter.configuration.sounds[i].OGG !== "" &amp;&amp; buzz.isOGGSupported()) {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].OGG);&#13;
                } else {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].AAC);&#13;
                }&#13;
&#13;
                audioElements[i].load();&#13;
            }&#13;
        }&#13;
&#13;
        hideLoadingScreen();&#13;
    }&#13;
&#13;
&#13;
    function getDirection(type, touch) {&#13;
        var direction = null;&#13;
&#13;
        if(type == 'touchstart') {&#13;
            presenter.lastMovePosition = touch.pageX;&#13;
            return false;&#13;
        } else if(presenter.lastMovePosition == touch.pageX) {&#13;
            return false;&#13;
        } else {&#13;
            direction = presenter.lastMovePosition &gt; touch.pageX ? 'left' : 'right';&#13;
            presenter.lastMovePosition = touch.pageX;&#13;
        }&#13;
&#13;
        if(type == 'touchend') {&#13;
            presenter.lastMovePosition = null;&#13;
            return false;&#13;
        }&#13;
&#13;
        return direction;&#13;
    }&#13;
&#13;
    function getMouseDirection(evt) {&#13;
        var direction = null;&#13;
        if(presenter.lastMovePosition &gt; evt.pageX) {&#13;
            direction = 'left';&#13;
        } else if(presenter.lastMovePosition &lt; evt.pageX){&#13;
            direction = 'right';&#13;
        } else {&#13;
            direction = null;&#13;
        }&#13;
&#13;
        presenter.lastMovePosition = evt.pageX;&#13;
        return direction;&#13;
    }&#13;
&#13;
    function setTotalPercentage(percentage, direction) {&#13;
        if(direction == 'right') {&#13;
            presenter.totalPercentage += percentage;&#13;
        } else {&#13;
            presenter.totalPercentage -= percentage;&#13;
        }&#13;
    }&#13;
&#13;
    function calculateShift() {&#13;
        return (presenter.configuration.frameWidthPercentage / 100) * 30;&#13;
    }&#13;
&#13;
    function shouldChangeFrame(shiftValue) {&#13;
        return (Math.abs(presenter.totalPercentage) &gt;= shiftValue) &amp;&amp;&#13;
            (presenter.lastReceivedEvent == 'touchend' || presenter.lastReceivedEvent == 'mouseup')&#13;
    }&#13;
&#13;
    function shouldMoveBackToDefaultPosition() {&#13;
        return (presenter.lastReceivedEvent == 'touchend' || presenter.lastReceivedEvent == 'mouseup');&#13;
    }&#13;
&#13;
    function changeFrameDependingOnShiftValue(shiftValue) {&#13;
        if(presenter.totalPercentage &lt;= shiftValue) {&#13;
            presenter.next();&#13;
        } else {&#13;
            presenter.previous();&#13;
        }&#13;
        presenter.totalPercentage = 0;&#13;
    }&#13;
&#13;
    function moveBackToDefaultPosition() {&#13;
        $(viewerElement).css({&#13;
            'background-position' : presenter.configuration.currentFrame * presenter.configuration.frameWidthPercentage + '%'&#13;
        });&#13;
        presenter.totalPercentage = 0;&#13;
    }&#13;
&#13;
    function calculateBackgroundPosition() {&#13;
        var base = (presenter.configuration.currentFrame * presenter.configuration.frameWidthPercentage);&#13;
        return base - presenter.totalPercentage;&#13;
    }&#13;
&#13;
    function isTap(evt) {&#13;
        return presenter.lastReceivedEvent == 'touchstart' &amp;&amp; evt.type == 'touchend';&#13;
    }&#13;
&#13;
    function isClick(evt) {&#13;
        return presenter.lastReceivedEvent == 'mousedown' &amp;&amp; evt.type == 'mouseup';&#13;
    }&#13;
&#13;
    function setMouseDown(evt) {&#13;
        if(evt.type == 'mousedown') {&#13;
            presenter.isMouseDown = true;&#13;
            presenter.lastMovePosition = evt.pageX;&#13;
            viewerElement.unbind('click');&#13;
        } else if(evt.type == 'mouseup') {&#13;
            presenter.isMouseDown = false;&#13;
            presenter.lastMovePosition = null;&#13;
        }&#13;
    }&#13;
&#13;
    function handleClickAction() {&#13;
        viewerElement.click(function(e) {&#13;
            e.stopPropagation();&#13;
&#13;
            presenter.configuration.currentFrame = presenter.configuration.currentFrame === presenter.configuration.frames - 1 ? 0 : presenter.configuration.currentFrame + 1;&#13;
&#13;
            presenter.changeFrame(this, presenter.configuration, true);&#13;
        });&#13;
    }&#13;
&#13;
&#13;
    function handleMouseDragActions(shiftValue, percentage) {&#13;
        viewerElement.on('mousedown mousemove mouseup', function(evt) {&#13;
            evt.preventDefault();&#13;
            setMouseDown(evt);&#13;
&#13;
            if(isClick(evt)) {&#13;
                handleClickAction();&#13;
                presenter.lastReceivedEvent = null;&#13;
            } else {&#13;
                presenter.lastReceivedEvent = evt.type;&#13;
            }&#13;
&#13;
            if(evt.type != 'mousemove') {&#13;
                if(shouldChangeFrame(shiftValue)) {&#13;
                    changeFrameDependingOnShiftValue(shiftValue)&#13;
                } else if(shouldMoveBackToDefaultPosition()) {&#13;
                    moveBackToDefaultPosition();&#13;
                }&#13;
            }&#13;
&#13;
            if(presenter.isMouseDown) {&#13;
                var direction = getMouseDirection(evt);&#13;
                if(direction) {&#13;
                    setTotalPercentage(percentage, direction);&#13;
                    $(this).css({&#13;
                        'background-position' : calculateBackgroundPosition() + '%'&#13;
                    })&#13;
                }&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function handleTouchAction(shiftValue, percentage) {&#13;
&#13;
        viewerElement.on('touchstart touchmove touchend', function(evt){&#13;
            evt.preventDefault();&#13;
            evt.stopPropagation();&#13;
&#13;
            if(isTap(evt)) {&#13;
                presenter.lastReceivedEvent = null;&#13;
                viewerElement.trigger('click');&#13;
            } else {&#13;
                presenter.lastReceivedEvent = evt.type;&#13;
            }&#13;
&#13;
            var touch = event.touches[0] || event.changedTouches[0];&#13;
            var direction = getDirection(evt.type, touch);&#13;
&#13;
            if(shouldChangeFrame(shiftValue)) {&#13;
                changeFrameDependingOnShiftValue(shiftValue)&#13;
            } else if(shouldMoveBackToDefaultPosition()) {&#13;
                moveBackToDefaultPosition();&#13;
            }&#13;
&#13;
            if(direction){&#13;
                setTotalPercentage(percentage, direction);&#13;
                $(this).css({&#13;
                    'background-position' : calculateBackgroundPosition() + '%'&#13;
                });&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    // Calculate scale for image containing element depending on frame aspect ratio&#13;
    presenter.calculateContainerDimensions = function(imageWidth, imageHeight, containerWidth, containerHeight) {&#13;
        var imageRatio = imageWidth / imageHeight;&#13;
        var containerRatio = containerWidth / containerHeight;&#13;
&#13;
        var horizontal;&#13;
        var vertical;&#13;
&#13;
        if (imageRatio &gt;= containerRatio) {&#13;
            horizontal = containerWidth;&#13;
            vertical = containerWidth / imageRatio;&#13;
        } else {&#13;
            vertical = containerHeight;&#13;
            horizontal = containerHeight * imageRatio;&#13;
        }&#13;
&#13;
&#13;
        return {&#13;
            horizontal: horizontal,&#13;
            vertical: vertical&#13;
        };&#13;
    };&#13;
&#13;
    // This function returns string containing CSS declaration of elements&#13;
    // background image size in percentage measure&#13;
    function calculateBackgroundSize(size, framesCount) {&#13;
        var cssValue;&#13;
&#13;
        switch(size) {&#13;
            case presenter.FRAME_SIZE.SCALED:&#13;
            case presenter.FRAME_SIZE.STRETCHED:&#13;
                cssValue = framesCount * 100;&#13;
                cssValue += '% 100%';&#13;
                break;&#13;
            default:&#13;
                cssValue = '';&#13;
        }&#13;
&#13;
        return cssValue;&#13;
    }&#13;
&#13;
    function loadImage(preview) {&#13;
        var tempImageElement = document.createElement('img');&#13;
        $(tempImageElement).addClass('image-viewer-hidden-image');&#13;
        $(tempImageElement).attr('src', presenter.configuration.imageSrc);&#13;
        $(presenter.$view).append(tempImageElement);&#13;
&#13;
        $(tempImageElement).load(function() {&#13;
            var containerWidth = presenter.configuration.containerDimensions.width;&#13;
            var containerHeight = presenter.configuration.containerDimensions.height;&#13;
            var containerDimensions = presenter.calculateContainerDimensions($(this).width() / presenter.configuration.frames, $(this).height(), containerWidth, containerHeight);&#13;
            var backgroundSize = calculateBackgroundSize(presenter.configuration.frameSize, presenter.configuration.frames);&#13;
&#13;
            var elementWidth;&#13;
            var elementHeight;&#13;
&#13;
            switch (presenter.configuration.frameSize) {&#13;
                case presenter.FRAME_SIZE.ORIGINAL:&#13;
                    elementWidth = $(tempImageElement).width() / presenter.configuration.frames;&#13;
                    elementHeight = $(tempImageElement).height();&#13;
                    break;&#13;
                case presenter.FRAME_SIZE.SCALED:&#13;
                    elementWidth = containerDimensions.horizontal;&#13;
                    elementHeight = containerDimensions.vertical;&#13;
                    break;&#13;
                case presenter.FRAME_SIZE.STRETCHED:&#13;
                    elementWidth = containerWidth;&#13;
                    elementHeight = containerHeight;&#13;
                    break;&#13;
            }&#13;
&#13;
            viewerElement.css({&#13;
                width: elementWidth + 'px',&#13;
                height: elementHeight + 'px',&#13;
                backgroundImage: "url('" + presenter.configuration.imageSrc + "')"&#13;
            });&#13;
&#13;
            if (backgroundSize) {&#13;
                $(viewerElement).css('background-size', backgroundSize);&#13;
            }&#13;
&#13;
            $(this).remove();&#13;
            presenter.changeFrame(viewerElement, presenter.configuration, false);&#13;
&#13;
            hideLoadingScreen();&#13;
            presenter.$view.trigger("onLoadImageEnd", [preview]);&#13;
        });&#13;
    }&#13;
&#13;
    function prepareLoadingScreen(containerWidth, containerHeight) {&#13;
        $(loadingScreen.element).css({&#13;
            top: ((containerHeight - $(loadingScreen.element).height()) / 2) + 'px',&#13;
            left: ((containerWidth - $(loadingScreen.element).width()) / 2) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function showLoadingScreen() {&#13;
        $(loadingScreen.element).show();&#13;
        loadingScreen.counter++;&#13;
    }&#13;
&#13;
    function hideLoadingScreen() {&#13;
        loadingScreen.counter--;&#13;
        if (loadingScreen.counter === 0) {&#13;
            $(loadingScreen.element).hide();&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * Creates label SPAN element and appends it to Addon space&#13;
     *&#13;
     * @param label&#13;
     * @return newly created element DOM reference&#13;
     */&#13;
    function createLabelElement(label) {&#13;
        var labelElement = document.createElement('span');&#13;
&#13;
        $(labelElement).addClass('image-viewer-label');&#13;
        $(labelElement).html(label.text);&#13;
        $(labelElement).css({&#13;
            top: label.top + 'px',&#13;
            left: label.left + 'px',&#13;
            visibility: 'hidden'&#13;
        });&#13;
&#13;
        $(presenter.$view).append(labelElement);&#13;
&#13;
        return labelElement;&#13;
    }&#13;
&#13;
    function loadLabels() {&#13;
        for (var i = 0; i &lt; presenter.configuration.labels.length; i++) {&#13;
            presenter.configuration.labels[i].element = createLabelElement(presenter.configuration.labels[i]);&#13;
        }&#13;
    }&#13;
&#13;
    function hideLabels() {&#13;
        $(presenter.$view).find('.image-viewer-label').css('visibility', 'hidden');&#13;
    }&#13;
&#13;
    /**&#13;
     * Displays labels that are assigned to given frame.&#13;
     *&#13;
     * @param frame frame number counted from 1 to n&#13;
     */&#13;
    function displayLabels(frame) {&#13;
        hideLabels();&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.labels.length; i++) {&#13;
            var label = presenter.configuration.labels[i];&#13;
            for (var j = 0; j &lt; label.frames.length; j++) {&#13;
                if (frame === label.frames[j]) {&#13;
                    $(label.element).css('visibility', 'visible');&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function loadImagesCallback(isPreview) {&#13;
        if (!isPreview) {&#13;
            loadSounds();&#13;
&#13;
            if (!presenter.configuration.isClickDisabled) {&#13;
                var shiftValue = calculateShift();&#13;
                var percentage = (viewerElement.width() / presenter.configuration.frames) / 100;&#13;
                handleClickAction();&#13;
                handleTouchAction(shiftValue, percentage);&#13;
                handleMouseDragActions(shiftValue, percentage);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.defaultVisibility);&#13;
&#13;
        presenter.imageLoadedDeferred.resolve();&#13;
    }&#13;
&#13;
    function loadImageEndCallback() {&#13;
        var configuration = presenter.configuration;&#13;
&#13;
        presenter.setVisibility(presenter.configuration.currentVisibility);&#13;
        presenter.changeFrame(viewerElement, configuration, true);&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        presenter.imageLoadedDeferred = new jQuery.Deferred();&#13;
        presenter.imageLoaded = presenter.imageLoadedDeferred.promise();&#13;
&#13;
        presenter.$view = $(view);&#13;
        viewerElement = presenter.$view.find('.image-viewer:first');&#13;
        loadingScreen.element = presenter.$view.find('.image-viewer-loading-image:first')[0];&#13;
&#13;
        if (!preview) {&#13;
            var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
            if (loadingSrc) $(loadingScreen.element).attr('src', loadingSrc);&#13;
        }&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
        } else {&#13;
            showLoadingScreen();&#13;
            presenter.configuration.frameWidthPercentage = 100 / (presenter.configuration.frames - 1);&#13;
            presenter.configuration.flags = [];&#13;
&#13;
            if (preview) {&#13;
                presenter.configuration.currentFrame = presenter.configuration.showFrame &lt;= presenter.configuration.frames ? presenter.configuration.showFrame - 1 : 0;&#13;
            } else {&#13;
                presenter.configuration.currentFrame = 0;&#13;
            }&#13;
&#13;
            setContainerDimensions(model.Width, model.Height);&#13;
            prepareLoadingScreen(model.Width, model.Height);&#13;
            loadLabels();&#13;
&#13;
            presenter.$view.bind("onLoadImageEnd", function (event, isPreview) {&#13;
                loadImagesCallback(isPreview);&#13;
            });&#13;
&#13;
            loadImage(preview);&#13;
            if (presenter.configuration.currentVisibility) {&#13;
                displayLabels(0);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.changeFlag = function (flag) {&#13;
        var frame, element = presenter.$view.find('.image-viewer:first')[0];&#13;
        flag = parseInt(flag, 10);&#13;
&#13;
        if (!isNaN(flag) &amp;&amp; flag &gt; 0) {&#13;
            var oldFlag = presenter.configuration.flags[flag];&#13;
            presenter.configuration.flags[flag] = (!oldFlag || oldFlag == 0) ? 1 : 0;&#13;
&#13;
            frame = 0;&#13;
            for (var i in presenter.configuration.flags) {&#13;
                if (presenter.configuration.flags[i] == 1) {&#13;
                    frame += Math.pow(2, i - 1);&#13;
                }&#13;
            }&#13;
&#13;
            if (frame &gt;= 0 &amp;&amp; frame &lt;= presenter.configuration.frames - 1) {&#13;
                presenter.configuration.currentFrame = frame;&#13;
                presenter.changeFrame(element, presenter.configuration, true);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.next = function() {&#13;
        var currentFrame = presenter.configuration.currentFrame;&#13;
        var framesCount = presenter.configuration.frames;&#13;
&#13;
        presenter.configuration.currentFrame = currentFrame === framesCount - 1 ? 0 : currentFrame + 1;&#13;
        presenter.changeFrame(viewerElement, presenter.configuration, true);&#13;
    };&#13;
&#13;
    presenter.previous = function() {&#13;
        var currentFrame = presenter.configuration.currentFrame;&#13;
        var framesCount = presenter.configuration.frames;&#13;
&#13;
        presenter.configuration.currentFrame = currentFrame === 0 ? framesCount - 1 : currentFrame - 1;&#13;
        presenter.changeFrame(viewerElement, presenter.configuration, true);&#13;
    };&#13;
&#13;
    presenter.changeFlagCommand = function (params) {&#13;
        presenter.changeFlag(params[0]);&#13;
    };&#13;
&#13;
    presenter.moveToFrame = function (frame) {&#13;
        var element = presenter.$view.find('.image-viewer:first')[0];&#13;
        frame = parseInt(frame, 10);&#13;
&#13;
        if (!isNaN(frame) &amp;&amp; frame &gt; 0 &amp;&amp; frame &lt;= presenter.configuration.frames) {&#13;
            presenter.configuration.currentFrame = frame - 1;&#13;
            presenter.changeFrame(element, presenter.configuration, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrameCommand = function (params) {&#13;
        presenter.moveToFrame(params[0]);&#13;
    };&#13;
&#13;
    presenter.moveToFrameName = function (frameName) {&#13;
        if (ModelValidationUtils.isStringEmpty(frameName) || presenter.configuration.frameNamesEmpty) {&#13;
            return;&#13;
        }&#13;
&#13;
        var element = presenter.$view.find('.image-viewer:first')[0], frame, isFrameFound;&#13;
&#13;
        isFrameFound = false;&#13;
        for (var i = 0; i &lt; presenter.configuration.frameNames.length; i++) {&#13;
            if (presenter.configuration.frameNames[i].name == frameName) {&#13;
                frame = presenter.configuration.frameNames[i].frame;&#13;
                isFrameFound = true;&#13;
                break;&#13;
            }&#13;
        }&#13;
&#13;
        if (isFrameFound) {&#13;
            presenter.configuration.currentFrame = frame - 1;&#13;
            presenter.changeFrame(element, presenter.configuration, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrameNameCommand = function (params) {&#13;
        presenter.moveToFrameName(params[0]);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'changeFlag': presenter.changeFlagCommand,&#13;
            'moveToFrame': presenter.moveToFrameCommand,&#13;
            'moveToFrameName': presenter.moveToFrameNameCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.currentVisibility = true;&#13;
        displayLabels(presenter.configuration.currentFrame + 1);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.currentVisibility = false;&#13;
        hideLabels();&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.validateFrameSize = function(frameSize) {&#13;
        var result;&#13;
&#13;
        switch (frameSize) {&#13;
            case "Keep aspect ratio":&#13;
                result = presenter.FRAME_SIZE.SCALED;&#13;
                break;&#13;
            case "Stretch":&#13;
                result = presenter.FRAME_SIZE.STRETCHED;&#13;
                break;&#13;
            default:&#13;
                result = presenter.FRAME_SIZE.ORIGINAL;&#13;
                break;&#13;
        }&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
    /**&#13;
     * Function returns errorCode if any of this errors occurs:&#13;
     * FN_02 - frame number empty&#13;
     * FN_03 - frame number is not a number&#13;
     * FN_04 - frame number negative&#13;
     *&#13;
     * @return errorCode&#13;
     */&#13;
    presenter.validateFramesCount = function(frames) {&#13;
        if (!frames) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FN_02"&#13;
            };&#13;
        } else {&#13;
            var parsedFrames = parseInt(frames, 10);&#13;
            if (isNaN(parsedFrames)) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FN_03"&#13;
                };&#13;
            } else if (parsedFrames &lt; 1 ) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FN_04"&#13;
                };&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            frames : parsedFrames&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateSound = function(soundsArray) {&#13;
        var sounds = [];&#13;
&#13;
        if (soundsArray &amp;&amp; $.isArray(soundsArray)) {&#13;
            for (var i = 0; i &lt; soundsArray.length; i++) {&#13;
                var isMP3Empty = soundsArray[i]['MP3 sound'] === "" || soundsArray[i]['MP3 sound'] === "/file/";&#13;
                var isAACEmpty = soundsArray[i]['AAC sound'] === "" || soundsArray[i]['AAC sound'] === "/file/";&#13;
                var isOGGEmpty = soundsArray[i]['OGG sound'] === "" || soundsArray[i]['OGG sound'] === "/file/";&#13;
                var isEmpty = isMP3Empty &amp;&amp; isAACEmpty &amp;&amp; isOGGEmpty;&#13;
&#13;
                sounds.push({&#13;
                    AAC : isAACEmpty ? "" : soundsArray[i]['AAC sound'],&#13;
                    OGG : isOGGEmpty ? "" : soundsArray[i]['OGG sound'],&#13;
                    MP3 : isMP3Empty ? "" : soundsArray[i]['MP3 sound'],&#13;
                    isEmpty : isEmpty&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            sounds : sounds&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * Function returns errorCode if any of this errors occurs:&#13;
     * FN_01 - frame name empty&#13;
     * FN_02 - frame number empty&#13;
     * FN_03 - frame number is not a number&#13;
     * FN_04 - frame number negative&#13;
     * FN_05 - frame number out of bounds&#13;
     *&#13;
     * @return errorCode&#13;
     */&#13;
    presenter.validateFrameNames = function(frameNames, frames) {&#13;
        var frameNamesArray = [];&#13;
&#13;
        var frameNamesEmpty = false;&#13;
        if (frameNames &amp;&amp; $.isArray(frameNames)) {&#13;
            var firstName = frameNames[0].name;&#13;
            var firstFrame = frameNames[0].frame;&#13;
            if (firstFrame === "" &amp;&amp; firstName === "") {&#13;
                frameNamesEmpty = true;&#13;
            } else {&#13;
                for (var j = 0; j &lt; frameNames.length; j++) {&#13;
                    var frame = frameNames[j]['frame'];&#13;
                    var name = frameNames[j]['name'];&#13;
&#13;
                    if (!name || name === null || name === "") return { isError: true, errorCode: "FN_01" };&#13;
                    if (!frame || frame === "") return { isError: true, errorCode: "FN_02" };&#13;
&#13;
                    frame = parseInt(frame, 10);&#13;
                    if (isNaN(frame)) return { isError: true, errorCode: "FN_03" };&#13;
                    if (frame &lt;= 0) return { isError: true, errorCode: "FN_04" };&#13;
                    if (frame &gt; frames) return { isError: true, errorCode: "FN_05" };&#13;
&#13;
                    frameNamesArray.push({ name: name, frame: frame });&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            frameNames: frameNamesArray,&#13;
            frameNamesEmpty: frameNamesEmpty&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * This function validates and converts number from string representation to integer value&#13;
     */&#13;
    presenter.sanitizePosition = function (position) {&#13;
        if (!position) return { isError:true };&#13;
&#13;
        var parsedPosition = parseInt(position, 10);&#13;
        if (isNaN(parsedPosition)) return { isError:true };&#13;
        if (parsedPosition &lt; 0) return { isError:true };&#13;
&#13;
        return { isError:false, position:parseInt(position, 10) };&#13;
    };&#13;
&#13;
    /**&#13;
     * Removes duplicates from sorted array of numbers&#13;
     *&#13;
     * @param array sorted array of numbers&#13;
     * @return array with removed duplicates&#13;
     */&#13;
    presenter.removeDuplicatesFromArray = function(array) {&#13;
        if (array.length === 0) {&#13;
            return [];&#13;
        }&#13;
&#13;
        var results = [];&#13;
&#13;
        for (var i = 0; i &lt; array.length - 1; i++) {&#13;
            if (array[i + 1] !== array[i]) {&#13;
                results.push(array[i]);&#13;
            }&#13;
        }&#13;
&#13;
        results.push(array[array.length - 1]);&#13;
&#13;
        return results;&#13;
    };&#13;
&#13;
    /**&#13;
     * Validates frames numbers list separated with commas&#13;
     *&#13;
     * @param frames string representation of frames list&#13;
     * @param count frames count&#13;
     *&#13;
     * @return array of frames numbers counted from 1 to n&#13;
     * @returns FL_01 if list is empty or undefined&#13;
     * @returns FL_02 if list is incorrectly constructed&#13;
     * @returns FL_03 if frame number is not a number&#13;
     * @returns FL_04 if frame number is not positive integer&#13;
     * @returns FL_05 if frame number higher than frames count&#13;
     * @returns FL_06 if frame number is missing (inside list)&#13;
     * @returns FL_07 if frame numbers range is incorrect&#13;
     */&#13;
    presenter.validateFramesList = function (frames, count) {&#13;
        var list = [];&#13;
&#13;
        if (!frames || frames.length === 0) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FL_01"&#13;
            };&#13;
        }&#13;
&#13;
        var regExp = new RegExp('[0-9a-zA-Z\,\-]+'); // Only digits and commas are allowed in slides list&#13;
        var matchResult = frames.match(regExp);&#13;
        if (matchResult === null || frames.length !== matchResult[0].length) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FL_02"&#13;
            };&#13;
        }&#13;
&#13;
        var splittedFrames = frames.split(',');&#13;
        for (var i = 0; i &lt; splittedFrames.length; i++) {&#13;
            if (splittedFrames[i] === "") {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_06"&#13;
                };&#13;
            }&#13;
&#13;
            var indexOfRange = splittedFrames[i].search('-');&#13;
            if (indexOfRange !== -1) {&#13;
                var rangeStart = parseInt(splittedFrames[i].split('-')[0], 10);&#13;
                var rangeEnd = parseInt(splittedFrames[i].split('-')[1], 10);&#13;
&#13;
&#13;
                var isRangeError = isNaN(rangeStart) || isNaN(rangeEnd);&#13;
                isRangeError = isRangeError || rangeStart &lt; 1;&#13;
                isRangeError = isRangeError || rangeEnd &lt; 1;&#13;
                isRangeError = isRangeError || rangeStart &gt; rangeEnd;&#13;
                isRangeError = isRangeError || rangeStart &gt; count;&#13;
                isRangeError = isRangeError || rangeEnd &gt; count;&#13;
                if (isRangeError) {&#13;
                    return {&#13;
                        isError: true,&#13;
                        errorCode: "FL_07"&#13;
                    };&#13;
                }&#13;
&#13;
                for (var frameNumber = rangeStart; frameNumber &lt;= rangeEnd; frameNumber++) {&#13;
                    list.push(frameNumber);&#13;
                }&#13;
&#13;
                continue;&#13;
            }&#13;
&#13;
            var frame = parseInt(splittedFrames[i]);&#13;
&#13;
            if (isNaN(frame)) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_03"&#13;
                };&#13;
            }&#13;
&#13;
            if (frame &lt; 1) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_04"&#13;
                };&#13;
            }&#13;
&#13;
            if (frame &gt; count) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_05"&#13;
                };&#13;
            }&#13;
&#13;
            list.push(frame);&#13;
        }&#13;
&#13;
        list = list.sort();&#13;
        list = presenter.removeDuplicatesFromArray(list);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            list: list&#13;
        };&#13;
    };&#13;
&#13;
    /** If validation error occurs then one of the following error codes are returned&#13;
     * @returns L_01 if text is empty&#13;
     * @returns L_02 if top value is invalid&#13;
     * @returns L_03 if left value is invalid&#13;
     * @returns L_04 if empty label and labels count &gt; 0&#13;
     * @returns FL_** if there was problem with frames property&#13;
     */&#13;
    presenter.validateLabels = function (labelsArray, framesCount) {&#13;
        var labels = [];&#13;
&#13;
        // Ugly fix for Editor problems&#13;
        if (!labelsArray) return { isError:false, labels:labels };&#13;
&#13;
        for (var i = 0; i &lt; labelsArray.length; i++) {&#13;
            var frames = labelsArray[i].Frames;&#13;
            var topPosition = labelsArray[i].Top;&#13;
            var leftPosition = labelsArray[i].Left;&#13;
&#13;
            if (labelsArray[i].Text == "" &amp;&amp; topPosition == "" &amp;&amp; leftPosition == "" &amp;&amp; frames == "") {&#13;
                if (labelsArray.length == 1) {&#13;
                    labels = [];&#13;
                    break;&#13;
                } else return { isError:true, errorCode:"L_04" };&#13;
            }&#13;
&#13;
            if (!labelsArray[i].Text || labelsArray[i].Text === "") return { isError:true, errorCode:"L_01" };&#13;
&#13;
            var validatedFramesList = presenter.validateFramesList(frames, framesCount);&#13;
            if (validatedFramesList.isError) return { isError:true, errorCode: validatedFramesList.errorCode };&#13;
&#13;
            var sanitizedTopPosition = presenter.sanitizePosition(topPosition);&#13;
            if (sanitizedTopPosition.isError) return { isError:true, errorCode:"L_02" };&#13;
&#13;
            var sanitizedLeftPosition = presenter.sanitizePosition(leftPosition);&#13;
            if (sanitizedLeftPosition.isError)  return { isError:true, errorCode:"L_03" };&#13;
&#13;
            var text = {&#13;
                text:labelsArray[i].Text,&#13;
                frames:validatedFramesList.list,&#13;
                top:sanitizedTopPosition.position,&#13;
                left:sanitizedLeftPosition.position&#13;
            };&#13;
&#13;
            labels.push(text);&#13;
        }&#13;
&#13;
        return { isError:false, labels:labels };&#13;
    };&#13;
&#13;
    /**&#13;
     * Validates string representation of integer. Only positive integer values are allowed. If both (value and default) are&#13;
     * undefined then isError property is set to true.&#13;
     */&#13;
    presenter.validatePositiveInteger = function (value, defaultValue) {&#13;
        var isValueDefined = value != undefined &amp;&amp; value !== "";&#13;
        var isDefaultDefined = defaultValue != undefined &amp;&amp; !isNaN(defaultValue);&#13;
&#13;
        if (!isValueDefined &amp;&amp; !isDefaultDefined) return { isError: true };&#13;
&#13;
        if (!isValueDefined &amp;&amp; isDefaultDefined) return { isError: false, value: defaultValue };&#13;
&#13;
        var parsedSize = parseInt(value, 10);&#13;
        if (isNaN(parsedSize) || parsedSize &lt; 1) return { isError: true };&#13;
&#13;
        return { isError: false, value: parsedSize };&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        if (ModelValidationUtils.isStringEmpty(model.Image)) return { isError: true, errorCode: "I_01" };&#13;
&#13;
        var validatedFrames = presenter.validateFramesCount(model.Frames);&#13;
        if (validatedFrames.isError) return { isError: true, errorCode: validatedFrames.errorCode };&#13;
&#13;
        var validatedFrameNames = presenter.validateFrameNames(model["Frame names"], validatedFrames.frames);&#13;
        if (validatedFrameNames.isError) return { isError: true, errorCode: validatedFrameNames.errorCode };&#13;
&#13;
        var validatedLabels = presenter.validateLabels(model.Labels, validatedFrames.frames);&#13;
        if (validatedLabels.isError) return { isError: true, errorCode: validatedLabels.errorCode };&#13;
&#13;
        var showFrame = 1;&#13;
        var validatedShowFrame = presenter.validatePositiveInteger(model["Show frame"], 1);&#13;
        if (!validatedShowFrame.isError) {&#13;
            showFrame = validatedShowFrame.value;&#13;
        }&#13;
&#13;
        var defaultVisibility = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            imageSrc : model.Image,&#13;
            frames : validatedFrames.frames,&#13;
            sounds : presenter.validateSound(model.Sounds).sounds,&#13;
            frameNames: validatedFrameNames.frameNames,&#13;
            frameNamesEmpty: validatedFrameNames.frameNamesEmpty,&#13;
            isClickDisabled: ModelValidationUtils.validateBoolean(model.isClickDisabled),&#13;
            frameSize: presenter.validateFrameSize(model["Frame size"]),&#13;
            labels: validatedLabels.labels,&#13;
            showFrame: showFrame,&#13;
            defaultVisibility: defaultVisibility,&#13;
            currentVisibility: defaultVisibility&#13;
        };&#13;
    };&#13;
&#13;
    // Frames are counted from 0 to (frameCount - 1)&#13;
    presenter.changeFrame = function(element, configuration, playAudio) {&#13;
        $(element).css('backgroundPosition', configuration.currentFrame * configuration.frameWidthPercentage + '% ' + ' 0%');&#13;
        if (presenter.configuration.currentVisibility) {&#13;
            displayLabels(configuration.currentFrame + 1);&#13;
        }&#13;
&#13;
        if (configuration.currentFrame !== 0 &amp;&amp; playAudio) {&#13;
            presenter.playAudio(presenter.$view, configuration);&#13;
        } else if (configuration.currentFrame === 0) {&#13;
            stopAllAudio();&#13;
        }&#13;
    };&#13;
&#13;
    function stopAllAudio() {&#13;
        for (var i = 0; i &lt; audioElements.length; i++) {&#13;
            if (audioElements[i] !== null) {&#13;
                stopAudio(audioElements[i]);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function stopAudio(audio) {&#13;
        audio.pause();&#13;
        audio.setTime(0);&#13;
    }&#13;
&#13;
    presenter.playAudio = function(viewContainer, configuration) {&#13;
        stopAllAudio();&#13;
&#13;
        var audio = audioElements[configuration.currentFrame - 1];&#13;
        if (audio) {&#13;
            audio.play();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            "currentFrame" : this.configuration.currentFrame,&#13;
            "currentVisibility" : this.configuration.currentVisibility,&#13;
            "flags": presenter.configuration.flags&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var savedState = JSON.parse(state);&#13;
&#13;
        var configuration = presenter.configuration;&#13;
        configuration.currentFrame = savedState["currentFrame"];&#13;
        configuration.currentVisibility = savedState["currentVisibility"];&#13;
        configuration.flags = savedState["flags"];&#13;
&#13;
        $.when(presenter.imageLoaded).then(loadImageEndCallback);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        stopAllAudio();&#13;
        presenter.configuration.flags = [];&#13;
        presenter.configuration.currentFrame = 0;&#13;
        presenter.changeFrame(viewerElement, presenter.configuration, true);&#13;
        displayLabels(1);&#13;
        presenter.setVisibility(presenter.configuration.defaultVisibility);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Image_Viewer_Public" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Image" nameLabel="Image_Viewer_Public_property_image" type="image"/>
		<property name="Frames" nameLabel="Image_Viewer_Public_property_frames" type="string"/>
		<property name="Frame size" nameLabel="Image_Viewer_Public_property_frame_size" type="{Original, Keep aspect ratio, Stretch}"/>
		<property name="Sounds" nameLabel="Image_Viewer_Public_property_sounds" type="list">
			<property name="MP3 sound" nameLabel="Image_Viewer_Public_property_mp3_sound" type="audio"/>
			<property name="OGG sound" nameLabel="Image_Viewer_Public_property_ogg_sound" type="audio"/>
			<property name="AAC sound" nameLabel="Image_Viewer_Public_property_aac_sound" type="audio"/>
		</property>
		<property name="Frame names" nameLabel="Image_Viewer_Public_property_frame_names" type="list">
			<property name="name" nameLabel="Image_Viewer_Public_property_name" type="string"/>
			<property name="frame" nameLabel="Image_Viewer_Public_property_frames" type="string"/>
		</property>
		<property name="isClickDisabled" nameLabel="Image_Viewer_Public_property_is_click_disabled" type="boolean"/>
		<property name="Labels" nameLabel="Image_Viewer_Public_property_labels" type="list">
			<property isLocalized="true" name="Text" nameLabel="Image_Viewer_Public_property_text" type="string"/>
			<property name="Top" nameLabel="Image_Viewer_Public_property_top" type="string"/>
			<property name="Left" nameLabel="Image_Viewer_Public_property_left" type="string"/>
			<property name="Frames" nameLabel="Image_Viewer_Public_property_frames" type="string"/>
		</property>
		<property name="Show watermark" nameLabel="Image_Viewer_Public_property_show_watermark" type="boolean"/>
		<property name="Watermark color" nameLabel="Image_Viewer_Public_property_watermark_color" type="string"/>
		<property name="Watermark opacity" nameLabel="Image_Viewer_Public_property_watermark_opacity" type="string"/>
		<property name="Watermark size" nameLabel="Image_Viewer_Public_property_watermark_size" type="string"/>
		<property name="Show frame" nameLabel="Image_Viewer_Public_property_show_frame" type="string"/>
		<property name="Animation" nameLabel="Image_Viewer_Public_property_animation" type="{None, Linear, Fading}"/>
		<property name="Correct frames" nameLabel="Image_Viewer_Public_property_correct_frames" type="string"/>
		<property name="Do not reset" nameLabel="Image_Viewer_Public_property_do_not_reset" type="boolean"/>
		<property name="Random frame" nameLabel="Image_Viewer_Public_property_random_frame" type="boolean"/>
		<property name="Initial frame" nameLabel="Image_Viewer_Public_property_initial_frame" type="string"/>
		<property name="Show frame counter" nameLabel="Image_Viewer_Public_property_show_frame_counter" type="boolean"/>
	</model>
<css>.image-viewer {&#13;
    border: none;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    float: left;&#13;
    overflow: hidden;&#13;
    background: no-repeat 0 0;&#13;
    -ms-touch-action: none;&#13;
}&#13;
&#13;
.image-viewer-audio-wrapper {&#13;
    display: none;&#13;
}&#13;
&#13;
.image-viewer-audio-wrapper audio {&#13;
    display: inherit;&#13;
}&#13;
&#13;
.image-viewer-hidden-image {&#13;
    display: none;&#13;
}&#13;
&#13;
.image-viewer-watermark,&#13;
.image-viewer-loading-image {&#13;
    border: 0;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    display: none;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.image-viewer-label {&#13;
    border: 0;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.image-viewer-loading-image {&#13;
    z-index: 10;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
}&#13;
&#13;
.image-viewer-watermark {&#13;
    display: block;&#13;
}&#13;
&#13;
.frame-counter-wrapper {&#13;
    position: absolute;&#13;
    bottom: 5px;&#13;
    height: 10px;&#13;
    width: 100%;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    border: 0;&#13;
    background: none;&#13;
}&#13;
&#13;
.frame-counter {&#13;
    height: 100%;&#13;
    margin-left: auto;&#13;
    margin-right: auto;&#13;
    background: none;&#13;
    display: table;&#13;
}&#13;
&#13;
.dot {&#13;
    float: left;&#13;
    width: 10px;&#13;
    height: 10px;&#13;
    -webkit-border-radius: 5px;&#13;
    -moz-border-radius: 5px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid black;&#13;
    background-color: #f0f8ff;&#13;
    margin: 0 1px;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.dot.current {&#13;
    background-color: #696969;&#13;
    cursor: default;&#13;
}&#13;
</css><view>&lt;div class='image-viewer'&gt;&#13;
    &lt;div class="image-viewer-helper"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="image-viewer-loading-image"/&gt;&#13;
&lt;div class="image-viewer-watermark"&gt;&lt;/div&gt;&#13;
&lt;div class="frame-counter-wrapper"&gt;&#13;
    &lt;div class="frame-counter"&gt;&#13;
        &lt;div class="dot current"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class='image-viewer'&gt;&#13;
    &lt;div class="image-viewer-helper"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="/media/images/loading.gif" alt="Loading..." class="image-viewer-loading-image"/&gt;&#13;
&lt;div class="image-viewer-watermark"&gt;&lt;/div&gt;&#13;
&lt;div class="frame-counter-wrapper"&gt;&#13;
    &lt;div class="frame-counter"&gt;&#13;
        &lt;div class="dot current"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonImage_Viewer_Public_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    var playerController = null;&#13;
    var watermarkElement;&#13;
    var loadingScreen = {&#13;
        element: null,&#13;
        counter: 0&#13;
    };&#13;
    var audioElements = [];&#13;
&#13;
    presenter.addonId = null;&#13;
    presenter.upgradedModel = null;&#13;
&#13;
    presenter.lastMovePosition = null;&#13;
    presenter.totalPercentage = 0;&#13;
    presenter.lastReceivedEvent = null;&#13;
    presenter.isMouseDown = false;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'IM_01': "Image must be uploaded to display Addon!",&#13;
        'FN_01': "Frame number must be set to properly display Addon",&#13;
        'FN_02': "Frame number is not a number!",&#13;
        'FN_03': "Frame number must be a positive integer!",&#13;
        'FN_04': "Frame name cannot be empty!",&#13;
        'FN_05': "Frame names - frame number must be between 1 and frames count",&#13;
        'LA_01': "Label text cannot be empty!",&#13;
        'LA_02': "Label top value incorrect!",&#13;
        'LA_03': "Label left value incorrect!",&#13;
        'LA_04': "All label fields must be filled correctly!",&#13;
        'FL_01': "Label must be assigned to at least one frame!",&#13;
        'FL_02': "Frames list syntax incorrect! Check for separators!",&#13;
        'FL_03': "Frame number is invalid!",&#13;
        'FL_04': "Frame number missing inside list!",&#13;
        'FL_05': "Frame numbers range incorrect!",&#13;
        'WM_01': "Watermark color must be provided in #RRGGBB format!",&#13;
        'WM_02': "Watermark opacity must be a value from 0.0 to 1.0!",&#13;
        'WM_03': "Watermark size must be a positive integer number!",&#13;
        'CF_01': "Correct frame number must be between 1 and frames count!",&#13;
        'IF_01': "Initial frame is out of range. Please choose number between 1 and frames count."&#13;
    };&#13;
&#13;
    presenter.FRAME_SIZE = {&#13;
        'Original': 'ORIGINAL',&#13;
        'Keep aspect ratio': 'SCALED',&#13;
        'Stretch': 'STRETCHED',&#13;
        DEFAULT: 'Original'&#13;
    };&#13;
&#13;
    presenter.ANIMATION = {&#13;
        'None': 'NONE',&#13;
        'Linear': 'LINEAR',&#13;
        'Fading': 'FADING',&#13;
        DEFAULT: 'None'&#13;
    };&#13;
&#13;
    presenter.configuration = {};&#13;
&#13;
    presenter.changeFrameData = {&#13;
        isPreview: false,&#13;
        isReverseOrder: false,&#13;
        triggerEvent: false&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeFrom_01(model);&#13;
&#13;
        return presenter.upgradeFrom_02(upgradedModel);&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_01 = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["Do not reset"]) {&#13;
            upgradedModel["Do not reset"] = false;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_02 = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["Random frame"]) {&#13;
            upgradedModel["Random frame"] = false;&#13;
        }&#13;
&#13;
        if (!upgradedModel["Initial frame"]) {&#13;
            upgradedModel["Initial frame"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function showErrorMessage(element, errorCode) {&#13;
        $(element).html(presenter.ERROR_CODES[errorCode]);&#13;
    }&#13;
&#13;
    function setContainerDimensions(wrapper) {&#13;
        var elementReducedSize = DOMOperationsUtils.calculateReducedSize(wrapper, presenter.$element);&#13;
        $(presenter.$element).css({&#13;
            width: elementReducedSize.width,&#13;
            height: elementReducedSize.height&#13;
        });&#13;
&#13;
        presenter.configuration.containerDimensions = {&#13;
            width: elementReducedSize.width,&#13;
            height: elementReducedSize.height&#13;
        };&#13;
    }&#13;
&#13;
    function loadSounds() {&#13;
        // Check for browser audio tag support&#13;
        if (!buzz.isSupported()) {&#13;
            return;&#13;
        }&#13;
&#13;
        buzz.defaults.autoplay = false;&#13;
        buzz.defaults.loop = false;&#13;
        showLoadingScreen();&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.frames; i++) {&#13;
            if ((i &gt; presenter.configuration.sounds.length - 1 ) || presenter.configuration.sounds[i].isEmpty) {&#13;
                audioElements[i] = null;&#13;
            } else {&#13;
                if (presenter.configuration.sounds[i].MP3 !== "" &amp;&amp; buzz.isMP3Supported()) {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].MP3);&#13;
                } else if (presenter.configuration.sounds[i].OGG !== "" &amp;&amp; buzz.isOGGSupported()) {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].OGG);&#13;
                } else {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].AAC);&#13;
                }&#13;
&#13;
                audioElements[i].load();&#13;
            }&#13;
        }&#13;
&#13;
        hideLoadingScreen();&#13;
    }&#13;
&#13;
    function hideWatermarkIfVisible() {&#13;
        if ($(watermarkElement).is(':visible')) {&#13;
            $(watermarkElement).hide();&#13;
        }&#13;
    }&#13;
&#13;
    function showWatermarkIfNotVisible() {&#13;
        if ($(watermarkElement).not(':visible')) {&#13;
            $(watermarkElement).show();&#13;
        }&#13;
    }&#13;
&#13;
    function clickHandler(e) {&#13;
        if (e)&#13;
            e.stopPropagation();&#13;
&#13;
        if (presenter.configuration.isClickDisabled) return;&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        if (presenter.mouseData.isMouseDragged) {&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
            return;&#13;
        }&#13;
&#13;
        hideWatermarkIfVisible();&#13;
&#13;
        presenter.next();&#13;
    }&#13;
&#13;
    function isMoreThanOneFingerGesture(event) {&#13;
        var touch, touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touchPoints = event.touches&#13;
        return touchPoints.length&gt; 1;&#13;
    }&#13;
&#13;
    function touchStartCallback (event) {&#13;
        if (isMoreThanOneFingerGesture(event)) return;&#13;
&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0]&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        mouseDownCallback(touch);&#13;
    }&#13;
&#13;
    function getFixedBackgroundPosition() {&#13;
        return parseInt(presenter.$element.css('backgroundPosition'), 10);&#13;
    }&#13;
&#13;
    function mouseDownCallback(event) {&#13;
        if (presenter.configuration.isClickDisabled) return;&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        presenter.mouseData.isMouseDown = true;&#13;
        presenter.mouseData.oldPosition.x = event.pageX;&#13;
        presenter.mouseData.oldPosition.y = event.pageY;&#13;
    }&#13;
&#13;
    function touchEndCallback () {&#13;
        mouseUpCallback();&#13;
    }&#13;
&#13;
    function getRequiredShift() {&#13;
        return (presenter.$element.width() / 100) * 30; // 30% of frame width&#13;
    }&#13;
&#13;
    function mouseUpCallback() {&#13;
        if (presenter.configuration.isClickDisabled) return;&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) {&#13;
            presenter.mouseData.isMouseDown = false;&#13;
            delete presenter.mouseData.originalBackgroundPosition;&#13;
            return;&#13;
        }&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        var originalAnimation = presenter.configuration.animation;&#13;
        presenter.configuration.animation = presenter.ANIMATION.Linear;&#13;
&#13;
        if (presenter.mouseData.isMouseDragged) {&#13;
            var currentBackgroundPosition = getFixedBackgroundPosition(),&#13;
                shift = Math.abs(currentBackgroundPosition - presenter.mouseData.originalBackgroundPosition),&#13;
                isNextFrameShift = currentBackgroundPosition - presenter.mouseData.originalBackgroundPosition &lt; 0;&#13;
&#13;
            // Restoring percentage calculation of background position&#13;
            var newPosition = Math.abs(currentBackgroundPosition) / (presenter.configuration.backgroundImageWidth - presenter.$element.width());&#13;
            newPosition *= 100;&#13;
            presenter.$element.css('backgroundPosition', newPosition + '%');&#13;
&#13;
            if (shift &gt; getRequiredShift()) {&#13;
                var currentFrame = presenter.configuration.currentFrame;&#13;
                var framesCount = presenter.configuration.frames;&#13;
&#13;
                if (isNextFrameShift) {&#13;
                    if (currentFrame &lt; framesCount - 1) {&#13;
                        presenter.next();&#13;
                    } else {&#13;
                        presenter.configuration.currentFrame = 0;&#13;
                        presenter.$element.css({&#13;
                            'background-position':'-' + presenter.configuration.frameWidthPercentage + '%'&#13;
                        });&#13;
                        presenter.$element.animate({&#13;
                            'background-position':'0%'&#13;
                        }, 500, "linear");&#13;
                        presenter.changeFrameLogic(false, true);&#13;
                    }&#13;
                } else {&#13;
                    if (currentFrame !== 0) {&#13;
                        presenter.previous();&#13;
                    } else {&#13;
                        presenter.configuration.currentFrame = framesCount - 1;&#13;
                        presenter.$element.css({&#13;
                            'background-position':(100 + presenter.configuration.frameWidthPercentage) + '%'&#13;
                        });&#13;
                        presenter.$element.animate({&#13;
                            'background-position':'100%'&#13;
                        }, 500, "linear")&#13;
                        presenter.changeFrameLogic(false, true);&#13;
                    }&#13;
                    presenter.configuration.currentFrame = currentFrame &gt; 1 ? currentFrame - 1 : framesCount - 1;&#13;
                }&#13;
&#13;
            } else {&#13;
                var isReverseOrder = presenter.configuration.currentFrame === 0;&#13;
                presenter.changeFrame(false, isReverseOrder, false);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.configuration.animation = originalAnimation;&#13;
        presenter.mouseData.isMouseDown = false;&#13;
        delete presenter.mouseData.originalBackgroundPosition;&#13;
&#13;
        if (!MobileUtils.isWindowsMobile(window.navigator) &amp;&amp; presenter.isMobileDevice) {&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
        }&#13;
        if (MobileUtils.isWindowsMobile(window.navigator) &amp;&amp; shift &lt;= getRequiredShift()) {&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
            clickHandler(false);&#13;
            presenter.mouseData.isMouseDragged = true;&#13;
        }&#13;
    }&#13;
&#13;
    function touchMoveCallback (event) {&#13;
        if (isMoreThanOneFingerGesture(event)) return;&#13;
&#13;
        event.preventDefault();&#13;
&#13;
        var touch;&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0]&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        mouseMoveCallback(touch);&#13;
    }&#13;
&#13;
    function mouseMoveCallback(event) {&#13;
        if (presenter.configuration.isClickDisabled) return;&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        if (presenter.mouseData.isMouseDown) {&#13;
            presenter.mouseData.isMouseDragged = true;&#13;
&#13;
            if (presenter.$element.css('background-position').indexOf('px') == -1) {&#13;
                var oldPositionInPx = (-1 * presenter.configuration.currentFrame) * presenter.$element.width();&#13;
                presenter.$element.css('backgroundPosition', oldPositionInPx + 'px');&#13;
                presenter.mouseData.originalBackgroundPosition = oldPositionInPx;&#13;
            }&#13;
&#13;
            var relativeDistance = event.pageX - presenter.mouseData.oldPosition.x,&#13;
                oldPosition = parseInt(presenter.$element.css('backgroundPosition'), 10);&#13;
            presenter.$element.css('backgroundPosition', (oldPosition + relativeDistance) + 'px');&#13;
&#13;
            presenter.mouseData.oldPosition.x = event.pageX;&#13;
            presenter.mouseData.oldPosition.y = event.pageY;&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * Calculate scale for image containing element depending on frame aspect ratio&#13;
     *&#13;
     * @return {Object} calculated horizontal and vertical scale&#13;
     */&#13;
    presenter.calculateContainerDimensions = function(imageWidth, imageHeight, containerWidth, containerHeight) {&#13;
        var imageRatio = imageWidth / imageHeight;&#13;
        var containerRatio = containerWidth / containerHeight;&#13;
&#13;
        var horizontal = imageRatio &gt;= containerRatio ? containerWidth : containerHeight * imageRatio;&#13;
        var vertical = imageRatio &gt;= containerRatio ? containerWidth / imageRatio : containerHeight;&#13;
&#13;
        return {&#13;
            horizontal: horizontal,&#13;
            vertical: vertical&#13;
        };&#13;
    };&#13;
&#13;
&#13;
    // This function returns string containing CSS declaration of elements&#13;
    // background image size in percentage measure&#13;
    function calculateBackgroundSize(size, framesCount) {&#13;
        var cssValue;&#13;
&#13;
        switch(size) {&#13;
            case 'SCALED':&#13;
            case 'STRETCHED':&#13;
                cssValue = framesCount * 100;&#13;
                cssValue += '% 100%';&#13;
                break;&#13;
            default:&#13;
                cssValue = '';&#13;
        }&#13;
&#13;
        return cssValue;&#13;
    }&#13;
&#13;
    function shouldShowWatermark() {&#13;
        return presenter.configuration.showWatermark &amp;&amp; !presenter.configuration.isClickDisabled;&#13;
    }&#13;
&#13;
    function calculateWidth (containerWidth, imageWidth) {&#13;
        var differenceContainerElement = containerWidth - (imageWidth / presenter.configuration.frames);&#13;
        var differenceImage = differenceContainerElement * presenter.configuration.frames;&#13;
&#13;
        var scaleWidth = imageWidth + differenceImage;&#13;
&#13;
        return {&#13;
            scaleWidth: scaleWidth,&#13;
            differenceContainerElement: differenceContainerElement,&#13;
            elementWidth: (imageWidth / presenter.configuration.frames) + differenceContainerElement&#13;
        }&#13;
    }&#13;
&#13;
    function loadImage(preview) {&#13;
        var tempImageElement = document.createElement('img');&#13;
        $(tempImageElement).addClass('image-viewer-hidden-image');&#13;
        $(tempImageElement).attr('src', presenter.configuration.imageSrc);&#13;
        $(presenter.$view).append(tempImageElement);&#13;
&#13;
        $(tempImageElement).load(function() {&#13;
            var containerWidth = presenter.configuration.containerDimensions.width;&#13;
            var containerHeight = presenter.configuration.containerDimensions.height;&#13;
            var imageWidth = $(this).width();&#13;
            var imageHeight = $(this).height();&#13;
            var containerDimensions = presenter.calculateContainerDimensions(imageWidth / presenter.configuration.frames, imageHeight, containerWidth, containerHeight);&#13;
            var backgroundSize = calculateBackgroundSize(presenter.configuration.frameSize, presenter.configuration.frames);&#13;
&#13;
            var elementWidth;&#13;
            var elementHeight;&#13;
&#13;
            switch (presenter.configuration.frameSize) {&#13;
                case 'ORIGINAL':&#13;
                    elementWidth = imageWidth / presenter.configuration.frames;&#13;
                    elementHeight = imageHeight;&#13;
                    break;&#13;
                case 'SCALED':&#13;
                    var calculatedWidthScale = calculateWidth(containerWidth, imageWidth);&#13;
                    $(this).width(calculatedWidthScale.scaleWidth);&#13;
&#13;
                    elementWidth = calculatedWidthScale.elementWidth;&#13;
                    elementHeight = containerDimensions.vertical;&#13;
                    break;&#13;
                case 'STRETCHED':&#13;
                    var calculatedWidthStretched = calculateWidth(containerWidth, imageWidth);&#13;
                    $(this).width(calculatedWidthStretched.scaleWidth);&#13;
&#13;
                    elementWidth = calculatedWidthStretched.elementWidth;&#13;
                    elementHeight = containerHeight;&#13;
                    break;&#13;
            }&#13;
&#13;
            presenter.$element.css({&#13;
                width: elementWidth + 'px',&#13;
                height: elementHeight + 'px',&#13;
                backgroundImage: "url('" + presenter.configuration.imageSrc + "')"&#13;
            });&#13;
            presenter.$elementHelper.css({&#13;
                width: elementWidth + 'px',&#13;
                height: elementHeight + 'px'&#13;
            });&#13;
&#13;
            if (backgroundSize) {&#13;
                $(presenter.$element).css('background-size', backgroundSize);&#13;
            }&#13;
&#13;
            presenter.configuration.backgroundImageWidth = $(this).width();&#13;
&#13;
            $(this).remove();&#13;
            presenter.changeFrame(true, false, false);&#13;
&#13;
            if (shouldShowWatermark()) {&#13;
                var watermarkOptions = {&#13;
                    "color": presenter.model["Watermark color"],&#13;
                    "opacity": presenter.model["Watermark opacity"],&#13;
                    "size": presenter.model["Watermark size"]&#13;
                };&#13;
                Watermark.draw(watermarkElement, watermarkOptions);&#13;
            }&#13;
&#13;
            hideLoadingScreen();&#13;
            presenter.$view.trigger("onLoadImageEnd", [preview]);&#13;
        });&#13;
    }&#13;
&#13;
    function prepareLoadingScreen(containerWidth, containerHeight) {&#13;
        $(loadingScreen.element).css({&#13;
            top: ((containerHeight - $(loadingScreen.element).height()) / 2) + 'px',&#13;
            left: ((containerWidth - $(loadingScreen.element).width()) / 2) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function showLoadingScreen() {&#13;
        $(loadingScreen.element).show();&#13;
        loadingScreen.counter++;&#13;
    }&#13;
&#13;
    function hideLoadingScreen() {&#13;
        loadingScreen.counter--;&#13;
        if (loadingScreen.counter === 0) {&#13;
            $(loadingScreen.element).hide();&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * Creates label SPAN element and appends it to Addon space&#13;
     *&#13;
     * @param label&#13;
     * @return newly created element DOM reference&#13;
     */&#13;
    function createLabelElement(label) {&#13;
        var labelElement = document.createElement('span');&#13;
&#13;
        $(labelElement).addClass('image-viewer-label');&#13;
        $(labelElement).html(label.text);&#13;
        $(labelElement).css({&#13;
            top: label.top + 'px',&#13;
            left: label.left + 'px'&#13;
        });&#13;
&#13;
        $(presenter.$view).append(labelElement);&#13;
&#13;
        return labelElement;&#13;
    }&#13;
&#13;
    function loadLabels() {&#13;
        for (var i = 0; i &lt; presenter.configuration.labels.length; i++) {&#13;
            presenter.configuration.labels[i].element = createLabelElement(presenter.configuration.labels[i]);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.hideLabels = function () {&#13;
        $(presenter.$view).find('.image-viewer-label').css('visibility', 'hidden');&#13;
    };&#13;
&#13;
    /**&#13;
     * Displays labels that are assigned to given frame.&#13;
     *&#13;
     * @param frame frame number counted from 1 to n&#13;
     */&#13;
    presenter.displayLabels = function (frame) {&#13;
        $(presenter.$view).find('.image-viewer-label').css('visibility', 'hidden');&#13;
        for (var i = 0; i &lt; presenter.configuration.labels.length; i++) {&#13;
            var label = presenter.configuration.labels[i];&#13;
            for (var j = 0; j &lt; label.frames.length; j++) {&#13;
                if (frame === label.frames[j]) {&#13;
                    $(label.element).css('visibility', 'visible');&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function attachEventHandlers() {&#13;
&#13;
        presenter.isMobileDevice = MobileUtils.isMobileUserAgent(navigator.userAgent) || MobileUtils.isEventSupported('touchend');&#13;
        if (MobileUtils.isWindowsMobile(window.navigator)) {&#13;
            presenter.$element[0].addEventListener("MSPointerDown", touchStartCallback, false);&#13;
            presenter.$element[0].addEventListener("MSPointerUp", touchEndCallback, false);&#13;
            presenter.$element[0].addEventListener("MSPointerMove", touchMoveCallback, false);&#13;
        }&#13;
        else if (presenter.isMobileDevice) {&#13;
            presenter.$element[0].ontouchstart = touchStartCallback;&#13;
            presenter.$element[0].ontouchend = touchEndCallback;&#13;
            presenter.$element[0].ontouchmove = touchMoveCallback;&#13;
        }&#13;
        else {&#13;
            presenter.$element.mousedown(mouseDownCallback);&#13;
            presenter.$element.mouseup(mouseUpCallback);&#13;
            presenter.$element.mousemove(mouseMoveCallback);&#13;
        }&#13;
&#13;
        presenter.$element.click(clickHandler);&#13;
&#13;
        $(watermarkElement).click(function(e) {&#13;
            e.stopPropagation();&#13;
&#13;
            $(watermarkElement).hide();&#13;
            clickHandler(e);&#13;
        });&#13;
&#13;
        if (presenter.configuration.showFrameCounter) {&#13;
            var $frameCounter = presenter.$view.find('.frame-counter:first');&#13;
&#13;
            $frameCounter.find('.dot').each(function (index) {&#13;
                $(this).click(function (e) {&#13;
                    e.stopPropagation();&#13;
&#13;
                    if (presenter.configuration.isClickDisabled) return;&#13;
                    if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) return;&#13;
                    if (index === presenter.configuration.currentFrame) return;&#13;
&#13;
                    hideWatermarkIfVisible();&#13;
&#13;
                    presenter.moveToFrame(index + 1);&#13;
                });&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    function loadImagesCallback(preview) {&#13;
        if (!presenter.configuration.correctFrames.isExerciseMode) {&#13;
            presenter.getMaxScore = undefined;&#13;
            presenter.getScore = undefined;&#13;
            presenter.getErrorCount = undefined;&#13;
        }&#13;
&#13;
        if (!preview) {&#13;
            loadSounds();&#13;
&#13;
            if (!presenter.configuration.isClickDisabled) {&#13;
                attachEventHandlers();&#13;
            }&#13;
        }&#13;
        presenter.imageLoadedDeferred.resolve();&#13;
    }&#13;
&#13;
    function loadImageEndCallback() {&#13;
        var configuration = presenter.configuration;&#13;
&#13;
        if(!configuration.showWatermark) {&#13;
            $(watermarkElement).remove();&#13;
        }&#13;
        presenter.setVisibility(configuration.currentVisibility);&#13;
        presenter.changeFrame(presenter.changeFrameData.isPreview, presenter.changeFrameData.isReverseOrder, presenter.changeFrameData.triggerEvent);&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        presenter.imageLoadedDeferred = new jQuery.Deferred();&#13;
        presenter.imageLoaded = presenter.imageLoadedDeferred.promise();&#13;
        presenter.addonId = model.ID;&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.preview = preview;&#13;
        presenter.$element = $(presenter.$view.find('.image-viewer:first')[0]);&#13;
        presenter.$elementHelper = $(presenter.$view.find('.image-viewer-helper:first')[0]);&#13;
        loadingScreen.element = presenter.$view.find('.image-viewer-loading-image:first')[0];&#13;
        watermarkElement = presenter.$view.find('.image-viewer-watermark:first')[0];&#13;
&#13;
        if (!preview) {&#13;
            var loadingSrc = DOMOperationsUtils.getResourceFullPath(playerController, "media/loading.gif");&#13;
            if (loadingSrc) $(loadingScreen.element).attr('src', loadingSrc);&#13;
        }&#13;
&#13;
        var configuration = presenter.validateModel(model);&#13;
        if (configuration.isError) {&#13;
            showErrorMessage(view, configuration.errorCode);&#13;
        } else {&#13;
            showLoadingScreen();&#13;
&#13;
            presenter.configuration = configuration;&#13;
            presenter.configuration.frameWidthPercentage = 100 / (presenter.configuration.frames - 1);&#13;
            presenter.configuration.isErrorMode = false;&#13;
&#13;
            // Initialize mouse data&#13;
            presenter.mouseData = {&#13;
                isMouseDown : false,&#13;
                oldPosition : { x: 0, y: 0 },&#13;
                isMouseDragged : false&#13;
            };&#13;
&#13;
            if (preview) {&#13;
                presenter.configuration.currentFrame = presenter.configuration.showFrame &lt;= presenter.configuration.frames ? presenter.configuration.showFrame - 1 : 0;&#13;
            } else {&#13;
                presenter.setCurrentFrame();&#13;
            }&#13;
&#13;
            setContainerDimensions(view);&#13;
            prepareLoadingScreen(model.Width, model.Height);&#13;
            presenter.adjustFrameCounter();&#13;
            loadLabels();&#13;
&#13;
            presenter.$view.bind("onLoadImageEnd", function (event, isPreview) {&#13;
                loadImagesCallback(isPreview);&#13;
            });&#13;
            if(!preview){&#13;
                presenter.pageLoaded.then(function() {&#13;
                    loadImage(preview);&#13;
                });&#13;
            }else{&#13;
                loadImage(preview);&#13;
            }&#13;
            presenter.setVisibility(presenter.configuration.defaultVisibility);&#13;
            if (presenter.configuration.defaultVisibility) {&#13;
                presenter.displayLabels(1);&#13;
            }&#13;
&#13;
            if (!configuration.showWatermark) {&#13;
                hideWatermarkIfVisible();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.adjustFrameCounter = function () {&#13;
        var $wrapper = presenter.$view.find('.frame-counter-wrapper:first'), i, $dot,&#13;
            $frameCounter = $wrapper.find('.frame-counter:first');&#13;
&#13;
        if (!presenter.configuration.showFrameCounter) {&#13;
            $wrapper.remove();&#13;
            return;&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; presenter.configuration.frames - 1; i++) {&#13;
            $dot = $(document.createElement('div'));&#13;
            $dot.addClass('dot');&#13;
            $frameCounter.append($dot);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeCurrentDot = function () {&#13;
        var $frameCounter = presenter.$view.find('.frame-counter:first');&#13;
&#13;
        $frameCounter.find('.dot.current').removeClass('current');&#13;
        $frameCounter.find('.dot:eq(' + presenter.configuration.currentFrame + ')').addClass('current');&#13;
    };&#13;
&#13;
    presenter.setCurrentFrame = function() {&#13;
        if(presenter.configuration.initialFrame) {&#13;
            presenter.configuration.currentFrame = presenter.configuration.initialFrame - 1;&#13;
        } else if(presenter.configuration.isRandomFrame) {&#13;
            presenter.configuration.currentFrame = presenter.getRandomFrame();&#13;
        } else {&#13;
            presenter.configuration.currentFrame = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.next = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var currentFrame = presenter.configuration.currentFrame,&#13;
            framesCount = presenter.configuration.frames;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.configuration.currentFrame = currentFrame === framesCount - 1 ? 0 : currentFrame + 1;&#13;
        presenter.changeFrame(false, false, true);&#13;
    };&#13;
&#13;
    presenter.previous = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var currentFrame = presenter.configuration.currentFrame,&#13;
            framesCount = presenter.configuration.frames;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.configuration.currentFrame = currentFrame === 0 ? framesCount - 1 : currentFrame - 1;&#13;
        presenter.changeFrame(false, true, true);&#13;
    };&#13;
&#13;
    presenter.isValidFrameNumber = function(frame, framesCount) {&#13;
        return !isNaN(frame) &amp;&amp; frame &gt; 0 &amp;&amp; frame &lt;= framesCount;&#13;
    };&#13;
&#13;
    presenter.moveToFrameCommand = function(params) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var framesCount = presenter.configuration.frames,&#13;
            currentFrame = presenter.configuration.currentFrame,&#13;
            validatedFrame = ModelValidationUtils.validateIntegerInRange(params[0], framesCount, 1);&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if (validatedFrame.isValid &amp;&amp; validatedFrame.value - 1 !== currentFrame) {&#13;
            var isReverseOrder = currentFrame &gt; validatedFrame.value - 1;&#13;
            presenter.configuration.currentFrame = validatedFrame.value - 1;&#13;
&#13;
            presenter.changeFrameData = {&#13;
                isPreview: false,&#13;
                isReverseOrder: isReverseOrder,&#13;
                triggerEvent: true&#13;
            };&#13;
&#13;
            $.when(presenter.imageLoaded).then(loadImageEndCallback);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrame = function (frame) {&#13;
        presenter.moveToFrameCommand([frame]);&#13;
    };&#13;
&#13;
    presenter.isValidFrameName = function (frameName) {&#13;
        var isInvalid = !frameName || frameName === "";&#13;
&#13;
        return !isInvalid;&#13;
    };&#13;
&#13;
    presenter.findFrame = function (name, frames) {&#13;
        for (var i = 0, length = frames.length; i &lt; length; i++) {&#13;
            if (frames[i].name == name) {&#13;
                return {&#13;
                    found: true,&#13;
                    frameNumber: parseInt(frames[i].frame, 10)&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            found: false&#13;
        };&#13;
    };&#13;
&#13;
    presenter.moveToFrameNameCommand = function (params) {&#13;
        var frameFindResult, frameNumber;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if (!presenter.isValidFrameName(params[0])) return;&#13;
&#13;
        frameFindResult = presenter.findFrame(params[0], presenter.configuration.frameNames);&#13;
        if (!frameFindResult.found) return;&#13;
&#13;
        frameNumber = frameFindResult.frameNumber;&#13;
        if (frameNumber - 1 !== presenter.configuration.currentFrame) {&#13;
            var currentFrame = presenter.configuration.currentFrame;&#13;
            var isReverseOrder = currentFrame &gt; frameNumber - 1;&#13;
            presenter.configuration.currentFrame = frameNumber - 1;&#13;
            presenter.changeFrame(false, isReverseOrder, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrameName = function (frameName) {&#13;
        presenter.moveToFrameNameCommand([frameName]);&#13;
    };&#13;
&#13;
    presenter.getRandomFrame = function() {&#13;
        var frames = presenter.configuration.frames;&#13;
        return Math.floor( Math.random() * frames );&#13;
    };&#13;
&#13;
    presenter.setClickDisabled = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isClickDisabled = true;&#13;
        hideWatermarkIfVisible();&#13;
    };&#13;
    presenter.setClickEnabled = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isClickDisabled = false;&#13;
        if (presenter.configuration.showWatermarkbyDefault) {&#13;
            showWatermarkIfNotVisible();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) return;&#13;
&#13;
        var commands = {&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous,&#13;
            'moveToFrame': presenter.moveToFrameCommand,&#13;
            'moveToFrameName': presenter.moveToFrameNameCommand,&#13;
            'getCurrentFrame': presenter.getCurrentFrame,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'markAsCorrect': presenter.markAsCorrect,&#13;
            'markAsWrong': presenter.markAsWrong,&#13;
            'setClickDisabled': presenter.setClickDisabled,&#13;
            'setClickEnabled': presenter.setClickEnabled&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.setVisibility(true);&#13;
        presenter.displayLabels(presenter.configuration.currentFrame + 1);&#13;
        presenter.configuration.currentVisibility = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.setVisibility(false);&#13;
        presenter.hideLabels();&#13;
        presenter.configuration.currentVisibility = false;&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.$element.addClass('correct');&#13;
        presenter.$element.removeClass('wrong');&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.$element.addClass('wrong');&#13;
        presenter.$element.removeClass('correct');&#13;
    };&#13;
&#13;
    presenter.getCurrentFrame = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return presenter.configuration.currentFrame + 1;&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
&#13;
        this.upgradedModel = this.upgradeModel(model);&#13;
        presenterLogic(view, this.upgradedModel, false);&#13;
&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.validateAnimation = function (animation) {&#13;
        return ModelValidationUtils.validateOption(presenter.ANIMATION, animation);&#13;
    };&#13;
&#13;
    presenter.validateFrameSize = function(size) {&#13;
        return ModelValidationUtils.validateOption(presenter.FRAME_SIZE, size);&#13;
    };&#13;
&#13;
    presenter.validateImage = function(imageSrc) {&#13;
        if (ModelValidationUtils.isStringWithPrefixEmpty(imageSrc, '/file/')) {&#13;
            return { isError : true, errorCode: "IM_01" };&#13;
        }&#13;
&#13;
        return { isError: false, image : imageSrc };&#13;
    };&#13;
&#13;
    presenter.validateFrameNumber = function(frame) {&#13;
        if (!frame) return { isError: true, errorCode: "FN_01" };&#13;
&#13;
        var parsedFrame = parseInt(frame, 10);&#13;
&#13;
        if (isNaN(parsedFrame)) return { isError:true, errorCode:"FN_02" };&#13;
        if (parsedFrame &lt; 1) return { isError:true, errorCode:"FN_03" };&#13;
&#13;
        return { isError: false, frames : parsedFrame };&#13;
    };&#13;
&#13;
    presenter.validateSound = function(soundsArray) {&#13;
        var sounds = [];&#13;
&#13;
        if (soundsArray &amp;&amp; $.isArray(soundsArray)) {&#13;
            for (var i = 0; i &lt; soundsArray.length; i++) {&#13;
                var isMP3Empty = ModelValidationUtils.isStringWithPrefixEmpty(soundsArray[i]['MP3 sound'], '/file/');&#13;
                var isAACEmpty = ModelValidationUtils.isStringWithPrefixEmpty(soundsArray[i]['AAC sound'], '/file/');&#13;
                var isOGGEmpty = ModelValidationUtils.isStringWithPrefixEmpty(soundsArray[i]['OGG sound'], '/file/');&#13;
                var isEmpty = isMP3Empty &amp;&amp; isAACEmpty &amp;&amp; isOGGEmpty;&#13;
&#13;
                sounds.push({&#13;
                    AAC : isAACEmpty ? "" : soundsArray[i]['AAC sound'],&#13;
                    OGG : isOGGEmpty ? "" : soundsArray[i]['OGG sound'],&#13;
                    MP3 : isMP3Empty ? "" : soundsArray[i]['MP3 sound'],&#13;
                    isEmpty : isEmpty&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            sounds : sounds&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateFrameNames = function(frameNames, frames) {&#13;
        var frameNamesArray = [];&#13;
&#13;
        var frameNamesEmpty = false;&#13;
        if (frameNames &amp;&amp; $.isArray(frameNames)) {&#13;
            var firstName = frameNames[0].name;&#13;
            var firstFrame = frameNames[0].frame;&#13;
            if (firstFrame === "" &amp;&amp; firstName === "") {&#13;
                frameNamesEmpty = true;&#13;
            } else {&#13;
                for (var j = 0; j &lt; frameNames.length; j++) {&#13;
                    var frame = frameNames[j]['frame'];&#13;
                    var name = frameNames[j]['name'];&#13;
&#13;
                    if (!name || name === null || name === "") {&#13;
                        return {&#13;
                            isError: true,&#13;
                            errorCode: "FN_04"&#13;
                        };&#13;
                    }&#13;
&#13;
                    var validatedFrame = presenter.validateFrameNumber(frame);&#13;
                    if (validatedFrame.isError) {&#13;
                        return {&#13;
                            isError: true,&#13;
                            errorCode: validatedFrame.errorCode&#13;
                        };&#13;
                    }&#13;
&#13;
                    if (validatedFrame.frames &gt; frames) {&#13;
                        return {&#13;
                            isError: true,&#13;
                            errorCode: "FN_05"&#13;
                        };&#13;
                    }&#13;
&#13;
                    frameNamesArray.push({&#13;
                        name: name,&#13;
                        frame: frame&#13;
                    });&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            frameNames: frameNamesArray,&#13;
            frameNamesEmpty: frameNamesEmpty&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * This function validates and converts number from string representation to integer value&#13;
     */&#13;
    presenter.validatePosition = function (position) {&#13;
        var validatedPosition = ModelValidationUtils.validateInteger(position);&#13;
&#13;
        if (!validatedPosition.isValid) {&#13;
            return { isError:true };&#13;
        }&#13;
&#13;
        if (validatedPosition.value &lt; 0) {&#13;
            return { isError:true };&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            position: validatedPosition.value&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * Removes duplicates from sorted array of numbers&#13;
     *&#13;
     * @param array sorted array of numbers&#13;
     * @return array with removed duplicates&#13;
     */&#13;
    presenter.removeDuplicatesFromArray = function(array) {&#13;
        if (array.length === 0) {&#13;
            return [];&#13;
        }&#13;
&#13;
        var results = [];&#13;
&#13;
        for (var i = 0; i &lt; array.length - 1; i++) {&#13;
            if (array[i + 1] !== array[i]) {&#13;
                results.push(array[i]);&#13;
            }&#13;
        }&#13;
&#13;
        results.push(array[array.length - 1]);&#13;
&#13;
        return results;&#13;
    };&#13;
&#13;
    /**&#13;
     * Validates frames numbers list separated with commas&#13;
     *&#13;
     * @param frames string representation of frames list&#13;
     * @param count frames count&#13;
     *&#13;
     * @return array of frames numbers counted from 1 to n&#13;
     */&#13;
    presenter.validateFramesList = function (frames, count) {&#13;
        var list = [];&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(frames)) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FL_01"&#13;
            };&#13;
        }&#13;
&#13;
        var regExp = new RegExp('[0-9a-zA-Z\,\-]+'); // Only digits and commas are allowed in slides list&#13;
        var matchResult = frames.match(regExp);&#13;
        if (matchResult === null || frames.length !== matchResult[0].length) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FL_02"&#13;
            };&#13;
        }&#13;
&#13;
        var splittedFrames = frames.split(',');&#13;
        for (var i = 0; i &lt; splittedFrames.length; i++) {&#13;
            if (ModelValidationUtils.isStringEmpty(splittedFrames[i])) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_04"&#13;
                };&#13;
            }&#13;
&#13;
            var indexOfRange = splittedFrames[i].search('-');&#13;
            if (indexOfRange !== -1) {&#13;
                var rangeEnd = splittedFrames[i].split('-')[1];&#13;
                var validatedRangeEnd = ModelValidationUtils.validateIntegerInRange(rangeEnd, count, 1);&#13;
                if (!validatedRangeEnd.isValid) {&#13;
                    return {&#13;
                        isError: true,&#13;
                        errorCode: "FL_05"&#13;
                    };&#13;
                }&#13;
&#13;
                var rangeStart = splittedFrames[i].split('-')[0];&#13;
                var validatedRangeStart = ModelValidationUtils.validateIntegerInRange(rangeStart, rangeEnd.value, 1);&#13;
                if (!validatedRangeStart.isValid || validatedRangeStart.value &gt; validatedRangeEnd.value) {&#13;
                    return {&#13;
                        isError: true,&#13;
                        errorCode: "FL_05"&#13;
                    };&#13;
                }&#13;
&#13;
                for (var frameNumber = validatedRangeStart.value; frameNumber &lt;= validatedRangeEnd.value; frameNumber++) {&#13;
                    list.push(frameNumber);&#13;
                }&#13;
&#13;
                continue;&#13;
            }&#13;
&#13;
            var validatedFrame = ModelValidationUtils.validateIntegerInRange(splittedFrames[i], count, 1);&#13;
            if (!validatedFrame.isValid) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_03"&#13;
                };&#13;
            }&#13;
&#13;
            list.push(validatedFrame.value);&#13;
        }&#13;
&#13;
        list = list.sort();&#13;
        list = presenter.removeDuplicatesFromArray(list);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            list: list&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateLabels = function (labelsArray, framesCount) {&#13;
        var labels = [], element;&#13;
&#13;
        // Ugly fix for Editor problems&#13;
        if (labelsArray === undefined) return { isError:false, labels:labels };&#13;
&#13;
        for (var i = 0; i &lt; labelsArray.length; i++) {&#13;
            element = {&#13;
                Text: labelsArray[i].Text,&#13;
                Frames: labelsArray[i].Frames,&#13;
                Top: labelsArray[i].Top,&#13;
                Left: labelsArray[i].Left&#13;
            };&#13;
&#13;
            if (ModelValidationUtils.isArrayElementEmpty(element)) {&#13;
                if (labelsArray.length == 1)&#13;
                    return { isError:false, labels:labels };&#13;
                else&#13;
                    return { isError:true, errorCode:"LA_04" };&#13;
            }&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(element.Text)) {&#13;
                return { isError:true, errorCode:"LA_01" };&#13;
            }&#13;
&#13;
            var validatedFramesList = presenter.validateFramesList(element.Frames, framesCount);&#13;
            if (validatedFramesList.isError) return { isError:true, errorCode: validatedFramesList.errorCode };&#13;
&#13;
            var validatedTopPosition = ModelValidationUtils.validateInteger(element.Top);&#13;
            if (!validatedTopPosition.isValid) return { isError:true, errorCode:"LA_02" };&#13;
&#13;
            var validatedLeftPosition = ModelValidationUtils.validateInteger(element.Left);&#13;
            if (!validatedLeftPosition.isValid) return { isError:true, errorCode:"LA_03" };&#13;
&#13;
            var text = {&#13;
                text: element.Text,&#13;
                frames: validatedFramesList.list,&#13;
                top: validatedTopPosition.value,&#13;
                left: validatedLeftPosition.value&#13;
            };&#13;
&#13;
            labels.push(text);&#13;
        }&#13;
&#13;
        return { isError:false, labels:labels };&#13;
    };&#13;
&#13;
    presenter.validateInitialFrame = function(frame, framesCount) {&#13;
        if(frame &amp;&amp; !ModelValidationUtils.validateIntegerInRange(frame, framesCount, 1).isValid) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: 'IF_01'&#13;
            }&#13;
        }&#13;
        var isValid = this.isValidFrameNumber(frame, framesCount);&#13;
        return isValid ? frame : false;&#13;
    };&#13;
&#13;
    presenter.validateOpacity = function (opacity) {&#13;
        if (ModelValidationUtils.isStringEmpty(opacity)) return { isError: false, opacity: 1.0 };&#13;
&#13;
        var parsedOpacity = ModelValidationUtils.validateFloatInRange(opacity, 1.0, 0.0, 2);&#13;
        if (!parsedOpacity.isValid) return { isError: true };&#13;
&#13;
        return { isError: false, opacity: parsedOpacity.value };&#13;
    };&#13;
&#13;
    presenter.validateCorrectFrame = function (frames, framesCount) {&#13;
        if (ModelValidationUtils.isStringEmpty(frames)) return { isExerciseMode: false };&#13;
&#13;
        var framesArray = frames.split(',');&#13;
        var correctFrames = [];&#13;
&#13;
        for (var i = 0, length = framesArray.length; i &lt; length; i++) {&#13;
            var frameNumber = ModelValidationUtils.validateInteger(framesArray[i]);&#13;
            if (!frameNumber.isValid) return { errorCode: "FN_02" };&#13;
&#13;
            frameNumber = ModelValidationUtils.validateIntegerInRange(framesArray[i], framesCount, 1);&#13;
            if (!frameNumber.isValid) return { errorCode: "CF_01" };&#13;
&#13;
            correctFrames.push(frameNumber.value - 1);&#13;
        }&#13;
&#13;
        return { frames: correctFrames, isExerciseMode: true };&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedImage = presenter.validateImage(model.Image);&#13;
        if (validatedImage.isError) return { isError: true, errorCode: validatedImage.errorCode };&#13;
&#13;
        var validatedFrames = presenter.validateFrameNumber(model.Frames);&#13;
        if (validatedFrames.isError) return { isError: true, errorCode: validatedFrames.errorCode };&#13;
&#13;
        var validatedFrameNames = presenter.validateFrameNames(model["Frame names"], validatedFrames.frames);&#13;
        if (validatedFrameNames.isError) return { isError: true, errorCode: validatedFrameNames.errorCode };&#13;
&#13;
        var validatedLabels = presenter.validateLabels(model.Labels, validatedFrames.frames);&#13;
        if (validatedLabels.isError) return { isError: true, errorCode: validatedLabels.errorCode };&#13;
&#13;
        var validatedCorrectFrames = presenter.validateCorrectFrame(model["Correct frames"], validatedFrames.frames);&#13;
        if (validatedCorrectFrames.errorCode) return { isError: true, errorCode: validatedCorrectFrames.errorCode };&#13;
&#13;
        var showFrame = 1;&#13;
        var validatedShowFrame = ModelValidationUtils.validateIntegerInRange(model["Show frame"], validatedFrames.frames, 1);&#13;
        if (validatedShowFrame.isValid) {&#13;
            showFrame = validatedShowFrame.value;&#13;
        }&#13;
&#13;
        var validatedInitialFrame = this.validateInitialFrame(model["Initial frame"], validatedFrames.frames);&#13;
        if(validatedInitialFrame.errorCode) return { isError: true, errorCode: validatedInitialFrame.errorCode };&#13;
&#13;
        var validatedSound = presenter.validateSound(model.Sounds);&#13;
        var isClickDisabled = ModelValidationUtils.validateBoolean(model.isClickDisabled);&#13;
        var frameSize = presenter.validateFrameSize(model["Frame size"]);&#13;
        var animation = presenter.validateAnimation(model.Animation);&#13;
        var defaultVisibility = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        var isDoNotReset = ModelValidationUtils.validateBoolean(model["Do not reset"]);&#13;
        var isRandomFrame = ModelValidationUtils.validateBoolean(model["Random frame"]);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            imageSrc : validatedImage.image,&#13;
            frames : validatedFrames.frames,&#13;
            sounds : validatedSound.sounds,&#13;
            frameNames: validatedFrameNames.frameNames,&#13;
            frameNamesEmpty: validatedFrameNames.frameNamesEmpty,&#13;
            isClickDisabled: isClickDisabled,&#13;
            isClickDisabledbyDefault: isClickDisabled,&#13;
            frameSize: frameSize,&#13;
            labels: validatedLabels.labels,&#13;
            showWatermark: ModelValidationUtils.validateBoolean(model["Show watermark"]),&#13;
            showWatermarkbyDefault: ModelValidationUtils.validateBoolean(model["Show watermark"]),&#13;
            showFrame: showFrame,&#13;
            animation: animation,&#13;
            correctFrames: validatedCorrectFrames,&#13;
            defaultVisibility: defaultVisibility,&#13;
            currentVisibility: defaultVisibility,&#13;
            isDoNotReset: isDoNotReset,&#13;
            isRandomFrame: isRandomFrame,&#13;
            initialFrame: validatedInitialFrame,&#13;
            showFrameCounter: ModelValidationUtils.validateBoolean(model["Show frame counter"]),&#13;
            shouldCalcScore: false&#13;
        };&#13;
    };&#13;
&#13;
    function animateLinearly(element, backgroundPositionValue) {&#13;
        $(element).animate({&#13;
            'background-position':backgroundPositionValue&#13;
        }, 500, "linear");&#13;
    }&#13;
&#13;
    function animateLinearlyLastElement(element) {&#13;
        $(element).animate({&#13;
            'background-position':(100 + presenter.configuration.frameWidthPercentage) + '%'&#13;
        }, {&#13;
            duration:500,&#13;
            easing:"linear",&#13;
            complete:function () {&#13;
                $(element).css({&#13;
                    'background-position':'-' + presenter.configuration.frameWidthPercentage + '%'&#13;
                });&#13;
                $(element).animate({&#13;
                    'background-position':'0%'&#13;
                }, 500, "linear")&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function animateLinearlyFirstElement(element) {&#13;
        $(element).animate({&#13;
            'background-position':'-' + presenter.configuration.frameWidthPercentage + '%'&#13;
        }, {&#13;
            duration:500,&#13;
            easing:"linear",&#13;
            complete:function () {&#13;
                $(element).css({&#13;
                    'background-position':(100 + presenter.configuration.frameWidthPercentage) + '%'&#13;
                });&#13;
                $(element).animate({&#13;
                    'background-position':'100%'&#13;
                }, 500, "linear")&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function animateFading(element, backgroundPositionValue) {&#13;
        $(element).fadeOut({&#13;
            duration: 750,&#13;
            complete: function() {&#13;
                $(element).css({&#13;
                    'background-position': backgroundPositionValue&#13;
                });&#13;
                $(element).fadeIn(750);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.changeBackgroundPosition = function (isPreview, element, isReverseOrder) {&#13;
        var backgroundPositionValue = (presenter.configuration.currentFrame * presenter.configuration.frameWidthPercentage + '%');&#13;
&#13;
        if (isPreview || presenter.configuration.animation === 'NONE') {&#13;
            $(element).css('background-position', backgroundPositionValue);&#13;
        } else {&#13;
            switch (presenter.configuration.animation) {&#13;
                case 'LINEAR':&#13;
                    if (isReverseOrder) {&#13;
                        if (presenter.configuration.currentFrame === presenter.configuration.frames - 1) {&#13;
                            animateLinearlyFirstElement(element);&#13;
                        } else {&#13;
                            animateLinearly(element, backgroundPositionValue);&#13;
                        }&#13;
                    } else {&#13;
                        if (presenter.configuration.currentFrame !== 0) {&#13;
                            animateLinearly(element, backgroundPositionValue);&#13;
                        } else {&#13;
                            animateLinearlyLastElement(element);&#13;
                        }&#13;
                    }&#13;
                    break;&#13;
                case 'FADING':&#13;
                    animateFading(element, backgroundPositionValue);&#13;
                    break;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeFrameLogic = function (isPreview, triggerEvent) {&#13;
        presenter.changeCurrentDot();&#13;
&#13;
        if (presenter.configuration.currentFrame === 0) {&#13;
            if (!isPreview) presenter.stopAllAudio();&#13;
        } else {&#13;
            if (!isPreview) presenter.playAudio();&#13;
        }&#13;
&#13;
        if (presenter.configuration.currentVisibility) {&#13;
            presenter.displayLabels(presenter.configuration.currentFrame + 1);&#13;
        } else {&#13;
            presenter.hideLabels();&#13;
        }&#13;
&#13;
        if (triggerEvent &amp;&amp; !isPreview) {&#13;
            presenter.triggerFrameChangeEvent(presenter.configuration.currentFrame + 1);&#13;
        }&#13;
    };&#13;
    presenter.changeFrame = function(isPreview, isReverseOrder, triggerEvent) {&#13;
        presenter.changeBackgroundPosition(isPreview, presenter.$element, isReverseOrder);&#13;
        presenter.changeFrameLogic(isPreview, triggerEvent);&#13;
    };&#13;
&#13;
    presenter.stopAllAudio = function () {&#13;
        for (var i = 0; i &lt; audioElements.length; i++) {&#13;
            if (audioElements[i] !== null ) {&#13;
                stopAudio(audioElements[i]);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function stopAudio(audio) {&#13;
        audio.pause();&#13;
        audio.setTime(0);&#13;
    }&#13;
&#13;
    presenter.playAudio = function() {&#13;
        presenter.stopAllAudio();&#13;
&#13;
        var audio = audioElements[presenter.configuration.currentFrame - 1];&#13;
        if (audio) {&#13;
            audio.play();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function(frameNumber, eventScore) {&#13;
        return {&#13;
            source : this.addonId,&#13;
            item : "" + frameNumber,&#13;
            value : '',&#13;
            score : eventScore&#13;
        }&#13;
    };&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(frameNumber) {&#13;
        var eventScore;&#13;
&#13;
        if(presenter.configuration.correctFrames.frames){&#13;
            if(presenter.configuration.correctFrames.frames.indexOf(frameNumber-1) &gt; -1){&#13;
                eventScore = 1;&#13;
            }else{&#13;
                eventScore = 0;&#13;
            }&#13;
        }else{&#13;
            eventScore = '';&#13;
        }&#13;
&#13;
        var eventData = this.createEventData(frameNumber, eventScore);&#13;
&#13;
        if (playerController != null &amp;&amp; !presenter.isShowAnswersActive) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
    };&#13;
&#13;
    presenter.isCurrentFrameCorrectlySelected = function () {&#13;
        var correctFrames = presenter.configuration.correctFrames.frames;&#13;
&#13;
        for (var i = 0, length = correctFrames.length; i &lt; length; i++) {&#13;
            if (presenter.configuration.currentFrame === correctFrames[i]) {&#13;
                return true;&#13;
            }&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            currentFrame : this.configuration.currentFrame,&#13;
            currentVisibility : this.configuration.currentVisibility,&#13;
            showWatermark : ($(watermarkElement).is(':visible')) ? true : false,&#13;
            showWatermarkbyDefault : this.configuration.showWatermarkbyDefault,&#13;
            isClickDisabled: presenter.configuration.isClickDisabled,&#13;
            isClickDisabledbyDefault : presenter.configuration.isClickDisabledbyDefault,&#13;
            shouldCalcScore: presenter.configuration.shouldCalcScore&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state_string) {&#13;
        var configuration = presenter.configuration;&#13;
        var state = JSON.parse(state_string);&#13;
        configuration.currentFrame = state.currentFrame;&#13;
        configuration.currentVisibility = state.currentVisibility;&#13;
        configuration.showWatermark = state.showWatermark;&#13;
        configuration.showWatermarkbyDefault = state.showWatermarkbyDefault;&#13;
        configuration.shouldCalcScore = state.shouldCalcScore;&#13;
        configuration.isClickDisabled = state.isClickDisabled;&#13;
        configuration.isClickDisabledbyDefault = state.isClickDisabledbyDefault;&#13;
&#13;
        $.when(presenter.imageLoaded).then(loadImageEndCallback);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.configuration.isErrorMode = false;&#13;
&#13;
        if (presenter.configuration.isDoNotReset) return;&#13;
&#13;
        presenter.setCurrentFrame();&#13;
        presenter.changeFrame(false, false, false);&#13;
&#13;
        if (shouldShowWatermark()) {&#13;
            showWatermarkIfNotVisible();&#13;
        }&#13;
&#13;
        presenter.configuration.isClickDisabled = presenter.configuration.isClickDisabledbyDefault;&#13;
&#13;
        var isVisible = presenter.configuration.currentVisibility = presenter.configuration.defaultVisibility;&#13;
        presenter.setVisibility(isVisible);&#13;
        removeCorrectnessClasses();&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (!presenter.configuration.correctFrames.isExerciseMode) return 0;&#13;
        if (!presenter.configuration.shouldCalcScore) return 0;&#13;
&#13;
        return presenter.isCurrentFrameCorrectlySelected() ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (!presenter.configuration.correctFrames.isExerciseMode) { return 0; }&#13;
        if (!presenter.configuration.shouldCalcScore) return 0;&#13;
&#13;
        return presenter.isCurrentFrameCorrectlySelected() ? 0 : 1;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if(presenter.configuration.correctFrames &amp;&amp; !presenter.configuration.correctFrames.isExerciseMode) { return 0; }&#13;
        return 1;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorMode = true;&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if(!presenter.configuration.correctFrames.isExerciseMode) return;&#13;
&#13;
        var isCorrect = presenter.isCurrentFrameCorrectlySelected();&#13;
&#13;
        presenter.$element.addClass(isCorrect ? 'correct' : 'wrong');&#13;
    };&#13;
&#13;
    function removeCorrectnessClasses() {&#13;
        presenter.$element.removeClass('correct');&#13;
        presenter.$element.removeClass('wrong');&#13;
    }&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.configuration.isErrorMode = false;&#13;
        if(!presenter.configuration.correctFrames.isExerciseMode) return;&#13;
&#13;
        removeCorrectnessClasses();&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrameCommandShowAnswers = function(params) {&#13;
        var framesCount = presenter.configuration.frames,&#13;
            currentFrame = presenter.configuration.currentFrame,&#13;
            validatedFrame = ModelValidationUtils.validateIntegerInRange(params[0], framesCount, 1);&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if (validatedFrame.isValid &amp;&amp; validatedFrame.value - 1 !== currentFrame) {&#13;
            var isReverseOrder = currentFrame &gt; validatedFrame.value - 1;&#13;
            presenter.configuration.currentFrame = validatedFrame.value - 1;&#13;
&#13;
            presenter.changeFrameData = {&#13;
                isPreview: false,&#13;
                isReverseOrder: isReverseOrder,&#13;
                triggerEvent: true&#13;
            };&#13;
&#13;
            $.when(presenter.imageLoaded).then(loadImageEndCallback);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrameShowAnswers = function (frame) {&#13;
        presenter.moveToFrameCommandShowAnswers([frame]);&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
&#13;
        if(presenter.configuration.correctFrames.frames){&#13;
            presenter.setWorkMode();&#13;
            presenter.currentFrameShowAnswers = presenter.configuration.currentFrame;&#13;
            presenter.moveToFrameShowAnswers(presenter.configuration.correctFrames.frames[0]+1);&#13;
            presenter.$element.addClass('show-answers');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(presenter.currentFrameShowAnswers != undefined){&#13;
            presenter.moveToFrameShowAnswers(presenter.currentFrameShowAnswers+1);&#13;
            presenter.$element.removeClass('show-answers');&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Layered_Image" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Base image" nameLabel="Layered_Image_property_base_image" type="image"/>
		<property name="Layers" nameLabel="Layered_Image_property_layers" type="list">
			<property name="Image" nameLabel="Layered_Image_property_image" type="image"/>
			<property name="Show at start" nameLabel="Layered_Image_property_show_at_start" type="boolean"/>
		</property>
		<property name="Image size" nameLabel="Layered_Image_property_image_size" type="{Original, Keep aspect ratio, Stretch}"/>
	</model>
<css>.layeredimage-wrapper,&#13;
.layeredimage-image {&#13;
    border: 0;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.layeredimage-wrapper {&#13;
    position: relative;&#13;
}&#13;
&#13;
.layeredimage-image {&#13;
    position: absolute;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
&#13;
.layeredimage-loading {&#13;
    display: none;&#13;
    z-index: 10;&#13;
    position: absolute;&#13;
    border: 0 solid black;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
}&#13;
</css><view>&lt;div class="layeredimage-wrapper"&gt;&#13;
    &lt;div class="layeredimage-image"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="layeredimage-loading"/&gt;&#13;
</view><preview>&lt;div class="layeredimage-wrapper"&gt;&#13;
    &lt;div class="layeredimage-image"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="/media/images/loading.gif" alt="Loading..." class="layeredimage-loading"/&gt;&#13;
</preview><presenter>function AddonLayered_Image_create() {&#13;
    var presenter = function () {};&#13;
    var DOMElements = {};&#13;
    presenter.flags = [];&#13;
    presenter.savedState = "";&#13;
    var elementsDimensions = {};&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        BI_01: "Base image wasn't set or was set incorrectly!",&#13;
        L_01: "At least one layer must be set and no blank layers can be left!"&#13;
    };&#13;
&#13;
    presenter.IMAGE_SIZE = {&#13;
        ORIGINAL: 0,&#13;
        SCALED: 1,&#13;
        STRETCHED: 2&#13;
    };&#13;
&#13;
    function setDOMElementsHrefAndSelectors(view) {&#13;
        DOMElements.$view = $(view);&#13;
        DOMElements.wrapper = $(DOMElements.$view.find('.layeredimage-wrapper:first')[0]);&#13;
        DOMElements.loading = $(DOMElements.$view.find('.layeredimage-loading:first')[0]);&#13;
        DOMElements.baseImage = $(DOMElements.wrapper.find('.layeredimage-image:first')[0]);&#13;
    }&#13;
&#13;
    function setElementsDimensions(width, height) {&#13;
        var wrapperDimensions = DOMOperationsUtils.getOuterDimensions(DOMElements.wrapper);&#13;
        var wrapperDistances = DOMOperationsUtils.calculateOuterDistances(wrapperDimensions);&#13;
        var wrapperWidth = width - wrapperDistances.horizontal;&#13;
        var wrapperHeight = height - wrapperDistances.vertical;&#13;
&#13;
        $(DOMElements.wrapper).css({&#13;
            width: wrapperWidth,&#13;
            height: wrapperHeight&#13;
        });&#13;
&#13;
        var imageDimensions = DOMOperationsUtils.getOuterDimensions(DOMElements.baseImage);&#13;
        var imageDistances = DOMOperationsUtils.calculateOuterDistances(imageDimensions);&#13;
        var imageWidth = width - imageDistances.horizontal;&#13;
        var imageHeight = height - imageDistances.vertical;&#13;
&#13;
        elementsDimensions = {&#13;
            wrapper: {&#13;
                width: wrapperWidth,&#13;
                height: wrapperHeight&#13;
            },&#13;
            image: {&#13;
                width: imageWidth,&#13;
                height: imageHeight&#13;
            }&#13;
        };&#13;
    }&#13;
&#13;
    // Calculate scale for image containing element depending on frame aspect ratio&#13;
    function calculateContainerDimensions(imageWidth, imageHeight, containerWidth, containerHeight) {&#13;
        var imageRatio = imageWidth / imageHeight;&#13;
        var containerRatio = containerWidth / containerHeight;&#13;
&#13;
        var horizontal;&#13;
        var vertical;&#13;
&#13;
        if (imageRatio &gt;= containerRatio) {&#13;
            horizontal = containerWidth;&#13;
            vertical = containerWidth / imageRatio;&#13;
        } else {&#13;
            vertical = containerHeight;&#13;
            horizontal = containerHeight * imageRatio;&#13;
        }&#13;
&#13;
        return {&#13;
            horizontal: horizontal,&#13;
            vertical: vertical&#13;
        };&#13;
    }&#13;
&#13;
    // This function returns string containing CSS declaration of elements&#13;
    // background image size in percentage measure&#13;
    function calculateBackgroundSize(size) {&#13;
        var cssValue;&#13;
&#13;
        switch (size) {&#13;
            case presenter.IMAGE_SIZE.SCALED:&#13;
            case presenter.IMAGE_SIZE.STRETCHED:&#13;
                cssValue = '100% 100%';&#13;
                break;&#13;
            default:&#13;
                cssValue = '';&#13;
        }&#13;
&#13;
        return cssValue;&#13;
    }&#13;
&#13;
    function appendImage(image, show) {&#13;
        var imageElement = document.createElement('div');&#13;
        $(imageElement).css('backgroundImage', 'url(' + image + ')');&#13;
        $(imageElement).addClass('layeredimage-image');&#13;
        $(DOMElements.wrapper).append(imageElement);&#13;
&#13;
        if (!show) {&#13;
            $(imageElement).hide();&#13;
        }&#13;
    }&#13;
&#13;
    function calculateImageDimensions(image) {&#13;
        $(DOMElements.wrapper).append(image);&#13;
&#13;
        $(image).show();&#13;
        var imageWidth = $(image).width();&#13;
        var imageHeight = $(image).height();&#13;
        $(image).hide();&#13;
&#13;
        $(image).remove();&#13;
        return { width: imageWidth, height: imageHeight };&#13;
    }&#13;
&#13;
    function preloadImages(isPreview) {&#13;
        showLoadingScreen();&#13;
&#13;
        var images = [presenter.configuration.baseImage];&#13;
        for (var i = 0; i &lt; presenter.configuration.layers.length; i++) {&#13;
            images.push(presenter.configuration.layers[i].image);&#13;
        }&#13;
&#13;
        $.imgpreload(images, {&#13;
            all: function() {&#13;
                var imageDimensions = calculateImageDimensions(this[0]);&#13;
                loadImages(imageDimensions.width, imageDimensions.height, isPreview);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function loadImages(imageWidth, imageHeight, isPreview) {&#13;
        appendImage(presenter.configuration.baseImage, true);&#13;
        DOMElements.baseImage = $(DOMElements.$view.find('.layeredimage-image:first')[0]);&#13;
&#13;
        var containerWidth = elementsDimensions.wrapper.width;&#13;
        var containerHeight = elementsDimensions.wrapper.height;&#13;
        var containerDimensions = calculateContainerDimensions(imageWidth, imageHeight, containerWidth, containerHeight);&#13;
        var backgroundSize = calculateBackgroundSize(presenter.configuration.imageSize);&#13;
&#13;
        var isScaledMode = presenter.configuration.imageSize === presenter.IMAGE_SIZE.SCALED;&#13;
        $(DOMElements.baseImage).css({&#13;
            width: isScaledMode ? containerDimensions.horizontal + 'px' : containerWidth + 'px',&#13;
            height: isScaledMode ? containerDimensions.vertical + 'px' : containerHeight + 'px'&#13;
        });&#13;
        if (backgroundSize) {&#13;
            $(DOMElements.baseImage).css('background-size', backgroundSize);&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.layers.length; i++) {&#13;
            var showLayer = isPreview ? true : presenter.configuration.layers[i].showAtStart;&#13;
            if(!presenter.savedState) {&#13;
                setFlag(i, presenter.configuration.layers[i].showAtStart);&#13;
            }&#13;
            var imageElement = document.createElement('div');&#13;
            $(imageElement).css('backgroundImage', 'url(' + presenter.configuration.layers[i].image + ')');&#13;
            $(imageElement).addClass('layeredimage-image');&#13;
            $(imageElement).attr('data-index', (i+1));&#13;
            $(DOMElements.wrapper).append(imageElement);&#13;
&#13;
            if (!showLayer) {&#13;
                $(imageElement).hide();&#13;
            }&#13;
&#13;
            var layer = DOMElements.wrapper.find('div[data-index="'+ (i+1) +'"]');&#13;
            $(layer).css({&#13;
                width: isScaledMode ? containerDimensions.horizontal + 'px' : containerWidth + 'px',&#13;
                height: isScaledMode ? containerDimensions.vertical + 'px' : containerHeight + 'px'&#13;
            });&#13;
            if (backgroundSize) {&#13;
                $(layer).css('background-size', backgroundSize);&#13;
            }&#13;
        }&#13;
&#13;
        hideLoadingScreen();&#13;
&#13;
        presenter.imageLoadedDeferred.resolve();&#13;
&#13;
        if(!isPreview){&#13;
            if (!presenter.imagesAreLoaded &amp;&amp; !presenter.savedState) {&#13;
                executeTasks();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function executeTasks () {&#13;
        presenter.imagesAreLoaded = true;&#13;
&#13;
        if (!presenter.commandsQueue.isQueueEmpty()) {&#13;
            presenter.commandsQueue.executeAllTasks();&#13;
        }&#13;
    }&#13;
&#13;
    function setFlag(index, value) {&#13;
        presenter.flags[index] = value;&#13;
    }&#13;
&#13;
    function getFlag(index) {&#13;
        return presenter.flags[index];&#13;
    }&#13;
&#13;
    function prepareLoadingScreen(containerWidth, containerHeight) {&#13;
        $(DOMElements.loading).css({&#13;
            top: ((containerHeight - $(DOMElements.loading).height()) / 2) + 'px',&#13;
            left: ((containerWidth - $(DOMElements.loading).width()) / 2) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function showLoadingScreen() {&#13;
        $(DOMElements.loading).show();&#13;
    }&#13;
&#13;
    function hideLoadingScreen() {&#13;
        $(DOMElements.loading).hide();&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        presenter.imageLoadedDeferred = new jQuery.Deferred();&#13;
        presenter.imageLoaded = presenter.imageLoadedDeferred.promise();&#13;
&#13;
        var width = model.Width;&#13;
        var height = model.Height;&#13;
&#13;
        setDOMElementsHrefAndSelectors(view);&#13;
&#13;
        if (!preview) {&#13;
            var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
            if (loadingSrc) $(DOMElements.loading).attr('src', loadingSrc);&#13;
        }&#13;
&#13;
        setElementsDimensions(width, height);&#13;
        $(DOMElements.baseImage).remove();&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(DOMElements.$view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
        } else {&#13;
            prepareLoadingScreen(width, height);&#13;
            preloadImages(preview);&#13;
            if (!presenter.configuration.isVisibleByDefault) {&#13;
                presenter.hide();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.commandsQueue = CommandsQueueFactory.create(presenter);&#13;
        presenter.imagesAreLoaded = false;&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        hideAllLayers();&#13;
        displayVisibleLayers(true);&#13;
        presenter.showLayer(0);&#13;
&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            flags: presenter.flags&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setStateCallback = function() {&#13;
        displayVisibleLayers(false);&#13;
&#13;
        if (presenter.isVisbleSaved) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        if (!presenter.imagesAreLoaded) {&#13;
            executeTasks();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        this.savedState = JSON.parse(state);&#13;
&#13;
        presenter.isVisbleSaved = this.savedState.isVisible;&#13;
&#13;
        for (var i = 0; i &lt; this.savedState.flags.length; i++) {&#13;
            presenter.flags[i] = this.savedState.flags[i];&#13;
        }&#13;
&#13;
        $.when(presenter.imageLoaded).then(presenter.setStateCallback);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        DOMElements.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'showLayer': presenter.showLayerCommand,&#13;
            'hideLayer': presenter.hideLayerCommand,&#13;
            'toggleLayer': presenter.toggleLayerCommand,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    function displayVisibleLayers(displayLayersWithShowAtStart) {&#13;
        presenter.diplayingLayers = true;&#13;
        for (var i = 0; i &lt; presenter.configuration.layers.length; i++) {&#13;
            var layerShouldBeDisplayed = displayLayersWithShowAtStart ? presenter.configuration.layers[i].showAtStart : presenter.flags[i];&#13;
            if(layerShouldBeDisplayed) {&#13;
                presenter.showLayer(i + 1);&#13;
            } else {&#13;
                presenter.hideLayer(i + 1);&#13;
            }&#13;
        }&#13;
        presenter.displayingLayers = false;&#13;
    }&#13;
&#13;
    presenter.showLayer = function(index) {&#13;
        if (isNaN(index) || index &lt; 1 || index &gt; presenter.configuration.layers.length) {&#13;
            return;&#13;
        }&#13;
        if (!presenter.imagesAreLoaded &amp;&amp; !presenter.diplayingLayers) {&#13;
            presenter.commandsQueue.addTask('showLayer', [index]);&#13;
            return;&#13;
        }&#13;
&#13;
        setFlag(index - 1, true);&#13;
&#13;
        var layer = DOMElements.wrapper.find('div[data-index="'+ index +'"]');&#13;
        $(layer).show();&#13;
    };&#13;
&#13;
    presenter.showLayerCommand = function (params) {&#13;
        presenter.showLayer(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    presenter.hideLayer = function(index) {&#13;
        if (isNaN(index) || index &lt; 1 || index &gt; presenter.configuration.layers.length) {&#13;
            return;&#13;
        }&#13;
        if (!presenter.imagesAreLoaded &amp;&amp; !presenter.diplayingLayers) {&#13;
            presenter.commandsQueue.addTask('hideLayer', [index]);&#13;
            return;&#13;
        }&#13;
&#13;
        setFlag(index - 1, false);&#13;
&#13;
        var layer = DOMElements.wrapper.find('div[data-index="'+ index +'"]');&#13;
        $(layer).hide();&#13;
    };&#13;
&#13;
    presenter.hideLayerCommand = function (params) {&#13;
        presenter.hideLayer(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    presenter.toggleLayer = function(index) {&#13;
        if (isNaN(index) || index &lt; 1 || index &gt; presenter.configuration.layers.length) {&#13;
            return;&#13;
        }&#13;
        if (!presenter.imagesAreLoaded &amp;&amp; !presenter.diplayingLayers) {&#13;
            presenter.commandsQueue.addTask('toggleLayer', [index]);&#13;
            return;&#13;
        }&#13;
&#13;
        if (getFlag(index - 1)) {&#13;
            this.hideLayer(index);&#13;
        } else {&#13;
            this.showLayer(index);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.toggleLayerCommand = function (params) {&#13;
        presenter.toggleLayer(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    function hideAllLayers() {&#13;
        for (var i = 1; i &lt;= presenter.configuration.layers.length; i++) {&#13;
            presenter.hideLayer(i);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.validateImage = function(image) {&#13;
        if (ModelValidationUtils.isStringEmpty(image)) return { isError: true };&#13;
&#13;
        return { isError: false, image: image };&#13;
    };&#13;
&#13;
    presenter.validateImageList = function (list) {&#13;
        var imageList = [];&#13;
&#13;
        for (var i = 0; i &lt; list.length; i++) {&#13;
            var image = list[i].Image;&#13;
            if (presenter.validateImage(image).isError) {&#13;
                return { isError: true, errorCode: "IL_01" };&#13;
            }&#13;
&#13;
            var showAtStart = presenter.showAtStart(list[i]["Show at start"]);&#13;
            imageList.push({&#13;
                image: image,&#13;
                showAtStart: showAtStart&#13;
            });&#13;
        }&#13;
&#13;
        return { isError: false, list: imageList };&#13;
    };&#13;
&#13;
    presenter.validateImageSize = function(imageSize) {&#13;
        var result;&#13;
&#13;
        switch (imageSize) {&#13;
            case "Keep aspect ratio":&#13;
                result = presenter.IMAGE_SIZE.SCALED;&#13;
                break;&#13;
            case "Stretch":&#13;
                result = presenter.IMAGE_SIZE.STRETCHED;&#13;
                break;&#13;
            default:&#13;
                result = presenter.IMAGE_SIZE.ORIGINAL;&#13;
                break;&#13;
        }&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
    presenter.showAtStart = function(value) {&#13;
        return value === "True" || value === "1";&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedBaseImage = presenter.validateImage(model["Base image"]);&#13;
        if (validatedBaseImage.isError) return { isError: true, errorCode: "BI_01" };&#13;
&#13;
        var validatedLayers = presenter.validateImageList(model.Layers);&#13;
        if (validatedLayers.isError) return { isError: true, errorCode: "L_01" };&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            baseImage: validatedBaseImage.image,&#13;
            layers: validatedLayers.list,&#13;
            imageSize: presenter.validateImageSize(model["Image size"]),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model["Is Visible"])&#13;
        };&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="LearnPen" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="LearnPen" name="SmartPen" nameLabel="LearnPen_property_smart_pen" type="boolean"/>
        <property name="Colors" nameLabel="LearnPen_property_colors" type="text"/>
        <property name="Thickness" nameLabel="LearnPen_property_thickness" type="text"/>
        <property name="Opacity" nameLabel="LearnPen_property_opacity" type="text"/>

        <property name="Squeeze limits" nameLabel="LearnPen_property_squeeze_limits" type="string"/>
        <property name="Squeeze limits interpretation" nameLabel="LearnPen_property_squeeze_limits_interpretation" type="{Separately, Together}"/>
        <property name="Pressure limits" nameLabel="LearnPen_property_pressure_limits" type="string"/>

        <property name="Events" nameLabel="LearnPen_property_events" type="list">
            <property name="Sensor" nameLabel="LearnPen_property_sensor" type="string"/>
            <property name="Reaction scope" nameLabel="LearnPen_property_reaction_scope" type="string"/>
            <property name="Item" nameLabel="LearnPen_property_item" type="string"/>
            <property name="Value" nameLabel="LearnPen_property_value" type="string"/>
            <property name="Score" nameLabel="LearnPen_property_score" type="string"/>
        </property>

        <property name="Mirror" nameLabel="LearnPen_property_mirror" type="boolean"/>
        <property name="Background color" nameLabel="LearnPen_property_background_color" type="string"/>
	</model>
<css>.addon_DrawingSmartPen .drawing .canvas {&#13;
    position: absolute;&#13;
    left: 0; right: 0;&#13;
    bottom: 0; top: 0;&#13;
&#13;
    cursor: crosshair;&#13;
}&#13;
&#13;
.addon_DrawingSmartPen .drawing .canvas:active {&#13;
    cursor: crosshair;&#13;
}&#13;
&#13;
/* https://code.google.com/p/android/issues/detail?id=35474 */&#13;
.addon_DrawingSmartPen .drawing {&#13;
    overflow: hidden;&#13;
    overflow-x: visible;&#13;
}&#13;
</css><view>&lt;div class="drawing"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="drawing"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonLearnPen_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    // work-around for double line in android browser&#13;
    function setOverflowWorkAround(turnOn) {&#13;
&#13;
        if (!MobileUtils.isAndroidWebBrowser(window.navigator.userAgent)) { return false; }&#13;
&#13;
        var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
        if (["4.1.1", "4.1.2", "4.2.2", "4.3"].indexOf(android_ver) !== -1) {&#13;
&#13;
            presenter.$view.parents("*").each(function() {&#13;
                var overflow = null;&#13;
                if (turnOn) {&#13;
                    $(this).attr("data-overflow", $(this).css("overflow"));&#13;
                    $(this).css("overflow", "visible");&#13;
                } else {&#13;
                    overflow = $(this).attr("data-overflow");&#13;
                    if (overflow !== "") {&#13;
                        $(this)[0].removeAttribute("data-overflow");&#13;
                        $(this).css("overflow", overflow);&#13;
                    }&#13;
                }&#13;
            });&#13;
&#13;
        }&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    // constant values&#13;
    var val = {&#13;
        maxThickness: 40,&#13;
        defaultThickness: 15,&#13;
        defaultColor: "rgba(0, 0, 0, 0)",&#13;
        sensors: ["SQUEEZE_A", "SQUEEZE_B", "SQUEEZE_C", "SQUEEZE_SUM", "SQUEEZE_MAX", "PRESSURE", "ALL"]&#13;
    };&#13;
&#13;
    presenter.position = {&#13;
        pre_x: 0,&#13;
        pre_y: 0,&#13;
        x: 0,&#13;
        y: 0&#13;
    };&#13;
&#13;
    presenter.drawingData = {&#13;
        isDrawingOn: true,&#13;
        pre_color: val.defaultColor,&#13;
        color: val.defaultColor,&#13;
        thickness: val.defaultThickness&#13;
    };&#13;
&#13;
    presenter.data = {&#13;
        canvas: null,&#13;
        context: null,&#13;
&#13;
        isStarted: false,&#13;
        isPencil: true,&#13;
        color: val.defaultColor,&#13;
        zoom: 1,&#13;
        lineCounter: 0,&#13;
        allPoints: [],&#13;
        pencilThickness: 0,&#13;
        eraserThickness: 0&#13;
    };&#13;
&#13;
    var eventBus;&#13;
&#13;
    function updateZoomMultiplier() {&#13;
        var zoom = $('#_icplayer').css('zoom');&#13;
        if (zoom === '' || zoom === undefined || zoom === "normal") {&#13;
            zoom = 1;&#13;
        }&#13;
        presenter.data.zoom = parseInt(zoom, 10);&#13;
    }&#13;
&#13;
    presenter.hexToRGBA = function(hex, opacity) {&#13;
        var r = parseInt(hex.substring(1,3), 16),&#13;
            g = parseInt(hex.substring(3,5), 16),&#13;
            b = parseInt(hex.substring(5,7), 16);&#13;
&#13;
        return 'rgba(' + r + ',' + g + ',' + b + ',' + opacity + ')';&#13;
    };&#13;
&#13;
    presenter.colourNameToHex = function(color) {&#13;
        var colors = {"aliceblue":"#f0f8ff","antiquewhite":"#faebd7","aqua":"#00ffff","aquamarine":"#7fffd4","azure":"#f0ffff","beige":"#f5f5dc","bisque":"#ffe4c4","black":"#000000","blanchedalmond":"#ffebcd","blue":"#0000ff","blueviolet":"#8a2be2","brown":"#a52a2a","burlywood":"#deb887","cadetblue":"#5f9ea0","chartreuse":"#7fff00","chocolate":"#d2691e","coral":"#ff7f50","cornflowerblue":"#6495ed","cornsilk":"#fff8dc","crimson":"#dc143c","cyan":"#00ffff","darkblue":"#00008b","darkcyan":"#008b8b","darkgoldenrod":"#b8860b","darkgray":"#a9a9a9","darkgreen":"#006400","darkkhaki":"#bdb76b","darkmagenta":"#8b008b","darkolivegreen":"#556b2f","darkorange":"#ff8c00","darkorchid":"#9932cc","darkred":"#8b0000","darksalmon":"#e9967a","darkseagreen":"#8fbc8f","darkslateblue":"#483d8b","darkslategray":"#2f4f4f","darkturquoise":"#00ced1","darkviolet":"#9400d3","deeppink":"#ff1493","deepskyblue":"#00bfff","dimgray":"#696969","dodgerblue":"#1e90ff","firebrick":"#b22222","floralwhite":"#fffaf0","forestgreen":"#228b22","fuchsia":"#ff00ff","gainsboro":"#dcdcdc","ghostwhite":"#f8f8ff","gold":"#ffd700","goldenrod":"#daa520","gray":"#808080","green":"#008000","greenyellow":"#adff2f","honeydew":"#f0fff0","hotpink":"#ff69b4","indianred ":"#cd5c5c","indigo ":"#4b0082","ivory":"#fffff0","khaki":"#f0e68c","lavender":"#e6e6fa","lavenderblush":"#fff0f5","lawngreen":"#7cfc00","lemonchiffon":"#fffacd","lightblue":"#add8e6","lightcoral":"#f08080","lightcyan":"#e0ffff","lightgoldenrodyellow":"#fafad2","lightgrey":"#d3d3d3","lightgreen":"#90ee90","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightseagreen":"#20b2aa","lightskyblue":"#87cefa","lightslategray":"#778899","lightsteelblue":"#b0c4de","lightyellow":"#ffffe0","lime":"#00ff00","limegreen":"#32cd32","linen":"#faf0e6","magenta":"#ff00ff","maroon":"#800000","mediumaquamarine":"#66cdaa","mediumblue":"#0000cd","mediumorchid":"#ba55d3","mediumpurple":"#9370d8","mediumseagreen":"#3cb371","mediumslateblue":"#7b68ee","mediumspringgreen":"#00fa9a","mediumturquoise":"#48d1cc","mediumvioletred":"#c71585","midnightblue":"#191970","mintcream":"#f5fffa","mistyrose":"#ffe4e1","moccasin":"#ffe4b5","navajowhite":"#ffdead","navy":"#000080","oldlace":"#fdf5e6","olive":"#808000","olivedrab":"#6b8e23","orange":"#ffa500","orangered":"#ff4500","orchid":"#da70d6","palegoldenrod":"#eee8aa","palegreen":"#98fb98","paleturquoise":"#afeeee","palevioletred":"#d87093","papayawhip":"#ffefd5","peachpuff":"#ffdab9","peru":"#cd853f","pink":"#ffc0cb","plum":"#dda0dd","powderblue":"#b0e0e6","purple":"#800080","red":"#ff0000","rosybrown":"#bc8f8f","royalblue":"#4169e1","saddlebrown":"#8b4513","salmon":"#fa8072","sandybrown":"#f4a460","seagreen":"#2e8b57","seashell":"#fff5ee","sienna":"#a0522d","silver":"#c0c0c0","skyblue":"#87ceeb","slateblue":"#6a5acd","slategray":"#708090","snow":"#fffafa","springgreen":"#00ff7f","steelblue":"#4682b4","tan":"#d2b48c","teal":"#008080","thistle":"#d8bfd8","tomato":"#ff6347","turquoise":"#40e0d0","violet":"#ee82ee","wheat":"#f5deb3","white":"#ffffff","whitesmoke":"#f5f5f5","yellow":"#ffff00","yellowgreen":"#9acd32"};&#13;
&#13;
        if (typeof colors[color.toLowerCase()] !== 'undefined') {&#13;
            return colors[color.toLowerCase()];&#13;
        }&#13;
        return false;&#13;
    };&#13;
&#13;
    function eventCreator(a, b, c, p) {&#13;
        function sendSensorEvent(eventData, smartPenValue) {&#13;
            if (eventData.reactionScope[0] &lt;= smartPenValue &amp;&amp; smartPenValue &lt;= eventData.reactionScope[1]) {&#13;
                eventBus.sendEvent('ItemReturned', {&#13;
                    'source': presenter.configuration.id,&#13;
                    'item': eventData.item,&#13;
                    'value': eventData.value,&#13;
                    'score': eventData.score&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        var eventsArray = presenter.configuration.events;&#13;
        for (var i=0; i&lt;eventsArray.length; i++) {&#13;
            switch(eventsArray[i].sensor) {&#13;
                case "SQUEEZE_A": sendSensorEvent(eventsArray[i], a); break;&#13;
                case "SQUEEZE_B": sendSensorEvent(eventsArray[i], b); break;&#13;
                case "SQUEEZE_C": sendSensorEvent(eventsArray[i], c); break;&#13;
                case "SQUEEZE_SUM": sendSensorEvent(eventsArray[i], ((a+b+c)/3)); break;&#13;
                case "SQUEEZE_MAX": sendSensorEvent(eventsArray[i], Math.max(a,b,c)); break;&#13;
                case "PRESSURE": sendSensorEvent(eventsArray[i], p); break;&#13;
                case "ALL": sendSensorEvent(eventsArray[i], ((a+b+c+p)/4)); break;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function areLimitsOk(a, b, c, p) {&#13;
        var isPressureOK = presenter.configuration.pressureLimits[0] &lt;= p &amp;&amp; p &lt;= presenter.configuration.pressureLimits[1];&#13;
&#13;
        if (presenter.configuration.squeezeLimitsInterpretation === "TOGETHER") {&#13;
            var sum = a + b + c;&#13;
            var isSqueezeOK = (presenter.configuration.squeezeLimits[0] * 3) &lt;= sum &amp;&amp; sum &lt;= (presenter.configuration.squeezeLimits[1] * 3);&#13;
&#13;
            return isPressureOK &amp;&amp; isSqueezeOK;&#13;
        } else if (presenter.configuration.squeezeLimitsInterpretation === "SEPARATELY") {&#13;
            var isSqueezeAOK = presenter.configuration.squeezeLimits[0] &lt;= a &amp;&amp; a &lt;= presenter.configuration.squeezeLimits[1];&#13;
            var isSqueezeBOK = presenter.configuration.squeezeLimits[0] &lt;= b &amp;&amp; b &lt;= presenter.configuration.squeezeLimits[1];&#13;
            var isSqueezeCOK = presenter.configuration.squeezeLimits[0] &lt;= c &amp;&amp; c &lt;= presenter.configuration.squeezeLimits[1];&#13;
&#13;
            return isSqueezeAOK &amp;&amp; isSqueezeBOK &amp;&amp; isSqueezeCOK &amp;&amp; isPressureOK;&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    presenter.calculateValue = function(v, collection, defaultVal) {&#13;
        var result = defaultVal;&#13;
        for (var i=0; i&lt;collection.length; i++) {&#13;
            if (collection[i][0] &gt;= v) {&#13;
                result = collection[i][1];&#13;
                break;&#13;
            }&#13;
        }&#13;
        return result;&#13;
    };&#13;
&#13;
    function getValue(a, b, c, p, collection, defaultValue) {&#13;
        switch(collection.sensor) {&#13;
            case "SQUEEZE_A": return presenter.calculateValue(a, collection.values, defaultValue);&#13;
            case "SQUEEZE_B": return presenter.calculateValue(b, collection.values, defaultValue);&#13;
            case "SQUEEZE_C": return presenter.calculateValue(c, collection.values, defaultValue);&#13;
            case "SQUEEZE_SUM": return presenter.calculateValue(parseInt((a + b + c) / 3, 10), collection.values, defaultValue);&#13;
            case "SQUEEZE_MAX": return presenter.calculateValue(Math.max(a, b, c), collection.values, defaultValue);&#13;
            case "PRESSURE": return presenter.calculateValue(p, collection.values, defaultValue);&#13;
            case "ALL": return presenter.calculateValue(parseInt((a + b + c + p)/ 3, 10), collection.values, defaultValue);&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    function getColor(a, b, c, p) {&#13;
        return getValue(a, b, c, p, presenter.configuration.colors, "#000000");&#13;
    }&#13;
&#13;
    function getOpacity(a, b, c, p) {&#13;
        return getValue(a, b, c, p, presenter.configuration.opacity, 1);&#13;
    }&#13;
&#13;
    function getThickness(a, b, c, p) {&#13;
        return getValue(a, b, c, p, presenter.configuration.thickness, val.defaultThickness);&#13;
    }&#13;
&#13;
    function updateDrawingData(e) {&#13;
        var a, b, c, p;&#13;
        if (presenter.configuration.isSmartPen) {&#13;
            if (window.LearnPen === undefined) {&#13;
                presenter.drawingData.isDrawingOn = true;&#13;
                presenter.drawingData.pre_color = presenter.drawingData.color = "black";&#13;
                presenter.drawingData.thickness = 1;&#13;
            } else {&#13;
                a = parseInt(window.LearnPen.getA() / 10, 10);&#13;
                b = parseInt(window.LearnPen.getB() / 10, 10);&#13;
                c = parseInt(window.LearnPen.getC() / 10, 10);&#13;
                p = parseInt(window.LearnPen.getP() / 10, 10);&#13;
&#13;
                eventCreator(a, b, c, p);&#13;
&#13;
                if (areLimitsOk(a, b, c, p)) {&#13;
                    presenter.drawingData.isDrawingOn = true;&#13;
                    presenter.drawingData.pre_color = presenter.drawingData.color;&#13;
                    presenter.drawingData.color = presenter.hexToRGBA(getColor(a, b, c, p), getOpacity(a, b, c, p));&#13;
                    presenter.drawingData.thickness = getThickness(a, b, c, p);&#13;
                } else {&#13;
                    presenter.drawingData.isDrawingOn = false;&#13;
                    presenter.noDraw = true;&#13;
                }&#13;
            }&#13;
        } else {&#13;
            presenter.drawingData.pre_color = presenter.drawingData.color;&#13;
            if (presenter.data.isPencil) {&#13;
                presenter.drawingData.color = presenter.hexToRGBA(presenter.data.color, presenter.configuration.opacity);&#13;
            }&#13;
            presenter.drawingData.thickness = presenter.data.isPencil ? presenter.data.pencilThickness : presenter.data.eraserThickness;&#13;
        }&#13;
&#13;
        presenter.position.pre_x = presenter.position.x;&#13;
        presenter.position.pre_y = presenter.position.y;&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            presenter.position.x = parseInt(event.changedTouches[0].pageX - $(presenter.data.canvas).offset().left, 10);&#13;
            presenter.position.y = parseInt(event.changedTouches[0].pageY - $(presenter.data.canvas).offset().top, 10);&#13;
        } else {&#13;
            presenter.position.x = parseInt((e.pageX - presenter.data.canvas.offset().left) / presenter.data.zoom, 10);&#13;
            presenter.position.y = parseInt((e.pageY - presenter.data.canvas.offset().top) / presenter.data.zoom, 10);&#13;
        }&#13;
    }&#13;
&#13;
    function resizeCanvas() {&#13;
        var con = presenter.$view.find('.drawing').parent();&#13;
        presenter.data.canvas[0].width = con.width() - 2;&#13;
        presenter.data.canvas[0].height = con.height();&#13;
    }&#13;
&#13;
    function fillCanvasWithColor() {&#13;
        if (presenter.configuration.backgroundColor !== "NO_BG") {&#13;
            presenter.data.context.fillStyle = presenter.configuration.backgroundColor;&#13;
            presenter.data.context.fillRect(0, 0, presenter.data.canvas[0].width, presenter.data.canvas[0].height);&#13;
        }&#13;
    }&#13;
&#13;
    function drawVerticalLineIfIsMirror() {&#13;
        if (presenter.configuration.isMirror) {&#13;
            var w = presenter.data.canvas[0].width;&#13;
&#13;
            presenter.data.context.beginPath();&#13;
            presenter.data.context.moveTo(w / 2, 0);&#13;
            presenter.data.context.lineTo(w / 2, presenter.data.canvas[0].height);&#13;
&#13;
            presenter.data.context.lineWidth = presenter.configuration.border;&#13;
            presenter.data.context.strokeStyle = 'black';&#13;
            presenter.data.context.stroke();&#13;
        }&#13;
    }&#13;
&#13;
    function createCanvas(isPreview) {&#13;
        presenter.data.isPencil = true;&#13;
        presenter.data.pencilThickness = presenter.configuration.thickness;&#13;
&#13;
        presenter.$view.find('.drawing').append("&lt;canvas class='canv'&gt;Canvas is not supported by your browser&lt;/canvas&gt;");&#13;
&#13;
        presenter.data.canvas = presenter.$view.find('canvas');&#13;
        presenter.data.context = presenter.data.canvas[0].getContext("2d");&#13;
&#13;
        presenter.$view.find('.drawing').css('opacity', presenter.configuration.opacity);&#13;
        resizeCanvas();&#13;
&#13;
        fillCanvasWithColor();&#13;
        drawVerticalLineIfIsMirror();&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.turnOnEventListeners();&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    }&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isValid: false, errorCode: errorCode };&#13;
    }&#13;
&#13;
    function returnCorrectObject(v) {&#13;
        return { isValid: true, value: v };&#13;
    }&#13;
&#13;
    presenter.SQ_LIMITS_INTERPRETATION = {&#13;
        'Separately': 'SEPARATELY',&#13;
        'Together': 'TOGETHER',&#13;
        DEFAULT: 'Separately'&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        F01: "Value range has to be between 0 and 100%",&#13;
        F02: "Range values has to be ascending",&#13;
&#13;
        S01: "Value sensor cannot be empty",&#13;
        S02: "Wrong sensor name",&#13;
&#13;
        C01: "Property colors cannot be empty",&#13;
        C02: "One of the value in property colors has wrong length in hex format, should be # and 6 digits [0 - F]",&#13;
        C03: "One of the value in property color has wrong color name",&#13;
&#13;
        T01: "Property thickness cannot be empty when SmartPen is on",&#13;
        T02: "Property thickness cannot be smaller than 1 and bigger then " + val.maxThickness,&#13;
&#13;
        O02: "Property opacity cannot be smaller than 0 and bigger than 1",&#13;
&#13;
        SQL01: "Wrong amount of values in property squeeze limits",&#13;
        SQL02: "Values in property squeeze limits must be numeric",&#13;
        SQL03: "2nd value in property squeeze limits cannot be smaller than 1st",&#13;
        SQL04: "Values in property squeeze limits cannot be smaller than 0",&#13;
        SQL05: "Values in property squeeze limits cannot be bigger than 100",&#13;
&#13;
        PL01: "Wrong amount of numbers in property pressure limits",&#13;
        PL02: "Values in Property pressure limits must be numeric",&#13;
        PL03: "2nd value in property pressure limits cannot be smaller than 1st",&#13;
        PL04: "Values in property pressure limits cannot be smaller than 0",&#13;
        PL05: "Values in property pressure limits cannot be bigger than 100",&#13;
&#13;
        E01: "Value in property Events cannot be different then 0 or 1",&#13;
        E02: "Score in property Events cannot be different then 0 or 1",&#13;
&#13;
        RS02: "Wrong amount of numbers in Reaction scope in Events property",&#13;
        RS03: "Values in Reaction scope in Events property must be numeric",&#13;
        RS04: "2nd value in Reaction scope in Events property cannot be smaller than 1st",&#13;
        RS05: "Values in Reaction scope in Events property cannot be smaller than 0",&#13;
        RS06: "Values in Reaction scope in Events property cannot be bigger than 100",&#13;
&#13;
        B02: "Property border cannot be smaller than 0",&#13;
        B03: "Property border cannot be bigger than 5"&#13;
    };&#13;
&#13;
    function addPointsToHistory(x, y) {&#13;
        presenter.data.allPoints.push({x: x, y: y});&#13;
    }&#13;
&#13;
    function sendEvent() {&#13;
        function round(num, x) {&#13;
            x = Math.pow(10, x);&#13;
            return Math.round(num * x) / x;&#13;
        }&#13;
&#13;
        var distance = 0;&#13;
&#13;
        for (var i = 0; i &lt; presenter.data.allPoints.length-1; i++) {&#13;
            distance += Math.sqrt(Math.pow(presenter.data.allPoints[i].x - presenter.data.allPoints[i+1].x, 2) + Math.pow(presenter.data.allPoints[i].y - presenter.data.allPoints[i+1].y, 2));&#13;
        }&#13;
&#13;
        if (presenter.data.allPoints.length !== 0) {&#13;
            eventBus.sendEvent('ItemReturned', {&#13;
                'source': presenter.configuration.id,&#13;
                'item': presenter.data.lineCounter++,&#13;
                'value': round(distance, 2),&#13;
                'score': presenter.mouseleave || presenter.noDraw ? '0' : '1'&#13;
            });&#13;
        }&#13;
&#13;
        presenter.data.allPoints = [];&#13;
    }&#13;
&#13;
    presenter.turnOnEventListeners = function() {&#13;
        var canvas = presenter.data.canvas,&#13;
            ctx = presenter.data.context,&#13;
            isDown = false;&#13;
&#13;
        ctx.lineJoin = 'round';&#13;
        ctx.lineCap = 'round';&#13;
&#13;
        // TOUCH events&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            canvas.on('touchend', function() {&#13;
                canvas.off('touchmove', presenter.onPainting);&#13;
                sendEvent();&#13;
                setOverflowWorkAround(false);&#13;
            });&#13;
&#13;
            canvas.on('touchstart', function(e) {&#13;
                presenter.data.isStarted = true;&#13;
                presenter.noDraw = false;&#13;
&#13;
                updateZoomMultiplier();&#13;
                presenter.drawPoint();&#13;
                canvas.on('touchmove', presenter.onPainting);&#13;
                setOverflowWorkAround(true);&#13;
            });&#13;
        } else { // MOUSE events&#13;
            canvas.on('mouseup', function() {&#13;
                canvas.off('mousemove', presenter.onPainting);&#13;
&#13;
                sendEvent();&#13;
                isDown = false;&#13;
                presenter.mouseleave = false;&#13;
                setOverflowWorkAround(false);&#13;
            });&#13;
&#13;
            canvas.on('mouseleave', function() {&#13;
                canvas.off('mousemove', presenter.onPainting);&#13;
&#13;
                if(isDown) {&#13;
                    sendEvent();&#13;
                    isDown = false;&#13;
                    presenter.mouseleave = true;&#13;
                }&#13;
                setOverflowWorkAround(false);&#13;
            });&#13;
&#13;
            canvas.on('mousedown', function(e) {&#13;
                //updateDrawingData(e);&#13;
                presenter.data.isStarted = true;&#13;
                presenter.noDraw = false;&#13;
                isDown = true;&#13;
&#13;
                updateZoomMultiplier();&#13;
                presenter.drawPoint(e);&#13;
&#13;
                canvas.on('mousemove', presenter.onPainting);&#13;
                setOverflowWorkAround(true);&#13;
            });&#13;
        }&#13;
&#13;
        function createGradient(pre_x, pre_y, x, y) {&#13;
            var grad = presenter.data.context.createLinearGradient(pre_x, pre_y, x, y);&#13;
&#13;
            grad.addColorStop(0, presenter.data.isPencil ? presenter.drawingData.pre_color : "rgba(0,0,0,1)");&#13;
            grad.addColorStop(1, presenter.data.isPencil ? presenter.drawingData.color : "rgba(0,0,0,1)");&#13;
&#13;
            return grad;&#13;
        }&#13;
&#13;
        presenter.onPainting = function(e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
            updateDrawingData(e);&#13;
&#13;
            if (presenter.drawingData.isDrawingOn) {&#13;
                updateZoomMultiplier();&#13;
                addPointsToHistory(presenter.position.x, presenter.position.y);&#13;
                ctx.lineWidth = presenter.drawingData.thickness;&#13;
&#13;
                ctx.beginPath();&#13;
                ctx.moveTo(presenter.position.pre_x, presenter.position.pre_y);&#13;
                ctx.lineTo(presenter.position.x, presenter.position.y);&#13;
                ctx.strokeStyle = createGradient(presenter.position.pre_x, presenter.position.pre_y, presenter.position.x, presenter.position.y);&#13;
                ctx.stroke();&#13;
&#13;
                if (presenter.configuration.isMirror) {&#13;
                    var w = presenter.data.canvas[0].width - presenter.position.x;&#13;
                    var pre_w = presenter.data.canvas[0].width - presenter.position.pre_x;&#13;
&#13;
                    ctx.beginPath();&#13;
                    ctx.moveTo(pre_w, presenter.position.pre_y);&#13;
                    ctx.lineTo(w, presenter.position.y);&#13;
                    ctx.strokeStyle = createGradient(pre_w, presenter.position.pre_y, w, presenter.position.y);&#13;
                    ctx.stroke();&#13;
                }&#13;
            }&#13;
        };&#13;
&#13;
        presenter.drawPoint = function(e) {&#13;
            updateDrawingData(e);&#13;
&#13;
            if (presenter.drawingData.isDrawingOn) {&#13;
                ctx.lineWidth = presenter.drawingData.thickness;&#13;
&#13;
                ctx.beginPath();&#13;
                ctx.moveTo(presenter.position.x, presenter.position.y);&#13;
                ctx.lineTo(presenter.position.x+1, presenter.position.y);&#13;
                ctx.strokeStyle = createGradient(presenter.position.x, presenter.position.y, presenter.position.x+1, presenter.position.y);&#13;
                ctx.stroke();&#13;
&#13;
                if (presenter.configuration.isMirror) {&#13;
                    var w = presenter.data.canvas[0].width - presenter.position.x;&#13;
&#13;
                    ctx.beginPath();&#13;
                    ctx.moveTo(w, presenter.position.y);&#13;
                    ctx.lineTo(w, presenter.position.y+1);&#13;
                    ctx.strokeStyle = createGradient(w+1, presenter.position.y, w, presenter.position.y);&#13;
                    ctx.stroke();&#13;
                }&#13;
            }&#13;
        };&#13;
&#13;
        canvas.on("click", function() {&#13;
            event.stopPropagation();&#13;
        });&#13;
    };&#13;
&#13;
    function prepareFunctionsValues(fun) {&#13;
        fun = Helpers.splitLines(fun);&#13;
        var sensor = fun[0].toUpperCase();&#13;
        var parsedValues = [];&#13;
&#13;
        if (val.sensors.indexOf(sensor) === -1) {&#13;
            return returnErrorObject("S02");&#13;
        }&#13;
&#13;
        var values = fun.slice(1);&#13;
&#13;
        var previousNumber = 0;&#13;
        for (var i=0; i&lt;values.length; i++) {&#13;
            var tmp = values[i].split("%");&#13;
            var number = parseInt(tmp[0].trim(), 10);&#13;
&#13;
            if (number &lt; 0 || number &gt; 100) {&#13;
                return returnErrorObject("F01");&#13;
            }&#13;
&#13;
            if (previousNumber &gt;= number) {&#13;
                return returnErrorObject("F02")&#13;
            }&#13;
&#13;
            parsedValues.push([number, tmp[1].trim()]);&#13;
            previousNumber = number;&#13;
        }&#13;
&#13;
        return returnCorrectObject({&#13;
            sensor: sensor,&#13;
            values: parsedValues&#13;
        });&#13;
    }&#13;
&#13;
    presenter.parseColors = function(colors, isLearnPen) {&#13;
        function checkColor(colors) {&#13;
            if (colors[0] === '#' &amp;&amp; !(colors.length === 7 || colors.length === 4)) {&#13;
                return returnErrorObject("C02");&#13;
            }&#13;
&#13;
            if (colors[0] !== '#') {&#13;
                colors = presenter.colourNameToHex(colors);&#13;
&#13;
                if (!colors) {&#13;
                    return returnErrorObject("C03");&#13;
                }&#13;
            }&#13;
&#13;
            return returnCorrectObject(colors);&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(colors)) {&#13;
            return returnErrorObject("C01");&#13;
        }&#13;
&#13;
        if (isLearnPen) {&#13;
&#13;
            var parsedFunction = prepareFunctionsValues(colors);&#13;
            if (!parsedFunction.isValid) {&#13;
                return returnErrorObject(parsedFunction.errorCode);&#13;
            }&#13;
&#13;
            for (var i=0; i&lt;parsedFunction.value.values.length; i++) {&#13;
                var localColor = parsedFunction.value.values[i][1];&#13;
                var checked = checkColor(localColor);&#13;
                if (!checked.isValid) {&#13;
                    return returnErrorObject(checked.errorCode);&#13;
                }&#13;
                parsedFunction.value.values[i][1] = checked.value;&#13;
            }&#13;
&#13;
            return returnCorrectObject({&#13;
                sensor: parsedFunction.value.sensor,&#13;
                values: parsedFunction.value.values&#13;
            });&#13;
        } else {&#13;
            return checkColor(colors);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.parseThickness = function(thickness, isSmartPen) {&#13;
        if (ModelValidationUtils.isStringEmpty(thickness)) {&#13;
            return isSmartPen ? returnErrorObject("T01") : returnCorrectObject(val.defaultThickness);&#13;
        }&#13;
&#13;
        if (isSmartPen) {&#13;
            var parsedFunction = prepareFunctionsValues(thickness);&#13;
            if (!parsedFunction.isValid) {&#13;
                return returnErrorObject(parsedFunction.errorCode);&#13;
            }&#13;
&#13;
            for (var i=0; i&lt;parsedFunction.value.values.length; i++) {&#13;
                var localThickness = parsedFunction.value.values[i][1];&#13;
                if (1 &gt; localThickness || localThickness &gt; val.maxThickness) {&#13;
                    return returnErrorObject("T02");&#13;
                }&#13;
            }&#13;
&#13;
            return returnCorrectObject({&#13;
                sensor: parsedFunction.value.sensor,&#13;
                values: parsedFunction.value.values //.map(function(a) { return [a[0], parseInt(a[1], 10)]; }) // parse 2nd value to integer&#13;
            });&#13;
        } else {&#13;
            thickness = parseInt(thickness, 10);&#13;
            if (1 &gt; thickness || thickness &gt; val.maxThickness) {&#13;
                return returnErrorObject("T02");&#13;
            }&#13;
            return returnCorrectObject(thickness);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.parseOpacity = function(opacity, isSmartPen) {&#13;
        if (ModelValidationUtils.isStringEmpty(opacity)) {&#13;
            return returnCorrectObject(isSmartPen ? { sensor: "ALL", values: [[100, 1]] } : 1);&#13;
        }&#13;
&#13;
        if (isSmartPen) {&#13;
            var parsedFunction = prepareFunctionsValues(opacity);&#13;
            if (!parsedFunction.isValid) {&#13;
                return returnErrorObject(parsedFunction.errorCode);&#13;
            }&#13;
&#13;
            for (var i=0; i&lt;parsedFunction.value.values.length; i++) {&#13;
                var localOpacity = parsedFunction.value.values[i][1];&#13;
                if (0 &gt; localOpacity || localOpacity &gt; 1) {&#13;
                    return returnErrorObject("O02");&#13;
                }&#13;
            }&#13;
&#13;
            return returnCorrectObject({&#13;
                sensor: parsedFunction.value.sensor,&#13;
                values: parsedFunction.value.values.map(function(a) { return [a[0], parseFloat(a[1])]; }) // parse 2nd value to float&#13;
            });&#13;
        } else {&#13;
            if (0 &gt; opacity || opacity &gt; 1) {&#13;
                return returnErrorObject("O02");&#13;
            }&#13;
&#13;
            return returnCorrectObject(opacity);&#13;
        }&#13;
    };&#13;
&#13;
    function parseRange(range, code) {&#13;
        function isNumber(n) {&#13;
            return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(range)) {&#13;
            return returnCorrectObject([0, 100]);&#13;
        }&#13;
&#13;
        range = range.split(';').map($.trim).map(parseFloat);&#13;
        range = range.length === 1 ? [0].concat(range) : range;&#13;
&#13;
        if (range.length !== 2) {&#13;
            return returnErrorObject(code + '01');&#13;
        }&#13;
&#13;
        if (!isNumber(range[0]) || !isNumber(range[1])) {&#13;
            return returnErrorObject(code + '02');&#13;
        }&#13;
&#13;
        if (range[0] &gt;= range[1]) {&#13;
            return returnErrorObject(code + '03');&#13;
        }&#13;
&#13;
        if (range[0] &lt; 0 || range[1] &lt; 0) {&#13;
            return returnErrorObject(code + '04');&#13;
        }&#13;
&#13;
        if (range[0] &gt; 100 || range[1] &gt; 100) {&#13;
            return returnErrorObject(code + '05');&#13;
        }&#13;
&#13;
        return returnCorrectObject(range);&#13;
    }&#13;
&#13;
    presenter.parseSqueeze = function(crush) {&#13;
        return parseRange(crush, 'SQL');&#13;
    };&#13;
&#13;
    presenter.parsePressure = function(pressure) {&#13;
        return parseRange(pressure, 'PL');&#13;
    };&#13;
&#13;
    presenter.parseEvents = function(events) {&#13;
        function isEventEmpty(eventData) {&#13;
            return ModelValidationUtils.isStringEmpty(eventData["Sensor"]) &amp;&amp;&#13;
                ModelValidationUtils.isStringEmpty(eventData["Reaction scope"]) &amp;&amp;&#13;
                ModelValidationUtils.isStringEmpty(eventData["Item"]) &amp;&amp;&#13;
                ModelValidationUtils.isStringEmpty(eventData["Value"]) &amp;&amp;&#13;
                ModelValidationUtils.isStringEmpty(eventData["Score"]);&#13;
        }&#13;
&#13;
        if (isEventEmpty(events[0])) {&#13;
            return returnCorrectObject([]);&#13;
        }&#13;
&#13;
        var eventsArray = [];&#13;
&#13;
        for (var i=0; i&lt;events.length; i++) {&#13;
            var sensor = events[i]["Sensor"];&#13;
            if (ModelValidationUtils.isStringEmpty(sensor)) {&#13;
                return returnErrorObject("S01");&#13;
            }&#13;
            if (val.sensors.indexOf(sensor) === -1) {&#13;
                return returnErrorObject("S02");&#13;
            }&#13;
&#13;
            var reactionScope = events[i]["Reaction scope"];&#13;
            var parsedReactionScope = parseRange(reactionScope, "RS");&#13;
            if (!parsedReactionScope.isValid) {&#13;
                return returnErrorObject(parsedReactionScope.errorCode);&#13;
            }&#13;
&#13;
            var value = events[i]["Value"];&#13;
            if (value !== '1' &amp;&amp; value !== '0') {&#13;
                return returnErrorObject("E01");&#13;
            }&#13;
&#13;
            var score = events[i]["Score"];&#13;
            if (score !== '1' &amp;&amp; score !== '0') {&#13;
                return returnErrorObject("E02");&#13;
            }&#13;
&#13;
            eventsArray.push({&#13;
                sensor: sensor,&#13;
                reactionScope: parsedReactionScope.value,&#13;
                item: events[i]["Item"],&#13;
                value: value,&#13;
                score: score&#13;
            });&#13;
        }&#13;
&#13;
        return returnCorrectObject(eventsArray);&#13;
    };&#13;
&#13;
    presenter.parseBGColor = function(color) {&#13;
        if (ModelValidationUtils.isStringEmpty(color)) {&#13;
            return returnCorrectObject("NO_BG");&#13;
        }&#13;
&#13;
        if (color[0] === '#' &amp;&amp; !(color.length === 7)) {&#13;
            return returnErrorObject('C02');&#13;
        }&#13;
&#13;
        if (color[0] !== '#') {&#13;
            color = presenter.colourNameToHex(color);&#13;
&#13;
            if (!color) {&#13;
                return returnErrorObject('C03');&#13;
            }&#13;
        }&#13;
&#13;
        return returnCorrectObject(color);&#13;
    };&#13;
&#13;
    presenter.parseBorder = function(border) {&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(border)) {&#13;
            return returnCorrectObject(0);&#13;
        }&#13;
&#13;
        if (border &lt; 0) {&#13;
            return returnErrorObject('B02');&#13;
        }&#13;
&#13;
        if (border &gt; 5) {&#13;
            return returnErrorObject('B03');&#13;
        }&#13;
&#13;
        return returnCorrectObject(border);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var isSmartPen = ModelValidationUtils.validateBoolean(model["SmartPen"]);&#13;
&#13;
        var parsedColors = presenter.parseColors(model["Colors"], isSmartPen);&#13;
        if (!parsedColors.isValid) {&#13;
            return returnErrorObject(parsedColors.errorCode);&#13;
        }&#13;
&#13;
        var parsedThickness = presenter.parseThickness(model["Thickness"], isSmartPen);&#13;
        if (!parsedThickness.isValid) {&#13;
            return returnErrorObject(parsedThickness.errorCode);&#13;
        }&#13;
&#13;
        var parsedOpacity = presenter.parseOpacity(model["Opacity"], isSmartPen);&#13;
        if (!parsedOpacity.isValid) {&#13;
            return returnErrorObject(parsedOpacity.errorCode);&#13;
        }&#13;
&#13;
        var parsedSqueeze = presenter.parseSqueeze(model["Squeeze limits"]);&#13;
        if (!parsedSqueeze.isValid) {&#13;
            return returnErrorObject(parsedSqueeze.errorCode);&#13;
        }&#13;
&#13;
        var parsedPressure = presenter.parsePressure(model["Pressure limits"]);&#13;
        if (!parsedPressure.isValid) {&#13;
            return returnErrorObject(parsedPressure.errorCode);&#13;
        }&#13;
&#13;
        var parsedEvent = presenter.parseEvents(model["Events"]);&#13;
        if (!parsedEvent.isValid) {&#13;
            return returnErrorObject(parsedEvent.errorCode);&#13;
        }&#13;
&#13;
        var parsedBGColor = presenter.parseBGColor(model["Background color"]);&#13;
        if (!parsedBGColor.isValid) {&#13;
            return returnErrorObject(parsedBGColor.errorCode);&#13;
        }&#13;
&#13;
        return {&#13;
            isSmartPen: isSmartPen,&#13;
            colors: parsedColors.value, // if (isSmartPen) {sensor: String, values: [Integer, Hex color] } else String (hex color)&#13;
            thickness: parsedThickness.value, // if (isSmartPen) {sensor: String, thicknesses: [Integer, Integer] } else Integer&#13;
            opacity: parsedOpacity.value, // if (isSmartPen) {sensor: String, opacity: [Integer, Float] } else Float&#13;
            squeezeLimits: parsedSqueeze.value,&#13;
            squeezeLimitsInterpretation: ModelValidationUtils.validateOption(presenter.SQ_LIMITS_INTERPRETATION, model["Squeeze limits interpretation"]),&#13;
            pressureLimits: parsedPressure.value,&#13;
            events: parsedEvent.value,&#13;
            isMirror: ModelValidationUtils.validateBoolean(model["Mirror"]),&#13;
            backgroundColor: parsedBGColor.value,&#13;
&#13;
            width: model["Width"],&#13;
            height: model["Height"],&#13;
            id: model["ID"],&#13;
            isValid: true,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return false;&#13;
        }&#13;
&#13;
        if (!presenter.configuration.isSmartPen) presenter.data.color = presenter.configuration.colors;&#13;
        presenter.data.pencilThickness = presenter.configuration.thickness;&#13;
        presenter.data.eraserThickness = presenter.configuration.thickness;&#13;
&#13;
        createCanvas(isPreview);&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (!presenter.configuration.isValid) {&#13;
            return false;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
//    presenter.setShowErrorsMode = function() {};&#13;
//    presenter.setWorkMode = function() {};&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.$view.find('.canv').remove();&#13;
        createCanvas(false);&#13;
&#13;
        presenter.data.isStarted = false;&#13;
        presenter.data.lineCounter = 0;&#13;
    };&#13;
&#13;
//     presenter.getErrorCount = function() {};&#13;
//     presenter.getMaxScore = function() {};&#13;
//     presenter.getScore = function() {};&#13;
&#13;
    presenter.getState = function() {&#13;
        if (!presenter.data.isStarted) {&#13;
            return;&#13;
        }&#13;
&#13;
        var c = presenter.$view.find("canvas")[0];&#13;
&#13;
        return JSON.stringify({&#13;
            isPencil: presenter.data.isPencil,&#13;
            color: presenter.data.color,&#13;
            pencilThickness: presenter.data.pencilThickness,&#13;
            eraserThickness: presenter.data.eraserThickness,&#13;
            data: c.toDataURL("image/png"),&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var savedImg = new Image();&#13;
&#13;
        savedImg.onload = function() {&#13;
            presenter.data.context.drawImage(savedImg, 0, 0);&#13;
&#13;
            presenter.data.pencilThickness = JSON.parse(state).pencilThickness;&#13;
            presenter.data.eraserThickness = JSON.parse(state).eraserThickness;&#13;
            presenter.configuration.isVisible = JSON.parse(state).isVisible;&#13;
            presenter.data.isPencil = JSON.parse(state).isPencil;&#13;
            presenter.data.isStarted = true;&#13;
&#13;
            if (!presenter.configuration.isSmartPen) {&#13;
                if (presenter.data.isPencil) {&#13;
                    presenter.setColor(JSON.parse(state).color);&#13;
                } else {&#13;
                    presenter.setEraserOn();&#13;
                }&#13;
            }&#13;
        };&#13;
        savedImg.src = JSON.parse(state).data;&#13;
    };&#13;
&#13;
    presenter.setColor = function(color) {&#13;
        if (!presenter.configuration.isSmartPen) {&#13;
            presenter.data.isPencil = true;&#13;
            presenter.data.context.globalCompositeOperation = "source-over";&#13;
            presenter.data.color = presenter.parseColors(color, false).value;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setThickness = function(thickness) {&#13;
        if (!presenter.configuration.isSmartPen) {&#13;
            if (presenter.data.isPencil) {&#13;
                presenter.data.pencilThickness = thickness;&#13;
            } else {&#13;
                presenter.data.eraserThickness = thickness;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setEraserOn = function() {&#13;
        if (!presenter.configuration.isSmartPen) {&#13;
            presenter.data.isPencil = false;&#13;
            presenter.data.context.globalCompositeOperation = "destination-out";&#13;
            presenter.configuration.color = "rgba(255, 255, 255, 1)";&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isLearnPenConnected = function() {&#13;
        return window.LearnPen !== undefined&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="LearnPen_Data" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="isDisable" nameLabel="LearnPen_Data_property_is_disable" type="boolean"/>
        <property name="stepsAndColors" nameLabel="LearnPen_Data_property_colors_and_steps" type="text"/>
        <property name="refreshTime" nameLabel="LearnPen_Data_property_refresh_time" type="string"/>
    </model>
<css>.row {&#13;
    height: 25%;&#13;
    width: 100%;&#13;
}&#13;
&#13;
.sensor-a, .sensor-b, .sensor-c {&#13;
    margin-bottom: 5%;&#13;
    height: 15%;&#13;
}&#13;
&#13;
.sensor-p {&#13;
    height: 20%;&#13;
}&#13;
&#13;
.box {&#13;
    -webkit-box-sizing: border-box;&#13;
    -moz-box-sizing: border-box;&#13;
    box-sizing: border-box;&#13;
&#13;
    float: left;&#13;
&#13;
    border: 1px solid white;&#13;
&#13;
    width: 8.3%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.on-mode {&#13;
    opacity: 1;&#13;
}&#13;
</css><view>&lt;div class="sensor-a"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-b"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-c"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-p"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="sensor-a"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-b"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-c"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-p"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonLearnPen_Data_create() {&#13;
&#13;
    function getErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
    function getCorrectObject(val) { return { isValid: true, value: val }; }&#13;
    function getStep(col, val) { return { color: col, value: val }; }&#13;
&#13;
    Number.prototype.half = Number.prototype.half || function() {&#13;
        return Math.round(this / 2);&#13;
    };&#13;
&#13;
    var DATA_LENGTH = 12;&#13;
    var ON_MODE_CLASS = 'on-mode';&#13;
&#13;
    var isIntervalOn = false;&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    function recording(on) {&#13;
        if (on) {&#13;
            if (!isIntervalOn) {&#13;
                presenter.intervalId = setInterval(updateDataOnGraph, presenter.configuration.refreshTime);&#13;
            }&#13;
        } else {&#13;
            if (isIntervalOn) {&#13;
                clearInterval(presenter.intervalId);&#13;
            }&#13;
        }&#13;
        isIntervalOn = on;&#13;
    }&#13;
&#13;
    function setVisibility(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    }&#13;
&#13;
    function getCurrentDataFromSensor() {&#13;
        function toPercent(val) { return Math.round(val / 1024 * 100); }&#13;
        var learnPenData = window.LearnPen;&#13;
&#13;
        return {&#13;
            a: learnPenData ? toPercent(learnPenData.getA()) : 0, // Math.round(Math.floor(Math.random() * 100)),&#13;
            b: learnPenData ? toPercent(learnPenData.getB()) : 0, // Math.round(Math.floor(Math.random() * 100)),&#13;
            c: learnPenData ? toPercent(learnPenData.getC()) : 0, // Math.round(Math.floor(Math.random() * 100)),&#13;
            p: learnPenData ? toPercent(learnPenData.getP()) : 0 // Math.round(Math.floor(Math.random() * 100))&#13;
        };&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    function colorNameToHex(color) {&#13;
        var colors = {&#13;
            "aliceblue":"#f0f8ff","antiquewhite":"#faebd7","aqua":"#00ffff","aquamarine":"#7fffd4","azure":"#f0ffff","beige":"#f5f5dc","bisque":"#ffe4c4","black":"#000000","blanchedalmond":"#ffebcd","blue":"#0000ff","blueviolet":"#8a2be2","brown":"#a52a2a","burlywood":"#deb887","cadetblue":"#5f9ea0","chartreuse":"#7fff00","chocolate":"#d2691e","coral":"#ff7f50","cornflowerblue":"#6495ed","cornsilk":"#fff8dc","crimson":"#dc143c","cyan":"#00ffff","darkblue":"#00008b","darkcyan":"#008b8b","darkgoldenrod":"#b8860b","darkgray":"#a9a9a9","darkgreen":"#006400","darkkhaki":"#bdb76b","darkmagenta":"#8b008b","darkolivegreen":"#556b2f","darkorange":"#ff8c00","darkorchid":"#9932cc","darkred":"#8b0000","darksalmon":"#e9967a","darkseagreen":"#8fbc8f","darkslateblue":"#483d8b","darkslategray":"#2f4f4f","darkturquoise":"#00ced1","darkviolet":"#9400d3","deeppink":"#ff1493","deepskyblue":"#00bfff","dimgray":"#696969","dodgerblue":"#1e90ff","firebrick":"#b22222","floralwhite":"#fffaf0","forestgreen":"#228b22","fuchsia":"#ff00ff","gainsboro":"#dcdcdc","ghostwhite":"#f8f8ff","gold":"#ffd700","goldenrod":"#daa520","gray":"#808080","green":"#008000","greenyellow":"#adff2f","honeydew":"#f0fff0","hotpink":"#ff69b4","indianred ":"#cd5c5c","indigo ":"#4b0082","ivory":"#fffff0","khaki":"#f0e68c","lavender":"#e6e6fa","lavenderblush":"#fff0f5","lawngreen":"#7cfc00","lemonchiffon":"#fffacd","lightblue":"#add8e6","lightcoral":"#f08080","lightcyan":"#e0ffff","lightgoldenrodyellow":"#fafad2","grey":"#808080","lightgrey":"#d3d3d3","lightgreen":"#90ee90","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightseagreen":"#20b2aa","lightskyblue":"#87cefa","lightslategray":"#778899","lightsteelblue":"#b0c4de","lightyellow":"#ffffe0","lime":"#00ff00","limegreen":"#32cd32","linen":"#faf0e6","magenta":"#ff00ff","maroon":"#800000","mediumaquamarine":"#66cdaa","mediumblue":"#0000cd","mediumorchid":"#ba55d3","mediumpurple":"#9370d8","mediumseagreen":"#3cb371","mediumslateblue":"#7b68ee","mediumspringgreen":"#00fa9a","mediumturquoise":"#48d1cc","mediumvioletred":"#c71585","midnightblue":"#191970","mintcream":"#f5fffa","mistyrose":"#ffe4e1","moccasin":"#ffe4b5","navajowhite":"#ffdead","navy":"#000080","oldlace":"#fdf5e6","olive":"#808000","olivedrab":"#6b8e23","orange":"#ffa500","orangered":"#ff4500","orchid":"#da70d6","palegoldenrod":"#eee8aa","palegreen":"#98fb98","paleturquoise":"#afeeee","palevioletred":"#d87093","papayawhip":"#ffefd5","peachpuff":"#ffdab9","peru":"#cd853f","pink":"#ffc0cb","plum":"#dda0dd","powderblue":"#b0e0e6","purple":"#800080","red":"#ff0000","rosybrown":"#bc8f8f","royalblue":"#4169e1","saddlebrown":"#8b4513","salmon":"#fa8072","sandybrown":"#f4a460","seagreen":"#2e8b57","seashell":"#fff5ee","sienna":"#a0522d","silver":"#c0c0c0","skyblue":"#87ceeb","slateblue":"#6a5acd","slategray":"#708090","snow":"#fffafa","springgreen":"#00ff7f","steelblue":"#4682b4","tan":"#d2b48c","teal":"#008080","thistle":"#d8bfd8","tomato":"#ff6347","turquoise":"#40e0d0","violet":"#ee82ee","wheat":"#f5deb3","white":"#ffffff","whitesmoke":"#f5f5f5","yellow":"#ffff00","yellowgreen":"#9acd32"&#13;
        };&#13;
&#13;
        if (typeof colors[color.toLowerCase()] !== 'undefined') {&#13;
            return colors[color.toLowerCase()];&#13;
        }&#13;
&#13;
        return color;&#13;
    }&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        S01: 'Wrong values in Steps and colors property',&#13;
        S02: 'Wrong number of values in Steps and colors property. 12 values for every sensor',&#13;
        S03: 'Percentage values in Steps and colors property have to be in descend order',&#13;
&#13;
        T01: 'Property Refresh time cannot be lower then 50 and higher then 2000',&#13;
        T02: 'Property Refresh time has to be numeric'&#13;
    };&#13;
&#13;
    presenter.isSensorLine = function(line) {&#13;
        return line.split(';').every(function(v) {&#13;
            return /^[A-CP]$/.test(v.trim());&#13;
        });&#13;
    };&#13;
&#13;
    presenter.isValueLine = function(line) {&#13;
        // 50%;red | 90% ; blue | 3%;#111111 | 77%;#333&#13;
        return /^[0-9]{1,3}%\s*;\s*.*([a-zA-Z]|#[0-9a-fA-F]{6}|#[0-9a-fA-F]{3})$/.test(line);&#13;
    };&#13;
&#13;
    function validateLines(lines) {&#13;
        if (lines.length % (DATA_LENGTH + 1) !== 0) return getErrorObject('S02');&#13;
&#13;
        var previous = 0;&#13;
        for (var i=0; i&lt;lines.length; i++) {&#13;
            if (i % (DATA_LENGTH + 1) === 0) {&#13;
                previous = 0;&#13;
                if (!presenter.isSensorLine(lines[i])) {&#13;
                    return getErrorObject('S01');&#13;
                }&#13;
            } else {&#13;
                if (!presenter.isValueLine(lines[i])) {&#13;
                    return getErrorObject('S02');&#13;
                }&#13;
&#13;
                var currentPercent = parseInt(lines[i].split(';')[0].trim(), 10);&#13;
                if (previous &gt; currentPercent) {&#13;
                    return getErrorObject('S03');&#13;
                }&#13;
                previous = currentPercent;&#13;
            }&#13;
        }&#13;
&#13;
        return getCorrectObject(null);&#13;
    }&#13;
&#13;
    function getDataFromLines(lines, sensor) {&#13;
        var sensorSteps = [];&#13;
&#13;
        function findSensorInLine() {&#13;
            for (var i=0; i&lt;lines.length; i++) {&#13;
                var values = lines[i].split(';');&#13;
&#13;
                if (values.indexOf(sensor) !== -1) {&#13;
                    return i;&#13;
                }&#13;
            }&#13;
            return -1;&#13;
        }&#13;
&#13;
        var firstValuePosition = findSensorInLine() + 1;&#13;
&#13;
        for (var i=firstValuePosition; i&lt;firstValuePosition+DATA_LENGTH; i++) {&#13;
            var stepAndColor = lines[i].split(';').map(function(a) { return a.trim(); });&#13;
            var value = parseInt(stepAndColor[0], 10); // removes implicitly % sign&#13;
            var color = colorNameToHex(stepAndColor[1]);&#13;
            sensorSteps.push(getStep(color, value));&#13;
        }&#13;
&#13;
        return sensorSteps;&#13;
    }&#13;
&#13;
    function validateColorsAndSteps(data) {&#13;
        if (ModelValidationUtils.isStringEmpty(data)) {&#13;
            // #ff0000 - red&#13;
            // #ffff00 - yellow&#13;
            // #008000 - green&#13;
            // #ffa500 - orange&#13;
            // #90ee90 - lightgreen&#13;
            var squeeze = [&#13;
                getStep("#ffff00", 10), getStep("#ffff00", 20), getStep("#ffff00", 30),&#13;
                getStep("#ffff00", 32),&#13;
                getStep("#008000", 33), getStep("#008000", 40), getStep("#008000", 50),&#13;
                getStep("#008000", 66),&#13;
                getStep("#ff0000", 67),&#13;
                getStep("#ff0000", 70), getStep("#ff0000", 80), getStep("#ff0000", 95)&#13;
            ];&#13;
&#13;
            return getCorrectObject({&#13;
                a: squeeze,&#13;
                b: squeeze,&#13;
                c: squeeze,&#13;
                p: squeeze&#13;
            });&#13;
        }&#13;
&#13;
        var lines = Helpers.splitLines(data).map(function(line) { return line.trim(); }).filter(function(line) { return line !== '' });&#13;
&#13;
        var validationData = validateLines(lines);&#13;
        if (!validationData.isValid) {&#13;
            return getErrorObject(validationData.errorCode);&#13;
        }&#13;
&#13;
        return getCorrectObject({&#13;
            a: getDataFromLines(lines, 'A'),&#13;
            b: getDataFromLines(lines, 'B'),&#13;
            c: getDataFromLines(lines, 'C'),&#13;
            p: getDataFromLines(lines, 'P')&#13;
        });&#13;
    }&#13;
&#13;
    function validateTime(time) {&#13;
        if (ModelValidationUtils.isStringEmpty(time)) {&#13;
            return getCorrectObject(100);&#13;
        }&#13;
&#13;
        if (!/^[0-9]+$/.test(time)) {&#13;
            return getErrorObject('T02');&#13;
        }&#13;
&#13;
        time = parseInt(time, 10);&#13;
&#13;
        if (time &lt; 50 || time &gt; 2000) {&#13;
            return getErrorObject('T01');&#13;
        }&#13;
&#13;
        return getCorrectObject(time);&#13;
    }&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedStepsAndColors = validateColorsAndSteps(model.stepsAndColors);&#13;
        if (!validatedStepsAndColors.isValid) return getErrorObject(validatedStepsAndColors.errorCode);&#13;
&#13;
        var validatedTime = validateTime(model.refreshTime);&#13;
        if (!validatedTime.isValid) return getErrorObject(validatedTime.errorCode);&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            isDisable: ModelValidationUtils.validateBoolean(model.isDisable),&#13;
            stepsAndColors: validatedStepsAndColors.value,&#13;
            refreshTime: validatedTime.value,&#13;
            width: parseInt(model.Width, 10),&#13;
            height: parseInt(model.Height, 10),&#13;
&#13;
            id: model.ID,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"])&#13;
        };&#13;
    };&#13;
&#13;
    function colorSteps(stepsAndColors) {&#13;
        function setBackGroundColor($sensor, step, color) {&#13;
            $sensor.find('div.box[data-step="' + step + '"]').css('background-color', color);&#13;
            $sensor.find('div.box[data-step="' + step + '"]').attr('data-color', color);&#13;
        }&#13;
&#13;
        for (var i=0; i&lt;DATA_LENGTH; i++) {&#13;
            setBackGroundColor(presenter.$a, i, stepsAndColors.a[i].color);&#13;
            setBackGroundColor(presenter.$b, i, stepsAndColors.b[i].color);&#13;
            setBackGroundColor(presenter.$c, i, stepsAndColors.c[i].color);&#13;
            setBackGroundColor(presenter.$p, i, stepsAndColors.p[i].color);&#13;
        }&#13;
    }&#13;
&#13;
    function updateDataOnGraph() {&#13;
        function setDataForSensor($sensor, steps, value) {&#13;
            var color, index;&#13;
&#13;
            for (var i=0; i&lt;DATA_LENGTH; i++) {&#13;
                if (steps[i].value &lt; value) {&#13;
                    index = i;&#13;
                }&#13;
            }&#13;
            color = $sensor.find('div.box[data-step="' + index + '"]').attr("data-color");&#13;
&#13;
            for (var i=0; i&lt;DATA_LENGTH; i++) {&#13;
                if (steps[i].value &lt; value) {&#13;
                    $sensor.find('div.box[data-step="' + i + '"]').css("background-color", color);&#13;
                } else {&#13;
                    $sensor.find('div.box[data-step="' + i + '"]').css("background-color", "white");&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.$view.find('div.' + ON_MODE_CLASS).each(function() {&#13;
            $(this).removeClass(ON_MODE_CLASS);&#13;
        });&#13;
&#13;
        var data = getCurrentDataFromSensor();&#13;
&#13;
        setDataForSensor(presenter.$a, presenter.configuration.stepsAndColors.a, data.a);&#13;
        setDataForSensor(presenter.$b, presenter.configuration.stepsAndColors.b, data.b);&#13;
        setDataForSensor(presenter.$c, presenter.configuration.stepsAndColors.c, data.c);&#13;
        setDataForSensor(presenter.$p, presenter.configuration.stepsAndColors.p, data.p);&#13;
    }&#13;
&#13;
    presenter.presenterLogic = function(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return false;&#13;
        }&#13;
&#13;
        presenter.$a = presenter.$view.find('div.sensor-a');&#13;
        presenter.$b = presenter.$view.find('div.sensor-b');&#13;
        presenter.$c = presenter.$view.find('div.sensor-c');&#13;
        presenter.$p = presenter.$view.find('div.sensor-p');&#13;
&#13;
        colorSteps(presenter.configuration.stepsAndColors);&#13;
&#13;
        if (!isPreview &amp;&amp; !presenter.configuration.isDisable) {&#13;
            presenter.intervalId = setInterval(updateDataOnGraph, presenter.configuration.refreshTime);&#13;
            isIntervalOn = true;&#13;
        }&#13;
&#13;
        setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        recording(false);&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        recording(true);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        recording(false);&#13;
    };&#13;
&#13;
    presenter.setState = function(_) {&#13;
        recording(true);&#13;
    };&#13;
&#13;
//    presenter.reset = function() { };&#13;
//    presenter.getErrorCount = function() { return 0; };&#13;
//    presenter.getMaxScore = function() { return 0; };&#13;
//    presenter.getScore = function() { return 0; };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="LearnPen_Report" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="isDisable" nameLabel="LearnPen_Report_property_is_disable" type="boolean"/>
        <property name="correctRange" nameLabel="LearnPen_Report_property_correct_range" type="string"/>
        <property name="graphType" nameLabel="LearnPen_Report_property_graph_type" type="{Pie chart, Circle in circle, Four circles, Horizontal Bar}"/>
        <property name="sensor" nameLabel="LearnPen_Report_property_sensor" type="{All, Squeeze, Pressure, Squeeze A, Squeeze B, Squeeze C}"/>
        <property name="colors" nameLabel="LearnPen_Report_property_colors" type="text"/>
        <property name="dataUpdateInterval" nameLabel="LearnPen_Report_property_update_interval" type="string"/>
        <property name="calculateFromLastValues" nameLabel="LearnPen_Report_property_get_last_values" type="string"/>
    </model>
<css/><view>&lt;canvas style="display: none;"&gt;&lt;/canvas&gt;&#13;
&lt;img src=""&gt;&#13;
</view><preview>&lt;canvas&gt;Canvas is not supported in your browser&lt;/canvas&gt;&#13;
</preview><presenter>function AddonLearnPen_Report_create() {&#13;
&#13;
    // utilities functions&#13;
    function getCorrectObject(val) { return { isValid: true, value: val } }&#13;
&#13;
    function getErrorObject(ec) { return { isValid: false, errorCode: ec } }&#13;
&#13;
    function isInteger(n) { return n % 1 === 0; }&#13;
&#13;
    function round(n, precision) { return Math.round(n * Math.pow(10, precision)) / Math.pow(10, precision); }&#13;
&#13;
    function getLastElements (array, num) {&#13;
        num = num || 1;&#13;
&#13;
        if (array.length &lt; num) {&#13;
            return this;&#13;
        }&#13;
&#13;
        return this.slice(array.length - num);&#13;
    }&#13;
&#13;
    function shouldGetDataFromSensors (){&#13;
        for (var addon in presenter.addons) {&#13;
            if(presenter.addons[addon] == true){&#13;
                return true;&#13;
            }&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    function getColorFromStatus(status) {&#13;
        switch (status) {&#13;
            case  1: return presenter.configuration.colors.above;&#13;
            case  0: return presenter.configuration.colors.correct;&#13;
            case -1: return presenter.configuration.colors.below;&#13;
        }&#13;
&#13;
        return "black";&#13;
    }&#13;
&#13;
    function half(v) { return parseInt(v / 2, 10); }&#13;
&#13;
    function hookToDrawingAreas(addon) {&#13;
        var $addon = $('.' + addon);&#13;
&#13;
        $addon.on('mousedown touchstart', 'canvas', function (){&#13;
            presenter.addons[addon] = true;&#13;
        });&#13;
&#13;
        $addon.on('mouseup mouseleave touchend', 'canvas', function (){&#13;
            presenter.addons[addon] = false;&#13;
        });&#13;
    }&#13;
&#13;
    var presenter = function() {};&#13;
    &#13;
    presenter.addons = {&#13;
        "addon_Drawing": false,&#13;
        "addon_Shape_Tracing": false,&#13;
        "addon_LearnPen": false&#13;
    };&#13;
&#13;
    presenter.data = {&#13;
        $canvas: null,&#13;
        context: null,&#13;
        $img: null,&#13;
&#13;
        sensorData: {&#13;
            below: 0,&#13;
            correct: 0,&#13;
            above: 0&#13;
        },&#13;
&#13;
        sensorsDataHistory: [],&#13;
&#13;
        isPreview: false,&#13;
        isIntervalOn: false,&#13;
        intervalId: null,&#13;
        isPaused: false&#13;
    };&#13;
&#13;
    presenter.SENSOR = {&#13;
        'All': 'ALL',&#13;
        'Squeeze': 'SQUEEZE',&#13;
        'Pressure': 'PRESSURE',&#13;
        'Squeeze A': 'SQUEEZEA',&#13;
        'Squeeze B': 'SQUEEZEB',&#13;
        'Squeeze C': 'SQUEEZEC',&#13;
        DEFAULT: 'All'&#13;
    };&#13;
    // {Pie chart, Circle in circle, Four circles}&#13;
    presenter.GRAPH = {&#13;
        'Pie chart': 'PIE',&#13;
        'Circle in circle': 'CINC',&#13;
        'Four circles': '4CIRCLES',&#13;
        'Horizontal Bar': 'BAR',&#13;
        DEFAULT: 'Pie chart'&#13;
    };&#13;
&#13;
    presenter.filteredDataCount = 0;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        R01: "Number of arguments in Correct range is different then 2",&#13;
        R02: "All values in Correct range has to be numeric",&#13;
        R03: "All values in Correct range has to be between 0 and 100",&#13;
        R04: "Second argument in Correct range hast to be bigger then the first",&#13;
&#13;
        C01: "Number of argument is property Colors is different then 3",&#13;
&#13;
        I01: "Property Data update interval has to be numeric",&#13;
        I02: "Value of property Data update interval has to be between 50 and 2000 ms",&#13;
&#13;
        G01: "You cannot set sensor different then All and graph Circle in Circle or Four circles",&#13;
&#13;
        CALC01: "Property Calculate from last values has to be integer",&#13;
        CALC02: "Property Calculate from last values has to be positive value"&#13;
    };&#13;
&#13;
    function toPercent(val) { return parseInt(val / 1024 * 100); }&#13;
    &#13;
    function isDataNotNoise(element, index, array) {&#13;
        return element &gt;= 200;&#13;
    }&#13;
&#13;
&#13;
    function getCurrentDataFromSensor() {&#13;
        if(window.LearnPen) {&#13;
            var a = window.LearnPen.getA();&#13;
            var b = window.LearnPen.getB();&#13;
            var c = window.LearnPen.getC();&#13;
            var p = window.LearnPen.getP();&#13;
            var isValid = [a, b, c].some(isDataNotNoise);&#13;
            &#13;
            if(!isValid) {&#13;
                isValid = (p &gt;= 200);&#13;
            }&#13;
&#13;
            return {&#13;
                isValid: isValid,&#13;
                a: toPercent(a),&#13;
                b: toPercent(b),&#13;
                c: toPercent(c),&#13;
                p: toPercent(p)&#13;
            };&#13;
        } else {&#13;
            return {&#13;
                isValid: true,&#13;
                a: toPercent(Math.floor(Math.random() * 1000)),&#13;
                b: toPercent(Math.floor(Math.random() * 1000)),&#13;
                c: toPercent(Math.floor(Math.random() * 1000)),&#13;
                p: toPercent(Math.floor(Math.random() * 1000))&#13;
            };            &#13;
        }&#13;
    }&#13;
&#13;
    function getSensorHistory(historyArray, sensorsArray) {&#13;
        var noise = toPercent(200);&#13;
&#13;
        function filterNoise(element) {&#13;
            return this.some(function (variable) {&#13;
               return element[variable] &gt; noise;&#13;
            }, this);&#13;
        }&#13;
&#13;
        return historyArray.filter(filterNoise, sensorsArray);&#13;
    }&#13;
&#13;
    function getValues() {&#13;
        var returnedData;&#13;
        if (presenter.configuration.calculateFromLastValues === 0) {&#13;
            returnedData = getSensorHistory(presenter.data.sensorsDataHistory, getSensorsConfiguration());&#13;
        } else {&#13;
            returnedData = getSensorHistory(getLastElements(presenter.data.sensorsDataHistory, getSensorsConfiguration(), presenter.configuration.calculateFromLastValues));&#13;
        }&#13;
&#13;
        return returnedData;&#13;
    }&#13;
&#13;
    function getSensorsConfiguration () {&#13;
        switch (presenter.configuration.sensor) {&#13;
            case presenter.SENSOR.All:&#13;
                return ['a', 'b', 'c', 'p'];&#13;
                break;&#13;
            case presenter.SENSOR.Pressure:&#13;
                return ['p'];&#13;
                break;&#13;
            case presenter.SENSOR.Squeeze:&#13;
                return ['a', 'b', 'c'];&#13;
                break;&#13;
            case presenter.SENSOR['Squeeze A']:&#13;
                return ['a'];&#13;
                break;&#13;
            case presenter.SENSOR['Squeeze B']:&#13;
                return ['b'];&#13;
                break;&#13;
            case presenter.SENSOR['Squeeze C']:&#13;
                return ['c'];&#13;
                break;&#13;
            default:&#13;
                return ['a', 'b', 'c', 'p'];&#13;
                break;&#13;
        }&#13;
    }&#13;
&#13;
    function updateSensorDataHistory(data) {&#13;
        if (data.isValid) {&#13;
            presenter.filteredDataCount = 0;&#13;
            presenter.data.sensorsDataHistory.push(data);&#13;
        }&#13;
&#13;
        if (presenter.configuration.calculateFromLastValues &gt; 0) {&#13;
            if(!data.isValid) {&#13;
                if (presenter.filteredDataCount &lt; presenter.configuration.calculateFromLastValues) {&#13;
                    presenter.filteredDataCount += 1;&#13;
                    presenter.data.sensorsDataHistory.push(data);&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function getStatus(v) {&#13;
        if (v &gt; presenter.configuration.range.end) {&#13;
            return 1;&#13;
        } else if (v &lt; presenter.configuration.range.start) {&#13;
            return -1;&#13;
        }&#13;
&#13;
        return 0;&#13;
    }&#13;
&#13;
    function updateResultDataFromSensorValue(value, result) {&#13;
        switch (getStatus(value)) {&#13;
            case  1: result.above++; break;&#13;
            case  0: result.correct++; break;&#13;
            case -1: result.below++; break;&#13;
        }&#13;
    }&#13;
&#13;
    function prepareData() {&#13;
        var resultObject = {&#13;
            above: 0,&#13;
            correct: 0,&#13;
            below: 0,&#13;
            aStatus: 0,&#13;
            bStatus: 0,&#13;
            cStatus: 0,&#13;
            pStatus: 0&#13;
        };&#13;
&#13;
        getValues().forEach(function(sensorDataObj, _, arr) {&#13;
            switch (presenter.configuration.sensor) {&#13;
                case presenter.SENSOR.All: updateResultDataFromSensorValue((sensorDataObj.a + sensorDataObj.b + sensorDataObj.c + sensorDataObj.p) / 4, resultObject); break;&#13;
                case presenter.SENSOR.Pressure: updateResultDataFromSensorValue(sensorDataObj.p, resultObject); break;&#13;
                case presenter.SENSOR.Squeeze: updateResultDataFromSensorValue((sensorDataObj.a + sensorDataObj.b + sensorDataObj.c) / 3, resultObject); break;&#13;
                case presenter.SENSOR['Squeeze A']: updateResultDataFromSensorValue(sensorDataObj.a, resultObject); break;&#13;
                case presenter.SENSOR['Squeeze B']: updateResultDataFromSensorValue(sensorDataObj.b, resultObject); break;&#13;
                case presenter.SENSOR['Squeeze C']: updateResultDataFromSensorValue(sensorDataObj.c, resultObject); break;&#13;
            }&#13;
&#13;
            resultObject.aStatus += sensorDataObj.a / arr.length;&#13;
            resultObject.bStatus += sensorDataObj.b / arr.length;&#13;
            resultObject.cStatus += sensorDataObj.c / arr.length;&#13;
            resultObject.pStatus += sensorDataObj.p / arr.length;&#13;
        });&#13;
&#13;
        resultObject.aStatus = getStatus(resultObject.aStatus);&#13;
        resultObject.bStatus = getStatus(resultObject.bStatus);&#13;
        resultObject.cStatus = getStatus(resultObject.cStatus);&#13;
        resultObject.pStatus = getStatus(resultObject.pStatus);&#13;
&#13;
        return resultObject;&#13;
    }&#13;
&#13;
    function validateRange(range) {&#13;
        if (ModelValidationUtils.isStringEmpty(range)) {&#13;
            return getCorrectObject({ start: 40, end: 80 });&#13;
        }&#13;
&#13;
        var values = range.split(';');&#13;
&#13;
        if (values.length !== 2) {&#13;
            return getErrorObject('R01');&#13;
        }&#13;
&#13;
        for (var i=0; i&lt;values.length; i++) {&#13;
            if (isInteger(values[i])) {&#13;
                values[i] = parseInt(values[i], 10);&#13;
            } else {&#13;
                return getErrorObject('R02');&#13;
            }&#13;
&#13;
            if (0 &gt; values[i] || values[i] &gt; 100) {&#13;
                return getErrorObject('R03');&#13;
            }&#13;
        }&#13;
&#13;
        if (values[0] &gt;= values[1]) {&#13;
            return getErrorObject('R04');&#13;
        }&#13;
&#13;
        return getCorrectObject({ start: values[0], end: values[1] });&#13;
    }&#13;
&#13;
    function validateColors(colors) {&#13;
        if (ModelValidationUtils.isStringEmpty(colors)) {&#13;
            return getCorrectObject({ above: "red", correct: "green", below: "yellow" });&#13;
        }&#13;
&#13;
        colors = colors.split(';');&#13;
&#13;
        if (colors.length !== 3) {&#13;
            return getErrorObject('C01');&#13;
        }&#13;
&#13;
        return getCorrectObject({ above: colors[0], correct: colors[1], below: colors[2] });&#13;
    }&#13;
&#13;
    function validateInterval(interval) {&#13;
        if (ModelValidationUtils.isStringEmpty(interval)) {&#13;
            return getCorrectObject(100);&#13;
        }&#13;
&#13;
        if (isInteger(interval)) {&#13;
            interval = parseInt(interval, 10);&#13;
        } else {&#13;
            return getErrorObject('I01');&#13;
        }&#13;
&#13;
        if (interval &lt; 0 || interval &gt; 2000) {&#13;
            return getErrorObject('I02');&#13;
        }&#13;
&#13;
        return getCorrectObject(interval);&#13;
    }&#13;
&#13;
    function validateInteger(val) {&#13;
        if (ModelValidationUtils.isStringEmpty(val)) {&#13;
            return getCorrectObject(0);&#13;
        }&#13;
&#13;
        if (isInteger(val)) {&#13;
            val = parseInt(val, 10);&#13;
        } else {&#13;
            return getErrorObject('CALC01');&#13;
        }&#13;
&#13;
        if (val &lt; 0) {&#13;
            return getErrorObject('CALC02');&#13;
        }&#13;
&#13;
        return getCorrectObject(val);&#13;
    }&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedRange = validateRange(model.correctRange);&#13;
        if (validatedRange.errorCode) {&#13;
            return validatedRange;&#13;
        }&#13;
&#13;
        var graph = ModelValidationUtils.validateOption(presenter.GRAPH, model.graphType);&#13;
        var sensor = ModelValidationUtils.validateOption(presenter.SENSOR, model.sensor);&#13;
&#13;
        if ((graph === presenter.GRAPH['Circle in circle'] || graph === presenter.GRAPH['Four circles']) &amp;&amp; sensor !== presenter.SENSOR['All']) {&#13;
            return getErrorObject('G01');&#13;
        }&#13;
&#13;
        var validatedColors = validateColors(model.colors);&#13;
        if (validatedColors.errorCode) {&#13;
            return validatedColors;&#13;
        }&#13;
&#13;
        var validatedDataUpdateInterval = validateInterval(model.dataUpdateInterval);&#13;
        if (validatedDataUpdateInterval.errorCode) {&#13;
            return validatedDataUpdateInterval;&#13;
        }&#13;
&#13;
        var validatedCalcFromLastValues = validateInteger(model.calculateFromLastValues);&#13;
        if (validatedCalcFromLastValues.errorCode) {&#13;
            return validatedCalcFromLastValues;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            ID: model.ID,&#13;
            width: parseInt(model.Width, 10),&#13;
            height: parseInt(model.Height, 10),&#13;
&#13;
            isDisable: ModelValidationUtils.validateBoolean(model.isDisable),&#13;
            range: validatedRange.value,&#13;
            graphType: graph,&#13;
            sensor: sensor,&#13;
            colors: validatedColors.value,&#13;
            updateTime: validatedDataUpdateInterval.value,&#13;
            calculateFromLastValues: validatedCalcFromLastValues.value&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "PageLoaded") {&#13;
            for (var addon in presenter.addons) {&#13;
                if (presenter.addons.hasOwnProperty(addon)) {&#13;
                    hookToDrawingAreas(addon);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.view = view;&#13;
        presenterLogic(view, model, false);&#13;
&#13;
        if (!presenter.configuration.isDisable) {&#13;
            presenter.record();&#13;
        }&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', function onDOMNodeRemoved(ev) {&#13;
            presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
            if (ev.target === this) {&#13;
                presenter.destroy();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        presenter.data.$img = presenter.$view.find('img');&#13;
        presenter.data.$canvas = presenter.$view.find('canvas');&#13;
        presenter.data.context = presenter.data.$canvas[0].getContext('2d');&#13;
&#13;
        presenter.data.$canvas[0].width = presenter.configuration.width;&#13;
        presenter.data.$canvas[0].height = presenter.configuration.height;&#13;
&#13;
        presenter.data.isPreview = isPreview;&#13;
    }&#13;
&#13;
    presenter.destroy = function () {&#13;
        if (presenter.data.isIntervalOn) {&#13;
            clearInterval(presenter.data.intervalId);&#13;
            presenter.data.isIntervalOn = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
&#13;
        if (presenter.configuration.isValid) {&#13;
            presenter.displayCurrentData();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    function getRotateCoordinates(x, y, rad) {&#13;
        // Subtract midpoints, so that midpoint is translated to origin and add it in the end again&#13;
        return {&#13;
            x: round(x * Math.cos(rad) - y * Math.sin(rad), 2),&#13;
            y: round(x * Math.sin(rad) + y * Math.cos(rad), 2)&#13;
        }&#13;
    }&#13;
&#13;
    function generateHorizontalBar(above, correct, below) {&#13;
        function drawRec(ctx, x, y, w, h, color, percent) {&#13;
            if(percent &gt; 0){&#13;
                ctx.beginPath();&#13;
                ctx.lineWidth="1";&#13;
                ctx.strokeStyle=color;&#13;
                ctx.rect(x, y, w, h);&#13;
                ctx.fillStyle = color;&#13;
                ctx.fill();&#13;
                ctx.stroke();&#13;
            }&#13;
        }&#13;
&#13;
        function drawText(ctx, x, y, text) {&#13;
            if(text &gt; 0){&#13;
                ctx.font = "12px Calibri";&#13;
                ctx.textAlign = "center";&#13;
                ctx.fillStyle = "black";&#13;
                ctx.fillText(text + '%', x, y);&#13;
            }&#13;
        }&#13;
&#13;
        var moduleHeight = presenter.configuration.height;&#13;
&#13;
        var sum = above + correct + below;&#13;
&#13;
        var text = [];&#13;
        text[0] = Math.round((below / sum) * 100);&#13;
        text[1] = Math.round((correct / sum) * 100);&#13;
        text[2] = Math.round(100 - (text[0] + text[1]));&#13;
&#13;
        var widthA = Math.round(((text[0]/100)*presenter.configuration.width));&#13;
        var widthB = Math.round(((text[1]/100)*presenter.configuration.width));&#13;
        var widthC = Math.round(((text[2]/100)*presenter.configuration.width));&#13;
        var moduleWidth = widthA + widthB + widthC;&#13;
&#13;
        var xA = 0;&#13;
        var xB = widthA;&#13;
        var xC = widthA + widthB;&#13;
&#13;
        presenter.data.context.clearRect(0, 0, presenter.configuration.width, presenter.configuration.height);&#13;
&#13;
        drawRec(presenter.data.context, xA, Math.round(moduleHeight/4), widthA, Math.round(moduleHeight/2), presenter.configuration.colors.below, text[0]);&#13;
        drawRec(presenter.data.context, xB, Math.round(moduleHeight/4), widthB, Math.round(moduleHeight/2), presenter.configuration.colors.correct, text[1]);&#13;
        drawRec(presenter.data.context, xC, Math.round(moduleHeight/4), widthC, Math.round(moduleHeight/2), presenter.configuration.colors.above, text[2]);&#13;
&#13;
        var xTextA = xA + (widthA/2);&#13;
        var xTextB = xB + (widthB/2);&#13;
        var xTextC = xC + (widthC/2);&#13;
&#13;
        if(text[0] &gt; 0 &amp;&amp; xTextA &lt; 10){&#13;
            xTextA = 10;&#13;
        }&#13;
        if(text[2] &gt; 0 &amp;&amp; xTextC &gt; (moduleWidth-11)){&#13;
            xTextC = moduleWidth-11;&#13;
        }&#13;
        if(text[0] == 0 &amp;&amp; xTextB &lt; 10){&#13;
            xTextB = 10;&#13;
        }&#13;
        if(text[2] == 0 &amp;&amp; xTextB &gt; (moduleWidth-10)){&#13;
            xTextB = moduleWidth-10;&#13;
        }&#13;
        if(text[0] &gt; 0 &amp;&amp; xTextB &lt; (xTextA+19)){&#13;
            xTextB = xTextA+19;&#13;
        }else if(text[2] &gt; 0 &amp;&amp; xTextB &gt; (xTextC-20)){&#13;
            xTextB = xTextC-20;&#13;
        }else{} // 10, 19, 20.. - width of text&#13;
&#13;
        drawText(presenter.data.context, xTextA, Math.round(moduleHeight/4)-3, text[0]);&#13;
        drawText(presenter.data.context, xTextB, Math.round(moduleHeight/4)-3, text[1]);&#13;
        drawText(presenter.data.context, xTextC, Math.round(moduleHeight/4)-3, text[2]);&#13;
    }&#13;
&#13;
    function generatePieChart(above, correct, below) {&#13;
        function drawArc(ctx, x, y, r, start, end, color) {&#13;
            ctx.beginPath();&#13;
            ctx.moveTo(x, y);&#13;
            ctx.arc(x, y, r, start, end, false);&#13;
            ctx.closePath();&#13;
            ctx.fillStyle = color;&#13;
            ctx.fill();&#13;
        }&#13;
&#13;
        function drawText(ctx, x, y, r, start, end, text) {&#13;
            var halfAngle = (end - start) / 2;&#13;
            var coordinates = getRotateCoordinates(r / 2, 0, halfAngle + start);&#13;
&#13;
            ctx.font = "20px Calibri";&#13;
            ctx.textAlign = "center";&#13;
            ctx.fillStyle = "black";&#13;
            ctx.fillText(text + '%', coordinates.x + x, coordinates.y + y);&#13;
        }&#13;
&#13;
        var sum = above + correct + below;&#13;
        var centerX = Math.floor(presenter.configuration.width / 2);&#13;
        var centerY = Math.floor(presenter.configuration.height / 2);&#13;
        var radius = Math.min(presenter.configuration.width, presenter.configuration.height) / 2;&#13;
&#13;
        var sep = [];&#13;
        sep[0] = 0;&#13;
        sep[1] = (below / sum) * 2 * Math.PI;&#13;
        sep[2] = ((below + correct) / sum) * 2 * Math.PI;&#13;
        sep[3] = 2 * Math.PI;&#13;
&#13;
        var text = [];&#13;
        text[0] = round((below / sum) * 100, 2);&#13;
        text[1] = round((correct / sum) * 100, 2);&#13;
        text[2] = round(100 - (text[0] + text[1]), 2);&#13;
&#13;
        presenter.data.context.clearRect(0, 0, presenter.configuration.width, presenter.configuration.height);&#13;
&#13;
        drawArc(presenter.data.context, centerX, centerY, radius, sep[0], sep[1], presenter.configuration.colors.above);&#13;
        drawArc(presenter.data.context, centerX, centerY, radius, sep[1], sep[2], presenter.configuration.colors.correct);&#13;
        drawArc(presenter.data.context, centerX, centerY, radius, sep[2], sep[3], presenter.configuration.colors.below);&#13;
&#13;
        drawText(presenter.data.context, centerX, centerY, radius, sep[0], sep[1], text[0]);&#13;
        drawText(presenter.data.context, centerX, centerY, radius, sep[1], sep[2], text[1]);&#13;
        drawText(presenter.data.context, centerX, centerY, radius, sep[2], sep[3], text[2]);&#13;
    }&#13;
&#13;
    function drawCircle(ctx, x, y, r, color) {&#13;
        ctx.beginPath();&#13;
        ctx.arc(x, y, r, 0, 2 * Math.PI, false);&#13;
        ctx.fillStyle = color;&#13;
        ctx.fill();&#13;
        ctx.lineWidth = 1;&#13;
        ctx.strokeStyle = 'white';&#13;
        ctx.stroke();&#13;
    }&#13;
&#13;
    function generateFourCircles(aStatus, bStatus, cStatus, pStatus) {&#13;
        function getCircleData(_x, _y, _r, _c) { return { x: _x, y: _y, r: _r, color: _c }; }&#13;
&#13;
        var min = Math.min(presenter.configuration.width, presenter.configuration.height);&#13;
        var smallRadius = parseInt(min / 8, 10);&#13;
        var bigRadius = parseInt(min / 3, 10);&#13;
&#13;
        var offset = half(Math.abs(presenter.configuration.width - presenter.configuration.height));&#13;
&#13;
        var a, b, c, p;&#13;
&#13;
        var aColor = getColorFromStatus(aStatus);&#13;
        var bColor = getColorFromStatus(bStatus);&#13;
        var cColor = getColorFromStatus(cStatus);&#13;
        var pColor = getColorFromStatus(pStatus);&#13;
&#13;
        if (presenter.configuration.height &gt; presenter.configuration.width) {&#13;
            a = getCircleData(smallRadius, offset + smallRadius, smallRadius, aColor);&#13;
            b = getCircleData(min - smallRadius, offset + smallRadius, smallRadius, bColor);&#13;
            c = getCircleData(half(min), offset + min - smallRadius, smallRadius, cColor);&#13;
            p = getCircleData(half(min), offset + parseInt(min * 0.41, 10), bigRadius, pColor);&#13;
        } else {&#13;
            a = getCircleData(offset + smallRadius, smallRadius, smallRadius, aColor);&#13;
            b = getCircleData(offset + min - smallRadius, smallRadius, smallRadius, bColor);&#13;
            c = getCircleData(offset + half(min), min - smallRadius, smallRadius, cColor);&#13;
            p = getCircleData(offset + half(min), parseInt(min * 0.41, 10), bigRadius, pColor);&#13;
        }&#13;
&#13;
        drawCircle(presenter.data.context, a.x, a.y, a.r, a.color);&#13;
        drawCircle(presenter.data.context, b.x, b.y, b.r, b.color);&#13;
        drawCircle(presenter.data.context, c.x, c.y, c.r, c.color);&#13;
        drawCircle(presenter.data.context, p.x, p.y, p.r, p.color);&#13;
    }&#13;
&#13;
    function generateCircleInCircle(aStatus, bStatus, cStatus, pStatus) {&#13;
        var centerX = Math.floor(presenter.configuration.width / 2);&#13;
        var centerY = Math.floor(presenter.configuration.height / 2);&#13;
&#13;
        var radiusOuter = Math.min(presenter.configuration.width, presenter.configuration.height) / 2;&#13;
        var radiusInner = parseInt(radiusOuter / 2, 10);&#13;
&#13;
        var colorOuter = getColorFromStatus(Math.round((aStatus + bStatus + cStatus) / 3));&#13;
        var colorInner = getColorFromStatus(pStatus);&#13;
&#13;
        drawCircle(presenter.data.context, centerX, centerY, radiusOuter, colorOuter);&#13;
        drawCircle(presenter.data.context, centerX, centerY, radiusInner, colorInner);&#13;
    }&#13;
&#13;
    presenter.displayCurrentData = function() {&#13;
        var shouldUpdate = shouldGetDataFromSensors();&#13;
        if (shouldUpdate){&#13;
            var dataFromSensors = getCurrentDataFromSensor();&#13;
            updateSensorDataHistory(dataFromSensors);&#13;
        }&#13;
&#13;
        var data = presenter.getData();&#13;
        presenter.displayData(data);&#13;
    };&#13;
&#13;
    presenter.getData = function getData() {&#13;
        return presenter.data.isPreview ? {&#13;
            above: 1,&#13;
            correct: 1,&#13;
            below: 1,&#13;
            aStatus: 0,&#13;
            bStatus: 0,&#13;
            cStatus: 0,&#13;
            pStatus: 0&#13;
        } : prepareData();&#13;
    };&#13;
&#13;
    presenter.displayData = function (data) {&#13;
        switch (presenter.configuration.graphType) {&#13;
            case presenter.GRAPH['Pie chart']: generatePieChart(data.above, data.correct, data.below); break;&#13;
            case presenter.GRAPH['Four circles']: generateFourCircles(data.aStatus, data.bStatus, data.cStatus, data.pStatus); break;&#13;
            case presenter.GRAPH['Circle in circle']: generateCircleInCircle(data.aStatus, data.bStatus, data.cStatus, data.pStatus); break;&#13;
            case presenter.GRAPH['Horizontal Bar']: generateHorizontalBar(data.above, data.correct, data.below); break;&#13;
            default: break;&#13;
        }&#13;
&#13;
        // copy chart to img&#13;
        presenter.data.$img.attr("src", presenter.data.$canvas[0].toDataURL("image/png"));&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.data.sensorsDataHistory = [];&#13;
        presenter.displayData(presenter.getData());&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.record = function() {&#13;
        if (presenter.configuration.isDisable) { return false; }&#13;
&#13;
        if (!presenter.data.isIntervalOn) {&#13;
            presenter.data.isIntervalOn = true;&#13;
            presenter.data.intervalId = setInterval(presenter.displayCurrentData, presenter.configuration.updateTime);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.pause = function() {&#13;
        if (presenter.configuration.isDisable) { return false; }&#13;
&#13;
        if (presenter.data.isIntervalOn) {&#13;
            clearInterval(presenter.data.intervalId);&#13;
            presenter.data.isIntervalOn = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stop = function() {&#13;
        if (presenter.configuration.isDisable) { return false; }&#13;
&#13;
        if (presenter.data.isIntervalOn) {&#13;
            clearInterval(presenter.data.intervalId);&#13;
            presenter.data.isIntervalOn = false;&#13;
        }&#13;
        presenter.reset();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (!presenter.configuration.isValid) { return false; }&#13;
&#13;
        Commands.dispatch({&#13;
            "reset": presenter.reset,&#13;
            "show": presenter.show,&#13;
            "hide": presenter.hide,&#13;
            "record": presenter.record,&#13;
            "stop": presenter.stop,&#13;
            "pause": presenter.pause&#13;
        }, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        presenter.pause();&#13;
&#13;
        return JSON.stringify({&#13;
            sensorData: presenter.data.sensorData,&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) { return; }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.data.sensorData = parsedState.sensorData;&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
&#13;
        presenter.record();&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        presenter.pause();&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.record();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Lesson_Error_Counter" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
    </model>
<css>.addon_Lesson_Error_Counter {&#13;
    text-align: center;&#13;
    border-radius: 5px;&#13;
    border: 2px solid black;&#13;
    color: red;&#13;
}&#13;
</css><view/><preview>6&#13;
</preview><presenter>function AddonLesson_Error_Counter_create() {&#13;
    var presenter = function () { };&#13;
&#13;
    presenter.playerController = null;&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.scoreService = controller.getScore();&#13;
    };&#13;
&#13;
    presenter.countErrors = function () {&#13;
        var presentation = presenter.playerController.getPresentation(),&#13;
            errorCount = 0, pageScore;&#13;
&#13;
&#13;
        for(var i = 0; i &lt; presentation.getPageCount(); i++){&#13;
            var page = presentation.getPage(i);&#13;
&#13;
            if(page.isReportable() &amp;&amp; page.isVisited()){&#13;
                pageScore = presenter.scoreService.getPageScoreById(page.getId());&#13;
                errorCount += pageScore.errorCount;&#13;
            }&#13;
        }&#13;
&#13;
        presenter.$view.text(errorCount);&#13;
    };&#13;
&#13;
    presenter.sanitizeModel = function (model) {&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
&#13;
        return {&#13;
            isVisibleByDefault: isVisible,&#13;
            isVisible: isVisible&#13;
        };&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.sanitizeModel(model);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.countErrors();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(parsedState.isVisible);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Lesson_Progress" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Show Progress Bar" name="Show_Progress_Bar" nameLabel="Lesson_Progress_property_show_progress_bar" type="boolean"/>
        <property displayName="Show Checks" name="Show_Checks" nameLabel="Lesson_Progress_property_show_checks" type="boolean"/>
        <property displayName="Show Correct Answers" name="Show_Correct_Answers" nameLabel="Lesson_Progress_property_show_correct_answers" type="boolean"/>
        <property displayName="Show Errors" name="Show_Errors" nameLabel="Lesson_Progress_property_show_errors" type="boolean"/>
        <property displayName="Show Mistakes" name="Show_Mistakes" nameLabel="Lesson_Progress_property_show_mistakes" type="boolean"/>
        <property displayName="Show All Answers" name="Show_All_Answers" nameLabel="Lesson_Progress_property_show_all_answers" type="boolean"/>
	</model>
<css>.lesson-progress-container .progress-bar-container.hidden, .lesson-progress-container .progress-box.hidden {&#13;
    display: none;&#13;
}&#13;
&#13;
.lesson-progress-container {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
&#13;
}&#13;
&#13;
.lesson-progress-container .progress-bar-container {&#13;
    width: 200px;&#13;
    height: 50px;&#13;
    position: relative;&#13;
    border-radius: 5px;&#13;
    border: 2px solid #02789F;&#13;
    padding: 2px;&#13;
    display: inline-block;&#13;
    float: left;&#13;
}&#13;
&#13;
.lesson-progress-container .progress-bar {&#13;
    background-color: #3CC6CD;&#13;
    position: absolute;&#13;
    height: 50px;&#13;
    border-radius: 5px;&#13;
}&#13;
&#13;
.lesson-progress-container .progress-text {&#13;
    line-height: 50px;&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.lesson-progress-container .progress-box .text {&#13;
    min-height: 35px;&#13;
}&#13;
&#13;
.lesson-progress-container .progress-box {&#13;
    line-height: 14px;&#13;
    display: inline-block;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
    padding: 3px;&#13;
    border: 1px solid #02789F;&#13;
    margin-left: 5px;&#13;
    text-align: center;&#13;
    border-radius: 5px;&#13;
    font-size: 10px;&#13;
    float: left;&#13;
}&#13;
</css><view>&lt;div class="lesson-progress-container"&gt;&#13;
    &lt;div class="progress-bar-container hidden"&gt;&#13;
        &lt;div class="progress-bar"&gt;&lt;/div&gt;&#13;
        &lt;div class="progress-text"&gt;0%&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box correct-answers hidden"&gt;&#13;
        &lt;div class="text"&gt;Correct&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box max-score hidden"&gt;&#13;
        &lt;div class="text"&gt;Max Score&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box mistakes hidden"&gt;&#13;
        &lt;div class="text"&gt;Mistakes&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box checks hidden"&gt;&#13;
        &lt;div class="text"&gt;Checks&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box errors hidden"&gt;&#13;
        &lt;div class="text"&gt;Errors&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="lesson-progress-container"&gt;&#13;
    &lt;div class="progress-bar-container hidden"&gt;&#13;
        &lt;div class="progress-bar" style="width: 50%;"&gt;&lt;/div&gt;&#13;
        &lt;div class="progress-text"&gt;50%&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box correct-answers hidden"&gt;&#13;
        &lt;div class="text"&gt;Correct&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box max-score hidden"&gt;&#13;
        &lt;div class="text"&gt;Max Score&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box mistakes hidden"&gt;&#13;
        &lt;div class="text"&gt;Mistakes&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box checks hidden"&gt;&#13;
        &lt;div class="text"&gt;Checks&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box errors hidden"&gt;&#13;
        &lt;div class="text"&gt;Errors&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonLesson_Progress_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('ShowErrors', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName, _) {&#13;
        if (eventName == 'ShowErrors') {&#13;
            presenter.setShowErrorsMode();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        return {&#13;
            showProgressBar: ModelValidationUtils.validateBoolean(model['Show_Progress_Bar']),&#13;
            showChecks: ModelValidationUtils.validateBoolean(model['Show_Checks']),&#13;
            showErrors: ModelValidationUtils.validateBoolean(model['Show_Errors']),&#13;
            showMistakes: ModelValidationUtils.validateBoolean(model['Show_Mistakes']),&#13;
            showMaxScore: ModelValidationUtils.validateBoolean(model['Show_All_Answers']),&#13;
            showCorrectAnswers: ModelValidationUtils.validateBoolean(model['Show_Correct_Answers'])&#13;
        }&#13;
    };&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.$progressBarContainer = presenter.$view.find('.progress-bar-container');&#13;
        presenter.$progressBar = presenter.$view.find('.progress-bar');&#13;
        presenter.$progressText = presenter.$view.find('.progress-text');&#13;
        presenter.$checks = presenter.$view.find('.checks');&#13;
        presenter.$errors = presenter.$view.find('.errors');&#13;
        presenter.$mistakes = presenter.$view.find('.mistakes');&#13;
        presenter.$maxScore = presenter.$view.find('.max-score');&#13;
        presenter.$correctAnswers = presenter.$view.find('.correct-answers');&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        removeHidden(presenter.configuration.showProgressBar, presenter.$progressBarContainer);&#13;
        removeHidden(presenter.configuration.showChecks, presenter.$checks);&#13;
        removeHidden(presenter.configuration.showErrors, presenter.$errors);&#13;
        removeHidden(presenter.configuration.showMistakes, presenter.$mistakes);&#13;
        removeHidden(presenter.configuration.showMaxScore, presenter.$maxScore);&#13;
        removeHidden(presenter.configuration.showCorrectAnswers, presenter.$correctAnswers);&#13;
    }&#13;
&#13;
    function removeHidden(shouldRemove, $element) {&#13;
        if (shouldRemove) {&#13;
            $element.removeClass('hidden');&#13;
        } else {&#13;
            $element.addClass('hidden');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.run = function(view, model){&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    function getLessonScore(){&#13;
        var model = presenter.playerController.getPresentation();&#13;
        var scoreService = presenter.playerController.getScore();&#13;
        var sumOfProgress = 0.0,&#13;
            sumOfMistakes = 0.0,&#13;
            sumOfErrors = 0.0,&#13;
            sumOfChecks = 0.0,&#13;
            sumOfScores = 0.0,&#13;
            count = 0;&#13;
&#13;
        for(var i = 0; i &lt; model.getPageCount(); i++){&#13;
            var page = model.getPage(i);&#13;
            if(page.isReportable()){&#13;
                count += 1;&#13;
                var score = scoreService.getPageScoreById(page.getId());&#13;
                if (score['maxScore'] &gt; 0) {&#13;
                    var percentageScore = (score['score']*100.0) / score['maxScore'];&#13;
                    sumOfProgress += percentageScore;&#13;
                }&#13;
&#13;
                sumOfMistakes += score['mistakeCount'];&#13;
                sumOfErrors += score['errorCount'];&#13;
                sumOfChecks += score['checkCount'];&#13;
                sumOfScores += score['score'];&#13;
            }&#13;
        }&#13;
&#13;
        var progress = sumOfProgress / count;&#13;
        return {&#13;
            progress: parseInt(progress, 10),&#13;
            sumOfMaxScore: scoreService.getMaxScore(),&#13;
            sumOfMistakes: sumOfMistakes,&#13;
            sumOfErrors: sumOfErrors,&#13;
            sumOfChecks: sumOfChecks,&#13;
            sumOfScores: sumOfScores&#13;
        };&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
        var lessonScore = getLessonScore();&#13;
&#13;
        if (presenter.configuration.showProgressBar) {&#13;
            presenter.$progressBar.css('width', lessonScore.progress + '%');&#13;
            presenter.$progressText.html(lessonScore.progress + '%');&#13;
        }&#13;
&#13;
        if (presenter.configuration.showChecks) {&#13;
            presenter.$checks.find('.value').html(lessonScore.sumOfChecks);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMistakes) {&#13;
            presenter.$mistakes.find('.value').html(lessonScore.sumOfMistakes);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showErrors) {&#13;
            presenter.$errors.find('.value').html(lessonScore.sumOfErrors);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMaxScore) {&#13;
            presenter.$maxScore.find('.value').html(lessonScore.sumOfMaxScore);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showCorrectAnswers) {&#13;
            presenter.$correctAnswers.find('.value').html(lessonScore.sumOfScores);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function(){&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.$view.show();&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.$view.hide();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show' : presenter.show,&#13;
            'hide' : presenter.hide,&#13;
            'getLessonProgress' : presenter.getLessonProgress,&#13;
            'getLessonScore' : presenter.getLessonScore,&#13;
            'getLessonMaxScore' : presenter.getLessonMaxScore,&#13;
            'getLessonMistakes' : presenter.getLessonMistakes,&#13;
            'getLessonChecks' : presenter.getLessonChecks,&#13;
            'getLessonErrors' : presenter.getLessonErrors&#13;
        };&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getLessonProgress = function() {&#13;
        return getLessonScore().progress;&#13;
    };&#13;
&#13;
    presenter.getLessonScore = function() {&#13;
        return getLessonScore().sumOfScores;&#13;
    };&#13;
&#13;
    presenter.getLessonMaxScore = function() {&#13;
        return getLessonScore().sumOfMaxScore;&#13;
    };&#13;
&#13;
    presenter.getLessonMistakes = function() {&#13;
        return getLessonScore().sumOfMistakes;&#13;
    };&#13;
&#13;
    presenter.getLessonChecks = function() {&#13;
        return getLessonScore().sumOfChecks;&#13;
    };&#13;
&#13;
    presenter.getLessonErrors = function() {&#13;
        return getLessonScore().sumOfErrors;&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
&#13;
&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Lesson_Score_Counter" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
<model>
    <property displayName="Display Mode" name="DisplayMode" nameLabel="Lesson_Score_Counter_property_display_mode" type="{Fraction (Score/Max Score),Score,Max Score,Percentage}"/>
</model>
<css>.lesson-score-counter-wrapper {&#13;
&#13;
}&#13;
&#13;
.lesson-score-counter-wrapper &gt; div.hidden {&#13;
    display: none;&#13;
}&#13;
&#13;
.lesson-score-counter-wrapper &gt; div {&#13;
    border: 1px solid #002266;&#13;
    border-radius: 4px;&#13;
    background-color: #fafafa;&#13;
    box-shadow: 1px 1px 1px #005599;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
    text-align: center;&#13;
    line-height: 50px;&#13;
    font-size: 12px;&#13;
}&#13;
&#13;
.lesson-score-counter-wrapper .fraction &gt; div {&#13;
    text-align: left;&#13;
    display: inline-block;&#13;
}&#13;
</css><view>&lt;div class="lesson-score-counter-wrapper"&gt;&#13;
    &lt;div class="fraction hidden"&gt;&#13;
        &lt;div class="score"&gt;&#13;
            0&#13;
        &lt;/div&gt;&#13;
        &lt;div class="separator"&gt;&#13;
            /&#13;
        &lt;/div&gt;&#13;
        &lt;div class="max-score"&gt;&#13;
            0&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="score hidden"&gt;&#13;
        0&#13;
    &lt;/div&gt;&#13;
    &lt;div class="max-score hidden"&gt;&#13;
        0&#13;
    &lt;/div&gt;&#13;
    &lt;div class="percentage hidden"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="lesson-score-counter-wrapper"&gt;&#13;
    &lt;div class="fraction hidden"&gt;&#13;
        &lt;div class="score"&gt;&#13;
            0&#13;
        &lt;/div&gt;&#13;
        &lt;div class="separator"&gt;&#13;
            /&#13;
        &lt;/div&gt;&#13;
        &lt;div class="max-score"&gt;&#13;
            0&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="score hidden"&gt;&#13;
        0&#13;
    &lt;/div&gt;&#13;
    &lt;div class="max-score hidden"&gt;&#13;
        0&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonLesson_Score_Counter_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.isVisible = true;&#13;
    presenter.score = 0;&#13;
    presenter.maxScore = 0;&#13;
&#13;
    presenter.DISPLAY_MODE = {&#13;
        FRACTION: 1,&#13;
        SCORE: 2,&#13;
        MAX_SCORE: 3,&#13;
        PERCENTAGE: 4&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
    };&#13;
&#13;
    presenter.createEventData = function (score) {&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(eventName, eventData) {&#13;
        presenter.eventBus.sendEvent(eventName, eventData);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        return {&#13;
            'isVisible' : ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            'addonID' : model['ID'],&#13;
            'displayMode' : getDisplayMode(model['DisplayMode'])&#13;
        }&#13;
    };&#13;
&#13;
    function getDisplayMode(rawDisplayMode) {&#13;
        if (rawDisplayMode == 'Fraction (Score/Max Score)' || rawDisplayMode == '') { // when dropdown hasn't been changed it gives you empty string&#13;
            return presenter.DISPLAY_MODE.FRACTION;&#13;
        } else if (rawDisplayMode == 'Score'){&#13;
            return presenter.DISPLAY_MODE.SCORE;&#13;
        } else if (rawDisplayMode == 'Max Score') {&#13;
            return presenter.DISPLAY_MODE.MAX_SCORE;&#13;
        } else if (rawDisplayMode == 'Percentage') {&#13;
            return presenter.DISPLAY_MODE.PERCENTAGE;&#13;
        }&#13;
    }&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.$fractionWrapper = presenter.$view.find('.lesson-score-counter-wrapper &gt; .fraction');&#13;
        presenter.$scoreWrapper = presenter.$view.find('.lesson-score-counter-wrapper &gt; .score');&#13;
        presenter.$maxScoreWrapper = presenter.$view.find('.lesson-score-counter-wrapper &gt; .max-score');&#13;
        presenter.$percentageWrapper = presenter.$view.find('.lesson-score-counter-wrapper &gt; .percentage');&#13;
&#13;
        if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.FRACTION) {&#13;
            toggleBoxVisibility(presenter.$fractionWrapper);&#13;
        } else if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.SCORE) {&#13;
            toggleBoxVisibility(presenter.$scoreWrapper);&#13;
        } else if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.MAX_SCORE) {&#13;
            toggleBoxVisibility(presenter.$maxScoreWrapper);&#13;
        } else if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.PERCENTAGE) {&#13;
            toggleBoxVisibility(presenter.$percentageWrapper);&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            updateValue();&#13;
        }&#13;
    }&#13;
&#13;
    function updateValue(scoreValue, maxScoreValue) {&#13;
        if (presenter.playerController) {&#13;
            var score = scoreValue == undefined ? 0 : scoreValue,&#13;
                maxScore = maxScoreValue == undefined ? 0 : maxScoreValue;&#13;
&#13;
            var scoreService = presenter.playerController.getScore();&#13;
&#13;
            var score = scoreService.getTotalScore(),&#13;
                maxScore = scoreService.getMaxScore();&#13;
&#13;
            if (maxScore &gt; 0) {&#13;
                presenter.$percentageWrapper.html(parseInt(((score/maxScore) * 100), 10) + '%');&#13;
            }&#13;
            presenter.$fractionWrapper.find('.score').html(score);&#13;
            presenter.$fractionWrapper.find('.max-score').html(maxScore);&#13;
            presenter.$scoreWrapper.html(score);&#13;
            presenter.$maxScoreWrapper.html(maxScore);&#13;
            presenter.score = score;&#13;
            presenter.maxScore = maxScore;&#13;
        }&#13;
    }&#13;
&#13;
    function toggleBoxVisibility($element) {&#13;
        presenter.$view.find('.lesson-score-counter-wrapper &gt; div').addClass('hidden');&#13;
        $element.removeClass('hidden');&#13;
    }&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {};&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            'isVisible' : presenter.isVisible,&#13;
            'score' : presenter.score,&#13;
            'maxScore' : presenter.maxScore&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var parsed = JSON.parse(state);&#13;
        presenter.isVisible = parsed.isVisible;&#13;
&#13;
        updateValue(parsed.score, parsed.maxScore);&#13;
&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Line" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Rotation angle" nameLabel="Line_property_rotation_angle" type="string"/>
		<property name="Line width" nameLabel="Line_property_line_width" type="string"/>
		<property name="Line color" nameLabel="Line_property_line_color" type="string"/>
        <property name="Line opacity" nameLabel="Line_property_line_opacity" type="string"/>
		<property name="Left line ending" nameLabel="Line_property_left_line_ending" type="{None, Round, Circle, Square}"/>
        <property name="Right line ending" nameLabel="Line_property_right_line_ending" type="{None, Round, Circle, Square}"/>
	</model>
<css>.line-wrapper {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    overflow: hidden;&#13;
}&#13;
</css><view>&lt;div class="line-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="line-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonLine_create() {&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    presenter.LINE_ENDING = {&#13;
        NONE: 'None',&#13;
        CIRCLE: 'Circle',&#13;
        ROUND: 'Round',&#13;
        SQUARE: 'Square'&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'R01': "Rotation angle must be between 0 and 360 degrees!",&#13;
        'R02': "Rotation angle is not a number!",&#13;
        'ST1': "Line width must be a positive number",&#13;
        'ST2': "Line width is not a number!",&#13;
        'ST3': "Line color must be in RGB format (hexadecimal) and start with #",&#13;
        'ST4': "Line opacity must be a positive number between 0 and 1",&#13;
        'ST5': "Line opacity is not a number!",&#13;
        'F01': "Line color must be in RGB format (hexadecimal) and start with #",&#13;
        'RU1': "Addon dimensions are too small to draw line with endings (or line is too thick)!",&#13;
        'RU2': "Addon dimensions are too small to draw line with circle ending!",&#13;
        'RU3': "Addon dimensions are too small to draw line with square ending!"&#13;
    };&#13;
&#13;
    function convertToRadians(degrees) {&#13;
        return degrees * Math.PI / 180;&#13;
    }&#13;
&#13;
    function presenterLogic(view, model) {&#13;
        presenter.$view = $(view);&#13;
        var containerDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var containerDistances = DOMOperationsUtils.calculateOuterDistances(containerDimensions);&#13;
&#13;
        presenter.$view.css({&#13;
            width: (presenter.$view.width() - containerDistances.horizontal) + 'px',&#13;
            height: (presenter.$view.height() - containerDistances.vertical) + 'px'&#13;
        });&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        var canvasWrapper = presenter.$view.find('.line-wrapper:first')[0];&#13;
        var wrapperDimensions = DOMOperationsUtils.getOuterDimensions(canvasWrapper);&#13;
        var wrapperDistances = DOMOperationsUtils.calculateOuterDistances(wrapperDimensions);&#13;
&#13;
        var canvasWrapperWidth = presenter.$view.width() - wrapperDistances.horizontal;&#13;
        var canvasWrapperHeight = presenter.$view.height() - wrapperDistances.vertical;&#13;
        $(canvasWrapper).css({&#13;
            width: (canvasWrapperWidth &lt; 1 ? model.Width : canvasWrapperWidth) + 'px',&#13;
            height: (canvasWrapperHeight &lt; 1 ? model.Height : canvasWrapperHeight) + 'px'&#13;
        });&#13;
&#13;
        var angle = parseInt(presenter.configuration.rotation);&#13;
        presenter.drawLine(canvasWrapper, canvasWrapperWidth, canvasWrapperHeight, angle);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    }&#13;
&#13;
    presenter.applyStyles = function (element) {&#13;
        element.attr({&#13;
            'stroke-width': presenter.configuration.strokeWidth,&#13;
            'stroke': presenter.configuration.strokeColor,&#13;
            'opacity': presenter.configuration.strokeOpacity,&#13;
            'fill': presenter.configuration.strokeColor,&#13;
            'fill-rule': 'evenodd'&#13;
        });&#13;
&#13;
        if (presenter.configuration.cornersRoundings) {&#13;
            element.attr('stroke-linecap', 'round');&#13;
        }&#13;
    };&#13;
&#13;
    function transformShape(element, angle, width, height, axis) {&#13;
        // Calculate space needed for ending display&#13;
        var neededSpace = 0;&#13;
        if (angle % 90 != 0)  neededSpace = 1.7 * Math.abs(Math.cos(convertToRadians(angle))) * presenter.configuration.strokeWidth;&#13;
        //Line length after rotation&#13;
        var newLineLengh = Math.min((width - axis) / Math.abs(Math.cos(convertToRadians(angle))), (height - axis) / Math.abs(Math.cos(convertToRadians(90 - angle)))) - neededSpace;&#13;
        var roundedScale = Math.round(newLineLengh / (width) * 100) / 100; // Rounding scale to two decimal places&#13;
        var cx = parseInt(width / 2, 10);&#13;
        var cy = parseInt(height / 2, 10);&#13;
&#13;
        element.transform("r" + angle + "," + cx + "," + cy);&#13;
        element.transform("...s" + roundedScale + "," + roundedScale + "," + cx + "," + cy);&#13;
    }&#13;
&#13;
    function calculateSimpleLinePoints(width, height, lineWidth, lineEnding, leftLinePart) {&#13;
        //space needed for rounded endings&#13;
        var roundSpace = 0;&#13;
        if (lineEnding == presenter.LINE_ENDING.ROUND) roundSpace = lineWidth / 2;&#13;
&#13;
        var tmpY = parseInt((height) / 2, 10);&#13;
        var tmpX = parseInt((width) / 2, 10);&#13;
        if (leftLinePart) { //for left part of the line&#13;
            return [&#13;
                { x: tmpX, y: tmpY },&#13;
                { x: roundSpace, y: tmpY }&#13;
            ];&#13;
        } else {&#13;
            return [&#13;
                { x: tmpX, y: tmpY },&#13;
                { x: width - roundSpace, y: tmpY }&#13;
            ];&#13;
        }&#13;
    }&#13;
&#13;
    function calculateLinePoints(lineEnding, width, height, horizontalAxis, leftLinePart) {&#13;
        var points = {};&#13;
        switch (lineEnding) {&#13;
            case presenter.LINE_ENDING.CIRCLE:&#13;
                points.pointA = {&#13;
                    x: parseInt(width / 2, 10),&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
                if (leftLinePart) {&#13;
                    points.pointB = {&#13;
                        x: 2 * horizontalAxis + (presenter.configuration.strokeWidth / 2) + 1.5,&#13;
                        y: parseInt(height / 2, 10)&#13;
                    };&#13;
                    points.pointC = {&#13;
                        x: 2 * horizontalAxis + (presenter.configuration.strokeWidth / 2) + 1.5,&#13;
                        y: parseInt(height / 2, 10)&#13;
                    };&#13;
                } else {&#13;
                    points.pointB = {&#13;
                        x: width - 2 * horizontalAxis - (presenter.configuration.strokeWidth / 2) - 1.5,&#13;
                        y: parseInt(height / 2, 10)&#13;
                    };&#13;
                    points.pointC = {&#13;
                        x: width - 2 * horizontalAxis - (presenter.configuration.strokeWidth / 2) - 1.5,&#13;
                        y: parseInt(height / 2, 10)&#13;
                    };&#13;
                }&#13;
                points.pointD = {&#13;
                    x: parseInt(width / 2, 10),&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
&#13;
                break;&#13;
            case presenter.LINE_ENDING.SQUARE:&#13;
                var widthSpace = width - (presenter.configuration.strokeWidth / 2);&#13;
                points.pointA = {&#13;
                    x: parseInt(width / 2, 10),&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
&#13;
                if (leftLinePart) {&#13;
                    points.pointB = {&#13;
                        x: (presenter.configuration.strokeWidth / 2) + 2 * horizontalAxis,&#13;
                        y: parseInt(height / 2, 10)&#13;
                    };&#13;
                    points.pointC = {&#13;
                        x: (presenter.configuration.strokeWidth / 2) + 2 * horizontalAxis,&#13;
                        y: parseInt((height) / 2, 10) + horizontalAxis&#13;
                    };&#13;
                    points.pointD = {&#13;
                        x: (presenter.configuration.strokeWidth / 2),&#13;
                        y: parseInt((height) / 2, 10) + horizontalAxis&#13;
                    };&#13;
                    points.pointE = {&#13;
                        x: (presenter.configuration.strokeWidth / 2),&#13;
                        y: parseInt((height) / 2, 10) - horizontalAxis&#13;
                    };&#13;
                    points.pointF = {&#13;
                        x: (presenter.configuration.strokeWidth / 2) + 2 * horizontalAxis,&#13;
                        y: parseInt((height) / 2, 10) - horizontalAxis&#13;
                    };&#13;
                    points.pointG = {&#13;
                        x: (presenter.configuration.strokeWidth / 2) + 2 * horizontalAxis,&#13;
                        y: parseInt(height / 2, 10)&#13;
                    };&#13;
                } else {&#13;
                    points.pointB = {&#13;
                        x: widthSpace - 2 * horizontalAxis,&#13;
                        y: parseInt(height / 2, 10)&#13;
                    };&#13;
                    points.pointC = {&#13;
                        x: widthSpace - 2 * horizontalAxis,&#13;
                        y: parseInt((height) / 2, 10) + horizontalAxis&#13;
                    };&#13;
                    points.pointD = {&#13;
                        x: widthSpace,&#13;
                        y: parseInt((height) / 2, 10) + horizontalAxis&#13;
                    };&#13;
                    points.pointE = {&#13;
                        x: widthSpace,&#13;
                        y: parseInt((height) / 2, 10) - horizontalAxis&#13;
                    };&#13;
                    points.pointF = {&#13;
                        x: widthSpace - 2 * horizontalAxis,&#13;
                        y: parseInt((height) / 2, 10) - horizontalAxis&#13;
                    };&#13;
                    points.pointG = {&#13;
                        x: widthSpace - 2 * horizontalAxis,&#13;
                        y: parseInt(height / 2, 10)&#13;
                    };&#13;
&#13;
                }&#13;
                points.pointH = {&#13;
                    x: parseInt(width / 2, 10),&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
        }&#13;
        return points;&#13;
    }&#13;
&#13;
    function createLinePath(width, height, lineEnding, horizontalAxis, leftLinePart) {&#13;
        var points = [];&#13;
        var pathString;&#13;
        var verticalAxis = horizontalAxis + 0.5;&#13;
        presenter.configuration.cornersRoundings = false;&#13;
        switch (lineEnding) {&#13;
            case presenter.LINE_ENDING.NONE:&#13;
                points = calculateSimpleLinePoints(width, height, presenter.configuration.strokeWidth, lineEnding, leftLinePart);&#13;
                //fix for one round ending and second "none"&#13;
                pathString = points[0].x + "," + points[0].y;&#13;
                pathString += "L" + points[1].x + "," + points[1].y;&#13;
                pathString += "L" + points[0].x + "," + points[0].y;&#13;
                break;&#13;
            case presenter.LINE_ENDING.ROUND:&#13;
                points = calculateSimpleLinePoints(width, height, presenter.configuration.strokeWidth, lineEnding, leftLinePart);&#13;
                if (leftLinePart) {&#13;
                    pathString = points[0].x + "," + points[0].y;&#13;
                    pathString += "L" + points[1].x + "," + points[1].y;&#13;
                } else {&#13;
                    pathString = points[0].x + "," + points[0].y;&#13;
                    pathString += "L" + points[1].x + "," + points[1].y;&#13;
                }&#13;
                presenter.configuration.cornersRoundings = true;&#13;
                break;&#13;
            case presenter.LINE_ENDING.CIRCLE:&#13;
                points = calculateLinePoints(presenter.LINE_ENDING.CIRCLE, width, height, horizontalAxis, leftLinePart);&#13;
                pathString = points.pointA.x + "," + points.pointA.y + "L" + points.pointB.x + "," + points.pointB.y;&#13;
                if (leftLinePart) {&#13;
                    pathString += "A" + horizontalAxis + " " + verticalAxis + " 90 1 1 " + points.pointC.x + " " + (points.pointC.y - 1);&#13;
                } else {&#13;
                    pathString += "A" + horizontalAxis + " " + verticalAxis + " 90 1 0 " + points.pointC.x + " " + (points.pointC.y - 1);&#13;
                }&#13;
                pathString += "L" + points.pointC.x + "," + points.pointC.y;&#13;
                pathString += "L" + points.pointD.x + "," + points.pointD.y;&#13;
                break;&#13;
            case presenter.LINE_ENDING.SQUARE:&#13;
                points = calculateLinePoints(presenter.LINE_ENDING.SQUARE, width, height, horizontalAxis, leftLinePart);&#13;
                pathString = points.pointA.x + "," + points.pointA.y + "L" + points.pointB.x + "," + points.pointB.y;&#13;
                pathString += "L" + points.pointC.x + "," + points.pointC.y;&#13;
                pathString += "L" + points.pointD.x + "," + points.pointD.y;&#13;
                pathString += "L" + points.pointE.x + "," + points.pointE.y;&#13;
                pathString += "L" + points.pointF.x + "," + points.pointF.y;&#13;
                pathString += "L" + points.pointG.x + "," + points.pointG.y;&#13;
                pathString += "L" + points.pointH.x + "," + points.pointH.y;&#13;
                break;&#13;
        }&#13;
        return pathString;&#13;
    }&#13;
&#13;
&#13;
    presenter.drawLine = function (wrapper, width, height, angle) {&#13;
&#13;
        if ((presenter.configuration.rightLineEnding !== presenter.LINE_ENDING.NONE) || (presenter.configuration.leftLineEnding !== presenter.LINE_ENDING.NONE)) {&#13;
            if (2 * presenter.configuration.strokeWidth + 2 &gt; height) {&#13;
                DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.ERROR_CODES, 'RU1');&#13;
                return;&#13;
            }&#13;
        }&#13;
&#13;
        var paper = new Raphael(wrapper, width &lt; 20 ? 20 : width, height &lt; 20 ? 20 : height);&#13;
        var radius = parseInt(presenter.configuration.strokeWidth / 2, 10) + 5;&#13;
        var horizontalAxis = radius - (presenter.configuration.strokeWidth) * 0.5 + 1.5;&#13;
&#13;
        var pathString;&#13;
        pathString = "M";&#13;
        if (presenter.configuration.rightLineEnding == presenter.LINE_ENDING.ROUND) {    //for rounded ending sequence of creating path does matter&#13;
            // case for simply line with two rounded endings&#13;
            if ((presenter.configuration.leftLineEnding == presenter.LINE_ENDING.ROUND)) {&#13;
                pathString += parseInt(presenter.configuration.strokeWidth / 2, 10) + "," + parseInt(height / 2, 10);&#13;
                pathString += "L" + (width - parseInt(presenter.configuration.strokeWidth / 2, 10)) + "," + parseInt(height / 2, 10);&#13;
                presenter.configuration.cornersRoundings = true;&#13;
            }&#13;
            else {&#13;
                pathString += createLinePath(width, height, presenter.configuration.leftLineEnding, horizontalAxis, true);&#13;
                pathString += "L";&#13;
                pathString += createLinePath(width, height, presenter.configuration.rightLineEnding, horizontalAxis, false);&#13;
            }&#13;
        }&#13;
        else {&#13;
            pathString += createLinePath(width, height, presenter.configuration.rightLineEnding, horizontalAxis, false);&#13;
            pathString += "L";&#13;
            pathString += createLinePath(width, height, presenter.configuration.leftLineEnding, horizontalAxis, true);&#13;
        }&#13;
&#13;
        var path = paper.path(pathString);&#13;
        presenter.applyStyles(path);&#13;
&#13;
        transformShape(path, angle, width, height, horizontalAxis);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
&#13;
        var rotation = model["Rotation angle"];&#13;
        if (!rotation) {&#13;
            rotation = 0;&#13;
        } else {&#13;
            rotation = parseFloat(rotation);&#13;
            if (isNaN(rotation)) {&#13;
                return { isError: true, errorCode: 'R02' };&#13;
            }&#13;
&#13;
            if (rotation &lt; 0 || rotation &gt; 360) {&#13;
                return { isError: true, errorCode: 'R01' };&#13;
            }&#13;
        }&#13;
&#13;
        var strokeWidth = model["Line width"];&#13;
        if (!strokeWidth) {&#13;
            strokeWidth = 1;&#13;
        } else {&#13;
            strokeWidth = parseFloat(strokeWidth);&#13;
            if (isNaN(strokeWidth)) {&#13;
                return { isError: true, errorCode: 'ST2' };&#13;
            }&#13;
&#13;
            if (strokeWidth &lt;= 0) {&#13;
                return { isError: true, errorCode: 'ST1' };&#13;
            }&#13;
        }&#13;
&#13;
        var strokeColor = model["Line color"];&#13;
        var regExp = new RegExp("#[0-9a-fA-F]+");&#13;
        var colorMatch;&#13;
&#13;
        if (!strokeColor) {&#13;
            strokeColor = "#000";&#13;
        } else {&#13;
            if (strokeColor.length &lt; 4 || strokeColor.length &gt; 7) {&#13;
                return { isError: true, errorCode: 'ST3' };&#13;
            }&#13;
&#13;
            colorMatch = strokeColor.match(regExp);&#13;
            if (!colorMatch || colorMatch === null || colorMatch.length &lt; 1) {&#13;
                return { isError: true, errorCode: 'ST3' };&#13;
            }&#13;
            if (colorMatch[0].length &lt; strokeColor.length) {&#13;
                return { isError: true, errorCode: 'ST3' };&#13;
            }&#13;
        }&#13;
&#13;
        var strokeOpacity = model["Line opacity"];&#13;
        if (!strokeOpacity) {&#13;
            strokeOpacity = 1;&#13;
        } else {&#13;
            strokeOpacity = parseFloat(strokeOpacity);&#13;
            if (isNaN(strokeOpacity)) {&#13;
                return { isError: true, errorCode: 'ST5' };&#13;
            }&#13;
&#13;
            if (strokeOpacity &lt; 0 || strokeOpacity &gt; 1) {&#13;
                return { isError: true, errorCode: 'ST4' };&#13;
            }&#13;
        }&#13;
&#13;
        var leftLineEnding = model["Left line ending"];&#13;
        if (!leftLineEnding) {&#13;
            leftLineEnding = presenter.LINE_ENDING.NONE;&#13;
        }&#13;
        var rightLineEnding = model["Right line ending"];&#13;
        if (!rightLineEnding) {&#13;
            rightLineEnding = presenter.LINE_ENDING.NONE;&#13;
        }&#13;
&#13;
        var isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            rotation: rotation,&#13;
            strokeWidth: strokeWidth,&#13;
            strokeColor: strokeColor,&#13;
            strokeOpacity: strokeOpacity,&#13;
            rightLineEnding: rightLineEnding,&#13;
            leftLineEnding: leftLineEnding,&#13;
            isVisibleByDefault: isVisibleByDefault,&#13;
            isVisible: isVisibleByDefault,&#13;
            cornersRoundings: false&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var isVisible = JSON.parse(state).isVisible;&#13;
&#13;
        presenter.configuration.isVisible = isVisible;&#13;
        presenter.setVisibility(isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Line_Number" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="Decimal Separator" nameLabel="Line_Number_property_decimal_separator" type="string"/>
        <property name="Min" nameLabel="Line_Number_property_min" type="string"/>
        <property name="Max" nameLabel="Line_Number_property_max" type="string"/>
        <property name="Ranges" nameLabel="Line_Number_property_ranges" type="text"/>
        <property name="Not Activity" nameLabel="Line_Number_property_not_activity" type="boolean"/>
        <property name="Step" nameLabel="Line_Number_property_step" type="string"/>
        <property name="Show Axis X Values" nameLabel="Line_Number_property_show_axis_x_values" type="boolean"/>
        <property name="Axis X Values" nameLabel="Line_Number_property_axis_x_values" type="string"/>
        <property name="Disable" nameLabel="Line_Number_property_disable" type="boolean"/>
        <property name="Don't show ranges" nameLabel="Line_Number_property_dont_show_ranges" type="boolean"/>
    </model>
<css>.addon_Line_Number .outer .infinity-left,&#13;
.addon_Line_Number .outer .infinity-right {&#13;
    height: 100%;&#13;
    width: 5%;&#13;
    position: absolute;&#13;
    z-index: 9;&#13;
}&#13;
&#13;
.addon_Line_Number .outer .infinity-left {&#13;
    left: 0px;&#13;
}&#13;
&#13;
.addon_Line_Number .outer .infinity-right {&#13;
    right: 0px;&#13;
}&#13;
&#13;
.addon_Line_Number .outer {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    background-color: #f3f3f3;&#13;
    position: relative;&#13;
}&#13;
&#13;
.addon_Line_Number .inner {&#13;
    width: 90%;&#13;
    height: 100%;&#13;
    position: absolute;&#13;
    left: 5%;&#13;
    background-color: #fefefe;&#13;
}&#13;
&#13;
.addon_Line_Number .x-axis {&#13;
    width: 100%;&#13;
    height: 2px;&#13;
    min-height: 2px;&#13;
    max-height: 2px;&#13;
    position: absolute;&#13;
    z-index: 12;&#13;
    top: 50%;&#13;
    background-color: #111;&#13;
}&#13;
&#13;
.addon_Line_Number .stepLine {&#13;
    width: 2px;&#13;
    height: 8px;&#13;
    min-height: 8px;&#13;
    background-color: #111;&#13;
    position: absolute;&#13;
    top: 50%;&#13;
    margin-top: -4px;&#13;
}&#13;
&#13;
.addon_Line_Number .rangeImage, .addon_Line_Number .currentMousePosition {&#13;
    background-repeat: no-repeat;&#13;
    width: 12px;&#13;
    height: 12px;&#13;
    position: absolute;&#13;
    left: -5px;&#13;
    top: -1px;&#13;
    z-index: 11;&#13;
    background-size: 12px 12px;&#13;
}&#13;
&#13;
.addon_Line_Number .exclude {&#13;
    background-image: url('resources/range_exclude.svg');&#13;
}&#13;
&#13;
.addon_Line_Number .include {&#13;
    background-image: url('resources/range_include.svg');&#13;
}&#13;
&#13;
.addon_Line_Number .correctRangeExclude {&#13;
    background-image: url('resources/correct_range_exclude.svg');&#13;
}&#13;
&#13;
.addon_Line_Number .correctRangeInclude {&#13;
    background-image: url('resources/correct_range_include.svg');&#13;
}&#13;
&#13;
.addon_Line_Number .wrongRangeExclude {&#13;
    background-image: url('resources/wrong_range_exclude.svg');&#13;
}&#13;
&#13;
.addon_Line_Number .wrongRangeInclude {&#13;
    background-image: url('resources/wrong_range_include.svg');&#13;
}&#13;
&#13;
.addon_Line_Number .clickArea {&#13;
    width: 10px;&#13;
    height: 50px;&#13;
    top: -25px;&#13;
    min-height: 10px;&#13;
    min-width: 10px;&#13;
    position: absolute;&#13;
    z-index: 12;&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.addon_Line_Number .stepText {&#13;
    position: absolute;&#13;
    font-size: 12px;&#13;
    top: 10px;&#13;
    white-space: nowrap;&#13;
}&#13;
&#13;
.addon_Line_Number .x-arrow {&#13;
    border-bottom: 6px solid transparent;&#13;
    border-left: 6px solid black;&#13;
    border-top: 6px solid transparent;&#13;
    right: -5px;&#13;
    top: -5px;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.addon_Line_Number .clickArea:hover,&#13;
.addon_Line_Number .outer .infinity-left:hover,&#13;
.addon_Line_Number .outer .infinity-right:hover {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.addon_Line_Number .selectedRange {&#13;
    background-color: #00bb44;&#13;
    box-shadow: 0px 0px 1px #111;&#13;
    min-height: 10px;&#13;
    height: 10px;&#13;
    min-width: 2px;&#13;
    width: 2px;&#13;
    top: -7px;&#13;
    position: absolute;&#13;
    z-index: 10;&#13;
    border-radius: 5px 5px 0px 0px;&#13;
}&#13;
&#13;
.addon_Line_Number .currentSelectedRange {&#13;
    background-color: #00aaff;&#13;
}&#13;
&#13;
.addon_Line_Number .correct {&#13;
    background-color: #00ff44;&#13;
}&#13;
&#13;
.addon_Line_Number .wrong {&#13;
    background-color: #ff3344;&#13;
}&#13;
&#13;
.addon_Line_Number .currentMousePosition {&#13;
    background-image: url('resources/current_mouse_pos.svg');&#13;
}&#13;
&#13;
.addon_Line_Number .infinityLeft {&#13;
    border-radius: 0px 5px 0px 0px;&#13;
}&#13;
&#13;
.addon_Line_Number .infinityRight {&#13;
    border-radius: 5px 0px 0px 0px;&#13;
}&#13;
&#13;
.addon_Line_Number .infinityBoth {&#13;
    border-radius: 0px;&#13;
}&#13;
&#13;
.addon_Line_Number .infinity-hover {&#13;
    background-color: #d8d8d8;&#13;
}&#13;
</css><view>&lt;div class="outer"&gt;&#13;
    &lt;div class="infinity-left" value="-INF"&gt;&lt;/div&gt;&#13;
        &lt;div class="inner"&gt;&#13;
            &lt;div class="x-axis"&gt;&#13;
                &lt;div class="x-arrow"&gt;&lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;div class="infinity-right" value="INF"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="outer"&gt;&#13;
    &lt;div class="infinity-left" value="-INF"&gt;&lt;/div&gt;&#13;
    &lt;div class="inner"&gt;&#13;
        &lt;div class="x-axis"&gt;&#13;
            &lt;div class="x-arrow"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="infinity-right" value="INF"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonLine_Number_create() {&#13;
    /*&#13;
        KNOWN ISSUES:&#13;
            PROPERTIES:&#13;
                Axis X Values:&#13;
                    0* - due to backward compatybility it should be treaten as 1*&#13;
&#13;
            (04.13.2015) CLICK &amp; DRAWING RANGES LOGIC:&#13;
                Due to logic of drawing ranges, presenter.configuration.max should be set before creating steps as a max&#13;
                value from field values. Changing this logic will break user click logic, which will not draw range to&#13;
                infinity right.&#13;
&#13;
&#13;
     */&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    var eventBus,&#13;
        playerController;&#13;
&#13;
    presenter.configuration = {};&#13;
    presenter.checkedPoints = [];&#13;
    presenter.results = {&#13;
        correct: 0,&#13;
        wrong: 0&#13;
    };&#13;
    presenter.singleDot = {&#13;
        value: -1,&#13;
        element: null&#13;
    };&#13;
&#13;
    presenter.maxElement = function (array) {&#13;
        if (array.length == 0) {&#13;
            throw "Empty array";&#13;
        }&#13;
&#13;
        return Math.max.apply(null, array);&#13;
    };&#13;
&#13;
    presenter.errorCodes = {&#13;
        'MIN01' : 'Min value cannot be empty.',&#13;
        'MIN02' : 'Min value must be a number.',&#13;
        'MIN03' : 'Min value does not fit the separator.',&#13;
        'MAX01' : 'Max value cannot be empty.',&#13;
        'MAX02' : 'Max value must be a number',&#13;
        'MAX03' : 'Max value does not fit the separator.',&#13;
        'MAX04' : 'Max value must be within xAxisValues. Suggested value: {{lastValue}} or {{lastValuePlusStep}}.',&#13;
        'MIN/MAX01' : 'Min value cannot be greater than Max value.',&#13;
        'RAN01' : 'One or more ranges are invalid.',&#13;
        'RAN02' : 'One or more ranges are invalid. Please make sure, that all ranges start/end can be displayed on X axis.',&#13;
        'STEP01' : 'The value in Step property is invalid.',&#13;
        'STEP02' : 'The value in Step does not fit the separator.',&#13;
        'STEP03' : 'The value in step property have to be greater than 0',&#13;
        'VAL01' : 'One or more X axis values are invalid.',&#13;
        'VAL02' : 'One or more X axis do not fit the separator.',&#13;
        'OOR01' : 'Can not resolve which range is currently selected.',&#13;
        'DSE01' : 'Semicolon is a reserved symbol.',&#13;
        'AXV_01': "Axis X cyclic values have to be greater or equal than 0.",&#13;
        'AXV_02': "Axis X fixed values have to be greater or equal than Min.",&#13;
        'AXV_03': "Axis X fixed values have to be lower or equal than Max.",&#13;
        'AXV_04': "Axis X Values property can have only number values.",&#13;
        'AXV_05': "Axis X Valuese property cant have duplicates."&#13;
    };&#13;
&#13;
    presenter.CLICKED_POSITION = {&#13;
        START: 1,&#13;
        MIDDLE: 2,&#13;
        END: 3,&#13;
        NONE: 4&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.removeZIndexes = function () {&#13;
        var selector = '.outer .infinity-left, .outer .infinity-right, .x-axis, .rangeImage, .addon_Line_Number .currentMousePosition, .clickArea, .selectedRange';&#13;
        presenter.$view.find(selector).css('z-index', '0');&#13;
    };&#13;
&#13;
    function addInitPoints () {&#13;
        var points = presenter.configuration.shouldDrawRanges;&#13;
        for (var i = 0; i &lt; points.length; i++) {&#13;
            if (points[i].start.value === points[i].end.value) {&#13;
                presenter.checkedPoints.push(points[i].values[0]);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.$view.disableSelection();&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        presenter.configuration.isPreview = isPreview;&#13;
&#13;
        if ( presenter.configuration.isError ) {&#13;
            return DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.errorCodes, presenter.configuration.errorCode);&#13;
        }&#13;
&#13;
        presenter.createSteps();&#13;
&#13;
        if ( !isPreview &amp;&amp; !presenter.configuration.isDisabled &amp;&amp; !presenter.configuration.dontShowRanges) {&#13;
            presenter.bindInfinityAreas();&#13;
        }&#13;
&#13;
        presenter.drawRanges(presenter.configuration.shouldDrawRanges, true);&#13;
&#13;
        presenter.configuration.isInitialDraw = false;&#13;
&#13;
        if (presenter.configuration.dontShowRanges) {&#13;
            addInitPoints();&#13;
        }&#13;
&#13;
        if ( !presenter.configuration.isVisibleByDefault ) {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        if ( isPreview ) {&#13;
            // z-index in Editor breaks down properties popups&#13;
            presenter.removeZIndexes();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.bindInfinityAreas = function() {&#13;
        var infinityLeft = presenter.$view.find('.infinity-left');&#13;
        var infinityRight = presenter.$view.find('.infinity-right');&#13;
&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            infinityLeft.on('touchstart', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
&#13;
                presenter.configuration.touchData.lastEvent = e;&#13;
            });&#13;
&#13;
            infinityLeft.on('touchend', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
&#13;
                if (presenter.configuration.touchData.lastEvent.type != e.type) {&#13;
                    var eventData = event.touches[0] || event.changedTouches[0];&#13;
                    clickLogic(eventData.target);&#13;
                }&#13;
&#13;
            });&#13;
        }&#13;
        else {&#13;
            infinityLeft.on('click', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                clickLogic($(e.target));&#13;
            });&#13;
        }&#13;
&#13;
        infinityLeft.hover(function() {&#13;
            infinityLeft.addClass('infinity-hover');&#13;
        }, function() {&#13;
            infinityLeft.removeClass('infinity-hover');&#13;
        });&#13;
&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            infinityRight.on('touchstart', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.configuration.touchData.lastEvent = e;&#13;
            });&#13;
&#13;
            infinityRight.on('touchend', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
&#13;
                if (presenter.configuration.touchData.lastEvent.type != e.type) {&#13;
                    var eventData = event.touches[0] || event.changedTouches[0];&#13;
                    clickLogic(eventData.target);&#13;
                }&#13;
            });&#13;
        }&#13;
        else {&#13;
            infinityRight.on('click', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                clickLogic($(e.target));&#13;
            });&#13;
        }&#13;
&#13;
        infinityRight.hover(function () {&#13;
            infinityRight.addClass('infinity-hover');&#13;
        }, function () {&#13;
            infinityRight.removeClass('infinity-hover');&#13;
        });&#13;
    };&#13;
&#13;
    function calculateStepWidth(xAxisValues) {&#13;
        var xAxisWidth = presenter.$view.find('.x-axis').width();&#13;
        return xAxisWidth / (xAxisValues.length + 1);&#13;
    }&#13;
&#13;
    function setClickedRanges(e) {&#13;
        var ranges = presenter.configuration.drawnRangesData.ranges,&#13;
            value = parseRangeStartOrEnd($(e).attr('value'), presenter.configuration.separator);&#13;
&#13;
        presenter.configuration.mouseData.clickedRanges = [];&#13;
&#13;
        $.each(ranges, function() {&#13;
            if ( $.inArray(value, this.values) &gt;= 0  ) {&#13;
                presenter.configuration.mouseData.clickedRanges.push(this);&#13;
            }&#13;
        });&#13;
&#13;
    }&#13;
&#13;
    function getClickedRangePosition(e) {&#13;
        var range = presenter.configuration.mouseData.clickedRanges[0];&#13;
&#13;
        if ( $(e).attr('value') == '-INF' ) {&#13;
            return presenter.CLICKED_POSITION.START;&#13;
        } else if ( $(e).attr('value') == 'INF' ) {&#13;
            return presenter.CLICKED_POSITION.END;&#13;
        } else if (range.start.element[0] == $(e).parent()[0]) {&#13;
            return presenter.CLICKED_POSITION.START;&#13;
        } else if (range.end.element[0] == $(e).parent()[0]) {&#13;
            return presenter.CLICKED_POSITION.END;&#13;
        } else {&#13;
            return presenter.CLICKED_POSITION.MIDDLE;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.removeRange = function(range, removeIncludeImages) {&#13;
        getSelectedRange(range).remove();&#13;
        if (!range.values) { range.values = [] }&#13;
&#13;
        var index = presenter.configuration.drawnRangesData.ranges.indexOf(range);&#13;
&#13;
        if (index &gt;= 0) {&#13;
            var removed = presenter.configuration.drawnRangesData.ranges.splice(index, 1);&#13;
&#13;
            if (removeIncludeImages &amp;&amp; removed.length &gt; 0) {&#13;
                var start = parseElement(removed[0].start.element);&#13;
                var end = parseElement(removed[0].end.element);&#13;
                $(start).find('.rangeImage').remove();&#13;
                $(end).find('.rangeImage').remove();&#13;
                $(start).find('.selectedRange').remove();&#13;
            }&#13;
        }&#13;
&#13;
        $.each(range.values, function() {&#13;
            var value = parseRangeStartOrEnd(this, presenter.configuration.separator);&#13;
            var index = presenter.configuration.drawnRangesData.values.indexOf(value);&#13;
            presenter.configuration.drawnRangesData.values.splice(index, 1);&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    function splitRange(range, e) {&#13;
&#13;
        presenter.removeRange(range, false);&#13;
        var clickedArea = $(e);&#13;
&#13;
        var firstRange = {&#13;
            'start' : range.start,&#13;
            'end' : createRangeElement(clickedArea, clickedArea.attr('value'), false)&#13;
        };&#13;
&#13;
        var secondRange = {&#13;
            'start' : firstRange.end,&#13;
            'end' : range.end&#13;
        };&#13;
&#13;
        presenter.drawRanges([firstRange, secondRange], true);&#13;
    }&#13;
&#13;
    function joinRanges(ranges) {&#13;
        var firstRange, secondRange;&#13;
        var min = 1000,&#13;
            max = -1000;&#13;
&#13;
        $.each(ranges, function() {&#13;
            if (this.end.value &gt; max) {&#13;
                max = this.end.value;&#13;
                secondRange = this;&#13;
            }&#13;
&#13;
            if (this.start.value &lt; min) {&#13;
                min = this.start.value;&#13;
                firstRange = this;&#13;
            }&#13;
        });&#13;
&#13;
        $.each(ranges, function() {&#13;
            presenter.removeRange(this, true);&#13;
        });&#13;
&#13;
        var joinedRange = {&#13;
            'start' : firstRange.start,&#13;
            'end' : secondRange.end&#13;
        };&#13;
&#13;
        removeRangesBetweenRange(joinedRange);&#13;
&#13;
        presenter.drawRanges([joinedRange], true);&#13;
&#13;
    }&#13;
&#13;
    function setClicks(e) {&#13;
&#13;
        var element = $(e);&#13;
        var position;&#13;
&#13;
        if ( presenter.isMouseAboveExistingRange(e) ) {&#13;
            position = getClickedRangePosition(e);&#13;
        } else {&#13;
            position = presenter.CLICKED_POSITION.NONE;&#13;
        }&#13;
&#13;
        var click = {&#13;
            element: element,&#13;
            position: position,&#13;
            time: (new Date()).getTime()&#13;
        };&#13;
&#13;
        presenter.configuration.mouseData.clicks.push( click );&#13;
    }&#13;
&#13;
    function displayCurrentMousePosition(e) {&#13;
        presenter.$view.find('.currentMousePosition').remove();&#13;
        var circle = $('&lt;div&gt;&lt;/div&gt;');&#13;
        circle.addClass('currentMousePosition');&#13;
        $(e).parent().append(circle);&#13;
    }&#13;
&#13;
    function hideCurrentMousePosition() {&#13;
        presenter.$view.find('.currentMousePosition').remove();&#13;
    }&#13;
&#13;
    function createClickArea(element, value) {&#13;
        var clickArea = $('&lt;div&gt;&lt;/div&gt;');&#13;
        var selectedRange = $('&lt;div&gt;&lt;/div&gt;');&#13;
&#13;
        clickArea.addClass('clickArea');&#13;
        selectedRange.addClass('selectedRange');&#13;
&#13;
        $(element).append(clickArea);&#13;
        clickArea.attr('value', value);&#13;
&#13;
        var width = presenter.configuration.stepWidth, left = - (presenter.configuration.stepWidth / 2) + 'px';&#13;
&#13;
        if ( value == presenter.configuration.min || value == presenter.configuration.max ) {&#13;
            width = width / 2;&#13;
        }&#13;
&#13;
        if ( value == presenter.configuration.min ) {&#13;
            left = 0;&#13;
        }&#13;
&#13;
        if ( value == presenter.configuration.max ) {&#13;
            left = - width;&#13;
        }&#13;
&#13;
        clickArea.css({&#13;
            'width' : width,&#13;
            'left' : left&#13;
        });&#13;
&#13;
    }&#13;
&#13;
    function bindClickAreaListeners(clickArea) {&#13;
        removeAllClickListeners();&#13;
&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            clickArea.on('touchstart', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
&#13;
                presenter.configuration.touchData.lastEvent = e;&#13;
            });&#13;
&#13;
            clickArea.on('touchend', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
&#13;
                if ( presenter.configuration.touchData.lastEvent.type != e.type ) {&#13;
                    var eventData = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] || e.originalEvent.targetTouches[0];&#13;
                    if (presenter.configuration.dontShowRanges) {&#13;
                        togglePoint($(eventData.target));&#13;
                    } else {&#13;
                        clickLogic($(eventData.target));&#13;
                    }&#13;
                }&#13;
            });&#13;
&#13;
            clickArea.on('click', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
        }&#13;
        else {&#13;
            clickArea.on('mouseleave', function (e) {&#13;
                e.stopPropagation();&#13;
                hideCurrentMousePosition();&#13;
            });&#13;
&#13;
            clickArea.on('mouseenter', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                displayCurrentMousePosition($(e.target));&#13;
            });&#13;
&#13;
            clickArea.on('contextmenu', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
            });&#13;
&#13;
            clickArea.on('click', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (presenter.configuration.dontShowRanges) {&#13;
                    togglePoint($(e.target));&#13;
                } else {&#13;
                    clickLogic($(e.target));&#13;
                }&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    function removeAllClickListeners() {&#13;
        var clickArea = presenter.$view.find('.clickArea');&#13;
        var infinityLeft = presenter.$view.find('.infinity-left');&#13;
        var infinityRight = presenter.$view.find('.infinity-right');&#13;
        var listeners = 'mouseleave mouseenter contextmenu touchstart touchend click';&#13;
&#13;
        clickArea.off(listeners);&#13;
        infinityRight.off(listeners);&#13;
        infinityLeft.off(listeners);&#13;
    }&#13;
&#13;
    function isFirstClick() {&#13;
        return presenter.configuration.mouseData.clicks.length == 1;&#13;
    }&#13;
&#13;
    function isSecondClick() {&#13;
        return presenter.configuration.mouseData.clicks.length == 2;&#13;
    }&#13;
&#13;
    function areBothClicksNone() {&#13;
        return presenter.configuration.mouseData.clicks[0].position == presenter.CLICKED_POSITION.NONE&#13;
            &amp;&amp; presenter.configuration.mouseData.clicks[1].position == presenter.CLICKED_POSITION.NONE;&#13;
    }&#13;
&#13;
    function isFirstClickNoneAndSecondNotNone() {&#13;
        return presenter.configuration.mouseData.clicks[0].position == presenter.CLICKED_POSITION.NONE&#13;
            &amp;&amp; presenter.configuration.mouseData.clicks[1].position != presenter.CLICKED_POSITION.NONE;&#13;
    }&#13;
&#13;
    function areTwoClickedRanges() {&#13;
        return presenter.configuration.mouseData.clickedRanges.length == 2;&#13;
    }&#13;
&#13;
    function isClickedStartOrEnd() {&#13;
        return presenter.configuration.mouseData.clicks[0].position == presenter.CLICKED_POSITION.END&#13;
            || presenter.configuration.mouseData.clicks[0].position == presenter.CLICKED_POSITION.START;&#13;
    }&#13;
&#13;
    function isClickedMiddle() {&#13;
        return presenter.configuration.mouseData.clicks[0].position == presenter.CLICKED_POSITION.MIDDLE;&#13;
    }&#13;
&#13;
    function isFirstStartOrEndAndSecondMiddleClicked() {&#13;
        return presenter.configuration.mouseData.clicks[1].position == presenter.CLICKED_POSITION.MIDDLE&#13;
            &amp;&amp; isClickedStartOrEnd()&#13;
            &amp;&amp; isBothClicksTheSameRange()&#13;
    }&#13;
&#13;
    function isFirstStartOrEndAndSecondNoneClicked() {&#13;
        return presenter.configuration.mouseData.clicks[1].position == presenter.CLICKED_POSITION.NONE&#13;
            &amp;&amp; isClickedStartOrEnd();&#13;
    }&#13;
&#13;
    // toggle include image when this situation happens&#13;
    function isTheSameRangeEndOrStartClickedInBothClicks() {&#13;
        return presenter.configuration.mouseData.clicks[0].position == presenter.configuration.mouseData.clicks[1].position&#13;
            &amp;&amp; presenter.configuration.mouseData.clicks[0].element[0] == presenter.configuration.mouseData.clicks[1].element[0];&#13;
    }&#13;
&#13;
    // this is when range should be deleted when both clicks were on the same range or joined when 1st/2nd click is on different range&#13;
    function isBothClicksTheSameRangeStartOrEnd() {&#13;
        return presenter.configuration.mouseData.clicks[0].element[0] != presenter.configuration.mouseData.clicks[1].element[0]&#13;
            &amp;&amp; (presenter.configuration.mouseData.clicks[0].position == presenter.CLICKED_POSITION.END&#13;
            || presenter.configuration.mouseData.clicks[0].position == presenter.CLICKED_POSITION.START)&#13;
            &amp;&amp; (presenter.configuration.mouseData.clicks[1].position == presenter.CLICKED_POSITION.END&#13;
            || presenter.configuration.mouseData.clicks[1].position == presenter.CLICKED_POSITION.START);&#13;
    }&#13;
&#13;
    function isBothClicksTheSameRange() {&#13;
        var firstClickRange = getRangeByValue( presenter.configuration.mouseData.clicks[0].element.attr('value') );&#13;
        var secondClickRange = getRangeByValue( presenter.configuration.mouseData.clicks[1].element.attr('value') );&#13;
        return compareRanges(firstClickRange, secondClickRange);&#13;
    }&#13;
&#13;
    function setCurrentClickedRange() {&#13;
        var first, second;&#13;
&#13;
        if ( presenter.configuration.mouseData.twoClickedRangesCount == 1 ) {&#13;
&#13;
            if ( presenter.configuration.mouseData.clickedRanges[0].start.value &gt; presenter.configuration.mouseData.clickedRanges[1].start.value ) {&#13;
                first = presenter.configuration.mouseData.clickedRanges[1];&#13;
                second = presenter.configuration.mouseData.clickedRanges[0];&#13;
            } else {&#13;
                first = presenter.configuration.mouseData.clickedRanges[0];&#13;
                second = presenter.configuration.mouseData.clickedRanges[1];&#13;
            }&#13;
        } else {&#13;
            if ( presenter.configuration.mouseData.clickedRanges[0].start.value &gt; presenter.configuration.mouseData.clickedRanges[1].start.value ) {&#13;
                first = presenter.configuration.mouseData.clickedRanges[0];&#13;
                second = presenter.configuration.mouseData.clickedRanges[1];&#13;
            } else {&#13;
                first = presenter.configuration.mouseData.clickedRanges[1];&#13;
                second = presenter.configuration.mouseData.clickedRanges[0];&#13;
            }&#13;
        }&#13;
&#13;
        presenter.configuration.mouseData.clickedRanges = [first, second];&#13;
    }&#13;
&#13;
    function resetClicks() {&#13;
&#13;
        if ( presenter.configuration.notCurrentSelectedRange ) {&#13;
            if ( presenter.configuration.mouseData.twoClickedRangesCount == 1 ) {&#13;
                addEndRangeImage( presenter.configuration.notCurrentSelectedRange.start.element, false );&#13;
            } else if ( presenter.configuration.mouseData.twoClickedRangesCount == 2 ) {&#13;
                addEndRangeImage( presenter.configuration.notCurrentSelectedRange.end.element, false );&#13;
            }&#13;
        }&#13;
&#13;
        presenter.$view.find('.currentSelectedRange').removeClass('currentSelectedRange');&#13;
&#13;
        presenter.configuration.mouseData.clicks = [];&#13;
        presenter.configuration.mouseData.twoClickedRangesCount = 0;&#13;
        presenter.configuration.notCurrentSelectedRange = null;&#13;
    }&#13;
&#13;
    function getSelectedRange(range) {&#13;
        var selectedRange;&#13;
&#13;
        if ( isValueInfinity(range.start.value) ) {&#13;
            selectedRange = presenter.$view.find('.clickArea[value="' + presenter.configuration.min + '"]').parent().find('.selectedRange');&#13;
        } else {&#13;
            selectedRange = range.start.element.find('.selectedRange');&#13;
        }&#13;
&#13;
        return selectedRange;&#13;
    }&#13;
&#13;
    function isLineNumberDisabled () {&#13;
        return ((presenter.configuration.isActivity &amp;&amp; presenter.configuration.isShowErrorsMode) ||&#13;
                 presenter.configuration.isDisabled);&#13;
    }&#13;
&#13;
    function isPointCorrect(point) {&#13;
        var correctPoints = getCorrectPoints();&#13;
&#13;
        if (correctPoints.indexOf(point) !== -1) {&#13;
            return true;&#13;
        }&#13;
    }&#13;
&#13;
    function togglePoint($eventTarget) {&#13;
        if (presenter.configuration.isShowErrorsMode || isLineNumberDisabled() || presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
        var $parent = $eventTarget.parent('.stepLine');&#13;
        var $rangeImage = $parent.find('.rangeImage');&#13;
&#13;
        if ($rangeImage.length === 1) {&#13;
            $rangeImage.remove();&#13;
&#13;
            presenter.checkedPoints = presenter.checkedPoints.filter(function(elem) {&#13;
                return elem != $eventTarget[0].value;&#13;
            });&#13;
&#13;
            eventBus.sendEvent("ValueChanged", presenter.createActionEventData($eventTarget[0].value, "0", isPointCorrect($eventTarget[0].value) ? 1 : 0));&#13;
        } else {&#13;
            var $imageContainer = $('&lt;div&gt;&lt;/div&gt;');&#13;
&#13;
            $imageContainer.addClass('rangeImage exclude include');&#13;
            $parent.append($imageContainer);&#13;
&#13;
            presenter.checkedPoints.push($eventTarget[0].value);&#13;
&#13;
            eventBus.sendEvent("ValueChanged", presenter.createActionEventData($eventTarget[0].value, "1", isPointCorrect($eventTarget[0].value) ? 1 : 0));&#13;
        }&#13;
&#13;
        var correctPoints = getCorrectPoints().sort().toString(),&#13;
            checkedPoints = $.extend(true, [], presenter.checkedPoints);&#13;
&#13;
            checkedPoints = checkedPoints.sort().toString();&#13;
&#13;
        if (correctPoints === checkedPoints) {&#13;
            eventBus.sendEvent("ValueChanged", presenter.createAllOKEventData());&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    function clickLogic(eventTarget) {&#13;
        if (isLineNumberDisabled() || presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.configuration.mouseData.twoClickedRangesCount &gt; 3) {&#13;
            presenter.configuration.mouseData.twoClickedRangesCount = 0;&#13;
        }&#13;
&#13;
        setClickedRanges(eventTarget);&#13;
        setClicks(eventTarget);&#13;
&#13;
        var firstClick = presenter.configuration.mouseData.clicks[0];&#13;
&#13;
        if (isFirstClick()) {&#13;
            if (firstClick.position == presenter.CLICKED_POSITION.NONE) {&#13;
                var value = parseRangeStartOrEnd(presenter.configuration.mouseData.clicks[0].element.attr('value'),&#13;
                                                 presenter.configuration.separator);&#13;
                presenter.singleDot = {&#13;
                    value: value,&#13;
                    element: firstClick.element&#13;
                };&#13;
&#13;
                if (!isValueInfinity(value)) {&#13;
                    addEndRangeImage(presenter.configuration.mouseData.clicks[0].element.parent(), true);&#13;
                }&#13;
            } else if (areTwoClickedRanges()) {&#13;
                presenter.configuration.mouseData.twoClickedRangesCount++;&#13;
&#13;
                if (presenter.configuration.mouseData.twoClickedRangesCount == 1) {&#13;
                    var selectedRange = getSelectedRange(presenter.configuration.mouseData.clickedRanges[0]);&#13;
                    selectedRange.addClass('currentSelectedRange');&#13;
                }&#13;
&#13;
                presenter.configuration.notCurrentSelectedRange = presenter.configuration.mouseData.clickedRanges[1];&#13;
            } else if (isClickedStartOrEnd()) {&#13;
                var clickedRange = presenter.configuration.mouseData.clickedRanges[0],&#13;
                    selectedRange = getSelectedRange(clickedRange);&#13;
&#13;
                selectedRange.addClass('currentSelectedRange');&#13;
            } else if (isClickedMiddle()) {&#13;
                splitRange(presenter.configuration.mouseData.clickedRanges[0], eventTarget);&#13;
                resetClicks();&#13;
            }&#13;
        } else if (isSecondClick()) {&#13;
            presenter.singleDot = {&#13;
                value: -1,&#13;
                element: null&#13;
            };&#13;
            var secondClick = presenter.configuration.mouseData.clicks[1];&#13;
            var firstValue = parseRangeStartOrEnd(firstClick.element.attr('value'), presenter.configuration.separator);&#13;
            var secondValue = parseRangeStartOrEnd(secondClick.element.attr('value'), presenter.configuration.separator);&#13;
            var newRange;&#13;
&#13;
            if (areBothClicksNone()) {&#13;
                var timeDiff = presenter.configuration.mouseData.clicks[1].time - presenter.configuration.mouseData.clicks[0].time;&#13;
                if (timeDiff &lt; 250 &amp;&amp; timeDiff &gt; 0) {&#13;
                    newRange = {&#13;
                        start: createRangeElement(firstClick.element, firstValue, true),&#13;
                        end: createRangeElement(firstClick.element, firstValue, true)&#13;
                    };&#13;
                    setRangeValues(newRange, true);&#13;
                    addToDrawnRanges(newRange);&#13;
                } else {&#13;
                    if (firstValue &gt; secondValue) {&#13;
                        newRange = {&#13;
                            start: createRangeElement(secondClick.element, secondValue, true),&#13;
                            end: createRangeElement(firstClick.element, firstValue, true)&#13;
                        };&#13;
                        removeRangesBetweenRange(newRange);&#13;
                        presenter.drawRanges([newRange], true);&#13;
                    } else if (firstValue &lt; secondValue) {&#13;
                        newRange = {&#13;
                            start: createRangeElement(firstClick.element, firstValue, true),&#13;
                            end: createRangeElement(secondClick.element, secondValue, true)&#13;
                        };&#13;
                        removeRangesBetweenRange(newRange);&#13;
                        presenter.drawRanges([newRange], true);&#13;
                    } else {&#13;
                        var rangeImage = firstClick.element.parent().find('.rangeImage');&#13;
&#13;
                        if ( rangeImage.hasClass('include') ) {&#13;
                            rangeImage.remove();&#13;
                        } else {&#13;
                            rangeImage.removeClass('exclude');&#13;
                            rangeImage.addClass('include');&#13;
                        }&#13;
                    }&#13;
                }&#13;
                resetClicks();&#13;
&#13;
            } else if (isFirstClickNoneAndSecondNotNone()) {&#13;
                if (firstValue &gt;  secondValue) {&#13;
                    newRange = {&#13;
                        start: createRangeElement(secondClick.element, secondValue, true),&#13;
                        end: createRangeElement(firstClick.element, firstValue, true)&#13;
                    };&#13;
                } else if (firstValue &lt; secondValue) {&#13;
                    newRange = {&#13;
                        start: createRangeElement(firstClick.element, firstValue, true),&#13;
                        end: createRangeElement(secondClick.element, secondValue, true)&#13;
                    };&#13;
                }&#13;
                joinRanges([newRange, presenter.configuration.mouseData.clickedRanges[0]]);&#13;
                resetClicks();&#13;
&#13;
            } else if (isFirstStartOrEndAndSecondMiddleClicked()) {&#13;
                var clickedRange = presenter.configuration.mouseData.clickedRanges[0];&#13;
&#13;
                if (firstClick.position == presenter.CLICKED_POSITION.START) {&#13;
                    newRange = {&#13;
                        start: createRangeElement( secondClick.element, secondValue, firstClick.element.parent().find('.rangeImage').hasClass('include') ),&#13;
                        end: createRangeElement( clickedRange.end.element, clickedRange.end.value, clickedRange.end.include )&#13;
                    };&#13;
                } else if ( firstClick.position == presenter.CLICKED_POSITION.END ) {&#13;
                    newRange = {&#13;
                        end: createRangeElement( secondClick.element, secondValue, firstClick.element.parent().find('.rangeImage').hasClass('include') ),&#13;
                        start: createRangeElement( clickedRange.start.element, clickedRange.start.value, clickedRange.start.include )&#13;
                    };&#13;
                }&#13;
                presenter.removeRange(clickedRange, true);&#13;
                presenter.drawRanges([newRange], true);&#13;
                resetClicks();&#13;
&#13;
            } else if (areTwoClickedRanges()) {&#13;
                presenter.configuration.mouseData.twoClickedRangesCount++;&#13;
&#13;
                if (presenter.configuration.mouseData.twoClickedRangesCount == 2) {&#13;
                    var currentSelectedRange = getSelectedRange(presenter.configuration.mouseData.clickedRanges[0]);&#13;
                    var selectedRange = getSelectedRange(presenter.configuration.mouseData.clickedRanges[1]);&#13;
                    selectedRange.addClass('currentSelectedRange');&#13;
                    currentSelectedRange.removeClass('currentSelectedRange');&#13;
                    presenter.configuration.mouseData.clicks = presenter.configuration.mouseData.clicks.slice(0, 1);&#13;
                    presenter.configuration.mouseData.clicks[0].position = presenter.CLICKED_POSITION.START;&#13;
                    presenter.configuration.notCurrentSelectedRange = presenter.configuration.mouseData.clickedRanges[0];&#13;
                } else if (presenter.configuration.mouseData.twoClickedRangesCount == 3) {&#13;
                    joinRanges( presenter.configuration.mouseData.clickedRanges );&#13;
                    resetClicks();&#13;
                } else {&#13;
                    presenter.removeRange(getRangeByValue( firstValue ), true);&#13;
                    addEndRangeImage(secondClick.element.parent(), false);&#13;
                    resetClicks();&#13;
                }&#13;
&#13;
                setCurrentClickedRange();&#13;
&#13;
            } else if ( isFirstStartOrEndAndSecondNoneClicked() ) {&#13;
                if ( firstValue &gt; secondValue ) {&#13;
                    newRange = {&#13;
                        start: createRangeElement(secondClick.element, secondValue, firstClick.element.parent().find('.rangeImage').hasClass('include')),&#13;
                        end: createRangeElement(firstClick.element, firstValue, firstClick.element.parent().find('.rangeImage').hasClass('include'))&#13;
                    };&#13;
&#13;
                    joinRanges( [newRange, getRangeByValue( firstValue )] );&#13;
                } else if ( firstValue &lt; secondValue ) {&#13;
                    newRange = {&#13;
                        start: createRangeElement(firstClick.element, firstValue, firstClick.element.parent().find('.rangeImage').hasClass('include') ),&#13;
                        end: createRangeElement(secondClick.element, secondValue, firstClick.element.parent().find('.rangeImage').hasClass('include') )&#13;
                    };&#13;
&#13;
                    joinRanges( [newRange, getRangeByValue( firstValue )] );&#13;
                }&#13;
&#13;
                resetClicks();&#13;
&#13;
            } else if ( isTheSameRangeEndOrStartClickedInBothClicks() ) {&#13;
                var imageWrapper = firstClick.element.parent().find('.rangeImage');&#13;
                var shouldInclude = !imageWrapper.hasClass('include');&#13;
                var index = presenter.configuration.drawnRangesData.ranges.indexOf(presenter.configuration.mouseData.clickedRanges[0]);&#13;
&#13;
                if ( presenter.configuration.mouseData.clicks[0].position == presenter.CLICKED_POSITION.START ) {&#13;
                    presenter.configuration.drawnRangesData.ranges[index].start.include = shouldInclude;&#13;
                } else if ( presenter.configuration.mouseData.clicks[0].position == presenter.CLICKED_POSITION.END ) {&#13;
                    presenter.configuration.drawnRangesData.ranges[index].end.include = shouldInclude;&#13;
                }&#13;
&#13;
                if (!(firstClick.element.hasClass('infinity-right') || firstClick.element.hasClass('infinity-left'))) {&#13;
                    toggleIncludeImage( imageWrapper, shouldInclude );&#13;
                }&#13;
&#13;
                if ( presenter.configuration.drawnRangesData.ranges[index].values.length == 1 ) {&#13;
                    presenter.removeRange( presenter.configuration.drawnRangesData.ranges[index], true );&#13;
                    imageWrapper.remove();&#13;
                }&#13;
&#13;
                presenter.$view.find('.currentSelectedRange').removeClass('currentSelectedRange');&#13;
                if (!(presenter.configuration.drawnRangesData.ranges[index] === undefined) &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    var rangeString = presenter.convertRangeToString(presenter.configuration.drawnRangesData.ranges[index]);&#13;
                    var eventData = presenter.createEventData(rangeString, false, checkIsRangeCorrect(presenter.configuration.drawnRangesData.ranges[index]));&#13;
&#13;
                    eventBus.sendEvent('ValueChanged', eventData);&#13;
                }&#13;
&#13;
                if ( presenter.allRangesCorrect() &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    var eventData = presenter.createAllOKEventData();&#13;
                    eventBus.sendEvent('ValueChanged', eventData);&#13;
                }&#13;
&#13;
                resetClicks();&#13;
&#13;
            } else if (isBothClicksTheSameRangeStartOrEnd()) {&#13;
                var firstClickRange = getRangeByValue( firstValue );&#13;
                var secondClickRange = getRangeByValue( secondValue );&#13;
&#13;
                if ( compareRanges(firstClickRange, secondClickRange)) {&#13;
                    presenter.removeRange(firstClickRange, true);&#13;
&#13;
                    var rangeString = presenter.convertRangeToString(firstClickRange);&#13;
                    var eventData = presenter.createEventData(rangeString, true, !checkIsRangeCorrect(firstClickRange));&#13;
                    eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
                    if ( presenter.allRangesCorrect() ) {&#13;
                        var eventData = presenter.createAllOKEventData();&#13;
                        eventBus.sendEvent('ValueChanged', eventData);&#13;
                    }&#13;
                } else {&#13;
                    joinRanges([ getRangeByValue( firstValue ), getRangeByValue( secondValue ) ]);&#13;
                }&#13;
                resetClicks();&#13;
&#13;
            } else {&#13;
                resetClicks();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function removeRangesBetweenRange(range) {&#13;
        var currentRanges = [];&#13;
        currentRanges = currentRanges.concat(presenter.configuration.drawnRangesData.ranges);&#13;
&#13;
        for( var i = 0; i &lt; currentRanges.length; i++) {&#13;
            var drawnRange = currentRanges[i];&#13;
            var drawnStartValue = drawnRange.start.value;&#13;
            var drawnEndValue = drawnRange.end.value;&#13;
&#13;
            if ( drawnStartValue == -Infinity ) {&#13;
                drawnStartValue = presenter.configuration.min;&#13;
            }&#13;
&#13;
            if ( drawnEndValue == Infinity ) {&#13;
                drawnEndValue = presenter.configuration.max;&#13;
            }&#13;
&#13;
            if ( range.start.value &lt; drawnEndValue &amp;&amp; range.end.value &gt; drawnStartValue ) {&#13;
                presenter.removeRange(drawnRange, true);&#13;
            }&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    function getRangeByValue(value) {&#13;
        value = parseRangeStartOrEnd(value, presenter.configuration.separator);&#13;
        var ranges = [];&#13;
&#13;
        $.each(presenter.configuration.drawnRangesData.ranges, function() {&#13;
            if ( this.values.indexOf(value) &gt;= 0 ) {&#13;
                ranges.push(this);&#13;
            }&#13;
&#13;
            return true;&#13;
        });&#13;
&#13;
        if (ranges.length == 2) {&#13;
&#13;
            if (presenter.configuration.mouseData.twoClickedRangesCount == 1) {&#13;
                return ranges[0];&#13;
            } else if (presenter.configuration.mouseData.twoClickedRangesCount == 2) {&#13;
                return ranges[1];&#13;
            }&#13;
&#13;
        } else if (ranges.length == 1) {&#13;
            return ranges[0];&#13;
        } else {&#13;
&#13;
            presenter.configuration.isError = true;&#13;
            presenter.configuration.errorCode = 'OOR01';&#13;
            return null;&#13;
&#13;
        }&#13;
    }&#13;
&#13;
    function createRangeElement(element, value, include) {&#13;
        if (element.hasClass('clickArea')) {&#13;
            element = element.parent();&#13;
        }&#13;
        return {&#13;
            element: parseElement(element),&#13;
            value: parseRangeStartOrEnd(value, presenter.configuration.separator),&#13;
            include: include&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isMouseAboveExistingRange = function(e) {&#13;
        var value = parseRangeStartOrEnd($(e).attr('value'), presenter.configuration.separator);&#13;
        return $.inArray( value, presenter.configuration.drawnRangesData.values ) &gt;= 0;&#13;
    };&#13;
&#13;
    presenter.isValueInRange = function(value, range, takeExcludeIntoConsideration) {&#13;
&#13;
        var start, end;&#13;
        if (takeExcludeIntoConsideration) {&#13;
            start = range.start.include ? range.start.value : range.start.value + 1;&#13;
            end = range.end.include ? range.end.value + 1 : range.end.value;&#13;
        } else {&#13;
            start = range.start.value;&#13;
            end = range.end.value + 1;&#13;
        }&#13;
&#13;
        for( var i = start; i &lt; end; i++ ) {&#13;
            if ( i == value ) {&#13;
                return true;&#13;
            }&#13;
        }&#13;
        return false;&#13;
    };&#13;
&#13;
    function toggleIncludeImage(imageWrapper, shouldInclude) {&#13;
        if (shouldInclude) {&#13;
            imageWrapper.addClass('include');&#13;
            imageWrapper.removeClass('exclude');&#13;
        } else {&#13;
            imageWrapper.addClass('exclude');&#13;
            imageWrapper.removeClass('include');&#13;
        }&#13;
    }&#13;
&#13;
    function getStartElement(isStartInfinity, startValue) {&#13;
        var startElement;&#13;
&#13;
        if ( isStartInfinity ) {&#13;
            startElement = presenter.$view.find('.clickArea[value="' + presenter.configuration.min + '"]').parent();&#13;
        } else {&#13;
            startElement = presenter.$view.find('.clickArea[value="' + startValue + '"]').parent();&#13;
        }&#13;
&#13;
        return startElement;&#13;
    }&#13;
&#13;
    function getEndElement(isEndInfinity, endValue) {&#13;
        var endElement;&#13;
&#13;
        if ( isEndInfinity ) {&#13;
            endElement = presenter.$view.find('.clickArea[value="' + presenter.configuration.max + '"]').parent();&#13;
        } else {&#13;
            endElement = presenter.$view.find('.clickArea[value="' + endValue + '"]').parent();&#13;
        }&#13;
&#13;
        return endElement;&#13;
    }&#13;
&#13;
    presenter.drawRanges = function(ranges, shouldSendEvents) {&#13;
&#13;
        $.each(ranges, function() {&#13;
&#13;
            var startValue = Math.min(this.start.value, this.end.value);&#13;
            var endValue = Math.max(this.start.value, this.end.value);&#13;
&#13;
            var isEndInfinity = isValueInfinity(endValue);&#13;
            var isStartInfinity = isValueInfinity(startValue);&#13;
            var startElement = getStartElement(isStartInfinity, startValue);&#13;
            var endElement = getEndElement(isEndInfinity, endValue);&#13;
&#13;
            if (!this.start.element || !this.end.element) {&#13;
                this.start.element = startElement;&#13;
                this.end.element = endElement;&#13;
            }&#13;
&#13;
            if ( startValue == endValue ) {&#13;
                setRangeValues(this, true);&#13;
                addToDrawnRanges(this, shouldSendEvents);&#13;
                addEndRangeImage(endElement, true);&#13;
&#13;
                // if start and end values are the same, that means range is a single point, so it should not draw range&#13;
&#13;
                return true;&#13;
            }&#13;
&#13;
            var start = parseFloat($(startElement).css('left'));&#13;
            var end = parseFloat(endElement.css('left'));&#13;
            var difference =  Math.abs(start - end);&#13;
            var range = $('&lt;div&gt;&lt;/div&gt;');&#13;
&#13;
            range.addClass('selectedRange');&#13;
&#13;
            addInfinityClass(isStartInfinity, isEndInfinity, range);&#13;
&#13;
            // when range is ending in infinity then it should be wider because there is space between arrowhead and last step line&#13;
            // + 2 is because stepLine is 2 px width&#13;
            var width = calculateRangeWidth(isEndInfinity, isStartInfinity, difference);&#13;
&#13;
            range.css('width', width);&#13;
            startElement.append(range);&#13;
&#13;
            if (start &gt; end) {&#13;
                range.css('left', - (difference) + 'px');&#13;
            }&#13;
&#13;
            if (isStartInfinity) {&#13;
                range.css('left', -presenter.configuration.stepWidth + 'px');&#13;
            }&#13;
&#13;
            addToDrawnRanges(this, shouldSendEvents);&#13;
            setRangeValues(this, true);&#13;
            addEndRangeImages(this, startElement, endElement, isStartInfinity, isEndInfinity);&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    function addEndRangeImages(range, startElement, endElement, isStartInfinity, isEndInfinity) {&#13;
        if (!isEndInfinity) {&#13;
            addEndRangeImage(endElement, range.end.include);&#13;
        }&#13;
&#13;
        if (!isStartInfinity) {&#13;
            addEndRangeImage(startElement, range.start.include);&#13;
        }&#13;
    }&#13;
&#13;
    function addInfinityClass(isStartInfinity, isEndInfinity, range) {&#13;
        if ( isStartInfinity &amp;&amp; isEndInfinity ) {&#13;
            range.addClass(isStartInfinity ? 'infinityBoth' : '');&#13;
        } else {&#13;
            range.addClass(isStartInfinity ? 'infinityLeft' : '');&#13;
            range.addClass(isEndInfinity ? 'infinityRight' : '');&#13;
        }&#13;
    }&#13;
&#13;
    function calculateRangeWidth(isEndInfinity, isStartInfinity, difference) {&#13;
        var width;&#13;
&#13;
        if (isEndInfinity &amp;&amp; isStartInfinity) {&#13;
            width = difference + (presenter.configuration.stepWidth * 2) + 'px';&#13;
        } else if (isEndInfinity) {&#13;
            width = (difference + presenter.configuration.stepWidth) + 'px';&#13;
        } else if (isStartInfinity) {&#13;
            width = (difference + presenter.configuration.stepWidth + 2) + 'px';&#13;
        } else {&#13;
            width = difference + 2 + 'px';&#13;
        }&#13;
&#13;
        return width;&#13;
    }&#13;
&#13;
    function isValueInfinity(value) {&#13;
        return ( value == -Infinity || value == Infinity )&#13;
    }&#13;
&#13;
    function setRangeValues(range, shouldAddToDrawn, shouldSendEvents) {&#13;
        range.values = [];&#13;
&#13;
        var startValue = Math.min(range.start.value, range.end.value);&#13;
        var endValue = Math.max(range.start.value, range.end.value);&#13;
&#13;
        if (startValue == -Infinity) {&#13;
            range.values.push(-Infinity);&#13;
            if (shouldAddToDrawn) {&#13;
                presenter.configuration.drawnRangesData.values.push(-Infinity);&#13;
            }&#13;
            startValue = presenter.configuration.min;&#13;
        }&#13;
&#13;
        if (endValue == Infinity) {&#13;
            range.values.push(Infinity);&#13;
            if (shouldAddToDrawn) {&#13;
                presenter.configuration.drawnRangesData.values.push(Infinity);&#13;
            }&#13;
            endValue = presenter.configuration.max;&#13;
        }&#13;
&#13;
        var stepValue = presenter.configuration.step;&#13;
&#13;
        for ( var i = startValue; i &lt;= endValue; i += stepValue ) {&#13;
            range.values.push(i);&#13;
&#13;
            if (shouldAddToDrawn) {&#13;
                presenter.configuration.drawnRangesData.values.push(i);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function convertNdashToMinus(value) {&#13;
        return new String(value).replace('&amp;ndash;', '-');&#13;
    }&#13;
&#13;
    presenter.convertRangeToString = function( range ) {&#13;
        var startInclude = range.start.include ? '&lt;' : '(';&#13;
        var endInclude = range.end.include ? '&gt;' : ')';&#13;
        var startValue = isValueInfinity(range.start.value) ? '-INF' : convertNdashToMinus(range.start.value);&#13;
        var endValue = isValueInfinity(range.end.value) ? 'INF' : convertNdashToMinus(range.end.value);&#13;
&#13;
        return startInclude +&#13;
            transformValueToDisplayVersion(startValue, false) +&#13;
            '; ' +&#13;
            transformValueToDisplayVersion(endValue, false) + endInclude;&#13;
    };&#13;
&#13;
    function addEndRangeImage($element, include) {&#13;
        var currentImages = $element.find('.rangeImage');&#13;
        currentImages.remove();&#13;
&#13;
        var imageContainer = $('&lt;div&gt;&lt;/div&gt;');&#13;
        imageContainer.addClass('rangeImage');&#13;
&#13;
        imageContainer.addClass(include ? 'include' : 'exclude');&#13;
        $element.append(imageContainer);&#13;
&#13;
        if(!presenter.hideAnswerClicked &amp;&amp; !presenter.isShowAnswersActive){&#13;
            presenter.parentLeft = imageContainer.parent().css('left');&#13;
        }&#13;
&#13;
        return imageContainer;&#13;
    }&#13;
&#13;
    presenter.getElementPosition = function (value, axisXWidth, absoluteXRange, axisMin) {&#13;
        return ((value - axisMin) / absoluteXRange) * (axisXWidth - (presenter.configuration.stepWidth * 2));&#13;
    };&#13;
&#13;
    function getStepText(element) {&#13;
        var $text = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $text.addClass('stepText');&#13;
        $text.html( transformValueToDisplayVersion( element, true ) );&#13;
        $text.css('left', - ((element.toString())).length * (4) + 'px');&#13;
&#13;
        return $text;&#13;
    }&#13;
&#13;
    function getStepLine() {&#13;
        var $stepLine = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $stepLine.addClass('stepLine');&#13;
&#13;
        return $stepLine&#13;
    }&#13;
&#13;
    function appendTextToStepLine($stepLine, element) {&#13;
        var $text = getStepText(element);&#13;
&#13;
        $stepLine.append($text);&#13;
    }&#13;
&#13;
    function appendStepLineToAxis($stepLine) {&#13;
        presenter.$view.find('.x-axis').append($stepLine);&#13;
    }&#13;
&#13;
    function positionStepLineOnAxis($stepLine, element, configuration) {&#13;
        var position = presenter.getElementPosition(element, configuration.axisXWidth, configuration.axisAbsoluteRange,&#13;
                                                    configuration.axisMin);&#13;
&#13;
        $stepLine.css({&#13;
            'left': (position + presenter.configuration.stepWidth) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function isMultiplicationOfCyclicValues (value) {&#13;
        function isMultiplication (element) { return (this % element) == 0;}&#13;
&#13;
        var elementIndex = presenter.configuration.axisXFieldValues.indexOf(value);&#13;
&#13;
        return (presenter.configuration.axisXValues.cyclicValues.filter(isMultiplication, elementIndex).length &gt; 0);&#13;
    }&#13;
&#13;
    function checkCustomValues(element) {&#13;
        var isCustomValue = isMultiplicationOfCyclicValues(element);&#13;
&#13;
        if (!isCustomValue) {&#13;
            isCustomValue = (presenter.configuration.axisXValues.fixedValues.indexOf(element) != -1)&#13;
        }&#13;
&#13;
        return isCustomValue;&#13;
    }&#13;
&#13;
    function shouldAppendTextToStepLine(element, configuration) {&#13;
        if (configuration.showAxisXValues) {&#13;
            if(configuration.customValuesSet) {&#13;
                return checkCustomValues(element)&#13;
            }&#13;
&#13;
            return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    presenter.createStep = function (element) {&#13;
        //function for array.forEach, this is binded to object with lineNumber configuration&#13;
        /*&#13;
            this = {axisXWidth: float, axisMin: float, axisAbsoluteRange: float}&#13;
        */&#13;
&#13;
        var $stepLine = getStepLine();&#13;
        positionStepLineOnAxis($stepLine, element, this);&#13;
&#13;
        if(shouldAppendTextToStepLine(element, this)) {&#13;
            appendTextToStepLine($stepLine, element);&#13;
        }&#13;
&#13;
        createClickArea($stepLine, element);&#13;
&#13;
        appendStepLineToAxis($stepLine);&#13;
    };&#13;
&#13;
    presenter.createAxisXCustomValues = function () {&#13;
        var min = presenter.configuration.min;&#13;
        var max = presenter.configuration.max;&#13;
&#13;
        var values = presenter.configuration.axisXValues.fixedValues.concat([]);&#13;
        var cyclicValues = presenter.configuration.axisXValues.cyclicValues;&#13;
&#13;
        function createValues (element) {&#13;
            var precision = presenter.getNumberPrecision(element);&#13;
            var step = element;&#13;
            var values = [];&#13;
&#13;
            for(var i = step; i &lt;= max; i += step) {&#13;
                values.push(presenter.changeNumberToPrecision(i, precision));&#13;
            }&#13;
&#13;
            for(i = step * -1; i &gt;= min; i -= step ) {&#13;
                values.push(presenter.changeNumberToPrecision(i, precision));&#13;
            }&#13;
&#13;
            return values;&#13;
        }&#13;
&#13;
        cyclicValues = cyclicValues.map(createValues);&#13;
        for(var i = 0; i &lt; cyclicValues.length; i++) {&#13;
            values = values.concat(cyclicValues[i]);&#13;
        }&#13;
&#13;
        values = values.filter(function (element){&#13;
            if (this.indexOf(element) == -1) {&#13;
                this.push(element);&#13;
                return true;&#13;
            }&#13;
&#13;
            return false;&#13;
        }, []);&#13;
&#13;
        if(values.indexOf(0) == -1) values.push(0);&#13;
&#13;
        return values;&#13;
    };&#13;
&#13;
    presenter.getAxisConfigurationForCreatingSteps = function () {&#13;
        var configuration = {&#13;
            axisXWidth: presenter.$view.find('.x-axis').width(),&#13;
            axisMin: presenter.configuration.min,&#13;
            axisAbsoluteRange: presenter.configuration.max - presenter.configuration.min,&#13;
            showAxisXValues: presenter.configuration.showAxisXValues&#13;
        };&#13;
&#13;
        if (presenter.configuration.isCustomAxisXValuesSet) {&#13;
            configuration.customValuesSet = presenter.configuration.isCustomAxisXValuesSet;&#13;
            configuration.customValues = presenter.createAxisXCustomValues();&#13;
        }&#13;
&#13;
        return configuration;&#13;
    };&#13;
&#13;
    presenter.setStepWidthInConfiguration = function () {&#13;
        presenter.configuration.stepWidth = calculateStepWidth(presenter.configuration.axisXFieldValues);&#13;
    };&#13;
&#13;
    function setMaxValueInConfiguration () {&#13;
        presenter.configuration.max = presenter.maxElement(presenter.configuration.axisXFieldValues);//max()&#13;
    }&#13;
&#13;
    presenter.setOnClickAreaListeners = function () {&#13;
        if (!presenter.configuration.isPreview &amp;&amp; !presenter.configuration.isDisabled) {&#13;
            bindClickAreaListeners(presenter.$view.find('.clickArea'));&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createSteps = function () {&#13;
        setMaxValueInConfiguration();&#13;
        presenter.setStepWidthInConfiguration();&#13;
&#13;
        presenter.configuration.axisXFieldValues.forEach(presenter.createStep, presenter.getAxisConfigurationForCreatingSteps());&#13;
&#13;
        presenter.setOnClickAreaListeners();&#13;
    };&#13;
&#13;
    function transformValueToDisplayVersion(value, shouldReplaceMinus) {&#13;
        var transformed = ('' + value).replace('.', presenter.configuration.separator);&#13;
        if (shouldReplaceMinus) {&#13;
            transformed = transformed.replace('-', '&amp;ndash;');&#13;
        }&#13;
&#13;
        return transformed;&#13;
    }&#13;
&#13;
    function checkIsMinLowerThanMax(min, max) {&#13;
        var parsedMin = parseRangeStartOrEnd(min, presenter.configuration.separator);&#13;
        var parsedMax = parseRangeStartOrEnd(max, presenter.configuration.separator);&#13;
        return parsedMin &lt; parsedMax;&#13;
    }&#13;
&#13;
    presenter.getState = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        $.each(presenter.configuration.drawnRangesData.ranges, function() {&#13;
            this.start.element = null;&#13;
            this.end.element = null;&#13;
        });&#13;
&#13;
        return JSON.stringify({&#13;
            drawnRangesData: presenter.configuration.drawnRangesData,&#13;
            isVisible: presenter.configuration.isCurrentlyVisible,&#13;
            isDisabled: presenter.configuration.isDisabled,&#13;
            points: presenter.checkedPoints&#13;
        }, function (key, value) {&#13;
            if (value === Infinity) return "Infinity";&#13;
            else if (value === -Infinity) return "-Infinity";&#13;
            else if (value !== value) return "NaN";&#13;
            else return value;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.redrawRanges = function (rangesToDraw) {&#13;
        $.each(rangesToDraw, function () {&#13;
            this.start.element = presenter.$view.find('.clickArea[value="' + this.start.value + '"]').parent();&#13;
            this.end.element = presenter.$view.find('.clickArea[value="' + this.end.value + '"]').parent();&#13;
        });&#13;
&#13;
        $.each(presenter.configuration.shouldDrawRanges, function() {&#13;
            presenter.removeRange(this, true);&#13;
        });&#13;
&#13;
        presenter.drawRanges(rangesToDraw, true);&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) return;&#13;
&#13;
        var parsedState = JSON.parse(state,&#13;
            function (key, value) {&#13;
                if (value === "Infinity") return Infinity;&#13;
                else if (value === "-Infinity") return -Infinity;&#13;
                else if (value === "NaN") return NaN;&#13;
                else return value;&#13;
            });&#13;
&#13;
        if (presenter.configuration.dontShowRanges) {&#13;
            presenter.checkedPoints = parsedState.points;&#13;
            drawPoints(presenter.checkedPoints);&#13;
        } else {&#13;
            presenter.redrawRanges(parsedState.drawnRangesData.ranges);&#13;
        }&#13;
        presenter.configuration.isCurrentlyVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(parsedState.isVisible);&#13;
&#13;
        presenter.configuration.isDisabled = parsedState.isDisabled;&#13;
&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.configuration.dontShowRanges) {&#13;
            presenter.$view.find('.rangeImage').remove();&#13;
            presenter.checkedPoints = [];&#13;
            addInitPoints();&#13;
            drawPoints(presenter.checkedPoints);&#13;
        } else {&#13;
            var rangesToRemove = [].concat(presenter.configuration.drawnRangesData.ranges);&#13;
            $.each(rangesToRemove, function() {&#13;
                presenter.removeRange(this, true);&#13;
            });&#13;
&#13;
            // removing all single dots&#13;
            presenter.$view.find('.rangeImage').remove();&#13;
&#13;
            var initRanges = presenter.validateRanges(presenter.configuration.ranges, presenter.configuration.separator);&#13;
            presenter.drawRanges(initRanges.shouldDrawRanges, true);&#13;
&#13;
            presenter.configuration.mouseData.clicks = [];&#13;
        }&#13;
&#13;
        presenter.configuration.isCurrentlyVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
&#13;
        presenter.configuration.isShowErrorsMode = false;&#13;
        presenter.configuration.isDisabled = presenter.configuration.isDisabledByDefault;&#13;
&#13;
        presenter.leftShowAnswers = false;&#13;
        presenter.parentLeft = false;&#13;
    };&#13;
&#13;
    function getCorrectPoints() {&#13;
        var correctPoints = [];&#13;
        $.each(presenter.configuration.shouldDrawRanges, function() {&#13;
            if ($(this)[0].start.value === $(this)[0].end.value) {&#13;
                correctPoints.push($(this)[0].start.value)&#13;
            }&#13;
        });&#13;
&#13;
        $.each(presenter.configuration.otherRanges, function() {&#13;
            if ($(this)[0].start.value === $(this)[0].end.value) {&#13;
                correctPoints.push($(this)[0].start.value)&#13;
            }&#13;
        });&#13;
&#13;
        return correctPoints;&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if(!presenter.configuration.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.configuration.dontShowRanges) {&#13;
            presenter.configuration.isShowErrorsMode = true;&#13;
            var correctPoints = getCorrectPoints(),&#13;
            $elem;&#13;
&#13;
            if (presenter.checkedPoints.length === 0) {&#13;
                addInitPoints();&#13;
            }&#13;
&#13;
            presenter.results = {&#13;
                correct: 0,&#13;
                wrong: 0&#13;
            };&#13;
&#13;
            for (var i = 0; i &lt; presenter.checkedPoints.length; i++) {&#13;
                var point = presenter.checkedPoints[i];&#13;
                if (correctPoints.indexOf(point) !== -1) {&#13;
                    $elem = presenter.$view.find(".clickArea[value='" + point + "']");&#13;
                    $elem.next().toggleClass('include correctRangeInclude');&#13;
                    $elem.next().toggleClass('exclude correctRangeExclude');&#13;
                    presenter.results['correct'] += 1;&#13;
                } else {&#13;
                    $elem = presenter.$view.find(".clickArea[value='" + point + "']");&#13;
                    $elem.next().toggleClass('include wrongRangeInclude');&#13;
                    $elem.next().toggleClass('exclude wrongRangeExclude');&#13;
                    presenter.results['wrong'] += 1;&#13;
                }&#13;
            }&#13;
            presenter.$view.find('.outer').addClass("disable");&#13;
        } else if (presenter.configuration.isActivity &amp;&amp; !presenter.configuration.isDisabled) {&#13;
            // change single dot to point on axis&#13;
            if (presenter.singleDot.value != -1) {&#13;
                var newRange = {&#13;
                    start: createRangeElement(presenter.singleDot.element, presenter.singleDot.value, true),&#13;
                    end: createRangeElement(presenter.singleDot.element, presenter.singleDot.value, true)&#13;
                };&#13;
                setRangeValues(newRange, true);&#13;
                addToDrawnRanges(newRange);&#13;
                presenter.singleDot.value = -1;&#13;
            }&#13;
&#13;
            presenter.configuration.isShowErrorsMode = true;&#13;
            var validated = validateDrawnRanges();&#13;
&#13;
            $.each(validated.correct, function() {&#13;
                getSelectedRange(this).addClass('correct');&#13;
                addCorrectnessClassToRangeEnds(this, 'correct');&#13;
            });&#13;
&#13;
            $.each(validated.wrong, function() {&#13;
                getSelectedRange(this).addClass('wrong');&#13;
                addCorrectnessClassToRangeEnds(this, 'wrong');&#13;
            });&#13;
&#13;
            if (presenter.configuration.mouseData.clicks.length &gt; 0) {&#13;
                presenter.configuration.mouseData.clicks[0].element.parent().find('.rangeImage').remove();&#13;
            }&#13;
&#13;
            resetClicks();&#13;
&#13;
            presenter.$view.find('.outer').addClass("disable");&#13;
        }&#13;
    };&#13;
&#13;
    function addCorrectnessClassToRangeEnds(range, includePrefix) {&#13;
        var startImage = range.start.element.find('.rangeImage ');&#13;
        var endImage = range.end.element.find('.rangeImage');&#13;
&#13;
        if( startImage.hasClass('include') ) {&#13;
            startImage.removeClass('include');&#13;
            startImage.addClass(includePrefix + 'RangeInclude');&#13;
        } else {&#13;
            startImage.removeClass('exclude');&#13;
            startImage.addClass(includePrefix + 'RangeExclude');&#13;
        }&#13;
&#13;
        if( endImage.hasClass('include') ) {&#13;
            endImage.removeClass('include');&#13;
            endImage.addClass(includePrefix + 'RangeInclude');&#13;
        } else {&#13;
            endImage.removeClass('exclude');&#13;
            endImage.addClass(includePrefix + 'RangeExclude');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        if ( presenter.configuration.isActivity &amp;&amp; !presenter.configuration.isDisabled ) {&#13;
            presenter.configuration.isShowErrorsMode = false;&#13;
&#13;
            presenter.$view.find('.correct').removeClass('correct');&#13;
            presenter.$view.find('.wrong').removeClass('wrong');&#13;
            presenter.$view.find('.correctRangeExclude, .wrongRangeExclude').removeClass('correctRangeExclude wrongRangeExclude').addClass('exclude');&#13;
            presenter.$view.find('.correctRangeInclude, .wrongRangeInclude').removeClass('correctRangeInclude wrongRangeInclude').addClass('include');&#13;
            presenter.$view.find('.outer').removeClass("disable");&#13;
        }&#13;
    };&#13;
&#13;
    function updateScore() {&#13;
        var correctPoints = getCorrectPoints();&#13;
        presenter.results = {&#13;
            correct: 0,&#13;
            wrong: 0&#13;
        };&#13;
&#13;
        for (var i = 0; i &lt; presenter.checkedPoints.length; i++) {&#13;
            var point = presenter.checkedPoints[i];&#13;
            if (correctPoints.indexOf(point) !== -1) {&#13;
                presenter.results['correct'] += 1;&#13;
            } else {&#13;
                presenter.results['wrong'] += 1;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        resetClicks();&#13;
&#13;
        if (!presenter.configuration.isActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.configuration.dontShowRanges) {&#13;
            updateScore();&#13;
&#13;
            return presenter.results.correct;&#13;
        } else {&#13;
            var validated = validateDrawnRanges();&#13;
            return validated.correct.length;&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (!presenter.configuration.isActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return presenter.configuration.otherRanges.length + presenter.configuration.shouldDrawRanges.length;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (!presenter.configuration.isActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.configuration.dontShowRanges) {&#13;
            updateScore();&#13;
            return presenter.results.wrong;&#13;
        } else {&#13;
            var validated = validateDrawnRanges();&#13;
            return validated.wrong.length;&#13;
        }&#13;
    };&#13;
&#13;
    function validateDrawnRanges() {&#13;
&#13;
        var correctSelectedRanges = [];&#13;
        var wrongSelectedRanges = [];&#13;
        var ranges = presenter.configuration.otherRanges.concat(presenter.configuration.shouldDrawRanges);&#13;
&#13;
        $.each( presenter.configuration.drawnRangesData.ranges, function() {&#13;
            var drawnRange = this;&#13;
&#13;
            $.each( ranges, function() {&#13;
                setRangeValues(this, false);&#13;
&#13;
                if (compareRanges(this, drawnRange)) {&#13;
                    correctSelectedRanges.push(drawnRange);&#13;
                }&#13;
            });&#13;
&#13;
            if (correctSelectedRanges.indexOf(drawnRange) == -1) {&#13;
                wrongSelectedRanges.push(drawnRange)&#13;
            }&#13;
        });&#13;
&#13;
        return  {&#13;
            correct: correctSelectedRanges,&#13;
            wrong: wrongSelectedRanges&#13;
        }&#13;
    }&#13;
&#13;
    function checkIsRangeCorrect( range ) {&#13;
        var ranges = presenter.configuration.otherRanges.concat(presenter.configuration.shouldDrawRanges);&#13;
        var isCorrect = false;&#13;
&#13;
        setRangeValues(range, false);&#13;
&#13;
        $.each( ranges, function() {&#13;
            setRangeValues(this, false);&#13;
            if ( compareRanges(this, range) ) {&#13;
                isCorrect = true;&#13;
                return false; // breaks each loop&#13;
            }&#13;
        });&#13;
&#13;
        return isCorrect;&#13;
    }&#13;
&#13;
    function addToDrawnRanges ( range, shouldSendRanges ) {&#13;
        presenter.configuration.drawnRangesData.ranges.push( range );&#13;
&#13;
        if ( !presenter.configuration.isPreview &amp;&amp; !presenter.configuration.isInitialDraw &amp;&amp; !presenter.isShowAnswersActive) {&#13;
            var rangeString = presenter.convertRangeToString(range);&#13;
            var isRangeCorrect = checkIsRangeCorrect(range);&#13;
            var eventData = presenter.createEventData(rangeString, false, isRangeCorrect);&#13;
            if (shouldSendRanges) {&#13;
                eventBus.sendEvent('ValueChanged', eventData);&#13;
            }&#13;
&#13;
            if ( shouldSendRanges &amp;&amp; presenter.allRangesCorrect() ) {&#13;
                eventData = presenter.createAllOKEventData();&#13;
                eventBus.sendEvent('ValueChanged', eventData);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.allRangesCorrect = function() {&#13;
        return presenter.getScore() - presenter.getMaxScore() == 0 &amp;&amp; presenter.getErrorCount() == 0;&#13;
    };&#13;
&#13;
    function compareRanges(rangeA, rangeB) {&#13;
        return (compareArray(rangeA.values, rangeB.values) &amp;&amp; rangeA.start.include == rangeB.start.include &amp;&amp; rangeA.end.include == rangeB.end.include)&#13;
    }&#13;
&#13;
    function compareArray(arrA, arrB) {&#13;
        var i = arrA.length;&#13;
        if (i != arrB.length) return false;&#13;
&#13;
        while ( i-- ) {&#13;
            if (arrA[i] !== arrB[i]) return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    function parseElement( element ) {&#13;
        switch (element) {&#13;
            case element.find('.infinity-left').length &gt; 0:&#13;
                return presenter.$view.find('.clickArea[value="' + presenter.configuration.min + '"]').parent();&#13;
            case element.find('.infinity-right').length &gt; 0:&#13;
                return presenter.$view.find('.clickArea[value="' + presenter.configuration.max + '"]').parent();&#13;
            default:&#13;
                return element;&#13;
        }&#13;
    }&#13;
&#13;
    function parseRangeStartOrEnd (value, separator) {&#13;
&#13;
        if ( value == '-INF' || value == -Infinity ) {&#13;
            return -Infinity;&#13;
        }&#13;
        else if ( value == 'INF' || value == Infinity ) {&#13;
            return Infinity;&#13;
        }&#13;
        else {&#13;
            var parsedValue = presenter.parseValueWithSeparator(value, separator);&#13;
            return parseFloat( parsedValue );&#13;
        }&#13;
    }&#13;
&#13;
    presenter.validateDecimalSeparator = function (decimalSeparator) {&#13;
        if ( ModelValidationUtils.isStringEmpty(decimalSeparator) ) {&#13;
            return {value: '.', isValid: true};&#13;
        }&#13;
&#13;
        if ( $.trim(decimalSeparator) == ';' ) {&#13;
            return {value: null, isValid: false, errorCode: 'DSE01'};&#13;
        }&#13;
&#13;
        return {value: decimalSeparator, isValid: true};&#13;
    };&#13;
&#13;
    presenter.validateRanges = function (ranges, separator) {&#13;
        if (separator == undefined) {&#13;
            separator = '.';&#13;
        }&#13;
&#13;
        var rangesList = Helpers.splitLines(ranges);&#13;
        separator = escapeRegexSpecialCharacters(separator);&#13;
        var rangesPattern = new RegExp('(\\(|&lt;){1}[(?P \\d|(-){1}INF' + separator + ')-]+;[(?P \\d|(-){1}INF' + separator + ')-]+(\\)|&gt;){1};[ ]*(0|1){1}', 'i'); // matches i.e. (1; 0); 0 or &lt;2; 15); 1, &lt;-INF; 10); 1, &lt;1.5; 2.5); 0&#13;
//        var rangesPattern = /(\(|&lt;){1}[(?P \d|(-){1}INF\.)-]+;[(?P \d|(-){1}INF\.)-]+(\)|&gt;){1};[ ]*(0|1){1}/i;&#13;
        var validatedShouldDrawRanges = [];&#13;
        var validatedOtherRanges = [];&#13;
        var isError = false,&#13;
            errorCode = '';&#13;
&#13;
        $.each(rangesList, function() {&#13;
            var rangeString = this.toString();&#13;
&#13;
            if( !rangesPattern.test(rangeString) ) {&#13;
                isError = true;&#13;
                errorCode = 'RAN01';&#13;
&#13;
                return false; // Breaks jQuery.each loop&#13;
            }&#13;
&#13;
            var regexResult = rangesPattern.exec(rangeString)[0];&#13;
            var brackets = regexResult.match(/[\(\)&lt;&gt;]+/g);&#13;
            var onlyNumbersAndCommas = regexResult.replace(/[ \(\)&lt;&gt;]*/g, '');&#13;
            var onlyNumbers = onlyNumbersAndCommas.split(';');&#13;
            var min = parseRangeStartOrEnd(onlyNumbers[0], separator);&#13;
            var max = parseRangeStartOrEnd(onlyNumbers[1], separator);&#13;
            var minInclude = brackets[0] == '&lt;' || min == -Infinity;&#13;
            var maxInclude = brackets[1] == '&gt;' || max == Infinity;&#13;
            var shouldDrawRange = onlyNumbers[2] == '1';&#13;
&#13;
            if ( (min &gt; max)&#13;
                || (min == Infinity &amp;&amp; max == Infinity)&#13;
                || (min == -Infinity &amp;&amp; max == -Infinity) ) {&#13;
&#13;
                isError = true;&#13;
                errorCode = 'MIN/MAX01';&#13;
&#13;
                return false; // Breaks jQuery.each loop&#13;
            }&#13;
&#13;
            var validatedRange = {&#13;
                start: { value : min, include: minInclude, element: null },&#13;
                end: { value: max, include: maxInclude, element: null }&#13;
            };&#13;
&#13;
            if (shouldDrawRange) {&#13;
                validatedShouldDrawRanges.push(validatedRange);&#13;
            } else {&#13;
                validatedOtherRanges.push(validatedRange);&#13;
            }&#13;
&#13;
            return true; // jQuery.each continue statement&#13;
        });&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            isError: isError,&#13;
            errorCode: errorCode,&#13;
            shouldDrawRanges : validatedShouldDrawRanges,&#13;
            otherRanges : validatedOtherRanges&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateRangesWithAxisXField = function (ranges, axisXFieldValues) {&#13;
        var allRanges = ranges.otherRanges.concat(ranges.shouldDrawRanges);&#13;
&#13;
        function checkRange(range) {&#13;
            if ( (axisXFieldValues.indexOf(range.start.value) == -1 || axisXFieldValues.indexOf(range.end.value) == -1)&#13;
                &amp;&amp; (!isValueInfinity(range.start.value) &amp;&amp; !isValueInfinity(range.end.value) )) {&#13;
&#13;
                presenter.configuration.isError = true;&#13;
                DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.errorCodes, 'RAN02');&#13;
&#13;
                return false;&#13;
            }&#13;
&#13;
            return true;&#13;
        }&#13;
&#13;
        if (!allRanges.every(checkRange)) {&#13;
            return presenter.getErrorObject("RAN02");&#13;
        }&#13;
&#13;
        var lastElement = presenter.maxFromArray(axisXFieldValues);&#13;
        if ( axisXFieldValues.indexOf(lastElement) == -1 ) {&#13;
            presenter.configuration.isError = true;&#13;
            DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.errorCodes, 'MAX04');&#13;
        }&#13;
&#13;
        return {isValid: true, value: allRanges};&#13;
    };&#13;
&#13;
    presenter.maxFromArray = function (array_of_numbers) {&#13;
        if (array_of_numbers.length == 0) {throw "ValueError: maxFromArray() arg is an empty array";}&#13;
&#13;
        var max = array_of_numbers[0];&#13;
&#13;
        for(var i = 0; i &lt; array_of_numbers.length; i++){&#13;
            if (array_of_numbers[i] &gt; max) {max = array_of_numbers[i];}&#13;
        }&#13;
&#13;
        return max;&#13;
    };&#13;
&#13;
    presenter.minFromArray = function (array_of_numbers) {&#13;
        if (array_of_numbers.length == 0) {throw "ValueError: minFromArray() arg is an empty array";}&#13;
&#13;
        var min = array_of_numbers[0];&#13;
&#13;
        for(var i = 0; i &lt; array_of_numbers.length; i++){&#13;
            if (array_of_numbers[i] &lt; min) {min = array_of_numbers[i];}&#13;
        }&#13;
&#13;
        return min;&#13;
    };&#13;
&#13;
    function escapeRegexSpecialCharacters(value) {&#13;
        return (value + '').replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&amp;'); // escape regex special characters&#13;
    }&#13;
&#13;
    presenter.validateValueWithSeparator = function (value, separator) {&#13;
        var escapedSeparator = escapeRegexSpecialCharacters(separator);&#13;
&#13;
        var pattern = new RegExp('^(-{0,1}\\d+)' + escapedSeparator + '{0,1}\\d*$', 'i');&#13;
&#13;
        if ( pattern.test(value) ) {&#13;
            return {&#13;
                'isValid' : true,&#13;
                'value' : presenter.parseValueWithSeparator(value, separator),&#13;
                'precision' : getPrecision(value, separator)&#13;
            }&#13;
        } else {&#13;
            return {&#13;
                'isValid' : false,&#13;
                'value' : null&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function getPrecision(value, separator) {&#13;
        var splitted = value.split(separator);&#13;
        if ( splitted.length == 1 ) {&#13;
            return 0;&#13;
        } else {&#13;
            return splitted[1].length;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.parseValueWithSeparator = function (value, separator) {&#13;
        return (value + '').replace(separator, '.');&#13;
    };&#13;
&#13;
    presenter.getErrorObject = function (errorCode) {&#13;
        return {isValid: false, errorCode: errorCode, isError: true};&#13;
    };&#13;
&#13;
    presenter.validateMin = function (model, separator) {&#13;
        if(ModelValidationUtils.isStringEmpty(model['Min'])) {&#13;
            return presenter.getErrorObject("MIN01");&#13;
        }&#13;
&#13;
        var validatedMinWithSeparator = presenter.validateValueWithSeparator(model['Min'], separator);&#13;
        if(!validatedMinWithSeparator.isValid) {&#13;
            return presenter.getErrorObject("MIN03");&#13;
        }&#13;
&#13;
        validatedMinWithSeparator = ModelValidationUtils.validateFloat( validatedMinWithSeparator.value );&#13;
        if ( !validatedMinWithSeparator.isValid) {&#13;
            return presenter.getErrorObject("MIN02");&#13;
        }&#13;
&#13;
&#13;
        return {isValid: true, value: validatedMinWithSeparator.parsedValue};&#13;
    };&#13;
&#13;
    presenter.validateMax = function (model, separator) {&#13;
        if( ModelValidationUtils.isStringEmpty(model['Max']) ) {&#13;
            return presenter.getErrorObject("MAX01");&#13;
        }&#13;
&#13;
        var validatedMaxWithSeparator = presenter.validateValueWithSeparator(model['Max'], separator);&#13;
&#13;
        if(!validatedMaxWithSeparator.isValid) {&#13;
            return presenter.getErrorObject("MAX03");&#13;
        }&#13;
&#13;
        validatedMaxWithSeparator = ModelValidationUtils.validateFloat( validatedMaxWithSeparator.value );&#13;
        if ( !validatedMaxWithSeparator.isValid ) {&#13;
            return presenter.getErrorObject("MAX02");&#13;
        }&#13;
&#13;
        return {isValid: true, value: validatedMaxWithSeparator.parsedValue};&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var separator = presenter.validateDecimalSeparator(model['Decimal Separator']);&#13;
        if (!separator.isValid) {&#13;
            return presenter.getErrorObject("DSE01");&#13;
        }&#13;
&#13;
        var validatedMin = presenter.validateMin(model, separator.value);&#13;
        if ( !validatedMin.isValid ) {&#13;
            return validatedMin;&#13;
        }&#13;
&#13;
        var validatedMax = presenter.validateMax(model, separator.value);&#13;
        if ( !validatedMax.isValid ) {&#13;
            return validatedMax;&#13;
        }&#13;
&#13;
        if( !checkIsMinLowerThanMax(validatedMin.value, validatedMax.value) ) {&#13;
            return presenter.getErrorObject("MIN/MAX01");&#13;
        }&#13;
&#13;
        var validatedStep = presenter.validateStep(model, separator, validatedMax.value, validatedMin.value);&#13;
        if (!validatedStep.isValid) {&#13;
            return validatedStep;&#13;
        }&#13;
&#13;
        var axisXFieldValues = presenter.createAxisXFieldValues(validatedMin.value, validatedMax.value, validatedStep.value);&#13;
&#13;
        var validatedRanges = presenter.validateRanges(model["Ranges"], separator.value);&#13;
        if(!validatedRanges.isValid) {&#13;
            return validatedRanges;&#13;
        }&#13;
&#13;
        var validatedRangesWithAxisXField = presenter.validateRangesWithAxisXField(validatedRanges, axisXFieldValues);&#13;
        if (!validatedRangesWithAxisXField.isValid) {&#13;
            return validatedRangesWithAxisXField;&#13;
        }&#13;
&#13;
        var validatedIsActivity = !ModelValidationUtils.validateBoolean(model['Not Activity']);&#13;
&#13;
        var addonConfiguration = {&#13;
            isDecimalSeparatorSet: !ModelValidationUtils.isStringEmpty(separator.value),&#13;
            decimalSeparator: separator.value,&#13;
            max: validatedMax.value,&#13;
            min: validatedMin.value&#13;
        };&#13;
&#13;
        var validatedAxisXValues = presenter.validateAxisXValues(model, addonConfiguration);&#13;
&#13;
        if(!validatedAxisXValues.isValid) {&#13;
            return validatedAxisXValues;&#13;
        }&#13;
&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        var isDisabled = ModelValidationUtils.validateBoolean(model['Disable']);&#13;
&#13;
        if (isDisabled) {&#13;
            presenter.$view.find('.outer').addClass('disable');&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            isError : false,&#13;
            min : validatedMin.value,&#13;
            max : validatedMax.value,&#13;
            shouldDrawRanges : validatedRanges.shouldDrawRanges,&#13;
            otherRanges : validatedRanges.otherRanges,&#13;
            isActivity : validatedIsActivity,&#13;
            step : validatedStep.value,&#13;
            showAxisXValues : ModelValidationUtils.validateBoolean(model['Show Axis X Values']),&#13;
            axisXValues : validatedAxisXValues.value,&#13;
            mouseData : {&#13;
                clickedRanges : [],&#13;
                clicks : [],&#13;
                twoClickedRangesCount : 0&#13;
            },&#13;
            drawnRangesData : {&#13;
                isDrawn : false,&#13;
                ranges : [],&#13;
                values : []&#13;
            },&#13;
            touchData : {&#13;
                lastEvent : null&#13;
            },&#13;
            isShowErrorsMode : false,&#13;
            isCurrentlyVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            notCurrentSelectedRange : null,&#13;
            addonID : model['ID'],&#13;
            isInitialDraw : true,&#13;
            isDisabled: isDisabled,&#13;
            isDisabledByDefault: isDisabled,&#13;
            separator: separator.value,&#13;
            axisXFieldValues: axisXFieldValues,&#13;
            allRanges: validatedRangesWithAxisXField.value,&#13;
            isCustomAxisXValuesSet: validatedAxisXValues.isCustomAxisXValuesSet,&#13;
            ranges: model["Ranges"],&#13;
            dontShowRanges: ModelValidationUtils.validateBoolean(model["Don't show ranges"]) || false&#13;
        };&#13;
    };&#13;
&#13;
    presenter.isZeroInRange = function(min, max) {&#13;
        return (min &lt;= 0 &amp;&amp; max &gt;= 0) || (min &lt; 0 &amp;&amp; max == 0) || (min == 0 &amp;&amp; max &gt; 0);&#13;
    };&#13;
&#13;
    function getAxisXValuesErrors(fixedValues, cyclicValues, addonConfiguration) {&#13;
        if((fixedValues.filter(isNaN).length + cyclicValues.filter(isNaN).length) &gt; 0) {&#13;
            return presenter.getErrorObject("AXV_04");&#13;
        }&#13;
&#13;
        if(!cyclicValues.every(function (value) {return (value &gt;= 0)})) {&#13;
            return presenter.getErrorObject("AXV_01");&#13;
        }&#13;
&#13;
        if(!fixedValues.every(function (value) {return (value &gt;= addonConfiguration.min);})) {&#13;
            return presenter.getErrorObject("AXV_02");&#13;
        }&#13;
&#13;
        if(!fixedValues.every(function (value) {return (value &lt;= addonConfiguration.max);})) {&#13;
            return presenter.getErrorObject("AXV_03");&#13;
        }&#13;
&#13;
        return {isValid: true};&#13;
    }&#13;
&#13;
    function parseAxisXValuesFromModel(model, addonConfiguration) {&#13;
        return model["Axis X Values"].split(";").map(function (element) {&#13;
            element.trim();&#13;
            if (addonConfiguration.isDecimalSeparatorSet) {&#13;
                return element.replace(addonConfiguration.decimalSeparator, ".");&#13;
            }&#13;
&#13;
            return element;&#13;
        });&#13;
    }&#13;
&#13;
    function filterCyclicValues (value) {&#13;
        return (value.charAt(value.length - 1) == "*");&#13;
    }&#13;
&#13;
    function filterFixedValuesBasedOnCyclic (element) {&#13;
        return (this.indexOf(element) == -1);&#13;
    }&#13;
&#13;
    presenter.validateAxisXValues = function (model, addonConfiguration) {&#13;
&#13;
        if(ModelValidationUtils.isStringEmpty(model["Axis X Values"])) {&#13;
            return {isValid: true, isCustomAxisXValuesSet: false, value: {}};&#13;
        }&#13;
&#13;
        var values = parseAxisXValuesFromModel(model, addonConfiguration);&#13;
&#13;
        var cyclicValues = values.filter(filterCyclicValues);&#13;
&#13;
        var fixedValues = values.filter(filterFixedValuesBasedOnCyclic, cyclicValues).map(Number);&#13;
&#13;
        cyclicValues = cyclicValues.map(function (value) {&#13;
            return Number(value.slice(0, value.length -1));&#13;
        });&#13;
&#13;
        var axisXValuesErrors = getAxisXValuesErrors(fixedValues, cyclicValues, addonConfiguration);&#13;
        if (!axisXValuesErrors.isValid) {&#13;
            return axisXValuesErrors;&#13;
        }&#13;
&#13;
        cyclicValues = cyclicValues.map(function (value) {&#13;
            if(value == 0) {return 1};&#13;
            return value;&#13;
        });&#13;
&#13;
        function isDuplicate(value) {&#13;
            return (this.filter(function (currentValue) {return (value == currentValue);}).length == 1);&#13;
        }&#13;
&#13;
        if((!cyclicValues.every(isDuplicate, cyclicValues)) || (!fixedValues.every(isDuplicate, fixedValues))) {&#13;
            return presenter.getErrorObject("AXV_05");&#13;
        }&#13;
&#13;
        return {isValid: true, isCustomAxisXValuesSet: true, value: {cyclicValues: cyclicValues, fixedValues: fixedValues}};&#13;
    };&#13;
&#13;
    presenter.createAxisXFieldValues = function (min, max, step) {&#13;
        var precision = presenter.maxElement([presenter.getNumberPrecision(step), presenter.getNumberPrecision(min), presenter.getNumberPrecision(max)]);   //max()&#13;
        var values = [];&#13;
        var i;&#13;
&#13;
        function changePrecision(value) {return presenter.changeNumberToPrecision(value, precision);}&#13;
&#13;
        for (i = min; i &lt;= max; i += step) {&#13;
            values.push(i);&#13;
        }&#13;
&#13;
        if (presenter.isZeroInRange(min, max)) {&#13;
            if (values.indexOf(0) == -1) {&#13;
                values.push(0);&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        return values.map(changePrecision).sort(function(a, b) {&#13;
           return a - b;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getNumberPrecision = function(value) {&#13;
        value = value.toString();&#13;
        value = value.split(".");&#13;
&#13;
        var len;&#13;
        try {&#13;
            len = value[1].length;&#13;
        } catch (_){&#13;
            len = 0;&#13;
        }&#13;
&#13;
        return len;&#13;
    };&#13;
&#13;
    presenter.changeNumberToPrecision = function (value, precision) {&#13;
        //toFixed value rounds up to closest number eg. 23.6xx.toFixed(0) -&gt; 24, when we want get 23&#13;
        if (precision == 0) {&#13;
            return parseInt(value, 10);&#13;
        }&#13;
        return Number(value.toFixed(precision));&#13;
    };&#13;
&#13;
    presenter.findStartingPointInField = function (min, max, step) {&#13;
        var precision = presenter.getNumberPrecision(step);&#13;
        var startingPoint;&#13;
        if (min &gt; 0) {&#13;
            if (min % step == 0) {&#13;
                return {startingPoint: min, fieldEnd: max};&#13;
            }&#13;
&#13;
            startingPoint = ((parseInt(min / step) * step) + step);&#13;
            return {startingPoint: presenter.changeNumberToPrecision(startingPoint, precision), fieldEnd: max};&#13;
        }&#13;
&#13;
        if(min &lt; 0) {&#13;
            if (max % step == -0) {&#13;
                return {startingPoint: max, fieldEnd: min};&#13;
            }&#13;
&#13;
            startingPoint = ((parseInt(max / step) *  step) - step);&#13;
            return {startingPoint: presenter.changeNumberToPrecision(startingPoint, precision), fieldEnd: min};&#13;
        }&#13;
    };&#13;
&#13;
    presenter.abs = function (value) {&#13;
        if (value &lt; 0) {&#13;
            return value * -1;&#13;
        }&#13;
&#13;
        return value;&#13;
    };&#13;
&#13;
    presenter.validateStep = function (model, separator, max, min) {&#13;
        if(ModelValidationUtils.isStringEmpty(model['Step'])) {&#13;
            return {isValid: true, value : 1, precision : 0};&#13;
        }&#13;
&#13;
        var validatedStep = presenter.validateValueWithSeparator( model['Step'], separator.value );&#13;
&#13;
        var precision = validatedStep.precision;&#13;
&#13;
        if (!validatedStep.isValid) {&#13;
            return presenter.getErrorObject('STEP02');&#13;
        }&#13;
&#13;
        validatedStep = ModelValidationUtils.validateFloatInRange(validatedStep.value,&#13;
            presenter.maxFromArray([max, min].map(presenter.abs)), 0, precision);&#13;
        validatedStep.precision = precision;&#13;
&#13;
        if(validatedStep.value == 0) {&#13;
            return presenter.getErrorObject("STEP03");&#13;
        }&#13;
&#13;
        if (!validatedStep.isValid) {&#13;
            return presenter.getErrorObject("STEP01");&#13;
        }&#13;
&#13;
        return {isValid: true, value: validatedStep.parsedValue, precision: validatedStep.precision};&#13;
    };&#13;
&#13;
    presenter.isMultiplication = function (value) {&#13;
        var pattern = new RegExp('^[\\d]+\\*{1}$', 'i');&#13;
        return pattern.test(value);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'drawRange' : presenter.drawRange,&#13;
            'enable': presenter.enable,&#13;
            'disable': presenter.disable,&#13;
            'showAnswers': presenter.showAnswers,&#13;
            'hideAnswers': presenter.hideAnswers&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.children('div').css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.configuration.isCurrentlyVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.configuration.isCurrentlyVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.setDisableState = function(isDisabled) {&#13;
        var element = presenter.$view.find('.outer');&#13;
&#13;
        if (isDisabled) {&#13;
            element.addClass("disable");&#13;
        } else {&#13;
            element.removeClass("disable");&#13;
        }&#13;
&#13;
        presenter.configuration.isDisabled = isDisabled;&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.setDisableState(false);&#13;
&#13;
        bindClickAreaListeners( presenter.$view.find('.clickArea') );&#13;
        presenter.bindInfinityAreas();&#13;
        resetClicks();&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.setDisableState(true);&#13;
&#13;
        removeAllClickListeners();&#13;
    };&#13;
&#13;
    presenter.drawRange = function (rangeList) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        rangeList = [].concat(rangeList);&#13;
        var rangeString = rangeList.join('\n\r');&#13;
        var validatedRanges = presenter.validateRanges(rangeString);&#13;
&#13;
        $.each(validatedRanges.shouldDrawRanges, function() {&#13;
            removeRangesBetweenRange(this);&#13;
        });&#13;
&#13;
        presenter.drawRanges(validatedRanges.shouldDrawRanges, false);&#13;
&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
        eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function (rangeString, isRemove, isRangeCorrect) {&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': rangeString,&#13;
            'value': isRemove ? '0' : '1',&#13;
            'score': isRangeCorrect ? '1' : '0'&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createActionEventData = function(item, action, isCorrect) {&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': item,&#13;
            'value': action,&#13;
            'score': isCorrect ? '1' : '0'&#13;
        };&#13;
    }&#13;
&#13;
    presenter.createAllOKEventData = function () {&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (!presenter.configuration.isActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
&#13;
        presenter.setWorkMode();&#13;
&#13;
        if (presenter.configuration.dontShowRanges) {&#13;
            presenter.$view.find('.rangeImage').remove();&#13;
            var correctPoints = getCorrectPoints();&#13;
&#13;
            drawPoints(correctPoints);&#13;
            presenter.$view.find('.rangeImage').each(function() {&#13;
                $(this).addClass('show-answers');&#13;
            });&#13;
        } else {&#13;
            presenter.currentRanges = jQuery.extend(true ,{}, presenter.configuration.drawnRangesData);&#13;
&#13;
            presenter.leftShowAnswers = presenter.parentLeft;&#13;
            if (presenter.leftShowAnswers){&#13;
                presenter.$view.find('.rangeImage').each(function () {&#13;
                    if (parseInt($(this).parent()[0].style.left, 10).toFixed(1) == parseInt(presenter.leftShowAnswers, 10).toFixed(1)){&#13;
                        presenter.rangeShowAnswers = $(this);&#13;
                    }&#13;
                });&#13;
            }&#13;
&#13;
            presenter.$view.find('.rangeImage').remove();&#13;
&#13;
            var rangesToRemove = [].concat(presenter.configuration.drawnRangesData.ranges);&#13;
&#13;
            $.each(rangesToRemove, function() {&#13;
                presenter.removeRange(this, true);&#13;
            });&#13;
&#13;
            presenter.drawRanges(presenter.configuration.shouldDrawRanges, true);&#13;
            presenter.drawRanges(presenter.configuration.otherRanges, true);&#13;
&#13;
            $.each(presenter.configuration.drawnRangesData.ranges, function() {&#13;
                getSelectedRange(this).addClass('show-answers');&#13;
            });&#13;
        }&#13;
        presenter.$view.find('.outer').addClass("disable");&#13;
    };&#13;
&#13;
    function drawPoints(pointsToDraw) {&#13;
        presenter.$view.find('.rangeImage').remove();&#13;
        presenter.$view.find('.clickArea').each(function() {&#13;
            var $imageContainer = $('&lt;div&gt;&lt;/div&gt;');&#13;
            $imageContainer.addClass('rangeImage exclude include');&#13;
            if (pointsToDraw.indexOf($(this).attr('value')) != -1) {&#13;
                $(this).parent('').append($imageContainer);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(!presenter.configuration.isActivity){&#13;
            return;&#13;
        }&#13;
        presenter.hideAnswerClicked = true;&#13;
&#13;
&#13;
        presenter.$view.find('.show-answers').removeClass('show-answers');&#13;
&#13;
        if (presenter.configuration.dontShowRanges) {&#13;
            drawPoints(presenter.checkedPoints);&#13;
        } else {&#13;
            var rangesToRemove = [].concat(presenter.configuration.drawnRangesData.ranges);&#13;
&#13;
            $.each(rangesToRemove, function() {&#13;
                presenter.removeRange(this, true);&#13;
            });&#13;
            presenter.redrawRanges(presenter.currentRanges.ranges);&#13;
&#13;
            if(presenter.leftShowAnswers){&#13;
                presenter.$view.find('.stepLine').each(function () {&#13;
                    if(parseInt($(this)[0].style.left, 10).toFixed(1) == parseInt(presenter.leftShowAnswers, 10).toFixed(1)){&#13;
                        $(this).append(presenter.rangeShowAnswers);&#13;
                    }&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        presenter.hideAnswerClicked = false;&#13;
        presenter.isShowAnswersActive = false;&#13;
        presenter.$view.find('.outer').removeClass("disable");&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Line_Selection" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Lines" name="Lines" nameLabel="Line_Selection_property_lines" type="text"/>
		<property displayName="Is Activity" name="IsActivity" nameLabel="Line_Selection_property_is_activity" type="boolean"/>
        <property displayName="Is Disabled" name="IsDisabled" nameLabel="Line_Selection_property_is_disabled" type="boolean"/>
        <property displayName="Single Mode" name="SingleMode" nameLabel="Line_Selection_property_single_mode" type="boolean"/>
	</model>
<css>.lines_wrapper .line {&#13;
    stroke:#05B8CC;&#13;
    stroke-width:10;&#13;
    stroke-linecap: round;&#13;
    cursor: pointer;&#13;
}&#13;
.lines_wrapper .line.selected {&#13;
    stroke:#941B80;&#13;
}&#13;
.lines_wrapper .line.correct {&#13;
    stroke:green;&#13;
}&#13;
.lines_wrapper .line.wrong {&#13;
    stroke:red;&#13;
}&#13;
.lines_wrapper .line.show_answers_ok {&#13;
    stroke:black;&#13;
}&#13;
.lines_selection.disabled {&#13;
    opacity:0.3;&#13;
}&#13;
.lines_selection .coordinates {&#13;
    color: black;&#13;
    font-size: 14px;&#13;
    border: 1px solid black;&#13;
    padding-left: 20px;&#13;
    width: 100px;&#13;
}&#13;
</css><view>&lt;div class="lines_selection"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="lines_selection"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonLine_Selection_create(){&#13;
    var presenter = function(){}&#13;
    presenter.error = false;&#13;
    presenter.isErrorMode = false;&#13;
    presenter.isStarted = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'isAllOK'.toLowerCase():&#13;
                presenter.isAllOK();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'select'.toLowerCase():&#13;
                presenter.select(params[0]);&#13;
                break;&#13;
            case 'deselect'.toLowerCase():&#13;
                presenter.deselect(params[0]);&#13;
                break;&#13;
        }&#13;
    };&#13;
    presenter.ERROR_CODES = {&#13;
        'lines_error' : "Error in lines' defition.",&#13;
        'lines_empty' : 'Property Lines cannot be empty!',&#13;
        'points_out' : 'Ending points are outside  the addon!'&#13;
    };&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (!(presenter.$view.find('.disabled').length &gt; 0)) {&#13;
            presenter.disabled = true;&#13;
            presenter.$view.find('.lines_selection').addClass('disabled');&#13;
        }&#13;
    };&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.disabled = false;&#13;
        presenter.$view.find('.disabled').removeClass('disabled');&#13;
    };&#13;
    presenter.updateDisability = function(){&#13;
        if (presenter.disabled)&#13;
            presenter.disable();&#13;
        else&#13;
            presenter.enable();&#13;
    };&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
    presenter.updateVisibility = function() {&#13;
        if (presenter.isVisible) {&#13;
            presenter.show();&#13;
        } else&#13;
            presenter.hide();&#13;
    };&#13;
    presenter.isAllOK = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (presenter.getScore() == presenter.getMaxScore() &amp;&amp; presenter.getErrorCount() == 0)&#13;
            return true&#13;
        else&#13;
            return false;&#13;
    };&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        return presenter.isStarted;&#13;
    };&#13;
    presenter.select = function(index) {&#13;
        index--;&#13;
        presenter.isStarted = true;&#13;
        var line = presenter.$view.find('#line_'+index);&#13;
        if (line.attr('class') != 'line selected') {&#13;
            if (presenter.singleMode) {&#13;
                presenter.$view.find('.selected').attr('class','line');&#13;
                presenter.selected = [];&#13;
            }&#13;
            line.attr('class','line selected');&#13;
            presenter.selected.push(index);&#13;
        }&#13;
    }&#13;
    presenter.deselect = function(index) {&#13;
        index--;&#13;
        presenter.isStarted = true;&#13;
        var line = presenter.$view.find('#line_'+index);&#13;
        if (line.attr('class') == 'line selected') {&#13;
            if (presenter.singleMode)&#13;
                presenter.selected = [];&#13;
            else&#13;
                presenter.selected.splice(presenter.selected.indexOf(index),1);&#13;
            line.attr('class','line');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.initiate = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        presenter.wrapper = presenter.$view.find('.lines_selection');&#13;
        presenter.activity = ModelValidationUtils.validateBoolean(presenter.model['IsActivity']);&#13;
        presenter.disabled = ModelValidationUtils.validateBoolean(presenter.model['IsDisabled']);&#13;
        presenter.initDisabled = presenter.disabled;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(presenter.model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        presenter.singleMode = ModelValidationUtils.validateBoolean(presenter.model['SingleMode']);&#13;
        if (presenter.drawLines(presenter.model['Lines'])) {&#13;
            presenter.wrapper.text(presenter.ERROR_CODES[presenter.error])&#13;
        } else {&#13;
            presenter.updateDisability();&#13;
            presenter.updateVisibility();&#13;
        }&#13;
    }&#13;
    presenter.drawLines = function(string) {&#13;
        if (string == '' || string == undefined) {&#13;
            presenter.error = 'lines_empty';&#13;
            return true;&#13;
        };&#13;
        var oneLine,points = [];&#13;
        var testString = /^\d+;\d+\-\d+;\d+\-[01]$/;&#13;
        var Lines = Helpers.splitLines(string);&#13;
        for(var i = 0; i &lt; Lines.length; i++) {&#13;
            if (!testString.test(Lines[i])) {&#13;
                presenter.error = 'lines_error';&#13;
                return true;&#13;
            };&#13;
        }&#13;
        var Width = presenter.wrapper.width();&#13;
        var Height = presenter.wrapper.parent().height();&#13;
        var $svg = '&lt;svg height="'+Height+'" width="'+Width+'" version="1.1" xmlns:xlink="http://www.w3.org/2000/svg" class="lines_wrapper"&gt;';&#13;
        for (i = 0; i &lt; Lines.length; i++) {&#13;
            oneLine = Lines[i].split('-');&#13;
            points[0] = oneLine[0].split(';');&#13;
            points[1] = oneLine[1].split(';');&#13;
            if (presenter.activity) presenter.answers.push(oneLine[2]);&#13;
            if (points[0][0] &lt; 0 || points[0][0] &gt; Width || points[1][0] &lt; 0 || points[1][0] &gt; Width || points[0][1] &lt; 0 || points[0][1] &gt; Height || points[1][1] &lt; 0 || points[1][1] &gt; Height) {&#13;
                presenter.error = 'points_out';&#13;
                return true;&#13;
            }&#13;
            $svg += '&lt;line id="line_'+(i)+'" class ="line" x1="' + points[0][0] +'" y1="'+points[0][1]+'" x2="'+points[1][0]+'" y2="'+points[1][1]+'"&gt;&lt;/line&gt;';&#13;
        }&#13;
        $svg += '&lt;/svg&gt;';&#13;
        presenter.wrapper.prepend($svg);&#13;
    }&#13;
    presenter.run = function(view, model){&#13;
        presenter.answers = [];&#13;
        presenter.selected = [];&#13;
        var presentId, item, value, score;&#13;
        presenter.initiate(view, model);&#13;
        presenter.$view.find('.line').on('click', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (!presenter.disabled &amp;&amp; !presenter.isErrorMode &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                presenter.isStarted = true;&#13;
                presentId = $(this).attr('id').substr(5);&#13;
                if ($(this).attr('class') == 'line selected') {&#13;
                    $(this).attr('class','line');&#13;
                    if (presenter.singleMode)&#13;
                        presenter.selected = [];&#13;
                    else&#13;
                        presenter.selected.splice(presenter.selected.indexOf(presentId),1);&#13;
                    value = 0;&#13;
                } else {&#13;
                    if (presenter.singleMode) {&#13;
                        presenter.$view.find('.selected').attr('class','line');&#13;
                        presenter.selected = [];&#13;
                    }&#13;
                    $(this).attr('class','line selected');&#13;
                    presenter.selected.push(presentId);&#13;
                    value = 1;&#13;
                }&#13;
                if (presenter.activity)&#13;
                    score = presenter.answers[presentId]&#13;
                else&#13;
                    score = 0;&#13;
                item = parseInt(presentId) + 1;&#13;
                presenter.triggerEvent(item,value,score);&#13;
            }&#13;
        });&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    }&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") presenter.showAnswers();&#13;
        if (eventName == "HideAnswers") presenter.hideAnswers();&#13;
    };&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
    presenter.createEventData = function(item,value,score) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : item,&#13;
            value : value,&#13;
            score : score&#13;
        };&#13;
    };&#13;
    presenter.triggerEvent = function(item, value, score) {&#13;
        var eventData = presenter.createEventData(item, value, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        if (presenter.getScore() == presenter.getMaxScore() &amp;&amp; presenter.activity &amp;&amp; presenter.getErrorCount() == 0) {&#13;
            eventData = presenter.createEventData('all','','');&#13;
            presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
    presenter.createPreview = function(view, model){&#13;
        presenter.answers = [];&#13;
        presenter.selected = [];&#13;
        presenter.initiate(view, model);&#13;
        var coordinations = {x:0, y:0};&#13;
        if (!presenter.error) {&#13;
            var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
                xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;');&#13;
            coordinatesContainer.addClass('coordinates');&#13;
            coordinatesContainer.append(xContainer).append(yContainer);&#13;
            presenter.wrapper.append(coordinatesContainer);&#13;
            function setCalculatedPosition(e) {&#13;
                coordinations.x = e.originalEvent.pageX || e.originalEvent.touches[0].pageX;&#13;
                coordinations.y = e.originalEvent.pageY || e.originalEvent.touches[0].pageY;&#13;
                presenter.mouseSX = parseInt(coordinations.x,10) - parseInt(presenter.wrapper.offset().left,10);&#13;
                presenter.mouseSY = parseInt(coordinations.y,10) - parseInt(presenter.wrapper.offset().top,10);&#13;
                xContainer.find('.value').html(presenter.mouseSX);&#13;
                yContainer.find('.value').html(presenter.mouseSY);&#13;
            }&#13;
&#13;
            var doesElementExist = function() {&#13;
                var $moduleSelector = $('.moduleSelector[data-id="'+presenter.addonID+'"]');&#13;
&#13;
                if ($moduleSelector.length &gt; 0) {&#13;
                    $moduleSelector.on('mousemove', function(e) {&#13;
                        setCalculatedPosition(e);&#13;
                    });&#13;
&#13;
                    clearInterval(interval);&#13;
                }&#13;
            };&#13;
&#13;
            var interval = setInterval(function() { doesElementExist(); }, 500);&#13;
&#13;
            presenter.wrapper.on('mousemove', function(e) {&#13;
                setCalculatedPosition(e)&#13;
            });&#13;
        }&#13;
    };&#13;
    presenter.setShowErrorsMode = function(){&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isErrorMode = true;&#13;
        if (presenter.activity) {&#13;
            for (var i = 0; i &lt;	presenter.answers.length; i++) {&#13;
                if (presenter.answers[presenter.selected[i]] == 1)&#13;
                    presenter.$view.find('#line_'+presenter.selected[i]).addClass('correct');&#13;
                else&#13;
                    presenter.$view.find('#line_'+presenter.selected[i]).addClass('wrong');&#13;
            }&#13;
        } else&#13;
            return 0;&#13;
    }&#13;
    presenter.setWorkMode = function(){&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isErrorMode = false;&#13;
        presenter.$view.find('.correct').removeClass('correct');&#13;
        presenter.$view.find('.wrong').removeClass('wrong');&#13;
    }&#13;
    presenter.showAnswers = function () {&#13;
        presenter.setWorkMode();&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (presenter.activity) {&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.$view.find('.lines_selection').addClass('show_answers');&#13;
            presenter.$view.find('.selected').removeClass('selected');&#13;
            for (var i = 0; i &lt; presenter.answers.length; i++) {&#13;
                if (presenter.answers[i] == 1)&#13;
                    presenter.$view.find('#line_'+i).addClass('show_answers_ok');&#13;
            }&#13;
        }&#13;
    };&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find('.lines_selection').removeClass('show_answers');&#13;
            presenter.$view.find('.show_answers_ok').removeClass('show_answers_ok');&#13;
            for (var i = 0; i &lt; presenter.selected.length; i++) {&#13;
                presenter.$view.find('#line_'+presenter.selected[i]).addClass('selected');&#13;
            }&#13;
        }&#13;
    }&#13;
    presenter.reset = function(){&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.setWorkMode();&#13;
        presenter.selected = [];&#13;
        presenter.$view.find('.selected').removeClass('selected');&#13;
        presenter.disabled = presenter.initDisabled;&#13;
        presenter.isVisible = presenter.initIsVisible;&#13;
        presenter.updateDisability();&#13;
        presenter.updateVisibility();&#13;
        presenter.isStarted = false;&#13;
    }&#13;
    presenter.getErrorCount = function(){&#13;
        var error = 0;&#13;
        if (presenter.activity) {&#13;
            for (var i = 0; i &lt; presenter.selected.length; i++) {&#13;
                if (presenter.answers[presenter.selected[i]] == 0)&#13;
                    error++;&#13;
            };&#13;
            return error;&#13;
        } else&#13;
            return 0;&#13;
    }&#13;
    presenter.getMaxScore = function(){&#13;
        var maxscore = 0;&#13;
        if (presenter.activity) {&#13;
            for (var i = 0; i &lt;	presenter.answers.length; i++)&#13;
                maxscore += parseInt(presenter.answers[i]);&#13;
            return maxscore;&#13;
        } else&#13;
            return 0;&#13;
    }&#13;
    presenter.getScore = function(){&#13;
        var score = 0;&#13;
        if (presenter.activity) {&#13;
            for (var i = 0; i &lt; presenter.selected.length; i++) {&#13;
                if (presenter.answers[presenter.selected[i]] == 1)&#13;
                    score++;&#13;
            };&#13;
            return score;&#13;
        } else&#13;
            return 0;&#13;
    }&#13;
    presenter.getState = function(){&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        return JSON.stringify({&#13;
            disabled : presenter.disabled,&#13;
            visible : presenter.isVisible,&#13;
            lines : presenter.selected,&#13;
            isStarted : presenter.isStarted&#13;
        });&#13;
    }&#13;
    presenter.setState = function(state){&#13;
        presenter.isVisible = JSON.parse(state).visible;&#13;
        presenter.disabled = JSON.parse(state).disabled;&#13;
        presenter.selected = JSON.parse(state).lines;&#13;
        presenter.isStarted = JSON.parse(state).isStarted;&#13;
        for (var i = 0; i &lt; presenter.selected.length; i++) {&#13;
            presenter.$view.find('#line_'+presenter.selected[i]).attr('class','line selected');&#13;
        }&#13;
        presenter.updateDisability();&#13;
        presenter.updateVisibility();&#13;
    }&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon id="Logger">
	<model>
	</model>
<css>.logger {&#13;
    text-align: center;&#13;
    font-weight: bold;&#13;
    border: 1px dashed #999999;&#13;
    padding: 0;&#13;
    color: red;&#13;
    overflow: auto;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.log-element {&#13;
    color: black;&#13;
    border-top: 1px dotted black;&#13;
    font-weight: normal;&#13;
}&#13;
&#13;
.logger-clear {&#13;
    float: right;&#13;
}&#13;
</css><view>&lt;div class="logger"&gt;Logger - logs interceptor &lt;a href="" class="logger-clear"&gt;[Clear]&lt;/a&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="logger"&gt;Logger - logs interceptor &lt;a href="" class="logger-clear"&gt;[Clear]&lt;/a&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonLogger_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
&#13;
        jQuery.aop.around({ target:console, method:'log'}, function (invocation) {&#13;
            insertLogElement(invocation.arguments[0]);&#13;
            return invocation.proceed();&#13;
        });&#13;
&#13;
        presenter.$view.find('.logger-clear').click(function () {&#13;
            presenter.$view.find('.log-element').remove();&#13;
            return false;&#13;
        });&#13;
    };&#13;
&#13;
    function insertLogElement(logMessage) {&#13;
        var $element = $(document.createElement('div')), logDate = new Date(), formattedDate;&#13;
        formattedDate = logDate.getHours() + ":" + logDate.getMinutes() + ":" + logDate.getSeconds();&#13;
&#13;
        $element.addClass('log-element');&#13;
        $element.text(formattedDate + ": " + logMessage);&#13;
&#13;
        presenter.$view.find('.logger').append($element);&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Magic_Boxes" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Grid" nameLabel="Magic_Boxes_property_grid" type="text"/>
		<property isLocalized="true" name="Answers" nameLabel="Magic_Boxes_property_answers" type="text"/>
        <property displayName="Check By Words" name="CheckByWords" nameLabel="Magic_Boxes_property_check_by_words" type="boolean"/>
	</model>
<css>.magicGridWrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    border: 1px solid black;&#13;
}&#13;
&#13;
.magicGrid {&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    border: none;&#13;
}&#13;
&#13;
.selectable-element {&#13;
    float: left;&#13;
    font-size: 2em;&#13;
    font-family: "Verdana";&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    border-style: solid;&#13;
    border-color: white;&#13;
    border-width: 2px;&#13;
    text-align: center;&#13;
    color: black;&#13;
}&#13;
&#13;
.selectable-element-wrapper {&#13;
    float: left;&#13;
    font-size: 2em;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    border-style: solid;&#13;
    border-color: black;&#13;
    border-width: 1px;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.selectable-element-selected {&#13;
    border-color: #65CDE5;&#13;
    background-color: #65CDE5;&#13;
    color: white;&#13;
}&#13;
&#13;
.selectable-element-selected-correct {&#13;
    border-color: green;&#13;
}&#13;
&#13;
.selectable-element-selected-uncorrect {&#13;
    border-color: red;&#13;
}&#13;
&#13;
.selectable-element-show-answers {&#13;
    border-color: blue;&#13;
}&#13;
</css><view>&lt;div class="magicGridWrapper"&gt;&#13;
    &lt;div class="magicGrid"&gt;&#13;
        &lt;!-- Here goes generated grid cells--&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="magicGridWrapper"&gt;&#13;
    &lt;div class="magicGrid"&gt;&#13;
        &lt;!-- Here goes generated grid cells--&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonMagic_Boxes_create() {&#13;
    var presenter = function() { };&#13;
&#13;
    var gridSelection = [];&#13;
    var goodSelections = [];&#13;
    var goodSelectionIndexes = [];&#13;
    var correctAnswers = [];&#13;
&#13;
    var viewContainer;&#13;
    var gridContainerWrapper;&#13;
    var gridContainer;&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.configuration = {&#13;
        rows: 0,&#13;
        columns: 0,&#13;
        gridElements: [],&#13;
        answers: []&#13;
    };&#13;
&#13;
    var maxScore;&#13;
    presenter.isSelectionPossible = true;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        COLUMNS : "Inconsistent column size. Each row has to have same number of elements!",&#13;
        ROWS : "Inconsistent row definition. Whitespaces, semicolons and commas aren't alowed in grid!",&#13;
        ANSWERS_NOT_PROVIDED : "Answers section is missing or empty!",&#13;
        GRID_NOT_PROVIDED : "Grid definition missing or empty!"&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    function showErrorMessage(errorMessage) {&#13;
        var errorContainer = '&lt;p&gt;' + errorMessage + '&lt;/p&gt;';&#13;
        viewContainer.html(errorContainer);&#13;
    }&#13;
&#13;
    function reverseString(text) {&#13;
        var splitedText = text.split("");&#13;
        var reversedText = splitedText.reverse();&#13;
&#13;
        return reversedText.join("");&#13;
    }&#13;
&#13;
    function initGridSelection() {&#13;
        for(var row = 0; row &lt; presenter.configuration.rows; row++) {&#13;
            gridSelection[row] = [];&#13;
            correctAnswers[row] = [];&#13;
            for(var column = 0; column &lt; presenter.configuration.columns; column++) {&#13;
                gridSelection[row][column] = false;&#13;
                correctAnswers[row][column] = false;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function clearCorrectAnswers() {&#13;
        for(var row = 0; row &lt; presenter.configuration.rows; row++) {&#13;
            correctAnswers[row] = [];&#13;
            for(var column = 0; column &lt; presenter.configuration.columns; column++) {&#13;
                correctAnswers[row][column] = false;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function getElementDimensions(element) {&#13;
        element = $(element);&#13;
&#13;
        return {&#13;
            border:{&#13;
                top:parseInt(element.css('border-top-width'), 10),&#13;
                bottom:parseInt(element.css('border-bottom-width'), 10),&#13;
                left:parseInt(element.css('border-left-width'), 10),&#13;
                right:parseInt(element.css('border-right-width'), 10)&#13;
            },&#13;
            margin:{&#13;
                top:parseInt(element.css('margin-top'), 10),&#13;
                bottom:parseInt(element.css('margin-bottom'), 10),&#13;
                left:parseInt(element.css('margin-left'), 10),&#13;
                right:parseInt(element.css('margin-right'), 10)&#13;
            },&#13;
            padding:{&#13;
                top:parseInt(element.css('padding-top'), 10),&#13;
                bottom:parseInt(element.css('padding-bottom'), 10),&#13;
                left:parseInt(element.css('padding-left'), 10),&#13;
                right:parseInt(element.css('padding-right'), 10)&#13;
            }&#13;
        };&#13;
    }&#13;
&#13;
    function calculateInnerDistance(elementDimensions) {&#13;
        var vertical = elementDimensions.border.top + elementDimensions.border.bottom;&#13;
        vertical += elementDimensions.margin.top + elementDimensions.margin.bottom;&#13;
        vertical += elementDimensions.padding.top + elementDimensions.padding.top;&#13;
&#13;
        var horizontal = elementDimensions.border.left + elementDimensions.border.right;&#13;
        horizontal += elementDimensions.margin.left + elementDimensions.margin.right;&#13;
        horizontal += elementDimensions.padding.left + elementDimensions.padding.right;&#13;
&#13;
        return {&#13;
            vertical : vertical,&#13;
            horizontal : horizontal&#13;
        };&#13;
    }&#13;
&#13;
    function fixTouch (touch) {&#13;
        var winPageX = window.pageXOffset,&#13;
            winPageY = window.pageYOffset,&#13;
            x = touch.clientX,&#13;
            y = touch.clientY;&#13;
&#13;
        if (touch.pageY === 0 &amp;&amp; Math.floor(y) &gt; Math.floor(touch.pageY) ||&#13;
            touch.pageX === 0 &amp;&amp; Math.floor(x) &gt; Math.floor(touch.pageX)) {&#13;
            // iOS4 clientX/clientY have the value that should have been&#13;
            // in pageX/pageY. While pageX/page/ have the value 0&#13;
            x = x - winPageX;&#13;
            y = y - winPageY;&#13;
        } else if (y &lt; (touch.pageY - winPageY) || x &lt; (touch.pageX - winPageX) ) {&#13;
            // Some Android browsers have totally bogus values for clientX/Y&#13;
            // when scrolling/zooming a page. Detectable since clientX/clientY&#13;
            // should never be smaller than pageX/pageY minus page scroll&#13;
            x = touch.pageX - winPageX;&#13;
            y = touch.pageY - winPageY;&#13;
        }&#13;
&#13;
        return {&#13;
            x: x,&#13;
            y: y&#13;
        };&#13;
    }&#13;
&#13;
    function initGrid(model, preview) {&#13;
        var rows = presenter.configuration.rows;&#13;
        var columns = presenter.configuration.columns;&#13;
&#13;
        for(var row = 0; row &lt; rows; row++) {&#13;
            for(var column = 0; column &lt; columns; column++) {&#13;
                var wrapperElement = $(document.createElement('div'));&#13;
                wrapperElement.addClass('selectable-element-wrapper');&#13;
&#13;
                var selectableElement = $(document.createElement('div'));&#13;
                selectableElement.addClass('selectable-element');&#13;
                selectableElement.text(presenter.configuration.gridElements[row][column].toUpperCase());&#13;
&#13;
                wrapperElement.append(selectableElement);&#13;
                gridContainer.append(wrapperElement);&#13;
            }&#13;
        }&#13;
&#13;
        var gridContainerWrapperDimensions = getElementDimensions(gridContainerWrapper);&#13;
        var gridContainerWrapperDistances = calculateInnerDistance(gridContainerWrapperDimensions);&#13;
&#13;
        var wrapperDimensions = getElementDimensions(gridContainerWrapper.find('.selectable-element-wrapper:first')[0]);&#13;
        var wrapperDistances = calculateInnerDistance(wrapperDimensions);&#13;
&#13;
        var elementDimensions = getElementDimensions(gridContainerWrapper.find('.selectable-element:first')[0]);&#13;
        var elementDistances = calculateInnerDistance(elementDimensions);&#13;
&#13;
        var wrapperWidth = parseInt((model.Width - gridContainerWrapperDistances.horizontal - (wrapperDistances.horizontal * columns)) / columns, 10);&#13;
        var wrapperHeight = parseInt((model.Height - gridContainerWrapperDistances.vertical - (wrapperDistances.vertical * rows)) / rows, 10);&#13;
&#13;
        var elementWidth = wrapperWidth - elementDistances.horizontal;&#13;
        var elementHeight = wrapperHeight - elementDistances.vertical;&#13;
&#13;
        var newContainerWrapperHeight = wrapperHeight * rows + wrapperDistances.vertical * rows;&#13;
        var newContainerWrapperWidth = wrapperWidth * columns + wrapperDistances.horizontal * columns;&#13;
&#13;
        var verticalGap = model.Height - newContainerWrapperHeight;&#13;
        var horizontalGap = model.Width - newContainerWrapperWidth;&#13;
&#13;
        gridContainerWrapper.css('height', model.Height + 'px');&#13;
        gridContainerWrapper.css('width', model.Width + 'px');&#13;
        gridContainer.css('height', model.Height + 'px');&#13;
        gridContainer.css('width', model.Width + 'px');&#13;
&#13;
        presenter.isMouseDown = false;&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            var selectedIndex = null;&#13;
&#13;
            viewContainer.find('.magicGrid').on('touchmove', function (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
&#13;
                var client = fixTouch(e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]);&#13;
&#13;
                var element = document.elementFromPoint(client.x, client.y);&#13;
                var index = $(element).parent().index();&#13;
                var selectedRow = parseInt(index / columns, 10);&#13;
                var selectedColumn = parseInt(index % columns, 10);&#13;
                if(index != selectedIndex &amp;&amp; $(element).parent().hasClass('selectable-element-wrapper')){&#13;
                    selectionHandler(selectedRow, selectedColumn);&#13;
                    selectedIndex = index;&#13;
                }&#13;
            });&#13;
        }else{&#13;
            viewContainer.find('.magicGridWrapper').on('mousedown', function () {&#13;
                presenter.isMouseDown = true;&#13;
            });&#13;
&#13;
            viewContainer.find('.magicGridWrapper').on('mouseup', function () {&#13;
                presenter.isMouseDown = false;&#13;
            });&#13;
&#13;
            viewContainer.find('.magicGridWrapper').on('mouseleave', function () {&#13;
                presenter.isMouseDown = false;&#13;
            });&#13;
        }&#13;
&#13;
        gridContainer.find(".selectable-element-wrapper").each(function() {&#13;
            var index = $(this).index();&#13;
            var selectedRow = parseInt(index / columns, 10);&#13;
            var selectedColumn = parseInt(index % columns, 10);&#13;
&#13;
            $(this).width(selectedColumn === columns - 1 ? wrapperWidth + horizontalGap : wrapperWidth);&#13;
            $(this).height(selectedRow === rows - 1 ? wrapperHeight + verticalGap : wrapperHeight);&#13;
&#13;
            var selectableElement = $(this).find('.selectable-element:first');&#13;
            selectableElement.width(selectedColumn === columns - 1 ? elementWidth + horizontalGap : elementWidth);&#13;
            selectableElement.height(selectedRow === rows -1 ? elementHeight + verticalGap : elementHeight);&#13;
            var lineHeight = selectedRow === rows -1 ? elementHeight + verticalGap : elementHeight;&#13;
            selectableElement.css('line-height', lineHeight + "px");&#13;
&#13;
            applySelectionStyle(selectedRow, selectedColumn);&#13;
            if (!preview) {&#13;
                if (MobileUtils.isEventSupported('touchstart')) {&#13;
                    function handler(e){&#13;
                        e.stopPropagation();&#13;
                        e.preventDefault();&#13;
                        selectionHandler(selectedRow, selectedColumn);&#13;
                        $(this).unbind('click');&#13;
                        setTimeout(function(){selectableElement.click(handler)}, 500);&#13;
                    }&#13;
&#13;
                    selectableElement.click(handler);&#13;
                }else{&#13;
                    presenter.wasMoved = false;&#13;
                    selectableElement.on('mousemove', function (e) {&#13;
                        e.preventDefault();&#13;
                        if(presenter.isMouseDown &amp;&amp; !presenter.wasMoved){&#13;
                            selectionHandler(selectedRow, selectedColumn);&#13;
                            presenter.wasMoved = true;&#13;
                        }&#13;
                    });&#13;
&#13;
                    selectableElement.on('mouseout', function (e) {&#13;
                        e.stopPropagation();&#13;
                        e.preventDefault();&#13;
                        presenter.wasMoved = false;&#13;
                    });&#13;
&#13;
                    selectableElement.on('mousedown', function (e) {&#13;
                        e.stopPropagation();&#13;
                        e.preventDefault();&#13;
                        presenter.isMouseDown = true;&#13;
                        selectionHandler(selectedRow, selectedColumn);&#13;
                        presenter.wasMoved = true;&#13;
                    });&#13;
&#13;
                    selectableElement.on('mouseup', function (e) {&#13;
                        e.stopPropagation();&#13;
                        e.preventDefault();&#13;
                        presenter.isMouseDown = false;&#13;
                    });&#13;
                }&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.calculateScoreForEvent = function (prevScore, currentScore) {&#13;
        var score;&#13;
        if(currentScore &gt; prevScore){&#13;
            score = 1;&#13;
        }else{&#13;
            score = 0;&#13;
        }&#13;
&#13;
        return score;&#13;
    };&#13;
&#13;
    function selectionHandler(row, column) {&#13;
        var prevScore = presenter.getScore();&#13;
        if(presenter.isSelectionPossible) {&#13;
            gridSelection[row][column] = gridSelection[row][column] ? false : true;&#13;
            applySelectionStyle(row, column);&#13;
&#13;
            var item = (row+1) +"-"+ (column+1);&#13;
            var index = row * presenter.configuration.columns + column;&#13;
            var element = gridContainerWrapper.find(".selectable-element:eq(" + index + ")");&#13;
            var currentScore = presenter.getScore();&#13;
&#13;
            var eventData = presenter.createEventData(item, element.text(), presenter.calculateScoreForEvent(prevScore, currentScore));&#13;
            eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
            if(presenter.isAllOK()){&#13;
                var allOKEventData = presenter.createAllOKEventData();&#13;
                eventBus.sendEvent('ValueChanged', allOKEventData);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function applySelectionStyle(row, column) {&#13;
        var index = row * presenter.configuration.columns + column;&#13;
        var element = gridContainerWrapper.find(".selectable-element:eq(" + index + ")");&#13;
&#13;
        if(gridSelection[row][column]) {// is selected&#13;
            if(!element.hasClass('selectable-element-selected')) {&#13;
                element.addClass('selectable-element-selected');&#13;
            }&#13;
        } else {&#13;
            if(element.hasClass('selectable-element-selected')) {&#13;
                element.removeClass('selectable-element-selected');&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function applyAnswerStyles() {&#13;
        if(presenter.configuration.checkByWords){&#13;
            gridContainerWrapper.find(".selectable-element").each(function(index) {&#13;
                if($(this).hasClass('selectable-element-selected')){&#13;
                    $(this).addClass('selectable-element-selected-uncorrect');&#13;
                }&#13;
            });&#13;
&#13;
            for (var i=0; i&lt;presenter.configuration.answers.length; i++){&#13;
                if(presenter.checkIfWordIsSelected(presenter.configuration.answers[i].toString())){&#13;
                    var word = presenter.configuration.answers[i].toString();&#13;
                    for(var j=0; j &lt; presenter.answerWords[word.toLowerCase()].column.length; j++){&#13;
                        var index = presenter.answerWords[word.toLowerCase()].row[j] * presenter.configuration.columns + presenter.answerWords[word.toLowerCase()].column[j];&#13;
                        var element = gridContainerWrapper.find(".selectable-element:eq(" + index + ")");&#13;
                        element.removeClass('selectable-element-selected-uncorrect');&#13;
                        element.addClass('selectable-element-selected-correct');&#13;
                    }&#13;
                }&#13;
            }&#13;
        }else{&#13;
            gridContainerWrapper.find(".selectable-element").each(function(index) {&#13;
                if(!$(this).hasClass("selectable-element-selected")) {&#13;
                    return true; // jQeury equivalent of continue&#13;
                }&#13;
&#13;
                var className;&#13;
&#13;
                if(goodSelectionIndexes[index] != -1){&#13;
                    className = 'selectable-element-selected-correct';&#13;
                }else{&#13;
                    className = 'selectable-element-selected-uncorrect';&#13;
                }&#13;
&#13;
                $(this).addClass(className);&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    function cleanAnswersStyles() {&#13;
        // Clearing correct/uncorrect styles which where set when user&#13;
        // pressed 'check answers' button.&#13;
        gridContainerWrapper.find(".selectable-element").each(function() {&#13;
            if($(this).hasClass('selectable-element-selected-correct')) {&#13;
                $(this).removeClass('selectable-element-selected-correct');&#13;
            }&#13;
            if($(this).hasClass('selectable-element-selected-uncorrect')) {&#13;
                $(this).removeClass('selectable-element-selected-uncorrect');&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.reset = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.isSelectionPossible = true;&#13;
&#13;
        cleanAnswersStyles();&#13;
&#13;
        for(var row = 0; row &lt; presenter.configuration.rows; row++) {&#13;
            for(var column = 0; column &lt; presenter.configuration.columns; column++) {&#13;
                gridSelection[row][column] = false;&#13;
                applySelectionStyle(row, column);&#13;
            }&#13;
        }&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.configuration.isVisible = presenter.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.isSelectionPossible = false;&#13;
        var rows = presenter.configuration.rows;&#13;
        var columns = presenter.configuration.columns;&#13;
&#13;
        goodSelectionIndexes = presenter.convertSelectionToIndexes(goodSelections, rows, columns);&#13;
&#13;
        applyAnswerStyles();&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        cleanAnswersStyles();&#13;
&#13;
        for(var row = 0; row &lt; presenter.configuration.rows; row++) {&#13;
            for(var column = 0; column &lt; presenter.configuration.columns; column++) {&#13;
                applySelectionStyle(row, column);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.isSelectionPossible = true;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if(presenter.configuration.isError){&#13;
            return 0;&#13;
        }&#13;
&#13;
        return maxScore;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if(presenter.configuration.isError){&#13;
            return 0;&#13;
        }&#13;
&#13;
        if(presenter.configuration.checkByWords){&#13;
            return presenter.countScoreForWords().score;&#13;
        }else{&#13;
            return presenter.calculateScore(goodSelections, gridSelection).correct;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if(presenter.configuration.isError){&#13;
            return 0;&#13;
        }&#13;
&#13;
        if(presenter.configuration.checkByWords){&#13;
            if(presenter.isAttempted()){&#13;
                return presenter.countScoreForWords().errors;&#13;
            }else{&#13;
                return 0;&#13;
            }&#13;
        }else{&#13;
            return presenter.calculateScore(goodSelections, gridSelection).errors;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.serializeGridSelection = function(gridSelection, rows, columns) {&#13;
        var serializedArray = '';&#13;
        var counter = 0;&#13;
&#13;
        for(var row = 0; row &lt; rows; row++) {&#13;
            for(var column = 0; column &lt; columns; column++) {&#13;
                if(gridSelection[row][column]) {&#13;
                    counter++;&#13;
                    var index = row * columns + column;&#13;
                    serializedArray += index.toString() + ',';&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        // Remove last comma separator&#13;
        if(counter !== 0) {&#13;
            serializedArray = serializedArray.substr(0, serializedArray.length - 1);&#13;
        }&#13;
&#13;
        return serializedArray;&#13;
    };&#13;
&#13;
    presenter.deserialiseGridSelection = function(serializedArray) {&#13;
        var deserialisedArray = [];&#13;
        if (serializedArray.length === 0) {&#13;
            return deserialisedArray;&#13;
        }&#13;
&#13;
        var splittedArray = serializedArray.split(',');&#13;
&#13;
        for(var i = 0; i &lt; splittedArray.length; i++) {&#13;
            var index = parseInt(splittedArray[i], 10);&#13;
            deserialisedArray.push(index);&#13;
        }&#13;
&#13;
        return deserialisedArray;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        var rows = presenter.configuration.rows;&#13;
        var columns = presenter.configuration.columns;&#13;
&#13;
        return JSON.stringify({&#13;
            serializeGridSelection: presenter.serializeGridSelection(gridSelection, rows, columns),&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var rows = presenter.configuration.rows;&#13;
        var columns = presenter.configuration.columns;&#13;
        var row;&#13;
        var column;&#13;
&#13;
        initGridSelection();&#13;
&#13;
        var serializeGridSelection, parsedState;&#13;
        if (state.indexOf("}") &gt; -1 &amp;&amp; state.indexOf("{") &gt; -1){&#13;
            parsedState = JSON.parse(state);&#13;
            serializeGridSelection = parsedState.serializeGridSelection;&#13;
        }else{&#13;
            serializeGridSelection = state;&#13;
            parsedState = undefined;&#13;
        }&#13;
&#13;
        var dematerialisedState = presenter.deserialiseGridSelection(serializeGridSelection);&#13;
&#13;
        for(var i = 0; i &lt; dematerialisedState.length; i++) {&#13;
            row = parseInt(dematerialisedState[i] / columns, 10);&#13;
            column = parseInt(dematerialisedState[i] % columns, 10);&#13;
            gridSelection[row][column] = true;&#13;
        }&#13;
&#13;
        for(row = 0; row &lt; rows; row++) {&#13;
            for(column = 0; column &lt; columns; column++) {&#13;
                applySelectionStyle(row, column);&#13;
            }&#13;
        }&#13;
&#13;
        if(parsedState){&#13;
            if(parsedState.isVisible != undefined){&#13;
                presenter.setVisibility(parsedState.isVisible);&#13;
                presenter.configuration.isVisible = parsedState.isVisible;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, preview){&#13;
        presenter.answerWords = {};&#13;
        viewContainer = $(view);&#13;
        presenter.view = viewContainer;&#13;
        gridContainerWrapper = viewContainer.find(".magicGridWrapper:first");&#13;
        gridContainer = gridContainerWrapper.find(".magicGrid:first");&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        if(presenter.configuration.answers){&#13;
            for(var i = 0; i&lt; presenter.configuration.answers.length; i++){&#13;
                presenter.answerWords[presenter.configuration.answers[i].toString().toLowerCase()] = {&#13;
                    row : [],&#13;
                    column : []&#13;
                };&#13;
            }&#13;
        }&#13;
&#13;
        if(presenter.configuration.isError) {&#13;
            showErrorMessage(presenter.configuration.errorMessage);&#13;
        } else {&#13;
            initGridSelection();&#13;
            initGrid(model, preview);&#13;
            goodSelections = presenter.findGoodSelections(presenter.configuration.gridElements, presenter.configuration.answers);&#13;
&#13;
            if(presenter.configuration.checkByWords){&#13;
                maxScore = presenter.configuration.answers.length;&#13;
            }else{&#13;
                maxScore = presenter.calculateMaxScore(goodSelections);&#13;
            }&#13;
&#13;
            if (preview) {&#13;
                gridSelection = goodSelections;&#13;
                presenter.setWorkMode();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        eventBus = playerController.getEventBus();&#13;
        presenter.addonID = model.ID;&#13;
        presenterLogic(view, model, false);&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.isWordInRow = function(grid, row, word) {&#13;
        word = word.toLowerCase();&#13;
        var positions = [];&#13;
&#13;
        if (word.length &gt; grid[row].length) {&#13;
            return {&#13;
                wordFound: false,&#13;
                positions: positions&#13;
            };&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; (grid[row].length - word.length + 1); i++) {&#13;
            var gridWord = "";&#13;
&#13;
            for (var j = 0; j &lt; word.length; j++) {&#13;
                gridWord += grid[row][j + i].toLowerCase();&#13;
            }&#13;
&#13;
            if (gridWord === word || reverseString(gridWord) === word) {&#13;
                positions.push(i);&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            wordFound: positions.length &gt; 0,&#13;
            positions: positions&#13;
        };&#13;
    };&#13;
&#13;
    presenter.isWordInColumn = function(grid, column, word) {&#13;
        var positions = [];&#13;
        word = word.toLowerCase();&#13;
&#13;
        if (word.length &gt; grid.length) {&#13;
            return {&#13;
                wordFound: false,&#13;
                positions: positions&#13;
            };&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; (grid.length - word.length + 1); i++) {&#13;
            var gridWord = "";&#13;
&#13;
            for (var j = 0; j &lt; word.length; j++) {&#13;
                gridWord += grid[j + i][column].toLowerCase();&#13;
            }&#13;
&#13;
            if (gridWord === word || reverseString(gridWord) === word) {&#13;
                positions.push(i);&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            wordFound: positions.length &gt; 0,&#13;
            positions: positions&#13;
        };&#13;
    };&#13;
&#13;
    presenter.DIAGONALS = {&#13;
        NORMAL: 0,&#13;
        REVERSED: 1&#13;
    };&#13;
&#13;
    presenter.isWordOnDiagonals = function(grid, word, direction) {&#13;
        var rows = grid.length;&#13;
        var columns = grid[0].length;&#13;
        var positions = [];&#13;
        word = word.toLowerCase();&#13;
&#13;
        if (word.length &gt; rows || word.length &gt; columns) {&#13;
            return {&#13;
                wordFound: false,&#13;
                positions: positions&#13;
            };&#13;
        }&#13;
&#13;
        for (var row = 0; row &lt; rows; row++) {&#13;
            for (var column = 0; column &lt; columns; column++) {&#13;
                var columnCondition = direction === presenter.DIAGONALS.NORMAL ? word.length &lt;= columns - column : word.length &lt;= column + 1;&#13;
                var isWordSmallEnough = word.length &lt;= (rows - row);&#13;
                isWordSmallEnough = isWordSmallEnough &amp;&amp; columnCondition;&#13;
&#13;
                if (isWordSmallEnough) {&#13;
                    var gridWord = "";&#13;
&#13;
                    for (var i = 0; i &lt; word.length; i++) {&#13;
                        var columnIndex = direction === presenter.DIAGONALS.NORMAL ? column + i : column - i;&#13;
                        gridWord += grid[row + i][columnIndex].toLowerCase();&#13;
                    }&#13;
&#13;
                    if (gridWord === word || reverseString(gridWord) === word) {&#13;
                        positions.push({&#13;
                            row: row,&#13;
                            column: column&#13;
                        });&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            wordFound: positions.length &gt; 0,&#13;
            positions: positions&#13;
        };&#13;
    };&#13;
&#13;
    presenter.findGoodSelections = function (grid, answers) {&#13;
        var goodSelections = [];&#13;
        var l;&#13;
&#13;
        for (var i = 0; i &lt; answers.length; i++) {&#13;
            var answer = answers[i].toString();&#13;
&#13;
            // Horizontal words&#13;
            for (var r = 0; r &lt; grid.length; r++) {&#13;
                var horizontalResult = presenter.isWordInRow(grid, r, answer);&#13;
                for (var hr = 0; hr &lt; horizontalResult.positions.length; hr++) {&#13;
                    for (l = 0; l &lt; answer.length; l++) {&#13;
                        if(presenter.configuration.checkByWords){&#13;
                            presenter.answerWords[answer.toLowerCase()].row.push(r);&#13;
                            presenter.answerWords[answer.toLowerCase()].column.push(horizontalResult.positions[hr] + l);&#13;
                        }&#13;
                        goodSelections.push({&#13;
                            row: r,&#13;
                            column: horizontalResult.positions[hr] + l&#13;
                        });&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            // Vertical words&#13;
            for (var c = 0; c &lt; grid[0].length; c++) {&#13;
                var verticalResult = presenter.isWordInColumn(grid, c, answer);&#13;
                for (var vr = 0; vr &lt; verticalResult.positions.length; vr++) {&#13;
                    for (l = 0; l &lt; answer.length; l++) {&#13;
                        if(presenter.configuration.checkByWords){&#13;
                            presenter.answerWords[answer.toLowerCase()].row.push(verticalResult.positions[vr] + l);&#13;
                            presenter.answerWords[answer.toLowerCase()].column.push(c);&#13;
                        }&#13;
                        goodSelections.push({&#13;
                            row: verticalResult.positions[vr] + l,&#13;
                            column: c&#13;
                        });&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            // Diagonal words&#13;
            var diagonalResult = presenter.isWordOnDiagonals(grid, answer, presenter.DIAGONALS.NORMAL);&#13;
            for (var dr = 0; dr &lt; diagonalResult.positions.length; dr++) {&#13;
                for (l = 0; l &lt; answer.length; l++) {&#13;
                    if(presenter.configuration.checkByWords){&#13;
                        presenter.answerWords[answer.toLowerCase()].row.push(diagonalResult.positions[dr].row + l);&#13;
                        presenter.answerWords[answer.toLowerCase()].column.push(diagonalResult.positions[dr].column + l);&#13;
                    }&#13;
                    goodSelections.push({&#13;
                        row: diagonalResult.positions[dr].row + l,&#13;
                        column: diagonalResult.positions[dr].column + l&#13;
                    });&#13;
                }&#13;
            }&#13;
&#13;
            // Reverse diagonal words&#13;
            var reverseDiagonalResult = presenter.isWordOnDiagonals(grid, answer, presenter.DIAGONALS.REVERSED);&#13;
            for (var rdr = 0; rdr &lt; reverseDiagonalResult.positions.length; rdr++) {&#13;
                for (l = 0; l &lt; answer.length; l++) {&#13;
                    if(presenter.configuration.checkByWords){&#13;
                        presenter.answerWords[answer.toLowerCase()].row.push(reverseDiagonalResult.positions[rdr].row + l);&#13;
                        presenter.answerWords[answer.toLowerCase()].column.push(reverseDiagonalResult.positions[rdr].column - l);&#13;
                    }&#13;
                    goodSelections.push({&#13;
                        row: reverseDiagonalResult.positions[rdr].row + l,&#13;
                        column: reverseDiagonalResult.positions[rdr].column - l&#13;
                    });&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        var rows = grid.length;&#13;
        var columns = grid[0].length;&#13;
&#13;
        return presenter.convertSelectionToArray(goodSelections, rows, columns);&#13;
    };&#13;
&#13;
    presenter.countScoreForWords = function () {&#13;
        var score = 0;&#13;
        var errors = 0;&#13;
&#13;
        clearCorrectAnswers();&#13;
        for (var i=0; i&lt;presenter.configuration.answers.length; i++){&#13;
            if(presenter.checkIfWordIsSelected(presenter.configuration.answers[i].toString())){&#13;
                fillCorrectAnswers(presenter.configuration.answers[i].toString());&#13;
                score++;&#13;
            }&#13;
        }&#13;
&#13;
        for (var j=0; j&lt;presenter.configuration.rows; j++){&#13;
            for (var k=0; k&lt;presenter.configuration.columns; k++){&#13;
                if(gridSelection[j][k]  &amp;&amp; !correctAnswers[j][k]){&#13;
                    errors++;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            score: score,&#13;
            errors: errors&#13;
        };&#13;
    };&#13;
&#13;
    function fillCorrectAnswers(word) {&#13;
        for (var i = 0; i&lt;presenter.answerWords[word.toLowerCase()].column.length; i++ ){&#13;
            correctAnswers[presenter.answerWords[word.toLowerCase()].row[i]][presenter.answerWords[word.toLowerCase()].column[i]] = true;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.checkIfWordIsSelected = function(word) {&#13;
        var correct = 0;&#13;
        var incorrect= 0;&#13;
&#13;
        for(var i=0; i &lt; presenter.answerWords[word.toLowerCase()].column.length; i++){&#13;
            if(gridSelection[presenter.answerWords[word.toLowerCase()].row[i]][presenter.answerWords[word.toLowerCase()].column[i]]){&#13;
                correct++;&#13;
            }else{&#13;
                incorrect++;&#13;
            }&#13;
        }&#13;
        return correct&gt;0 &amp;&amp; incorrect == 0;&#13;
    };&#13;
&#13;
    presenter.convertSelectionToArray = function (selections, rows, columns) {&#13;
        var selectionArray = [];&#13;
        for (var i = 0; i &lt; rows; i++) {&#13;
            selectionArray[i] = [];&#13;
&#13;
            for (var j = 0; j &lt; columns; j++) {&#13;
                selectionArray[i][j] = false;&#13;
            }&#13;
        }&#13;
&#13;
        for (var s = 0; s &lt; selections.length; s++) {&#13;
            var row = selections[s].row;&#13;
            var column = selections[s].column;&#13;
&#13;
            selectionArray[row][column] = true;&#13;
        }&#13;
&#13;
        return selectionArray;&#13;
    };&#13;
&#13;
    presenter.convertSelectionToIndexes = function (selections, rows, columns) {&#13;
        var selectionIndexes = [];&#13;
&#13;
        for(var row = 0; row &lt; rows; row++) {&#13;
            for(var column = 0; column &lt; columns; column++) {&#13;
                var index = row * columns + column;&#13;
                if (selections[row][column]) {&#13;
                    selectionIndexes[index] = 1;&#13;
                } else {&#13;
                    selectionIndexes[index] = -1;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return selectionIndexes;&#13;
    };&#13;
&#13;
    presenter.calculateMaxScore = function(goodSelections) {&#13;
        var rows = goodSelections.length;&#13;
        var columns = goodSelections[0].length;&#13;
&#13;
        var maxScore = 0;&#13;
&#13;
        for (var row = 0; row &lt; rows; row++) {&#13;
            for (var column = 0; column &lt; columns; column++) {&#13;
                if (goodSelections[row][column]) {&#13;
                    maxScore++;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return maxScore;&#13;
    };&#13;
&#13;
    presenter.calculateScore = function (goodSelections, selections) {&#13;
        var correct = 0;&#13;
        var errors = 0;&#13;
&#13;
        var rows = goodSelections.length;&#13;
        var columns = goodSelections[0].length;&#13;
&#13;
        for (var row = 0; row &lt; rows; row++) {&#13;
            for (var column = 0; column &lt; columns; column++) {&#13;
                if (selections[row][column]) {&#13;
                    if (selections[row][column] === goodSelections[row][column]) {&#13;
                        correct++;&#13;
                    } else {&#13;
                        errors++;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            correct: correct,&#13;
            errors: errors&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateGrid = function(gridDefinition) {&#13;
        var gridElements = [];&#13;
        var columnCount = 0;&#13;
        var rowCount = 0;&#13;
&#13;
        if(typeof gridDefinition === "undefined" || gridDefinition.length === 0) {&#13;
            return {&#13;
                isError: true,&#13;
                errorMessage: presenter.ERROR_MESSAGES.GRID_NOT_PROVIDED&#13;
            };&#13;
        }&#13;
&#13;
        // Following StackOverflow suggestion : replace -&gt; split&#13;
        // http://stackoverflow.com/questions/5034781/js-regex-to-split-by-line&#13;
        var rowsArray = $(gridDefinition.split("\n"));&#13;
        for (var i = 0; i &lt; rowsArray.length; i++) {&#13;
            var row = String(rowsArray[i]);&#13;
            if (row.length === 0) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorMessage: presenter.ERROR_MESSAGES.ROWS&#13;
                };&#13;
            }&#13;
&#13;
            if(row.search(/[\s\,\;]+/gm) != -1) { // Search for whitespace characters&#13;
                return {&#13;
                    isError: true,&#13;
                    errorMessage: presenter.ERROR_MESSAGES.ROWS&#13;
                };&#13;
            }&#13;
&#13;
            gridElements[i] = row.split("");&#13;
&#13;
            // Parsing grid definition&#13;
            if(rowCount === 0) {&#13;
                columnCount = row.length;&#13;
            }&#13;
&#13;
            if(columnCount != row.length) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorMessage: presenter.ERROR_MESSAGES.COLUMNS&#13;
                };&#13;
            }&#13;
&#13;
            rowCount++;&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            columns: columnCount,&#13;
            rows: rowCount,&#13;
            gridElements: gridElements&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateAnswers = function(answersDefinition) {&#13;
        var answers = [];&#13;
&#13;
        if(typeof answersDefinition === "undefined" || answersDefinition.length === 0) {&#13;
            return {&#13;
                isError: true,&#13;
                errorMessage: presenter.ERROR_MESSAGES.ANSWERS_NOT_PROVIDED&#13;
            };&#13;
        }&#13;
&#13;
        $(answersDefinition.split("\n")).each(function() {&#13;
            var answer = String(this);&#13;
            $(answer.split(/[\s\,\;]+/gm)).each(function() {&#13;
                answers.push(this);&#13;
            });&#13;
        });&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            answers: answers&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var gridDefinition = model.Grid;&#13;
        var answersDefinition = model.Answers;&#13;
&#13;
        var gridValidationResult = presenter.validateGrid(gridDefinition);&#13;
        if (gridValidationResult.isError) {&#13;
            return {&#13;
                isError: true,&#13;
                errorMessage: gridValidationResult.errorMessage&#13;
            };&#13;
        }&#13;
&#13;
        var answersValidationResult = presenter.validateAnswers(answersDefinition);&#13;
        if (answersValidationResult.isError) {&#13;
            return {&#13;
                isError: true,&#13;
                errorMessage: answersValidationResult.errorMessage&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            columns: gridValidationResult.columns,&#13;
            rows: gridValidationResult.rows,&#13;
            gridElements: gridValidationResult.gridElements,&#13;
            answers: answersValidationResult.answers,&#13;
            checkByWords: ModelValidationUtils.validateBoolean(model['CheckByWords']),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model["Is Visible"])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (!presenter.isSelectionPossible) return;&#13;
&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'showAnswers' : presenter.showAnswers,&#13;
            'hideAnswers' : presenter.hideAnswers,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        $(presenter.view).css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        if (!presenter.isSelectionPossible) return;&#13;
&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.createAllOKEventData = function () {&#13;
        return {&#13;
            'source': presenter.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createEventData = function (item, value, score) {&#13;
        return {&#13;
            'source': presenter.addonID,&#13;
            'item': item,&#13;
            'value': value,&#13;
            'score': score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    function applyShowAnswerStyles() {&#13;
        gridContainerWrapper.find(".selectable-element").each(function(index) {&#13;
&#13;
            var className;&#13;
&#13;
            if(goodSelectionIndexes[index] != -1){&#13;
                className = 'selectable-element-show-answers';&#13;
            }&#13;
&#13;
            $(this).addClass(className);&#13;
        });&#13;
    }&#13;
&#13;
    function cleanShowAnswersStyles() {&#13;
        gridContainerWrapper.find(".selectable-element").each(function() {&#13;
            if($(this).hasClass('selectable-element-show-answers')) {&#13;
                $(this).removeClass('selectable-element-show-answers');&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.isAttempted = function () {&#13;
        for (var i = 0; i&lt;presenter.configuration.rows; i++){&#13;
            for (var j = 0; j&lt;presenter.configuration.columns; j++){&#13;
                if(gridSelection[i][j] == true){&#13;
                    return true;&#13;
                }&#13;
            }&#13;
        }&#13;
        return false;&#13;
    };&#13;
&#13;
    function checkIfSelected (row, column){&#13;
        var index = row * presenter.configuration.columns + column;&#13;
        var element = gridContainerWrapper.find(".selectable-element:eq(" + index + ")");&#13;
&#13;
        if(gridSelection[row][column]) {// is selected&#13;
            if(element.hasClass('selectable-element-selected')) {&#13;
                element.removeClass('selectable-element-selected');&#13;
                return true;&#13;
            }else{&#13;
                return false;&#13;
            }&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    function addClassToSelectedElement (row, column){&#13;
        var index = row * presenter.configuration.columns + column;&#13;
        var element = gridContainerWrapper.find(".selectable-element:eq(" + index + ")");&#13;
            element.addClass('selectable-element-selected');&#13;
    }&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
&#13;
        presenter.isSelected = [];&#13;
        presenter.setWorkMode();&#13;
&#13;
        for(var row1 = 0; row1 &lt; presenter.configuration.rows; row1++) {&#13;
            presenter.isSelected[row1] = [];&#13;
            for(var column1 = 0; column1 &lt; presenter.configuration.columns; column1++) {&#13;
                presenter.isSelected[row1][column1] = 0;&#13;
            }&#13;
        }&#13;
&#13;
        for(var row = 0; row &lt; presenter.configuration.rows; row++) {&#13;
            for(var column = 0; column &lt; presenter.configuration.columns; column++) {&#13;
                if(checkIfSelected(row, column)){&#13;
                    presenter.isSelected[row][column] = 1;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.isSelectionPossible = false;&#13;
        var rows = presenter.configuration.rows;&#13;
        var columns = presenter.configuration.columns;&#13;
&#13;
        goodSelectionIndexes = presenter.convertSelectionToIndexes(goodSelections, rows, columns);&#13;
&#13;
        applyShowAnswerStyles();&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        cleanShowAnswersStyles();&#13;
&#13;
        for(var row = 0; row &lt; presenter.configuration.rows; row++) {&#13;
            for(var column = 0; column &lt; presenter.configuration.columns; column++) {&#13;
                if(presenter.isSelected[row][column] == 1){&#13;
                    addClassToSelectedElement(row, column);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.isSelectionPossible = true;&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Math" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="Variables" nameLabel="Math_property_variables" type="text"/>
        <property name="Expressions" nameLabel="Math_property_expressions" type="text"/>
        <property name="Show Answers" nameLabel="Math_property_show_answers" type="text"/>
        <property name="Decimal separator" nameLabel="Math_property_decimal_separator" type="string"/>
        <property name="Thousand separator" nameLabel="Math_property_thousand_separator" type="string"/>
        <property name="onCorrect" nameLabel="Math_property_on_correct" type="event"/>
        <property name="onIncorrect" nameLabel="Math_property_on_incorrect" type="event"/>
        <property name="onPartiallyCompleted" nameLabel="Math_property_on_partially_completed" type="event"/>
        <property name="Empty Answer" nameLabel="Math_property_empty_answer" type="string"/>
    </model>
<css/><view/><preview/><presenter>function AddonMath_create() {&#13;
&#13;
    function getCorrectObject(val) { return { isError: false, value: val }; }&#13;
    function getErrorObject(ec) { return { isError: true, errorCode: ec }; }&#13;
&#13;
    var presenter = function() {};&#13;
    presenter.isShowAnswers = false;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model);&#13;
        presenter.$view.css('visibility', 'hidden');&#13;
&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.configuration = presenter.convertModel(model);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'CV_01': "Missing assignment operator!",&#13;
        'CV_02': "Missing gap ID!",&#13;
        'CV_03': "Unused variable!",&#13;
        'CV_04': "Decimal separator and thousand separator are the same!",&#13;
        'CV_05': "Number of defined gaps in Show Answers is different than number of Variables",&#13;
        'CV_06': "Incorrect gap name defined in Show Answers property",&#13;
        'SA04': "Empty line is inserted in Show Answers property",&#13;
        'SA02': "Name of gap is not defined in Show Answers",&#13;
        'SA03': "Value of gap is not defined in Show Answers",&#13;
        'EV_01': "Only one string can be declared"&#13;
    };&#13;
&#13;
    presenter.convertVariables = function (variables, expressions) {&#13;
        if (ModelValidationUtils.isStringEmpty(variables)) return { isError: false, variables: [] };&#13;
&#13;
        var variablesArray = [], splittedVariables = variables.split('\n'), i, j, expVariables = [];&#13;
&#13;
        for (i = 0; i &lt; splittedVariables.length; i++) {&#13;
            var line = splittedVariables[i];&#13;
            if (line.indexOf('=') === -1) return { isError: true, errorCode: 'CV_01' };&#13;
&#13;
            var splittedLine = line.split('=');&#13;
            if (splittedLine.length !== 2 || splittedLine[1].length === 0) return { isError: true, errorCode: 'CV_02' };&#13;
&#13;
            variablesArray.push({&#13;
                name: splittedLine[0].trim(),&#13;
                value: splittedLine[1].trim()&#13;
            });&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; expressions.length; i++) {&#13;
            var variablesInExp = presenter.selectVariablesFromExpression(expressions[i], variablesArray);&#13;
            for (j = 0; j &lt; variablesInExp.length; j++) {&#13;
                expVariables.push(variablesInExp[j]);&#13;
            }&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; variablesArray.length; i++) {&#13;
            if (expVariables.indexOf(variablesArray[i].name) === -1) return { isError: true, errorCode: 'CV_03' };&#13;
        }&#13;
&#13;
        return { isError: false, variables: variablesArray };&#13;
    };&#13;
&#13;
    presenter.parseShowAnswers = function (answers, convertedVariables) {&#13;
        if (ModelValidationUtils.isStringEmpty(answers)) return getCorrectObject([]);&#13;
&#13;
        var variables = answers.split('\n').map(function(line) {&#13;
            return {&#13;
                name:line.substr(0, line.indexOf('=')).trim(),&#13;
                value:line.substr(line.indexOf('=') + 1).trim(),&#13;
                users: ''&#13;
            }&#13;
        });&#13;
&#13;
        if (variables.some(function(v) { return v.value === '' &amp;&amp; v.name === ''; })) {&#13;
            return getErrorObject('SA04'); // check if empty line is in property&#13;
        }&#13;
&#13;
        if (variables.some(function(v) { return v.name === ''; })) {&#13;
            return getErrorObject('SA02'); // check if name of gap is defined&#13;
        }&#13;
&#13;
        if (variables.some(function(v) { return v.value === ''; })) {&#13;
            return getErrorObject('SA03'); // check if value of gap is defined&#13;
        }&#13;
&#13;
        if(variables.length &gt; 0 &amp;&amp; (variables.length != convertedVariables.length)){&#13;
            return getErrorObject('CV_05'); // check if number of gaps equals number of defined gaps in Show Answers&#13;
        }&#13;
&#13;
        var definedGaps = [];&#13;
        for (var j = 0; j &lt;  convertedVariables.length; j++){&#13;
            definedGaps.push(convertedVariables[j].name);&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt;  variables.length; i++){&#13;
            if(!(definedGaps.indexOf(variables[i].name) &gt; -1)){&#13;
                return getErrorObject('CV_06'); // check if defined gap names are correct&#13;
            }&#13;
        }&#13;
&#13;
        return getCorrectObject(variables);&#13;
    };&#13;
&#13;
    presenter.convertExpressions = function (expressions) {&#13;
        var expressionsArray = [], splittedExpressions = expressions.split('\n');&#13;
&#13;
        for (var i = 0; i &lt; splittedExpressions.length; i++) {&#13;
            expressionsArray.push(splittedExpressions[i]);&#13;
        }&#13;
&#13;
        return expressionsArray;&#13;
    };&#13;
&#13;
&#13;
    presenter.convertEmptyAnswer = function(variable) {&#13;
        if (!variable) return "";&#13;
        if (variable.indexOf(' ') &gt;= 0) return { isError: true, errorCode: 'EV_01' };&#13;
&#13;
        return variable;&#13;
    };&#13;
&#13;
    presenter.convertModel = function (model) {&#13;
        var expressions = presenter.convertExpressions(model.Expressions);&#13;
&#13;
        var convertedVariables = presenter.convertVariables(model.Variables, expressions);&#13;
        if (convertedVariables.isError) {&#13;
            return { isError: true, errorCode: convertedVariables.errorCode };&#13;
        }&#13;
&#13;
        var parsedShowAnswers = presenter.parseShowAnswers(model['Show Answers'], convertedVariables.variables);&#13;
        if (parsedShowAnswers.isError) {&#13;
            return { isError: true, errorCode: parsedShowAnswers.errorCode };&#13;
        }&#13;
&#13;
        var decimalSeparator = model["Decimal separator"],&#13;
            isDecimalSeparatorSet = !ModelValidationUtils.isStringEmpty(decimalSeparator);&#13;
&#13;
        var thousandSeparator = model["Thousand separator"],&#13;
            isThousandSeparatorSet = !ModelValidationUtils.isStringEmpty(thousandSeparator);&#13;
&#13;
        if (decimalSeparator == thousandSeparator &amp;&amp; isDecimalSeparatorSet &amp;&amp; isThousandSeparatorSet) {&#13;
            return { isError: true, errorCode: 'CV_04' };&#13;
        }&#13;
&#13;
        var separators =  {&#13;
            decimalSeparator: isDecimalSeparatorSet ? decimalSeparator : undefined,&#13;
            isDecimalSeparatorSet: isDecimalSeparatorSet,&#13;
            thousandSeparator: isThousandSeparatorSet ? thousandSeparator : undefined,&#13;
            isThousandSeparatorSet: isThousandSeparatorSet&#13;
        };&#13;
&#13;
        var emptyAnswer = presenter.convertEmptyAnswer(model['Empty Answer']);&#13;
        if (emptyAnswer.isError) {&#13;
            return { isError: true, errorCode: 'EV_01' };&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            variables: convertedVariables.variables,&#13;
            expressions: expressions,&#13;
            answers: parsedShowAnswers.value,&#13;
            onCorrectEvent: model.onCorrect,&#13;
            onIncorrectEvent: model.onIncorrect,&#13;
            onPartialEvent: model.onPartiallyCompleted,&#13;
            separators: separators,&#13;
            emptyAnswer: emptyAnswer,&#13;
            addonID: model.ID&#13;
        };&#13;
    };&#13;
&#13;
    presenter.evaluateExpression = function (expression, variables, separators) {&#13;
        var i, expressionRunner = {&#13;
            run: function (expression, variables) {&#13;
                presenter.assignVariablesToObject(this, variables);&#13;
                eval(expression);&#13;
                return this.result;&#13;
            }&#13;
        };&#13;
&#13;
        try {&#13;
            var convertedVariables = [];&#13;
            for (i = 0; i &lt; variables.length; i++) {&#13;
                var convertedVariable = presenter.convertVariable(variables[i].value, separators);&#13;
                if (convertedVariable === undefined) return { isValid: false, result: getAlertMessage(variables[i]) };&#13;
                convertedVariables.push({&#13;
                    name: variables[i].name,&#13;
                    value: convertedVariable&#13;
                });&#13;
            }&#13;
&#13;
            var convertedExpression = presenter.convertExpression(expression, convertedVariables);&#13;
            return {isValid: true, result: expressionRunner.run(convertedExpression, convertedVariables)};&#13;
        } catch (exception) {&#13;
            return {isValid: true, result: false};&#13;
        }&#13;
    };&#13;
&#13;
    presenter.selectVariablesFromExpression = function (expression, variables) {&#13;
        var presentVariables = [], tempVariables = [], i, j;&#13;
&#13;
        for (i = 0; i &lt; variables.length; i++) {&#13;
            if (expression.indexOf(variables[i].name) !== -1) {&#13;
                tempVariables.push({&#13;
                    name: variables[i].name,&#13;
                    index: expression.indexOf(variables[i].name)&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; tempVariables.length; i++) {&#13;
            if (!tempVariables[i]) continue;&#13;
&#13;
            var variable = tempVariables[i];&#13;
            for (j = 0; j &lt; tempVariables.length; j++) {&#13;
                if (i === j || tempVariables[j] === undefined) continue;&#13;
&#13;
                if (variable.index === tempVariables[j].index) {&#13;
                    if (variable.name.length &lt; tempVariables[j].name.length) {&#13;
                        delete tempVariables[i];&#13;
                    } else {&#13;
                        delete tempVariables[j];&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; tempVariables.length; i++) {&#13;
            if (tempVariables[i]) presentVariables.push(tempVariables[i].name);&#13;
        }&#13;
&#13;
        return presentVariables;&#13;
    };&#13;
&#13;
    presenter.evaluateAllExpressions = function (expressions, variables, separators) {&#13;
        var results = [], i, overall = true, evaluationResult;&#13;
&#13;
        for (i = 0; i &lt; expressions.length; i++) {&#13;
            evaluationResult = presenter.evaluateExpression(expressions[i], variables, separators);&#13;
            if (!evaluationResult.isValid) {&#13;
                return { isError: true, errorMessage: evaluationResult.result };&#13;
            }&#13;
&#13;
            results.push(evaluationResult.result);&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; results.length; i++) {&#13;
            if (!results[i]) {&#13;
                overall = false;&#13;
            }&#13;
        }&#13;
&#13;
        return { overall: overall, isError: false };&#13;
    };&#13;
&#13;
    presenter.getModule = function (moduleID) {&#13;
        return presenter.playerController.getModule(moduleID);&#13;
    };&#13;
&#13;
    function isNumber (number) {&#13;
        return !isNaN(parseFloat(number)) &amp;&amp; isFinite(number);&#13;
    }&#13;
&#13;
    presenter.convertVariable = function (gapIdentifier, separators) {&#13;
        var decodedReference = presenter.decodeModuleReference(gapIdentifier);&#13;
        if (!decodedReference.isValid) return undefined;&#13;
&#13;
        try {&#13;
            var textModule = presenter.getModule(decodedReference.moduleID);&#13;
            if (!textModule) return undefined;&#13;
&#13;
            var gapText = textModule.getGapValue(decodedReference.gapIndex);&#13;
            if (gapText == "[error]") return undefined;&#13;
&#13;
            if (separators.isThousandSeparatorSet) {&#13;
                gapText = StringUtils.replaceAll(gapText, separators.thousandSeparator, '');&#13;
            }&#13;
&#13;
            if (separators.isDecimalSeparatorSet) {&#13;
                gapText = gapText.replace(separators.decimalSeparator, '.');&#13;
            }&#13;
&#13;
            return isNumber(gapText) ? Number(gapText) : gapText;&#13;
        } catch (exception) {&#13;
            return undefined;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isGapAttempted = function (gapIdentifier) {&#13;
        var decodedReference = presenter.decodeModuleReference(gapIdentifier);&#13;
&#13;
        if (!decodedReference.isValid) return undefined;&#13;
&#13;
        try {&#13;
            var textModule = presenter.getModule(decodedReference.moduleID);&#13;
            if (!textModule) return undefined;&#13;
&#13;
            return textModule.isGapAttempted(decodedReference.gapIndex);&#13;
        } catch (exception) {&#13;
            return undefined;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.convertExpression = function (expression, variables) {&#13;
        var convertedExpression = 'this.result = ' + expression,&#13;
            expressionVariables = presenter.selectVariablesFromExpression(expression, variables), i;&#13;
&#13;
        for (i = 0; i &lt; expressionVariables.length; i++) {&#13;
            convertedExpression = presenter.replaceVariableNameWithReference(convertedExpression, expressionVariables[i]);&#13;
        }&#13;
&#13;
        return convertedExpression;&#13;
    };&#13;
&#13;
    function checkIfCorrectVariable(tempExpression, variable) {&#13;
        var lastChar = tempExpression.charAt(tempExpression.indexOf(variable)+variable.length);&#13;
        return lastChar == "(" || lastChar == ")" || lastChar == "" || lastChar == " " || lastChar == "/" || lastChar == "*" || lastChar == "=" || lastChar == "+" || lastChar == "-" || lastChar == "&gt;" || lastChar == "&lt;" || lastChar == "%";&#13;
    }&#13;
&#13;
    presenter.findTextOccurrences = function (expression, variable) {&#13;
        var indexes = [], tempExpression = expression, offset = 0;&#13;
&#13;
        while (tempExpression.indexOf(variable) !== -1 &amp;&amp; checkIfCorrectVariable(tempExpression, variable)) {&#13;
            var indexOf = tempExpression.indexOf(variable);&#13;
            indexes.push(indexOf + offset);&#13;
            offset += indexOf + variable.length;&#13;
&#13;
            tempExpression = tempExpression.substring(indexOf + variable.length);&#13;
        }&#13;
&#13;
        return indexes;&#13;
    };&#13;
&#13;
    presenter.replaceVariableNameWithReference = function (expression, variable) {&#13;
        var prefix = "this.variables['";&#13;
        var indexes = presenter.findTextOccurrences(expression, variable);&#13;
        var fixedExpression = expression.substring(0, indexes[0]);&#13;
&#13;
        for (var i = 0; i &lt; indexes.length - 1; i++) {&#13;
            fixedExpression += prefix + variable + "']";&#13;
            fixedExpression += expression.substring(indexes[i] + variable.length, indexes[i + 1]);&#13;
        }&#13;
&#13;
        fixedExpression += prefix + variable + "']";&#13;
        fixedExpression += expression.substring(indexes[indexes.length - 1] + variable.length);&#13;
&#13;
        return fixedExpression;&#13;
    };&#13;
&#13;
    presenter.assignVariablesToObject = function (object, variables) {&#13;
        object.variables = {};&#13;
&#13;
        for (var i = 0; i &lt; variables.length; i++) {&#13;
            object.variables[variables[i].name] = variables[i].value;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.decodeModuleReference = function (reference) {&#13;
        var dotIndex = reference.lastIndexOf('.');&#13;
        if (dotIndex === -1) return { isValid: false };&#13;
&#13;
        var moduleID = reference.substring(0, dotIndex);&#13;
        if (ModelValidationUtils.isStringEmpty(moduleID)) return { isValid: false };&#13;
&#13;
        var gapIndex = reference.substring(dotIndex + 1);&#13;
        if (ModelValidationUtils.isStringEmpty(gapIndex)) return { isValid: false };&#13;
&#13;
        return { isValid: true, moduleID: moduleID, gapIndex: gapIndex };&#13;
    };&#13;
&#13;
    presenter.getModuleReferenceFromVariable = function (variables, variableName) {&#13;
        for (var i = 0, length = variables.length; i &lt; length; i++) {&#13;
            if (variables[i].name === variableName) return variables[i].value;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.markGapsCorrectness = function (variables, overall) {&#13;
        var i, decodedReference, length, textModule;&#13;
&#13;
        for (i = 0, length = variables.length; i &lt; length; i++) {&#13;
            decodedReference = presenter.decodeModuleReference(variables[i].value);&#13;
            textModule = presenter.playerController.getModule(decodedReference.moduleID);&#13;
&#13;
            if (overall) {&#13;
                textModule.markGapAsCorrect(decodedReference.gapIndex);&#13;
            } else {&#13;
                textModule.markGapAsWrong(decodedReference.gapIndex);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswers) {&#13;
            toggleAnswers(false);&#13;
        }&#13;
&#13;
        presenter.isErrorMode = true;&#13;
&#13;
        var variables = presenter.configuration.variables,&#13;
            emptyGaps = presenter.getEmptyGaps(variables);&#13;
&#13;
        if (!emptyGaps.isValid) {&#13;
            presenter.hideAnswers();&#13;
            alert(emptyGaps.errorMessage);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.markGapsEmptiness(emptyGaps.gaps);&#13;
&#13;
        if (emptyGaps.gaps.length !== 0) return;&#13;
&#13;
        var separators = presenter.configuration.separators,&#13;
            expressions = presenter.configuration.expressions,&#13;
            evaluationResult = presenter.evaluateAllExpressions(expressions, variables, separators);&#13;
&#13;
        presenter.markGapsCorrectness(presenter.configuration.variables, evaluationResult.overall);&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.isErrorMode = false;&#13;
    };&#13;
&#13;
    presenter.executeEventCode = function(eventCode) {&#13;
        presenter.playerController.getCommands().executeEventCode(eventCode);&#13;
    };&#13;
&#13;
    presenter.markGapsEmptiness = function(gaps) {&#13;
        var moduleReference, decodedReference, textModule, i, length;&#13;
&#13;
        for (i = 0, length = gaps.length; i &lt; length; i++) {&#13;
            moduleReference = presenter.getModuleReferenceFromVariable(presenter.configuration.variables, gaps[i]);&#13;
            decodedReference = presenter.decodeModuleReference(moduleReference);&#13;
            textModule = presenter.playerController.getModule(decodedReference.moduleID);&#13;
            textModule.markGapAsEmpty(decodedReference.gapIndex);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.evaluate = function () {&#13;
        if (presenter.isErrorMode) return;&#13;
&#13;
        var emptyGaps = presenter.getEmptyGaps(presenter.configuration.variables);&#13;
        if (!emptyGaps.isValid) {&#13;
            presenter.hideAnswers();&#13;
            alert(emptyGaps.errorMessage);&#13;
            return;&#13;
        }&#13;
&#13;
        if (emptyGaps.gaps.length !== 0) {&#13;
            presenter.executeEventCode(presenter.configuration.onPartialEvent);&#13;
        } else {&#13;
            var separators = presenter.configuration.separators,&#13;
                evaluationResult = presenter.evaluateAllExpressions(presenter.configuration.expressions,&#13;
                                                                    presenter.configuration.variables, separators),&#13;
                eventCode = evaluationResult.overall ? presenter.configuration.onCorrectEvent : presenter.configuration.onIncorrectEvent;&#13;
            presenter.executeEventCode(eventCode);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        var notAttemptedGaps = presenter.getNotAttemptedGaps(presenter.configuration.variables);&#13;
        return notAttemptedGaps.gaps.length === 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if(presenter.configuration.isError){&#13;
            return;&#13;
        }&#13;
        var variables = presenter.configuration.variables,&#13;
            emptyGaps = presenter.getEmptyGaps(variables);&#13;
        if (!emptyGaps.isValid || emptyGaps.gaps.length !== 0) return 0;&#13;
&#13;
        var separators = presenter.configuration.separators,&#13;
            expressions = presenter.configuration.expressions,&#13;
            evaluationResult = presenter.evaluateAllExpressions(expressions, variables, separators);&#13;
        if (evaluationResult.isError) return;&#13;
&#13;
        return evaluationResult.overall ? presenter.getMaxScore() : 0;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if(presenter.configuration.isError){&#13;
            return;&#13;
        }&#13;
        var variables = presenter.configuration.variables,&#13;
            emptyGaps = presenter.getEmptyGaps(variables);&#13;
&#13;
        if (!emptyGaps.isValid || emptyGaps.gaps.length !== 0) return 0;&#13;
&#13;
        var separators = presenter.configuration.separators,&#13;
            expressions = presenter.configuration.expressions,&#13;
            evaluationResult = presenter.evaluateAllExpressions(expressions, variables, separators);&#13;
&#13;
        if (evaluationResult.isError) return;&#13;
&#13;
        return !evaluationResult.overall ? presenter.getMaxScore() : 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if(presenter.configuration.isError){&#13;
            return;&#13;
        }&#13;
        return presenter.configuration.variables.length;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.isErrorMode = false;&#13;
        presenter.isShowAnswers = false;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore();&#13;
    };&#13;
&#13;
    presenter.createAllOKEventData = function (){&#13;
        return{&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        }&#13;
    };&#13;
&#13;
    presenter.sendAllOKEvent = function (){&#13;
        presenter.eventBus.sendEvent('ValueChanged', presenter.createAllOKEventData());&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'evaluate': presenter.evaluate,&#13;
            'isAttempted': presenter.isAttempted,&#13;
            'showAnswers': presenter.showAnswers,&#13;
            'hideAnswers': presenter.hideAnswers,&#13;
            'isAllOK': presenter.isAllOK&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    function getAlertMessage(variable) {&#13;
        var decodedReference = presenter.decodeModuleReference(variable.value);&#13;
&#13;
        return "Text module with ID [ID] doesn't have gap with [INDEX] index or does not exists!"&#13;
            .replace('[ID]', decodedReference.moduleID)&#13;
            .replace('[INDEX]', decodedReference.gapIndex);&#13;
    }&#13;
&#13;
    function isVariableEmpty(variable) {&#13;
        return variable === "" || variable === presenter.configuration.emptyAnswer;&#13;
    }&#13;
&#13;
    presenter.getEmptyGaps = function (variables) {&#13;
        var emptyGaps = [], i, convertedVariable;&#13;
&#13;
        for (i = 0; i &lt; variables.length; i++) {&#13;
            convertedVariable = presenter.convertVariable(variables[i].value, presenter.configuration.separators);&#13;
            if (convertedVariable === undefined) return { isValid: false, errorMessage: getAlertMessage(variables[i]) };&#13;
&#13;
            if (isVariableEmpty(convertedVariable)) emptyGaps.push(variables[i].name);&#13;
        }&#13;
&#13;
        return { isValid: true, gaps: emptyGaps };&#13;
    };&#13;
&#13;
    presenter.getNotAttemptedGaps = function (variables) {&#13;
        var notAttemptedGaps = [], i, convertedVariable;&#13;
&#13;
        for (i = 0; i &lt; variables.length; i++) {&#13;
            convertedVariable = presenter.isGapAttempted(variables[i].value);&#13;
            if (convertedVariable === undefined) return { isValid: false, errorMessage: getAlertMessage(variables[i]) };&#13;
&#13;
            if (convertedVariable === false) notAttemptedGaps.push(variables[i].name);&#13;
        }&#13;
&#13;
        return { isValid: true, gaps: notAttemptedGaps };&#13;
    };&#13;
&#13;
    function toggleAnswers(on) {&#13;
        presenter.isShowAnswers = on;&#13;
        for (var i=0; i&lt;presenter.configuration.answers.length; i++) {&#13;
            var answer = presenter.configuration.answers[i];&#13;
            var gapName = null;&#13;
            for (var j= 0; j&lt;presenter.configuration.variables.length; j++){&#13;
                if(presenter.configuration.variables[j].name == answer.name){&#13;
                    gapName = presenter.configuration.variables[j].value;&#13;
                }&#13;
            }&#13;
            if(gapName == null){&#13;
                return;&#13;
            }&#13;
&#13;
            var moduleReference = presenter.decodeModuleReference(gapName);&#13;
            var module = presenter.getModule(moduleReference.moduleID);&#13;
&#13;
            if (module != null &amp;&amp; !module.isActivity()) {&#13;
                if (on) {&#13;
                    answer.users = module.getValue(moduleReference.gapIndex);&#13;
                    module.setGapAnswer(moduleReference.gapIndex, answer.value, presenter.moduleAnswersCounter(moduleReference.moduleID));&#13;
                } else {&#13;
                    module.setUserValue(moduleReference.gapIndex, answer.users);&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.moduleAnswersCounter = function (module) {&#13;
        var counter = 0;&#13;
&#13;
        for (var j= 0; j&lt;presenter.configuration.variables.length; j++){&#13;
            if(presenter.configuration.variables[j].value.indexOf(module) &gt; -1){&#13;
                counter++;&#13;
            }&#13;
        }&#13;
&#13;
        return counter;&#13;
    };&#13;
&#13;
    presenter.showAnswers = function() {&#13;
        if (!presenter.isShowAnswers) {&#13;
            toggleAnswers(true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function() {&#13;
        if (presenter.isShowAnswers) {&#13;
            toggleAnswers(false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.allOkSent = false;&#13;
&#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
        switch(eventName) {&#13;
            case 'ShowAnswers': presenter.showAnswers(); break;&#13;
            case 'HideAnswers': presenter.hideAnswers(); break;&#13;
            case 'PageLoaded': markModules(); break;&#13;
            case 'ValueChanged':&#13;
                if (presenter.isAllOK() &amp;&amp; !presenter.allOkSent) {&#13;
                    presenter.allOkSent = true;&#13;
                    presenter.sendAllOKEvent();&#13;
                }else if(!presenter.isAllOK()){&#13;
                    presenter.allOkSent = false;&#13;
                }&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    function markModules() {&#13;
        if(presenter.configuration.isError){&#13;
            return;&#13;
        }&#13;
&#13;
        for (var i=0; i&lt;presenter.configuration.answers.length; i++) {&#13;
            var answer = presenter.configuration.answers[i];&#13;
            var moduleReference = presenter.decodeModuleReference(answer.name);&#13;
            var module = presenter.getModule(moduleReference.moduleID);&#13;
&#13;
            if (module != null &amp;&amp; !module.isActivity()) {&#13;
                module.markConnectionWithMath();&#13;
            }&#13;
        }&#13;
&#13;
        for (var j=0; j &lt; presenter.configuration.variables.length; j++){&#13;
            var decodedReference = presenter.decodeModuleReference(presenter.configuration.variables[j].value);&#13;
            var notSAmodule = presenter.getModule(decodedReference.moduleID);&#13;
&#13;
            if (notSAmodule != null &amp;&amp; !notSAmodule.isActivity()) {&#13;
                notSAmodule.markConnectionWithMath();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MenuPanel" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Menu Items" name="MenuItems" nameLabel="MenuPanel_property_menu_items" type="list">
            <property displayName="Id" name="id" nameLabel="MenuPanel_property_id" type="string"/>
            <property displayName="Title" name="title" nameLabel="MenuPanel_property_title" type="string"/>
            <property displayName="Parent Id" name="parentId" nameLabel="MenuPanel_property_parent_id" type="string"/>

            <property displayName="Image" name="image" nameLabel="MenuPanel_property_image" type="image"/>

            <property displayName="Is Expanded" name="isExpanded" nameLabel="MenuPanel_property_is_expanded" type="boolean"/>
            <property displayName="Is Selected" name="isSelected" nameLabel="MenuPanel_property_is_selected" type="boolean"/>
            <property displayName="Is Disabled" name="isDisabled" nameLabel="MenuPanel_property_is_disabled" type="boolean"/>
        </property>

        <property name="HorizontalAlignment" nameLabel="MenuPanel_property_horizontal_alignment" type="{default,left,center,right}"/>
        <property name="VerticalAlignment" nameLabel="MenuPanel_property_vertical_alignment" type="{default,top,center,bottom}"/>
        <property displayName="Auto Expand" name="autoExpand" nameLabel="MenuPanel_property_auto_expand" type="boolean"/>
        <property name="Disable" nameLabel="MenuPanel_property_disable" type="boolean"/>
    </model>
<css>.menu-panel-wrapper{&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.menu-panel-item{&#13;
    display: inline-block;&#13;
    width: 100%;&#13;
    cursor: pointer;&#13;
    border: 1px solid #aaaaaa;&#13;
}&#13;
.menu-panel-wrapper .children{&#13;
    position: absolute;&#13;
    left: 100%;&#13;
}&#13;
.menu-panel-wrapper .horizontal-right .children{&#13;
    position: absolute;&#13;
    right: 100%;&#13;
}&#13;
.menu-panel-wrapper .disabled{&#13;
    cursor: default;&#13;
    border: 1px solid #dddddd;&#13;
}&#13;
.menu-panel-errors{&#13;
    position: absolute;&#13;
}&#13;
.menu-panel-errors p.mpError{&#13;
    color: red;&#13;
    font-size: 12px;&#13;
}&#13;
</css><view>&lt;div class="menu-panel-wrapper"&gt;&lt;/div&gt;&#13;
&lt;div class="menu-panel-errors"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="menu-panel-wrapper"&gt;&lt;/div&gt;&#13;
&lt;div class="menu-panel-errors"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonMenuPanel_create(){&#13;
    /* ChangeLog&#13;
     - added &lt;img&gt; to appended div in drawElements&#13;
     - changed select to selectCommand in presenter.executeCommand, same for deselect&#13;
     */&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.presentation = controller.getPresentation();&#13;
        presenter.currentIndex = controller.getCurrentPageIndex();&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model);&#13;
    }&#13;
&#13;
    function presenterLogic(view, model) {&#13;
        presenter.log('********* ver 1.2 *********');&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        presenter.isError = false;&#13;
&#13;
        presenter.HorizontalAlignment = presenter.HorizontalAlignmentByDefault = model.HorizontalAlignment;&#13;
        presenter.VerticalAlignment = presenter.VerticalAlignmentByDefault = model.VerticalAlignment;&#13;
        presenter.setAlignment(presenter.HorizontalAlignment, presenter.VerticalAlignment);&#13;
&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.isVisibleByDefault = presenter.isVisible;&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
&#13;
        presenter.isDisabled = ModelValidationUtils.validateBoolean(model["Disable"]);&#13;
        presenter.isDisabledByDefault = presenter.isDisabled;&#13;
        presenter.setAbilityAll(!presenter.isDisabledByDefault);&#13;
&#13;
        presenter.menuItemsByDefault = presenter.model.MenuItems;&#13;
        presenter.menuItems = presenter.buildElementsArray(presenter.model.MenuItems);&#13;
        presenter.drawElements();&#13;
&#13;
        presenter.autoExpand = ModelValidationUtils.validateBoolean(model["autoExpand"]);&#13;
&#13;
        presenter.$view.on('click', function(e){e.stopPropagation();});&#13;
    }&#13;
&#13;
    presenter.buildElementsArray = function(itemsArray){&#13;
        if(!presenter.isError){&#13;
            var nestedItems = new Array;&#13;
&#13;
            $(itemsArray).each(function(i, menuItem){&#13;
                if(menuItem.id == ''){&#13;
                    presenter.errorHandler('Id in item '+(i+1)+' is empty!');&#13;
                    return false;&#13;
                }&#13;
&#13;
                var isSelected = ModelValidationUtils.validateBoolean(menuItem.isSelected);&#13;
                var isExpanded = ModelValidationUtils.validateBoolean(menuItem.isExpanded);&#13;
                var isDisabled = ModelValidationUtils.validateBoolean(menuItem.isDisabled);&#13;
&#13;
                nestedItems[i] = {};&#13;
                nestedItems[i].id = menuItem.id;&#13;
                nestedItems[i].parentId = menuItem.parentId;&#13;
                nestedItems[i].title = menuItem.title;&#13;
                nestedItems[i].image = menuItem.image;&#13;
                nestedItems[i].isSelected = isSelected;&#13;
                nestedItems[i].isExpanded = isExpanded;&#13;
                nestedItems[i].isDisabled = isDisabled;&#13;
                nestedItems[i].children = [];&#13;
&#13;
                if(menuItem.parentId != ''){&#13;
                    $(nestedItems).each(function(i, menuItem2){&#13;
                        if(menuItem2['id'] == menuItem['parentId']){&#13;
                            nestedItems[i].children.push(menuItem.id);&#13;
                        }&#13;
                    });&#13;
                }&#13;
            });&#13;
&#13;
            return nestedItems;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.drawElements = function(){&#13;
        if(!presenter.isError){&#13;
            var wrapper = presenter.$view.find('.menu-panel-wrapper')[0];&#13;
            $(wrapper).html('')&#13;
&#13;
            $(presenter.menuItems).each(function(i, menuItem){&#13;
                var elementClassPrefix = 'item';&#13;
&#13;
                var parent = presenter.menuItems[i].parentId == '' ? wrapper : presenter.$view.find('.'+elementClassPrefix+presenter.menuItems[i].parentId+'.children')[0];&#13;
                var content = presenter.menuItems[i].title;&#13;
&#13;
                var selected = presenter.menuItems[i].isSelected ? ' selected' : '';&#13;
                var disabled = presenter.menuItems[i].isDisabled ? ' disabled' : '';&#13;
&#13;
                var div = '&lt;div class="menu-panel-item '+elementClassPrefix+menuItem.id+selected+disabled+'"&gt;';&#13;
                if(presenter.menuItems[i].image != ''){&#13;
                    div += '&lt;img src="'+presenter.menuItems[i].image+'" alt="" /&gt;';&#13;
                }&#13;
                div += content+'&lt;/div&gt;';&#13;
&#13;
                $(parent).append(div);&#13;
&#13;
                if(presenter.menuItems[i].children != ''){&#13;
                    var visibility = presenter.menuItems[i].isExpanded ? 'visible' : 'hidden';&#13;
                    var display = presenter.menuItems[i].isExpanded ? 'block' : 'none';&#13;
                    var expanded = presenter.menuItems[i].isExpanded ? 'expanded' : 'contracted';&#13;
&#13;
                    $(parent).append('&lt;div class="'+elementClassPrefix+menuItem.id+' children '+expanded+'" style="visibility: '+visibility+'; display:'+display+';"&gt;&lt;/div&gt;');&#13;
                }&#13;
&#13;
                var clickableElement = presenter.$view.find('.'+elementClassPrefix+menuItem.id)[0];&#13;
                var clickData = {item: i};&#13;
                $(clickableElement).on('click', clickData, presenter.clickHandler);&#13;
&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    presenter.clickHandler = function(e){&#13;
        if(!presenter.isDisabled &amp;&amp; !presenter.menuItems[e.data.item].isDisabled){&#13;
            var value;&#13;
            presenter.log(presenter.menuItems[e.data.item].id+' clicked');&#13;
&#13;
            if(presenter.menuItems[e.data.item].isSelected){&#13;
                presenter.menuItems[e.data.item].isSelected = false;&#13;
                $(presenter.$view.find('.item'+presenter.menuItems[e.data.item].id)[0]).removeClass("selected");&#13;
                value = 0;&#13;
            }else{&#13;
                presenter.menuItems[e.data.item].isSelected = true;&#13;
                $(presenter.$view.find('.item'+presenter.menuItems[e.data.item].id)[0]).addClass("selected");&#13;
                value = 1;&#13;
            }&#13;
&#13;
            presenter.sendEventData(presenter.menuItems[e.data.item].id,value);&#13;
&#13;
            //Auto Expand control&#13;
            if(presenter.autoExpand){&#13;
                var parentId = presenter.menuItems[e.data.item].parentId;&#13;
                var parent = getItemById(parentId);&#13;
                var siblings = [];&#13;
&#13;
                if(parentId != ''){&#13;
                    $(presenter.menuItems[parent].children).each(function(i,child){&#13;
                        if(child != presenter.menuItems[e.data.item].id){&#13;
                            siblings.push(child);&#13;
                        }&#13;
                    });&#13;
                }else{&#13;
                    $(presenter.menuItems).each(function(i,menuItem){&#13;
                        if(menuItem.parentId == '' &amp;&amp; menuItem.id != presenter.menuItems[e.data.item].id){&#13;
                            siblings.push(menuItem.id);&#13;
                        }&#13;
                    });&#13;
                }&#13;
&#13;
                if(presenter.menuItems[e.data.item].children.length != 0){&#13;
                    $(siblings).each(function(i,sibling){&#13;
                        //sprawdziÄ‡, czy sibling ma dzieci!&#13;
                        var item = getItemById(sibling);&#13;
                        if(presenter.menuItems[item].children.length != 0){&#13;
                            presenter.contract(sibling);&#13;
                            presenter.deselect(sibling);&#13;
                        }&#13;
                    });&#13;
                }&#13;
&#13;
                presenter.toggleExpand(presenter.menuItems[e.data.item].id);&#13;
            }&#13;
&#13;
        }&#13;
    }&#13;
&#13;
    presenter.errorHandler = function(msg){&#13;
        presenter.isError = true;&#13;
        presenter.$view.find('.menu-panel-errors').append('&lt;p class="mpError"&gt;'+msg+'&lt;/p&gt;');&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params){&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'enable': presenter.enableCommand,&#13;
            'disable': presenter.disableCommand,&#13;
            'select': presenter.selectCommand,&#13;
            'deselect': presenter.deselectCommand,&#13;
            'setAlignment': presenter.setAlignmentCommand,&#13;
            'expand': presenter.expandCommand,&#13;
            'contract': presenter.contractCommand,&#13;
            'toggleExpand': presenter.toggleExpandCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.createEventData = function(item,value) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : item,&#13;
            value : value,&#13;
            score : ''&#13;
        };&#13;
    };&#13;
    presenter.sendEventData = function (item,value) {&#13;
        var eventData = presenter.createEventData(item,value);&#13;
        if (presenter.playerController !== null) {&#13;
            presenter.playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.select = function(item){&#13;
        var i = getItemById(item);&#13;
        presenter.menuItems[i].isSelected = true;&#13;
        $(presenter.$view.find('.item'+presenter.menuItems[i].id)[0]).addClass("selected");&#13;
    }&#13;
    presenter.selectCommand = function(params){&#13;
        presenter.select(params[0]);&#13;
    }&#13;
    presenter.deselect = function(item){&#13;
        var i = getItemById(item);&#13;
        presenter.menuItems[i].isSelected = false;&#13;
        $(presenter.$view.find('.item'+presenter.menuItems[i].id)[0]).removeClass("selected");&#13;
    }&#13;
    presenter.deselectCommand = function(params){&#13;
        presenter.deselect(params[0]);&#13;
    }&#13;
&#13;
    presenter.toggleExpand = function(item){&#13;
        var i = getItemById(item);&#13;
        presenter.menuItems[i].isExpanded ? presenter.contract(item) : presenter.expand(item);&#13;
    }&#13;
    presenter.toggleExpandCommand = function(params){&#13;
        presenter.toggleExpand(params[0]);&#13;
    }&#13;
&#13;
    presenter.expand = function(item){&#13;
        var i = getItemById(item);&#13;
        var itemClasss = '.item'+presenter.menuItems[i].id+'.children';&#13;
        presenter.menuItems[i].isExpanded = true;&#13;
        $(presenter.$view.find(itemClasss)[0]).addClass('expanded');&#13;
        $(presenter.$view.find(itemClasss)[0]).removeClass('contracted');&#13;
        $(presenter.$view.find(itemClasss)[0]).css('visibility','visible');&#13;
        $(presenter.$view.find(itemClasss)[0]).css('display','block');&#13;
        //show this item's parents if exists&#13;
        if(presenter.menuItems[i].parentId != ''){&#13;
            presenter.expand(presenter.menuItems[i].parentId);&#13;
        }&#13;
&#13;
    }&#13;
    presenter.expandCommand = function(params){&#13;
        presenter.expand(params[0]);&#13;
    }&#13;
    presenter.contract = function(item){&#13;
        var i = getItemById(item);&#13;
        var itemClasss = '.item'+presenter.menuItems[i].id+'.children';&#13;
        presenter.menuItems[i].isExpanded = false;&#13;
        $(presenter.$view.find(itemClasss)[0]).removeClass('expanded');&#13;
        $(presenter.$view.find(itemClasss)[0]).addClass('contracted');&#13;
        $(presenter.$view.find(itemClasss)[0]).css('visibility','hidden');&#13;
        $(presenter.$view.find(itemClasss)[0]).css('display','none');&#13;
        //hide all children&#13;
        $(presenter.menuItems[i].children).each(function(i,child){&#13;
            presenter.contract(child);&#13;
&#13;
            if(presenter.autoExpand){&#13;
                var childItem = getItemById(child);&#13;
                if(presenter.menuItems[childItem].children.length != 0){&#13;
                    presenter.deselect(child);&#13;
                }&#13;
            }&#13;
        });&#13;
    }&#13;
    presenter.contractCommand = function(params){&#13;
        presenter.contract(params[0]);&#13;
    }&#13;
&#13;
    presenter.setAlignment = function(horizontal, vertical){&#13;
        presenter.HorizontalAlignment = horizontal;&#13;
        presenter.VerticalAlignment = vertical;&#13;
&#13;
        switch(horizontal){&#13;
            case "left": {&#13;
                presenter.$view.css({"left":"0","right":"auto"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('horizontal-right horizontal-center');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('horizontal-left');&#13;
                break;&#13;
            }&#13;
            case "right": {&#13;
                presenter.$view.css({"left":"auto","right":"0"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('horizontal-left horizontal-center');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('horizontal-right');&#13;
                break;&#13;
            }&#13;
            case "center": {&#13;
                var pageWidth = parseInt(presenter.$view.parent().css('width'),10);&#13;
                var leftPos = (pageWidth / 2) - (presenter.model.Width / 2);&#13;
                presenter.$view.css({"left":leftPos,"right":"auto"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('horizontal-right horizontal-left');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('horizontal-center');&#13;
                break;&#13;
            }&#13;
            //Na przyszĹ‚oĹ›Ä‡&#13;
            //DODAÄ† obsĹ‚ugÄ™ defaulta, ĹĽeby moĹĽna byĹ‚o z komendy przywrĂłciÄ‡&#13;
            //do tego trzeba bÄ™dzie pewnie zapamiÄ™taÄ‡ stan pozycji z edytora&#13;
        }&#13;
&#13;
        switch(vertical){&#13;
            case "top": {&#13;
                presenter.$view.css({"top":"0","bottom":"auto"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('vertical-bottom vertical-center');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('vertical-top');&#13;
                break;&#13;
            }&#13;
            case "bottom": {&#13;
                presenter.$view.css({"top":"auto","bottom":"0"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('vertical-top vertical-center');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('vertical-bottom');&#13;
                break;&#13;
            }&#13;
            case "center": {&#13;
                var pageHeight = parseInt(presenter.$view.parent().css('height'),10);&#13;
                var topPos = (pageHeight / 2) - (presenter.model.Height / 2);&#13;
                presenter.$view.css({"top":topPos,"bottom":"auto"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('vertical-bottom vertical-top');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('vertical-center');&#13;
                break;&#13;
            }&#13;
            //Na przyszĹ‚oĹ›Ä‡&#13;
            //DODAÄ† obsĹ‚ugÄ™ defaulta, ĹĽeby moĹĽna byĹ‚o z komendy przywrĂłciÄ‡&#13;
            //do tego trzeba bÄ™dzie pewnie zapamiÄ™taÄ‡ stan pozycji z edytora&#13;
        }&#13;
    }&#13;
    presenter.setAlignmentCommand = function (params) {&#13;
        presenter.setAlignment(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
    presenter.hide = function(){&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        presenter.$view.css("display", isVisible ? "block" : "none");&#13;
    };&#13;
&#13;
    presenter.enable = function(item) {&#13;
        presenter.log('typeof item: '+typeof item);&#13;
&#13;
        if(typeof item === 'undefined'){&#13;
            presenter.setAbilityAll(true);&#13;
        }else{&#13;
            var i = getItemById(item);&#13;
            presenter.menuItems[i].isDisabled = false;&#13;
            $(presenter.$view.find('.item'+presenter.menuItems[i].id)[0]).removeClass("disabled");&#13;
        }&#13;
    };&#13;
    presenter.enableCommand = function(params) {&#13;
        presenter.enable(params[0]);&#13;
    };&#13;
    presenter.disable = function(item){&#13;
        presenter.log('typeof item: '+typeof item);&#13;
&#13;
        if(typeof item === 'undefined'){&#13;
            presenter.log('disable; item is undefined');&#13;
            presenter.setAbilityAll(false);&#13;
        }else{&#13;
            var i = getItemById(item);&#13;
            presenter.menuItems[i].isDisabled = true;&#13;
            $(presenter.$view.find('.item'+presenter.menuItems[i].id)[0]).addClass("disabled");&#13;
        }&#13;
    };&#13;
    presenter.disableCommand = function(params) {&#13;
        presenter.disable(params[0]);&#13;
    };&#13;
    presenter.setAbilityAll = function(ability) {&#13;
        presenter.isDisabled = !ability;&#13;
        var wrapper = presenter.$view.find('.menu-panel-wrapper')[0];&#13;
        if(ability){&#13;
            $(wrapper).removeClass("disabled");&#13;
        }else{&#13;
            $(wrapper).addClass("disabled");&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.reset = function(){&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
        presenter.setAbilityAll(!presenter.isDisabledByDefault);&#13;
        presenter.setAlignment(presenter.HorizontalAlignmentByDefault, presenter.VerticalAlignmentByDefault);&#13;
        presenter.menuItems = presenter.buildElementsArray(presenter.menuItemsByDefault);&#13;
        presenter.drawElements();&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.isVisible,&#13;
            isDisabled: presenter.isDisabled,&#13;
            HorizontalAlignment: presenter.HorizontalAlignment,&#13;
            VerticalAlignment: presenter.VerticalAlignment,&#13;
            menuItems: presenter.menuItems&#13;
        });&#13;
    };&#13;
    presenter.setState = function(stateString){&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
        presenter.isVisible = state.isVisible;&#13;
        presenter.isDisabled = state.isDisabled;&#13;
        presenter.HorizontalAlignment = state.HorizontalAlignment;&#13;
        presenter.VerticalAlignment = state.VerticalAlignment;&#13;
        presenter.menuItems = state.menuItems;&#13;
&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
        presenter.setAbilityAll(!presenter.isDisabled);&#13;
        presenter.setAlignment(presenter.HorizontalAlignment, presenter.VerticalAlignment);&#13;
        presenter.drawElements();&#13;
    };&#13;
&#13;
    function getItemById(id){&#13;
        var itemToReturn = false;&#13;
        $(presenter.menuItems).each(function(i, menuItem){&#13;
            if(menuItem.id === id){&#13;
                itemToReturn = i;&#13;
                return false;&#13;
            }&#13;
        });&#13;
        return itemToReturn;&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function(){ };&#13;
    presenter.setWorkMode = function(){ };&#13;
    presenter.showAnswers = function(){ };&#13;
    presenter.hideAnswers = function(){ };&#13;
&#13;
    presenter.log = function(msg){&#13;
        //console.log(msg);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MultiAudio" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Files" nameLabel="MultiAudio_property_files" type="list">
			<property name="ID" nameLabel="MultiAudio_property_id" type="string"/>
			<property name="Mp3" nameLabel="MultiAudio_property_mp3" type="audio"/>
			<property name="Ogg" nameLabel="MultiAudio_property_ogg" type="audio"/>
			<property name="Enable loop" nameLabel="MultiAudio_property_enable_loop" type="boolean"/>
		</property>
		<property name="Interface" nameLabel="MultiAudio_property_interface" type="{None, Default controls, Display time}"/>
		<property isLocalized="true" name="Narration" nameLabel="MultiAudio_property_narration" type="narration"/>
	</model>
<css>.wrapper-addon-audio audio {&#13;
    bottom: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.wrapper-addon-audio {&#13;
    height: 30px;&#13;
    position: relative;&#13;
}&#13;
</css><view>&lt;div class="wrapper-addon-audio"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="wrapper-addon-audio"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonMultiAudio_create(){&#13;
    var presenter = function(){};&#13;
    var AUDIO_FILES_MISSING = "This addon needs at least 1 audio file.";&#13;
    var eventBus;&#13;
    var currentTimeAlreadySent;&#13;
    presenter.currentAudio = 0;&#13;
    presenter.audio = {};&#13;
    presenter.files = [];&#13;
    presenter.visible = true;&#13;
    presenter.defaultVisibility = true;&#13;
    presenter.globalView = null;&#13;
    presenter.globalModel = null;&#13;
    presenter.playerController = null;&#13;
    presenter.addonID = null;&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
    &#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
    	if(eventData.value == 'dropdownClicked') {&#13;
     	   	this.audio.load();&#13;
    	}&#13;
    }&#13;
&#13;
    function getEventObject(_item, _value, _score) {&#13;
    	return {&#13;
            source : presenter.addonID,&#13;
            item : _item + '',&#13;
            value : _value + '',&#13;
            score : _score + ''&#13;
        };&#13;
    }&#13;
    &#13;
    presenter.createEventData = function (data) {&#13;
    	return getEventObject(data.currentItem, data.currentTime, '');&#13;
    };&#13;
&#13;
    presenter.createOnEndEventData = function (data) {&#13;
        return getEventObject(data.currentItem, 'end', '');&#13;
    };&#13;
    &#13;
    presenter.createOnPlayingEventData = function (data) {&#13;
        return getEventObject(data.currentItem, 'playing', '');&#13;
    };&#13;
    &#13;
    presenter.sendEventAndSetCurrentTimeAlreadySent = function (eventData, currentTime) {&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
        currentTimeAlreadySent = currentTime;&#13;
    };&#13;
&#13;
    presenter.getAudioCurrentTime = function () {&#13;
        return this.audio.currentTime;&#13;
    };&#13;
&#13;
    presenter.onTimeUpdateSendEventCallback = function() {&#13;
&#13;
        var ua = navigator.userAgent;&#13;
        if( ua.indexOf("Android") &gt;= 0 )&#13;
        {&#13;
            var androidversion = parseFloat(ua.slice(ua.indexOf("Android")+8));&#13;
            if (androidversion == 4.4)&#13;
            {&#13;
                var duration = parseInt(presenter.audio.duration, 10);&#13;
                duration = isNaN(duration) ? 0 : duration;&#13;
                var currentTime2 = parseInt(presenter.audio.currentTime, 10);&#13;
&#13;
                if(duration == currentTime2){&#13;
                    presenter.sendOnEndEvent();&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        var currentTime = presenter.formatTime(presenter.getAudioCurrentTime());&#13;
        var currentItem = presenter.currentAudio+1;&#13;
        if (currentTime !== currentTimeAlreadySent) { // to prevent duplicated value&#13;
            var eventData = presenter.createEventData({'currentTime' : currentTime, 'currentItem': currentItem});&#13;
            presenter.sendEventAndSetCurrentTimeAlreadySent(eventData, currentTime);&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.addAttributeLoop = function(audio) {&#13;
        $(audio).on("ended", function() {&#13;
            this.currentTime = 0;&#13;
            this.play();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.prepareAudio = function(){&#13;
        this.audio = document.createElement("audio");&#13;
        var audioWrapper = presenter.globalView.find(".wrapper-addon-audio");&#13;
        audioWrapper.html("");&#13;
        audioWrapper.append(this.audio);&#13;
        return audioWrapper;&#13;
    };&#13;
    &#13;
    presenter.sendOnEndEvent = function () {&#13;
        var currentItem = presenter.currentAudio+1;&#13;
        var eventData = presenter.createOnEndEventData({'currentItem': currentItem});&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
    &#13;
    presenter.sendOnPlayingEvent = function () {&#13;
        var currentItem = presenter.currentAudio+1;&#13;
        var eventData = presenter.createOnPlayingEventData({'currentItem': currentItem});&#13;
            eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.playingEventSent = false;&#13;
    presenter.createView = function(view, model){&#13;
        var interfaceType = model["Interface"];&#13;
        var audioWrapper = this.prepareAudio();&#13;
        this.audio.addEventListener('timeupdate', function() {&#13;
            presenter.onTimeUpdateSendEventCallback();&#13;
&#13;
            var ua = navigator.userAgent;&#13;
            if( ua.indexOf("Android") &gt;= 0 )&#13;
            {&#13;
                var androidversion = parseFloat(ua.slice(ua.indexOf("Android")+8));&#13;
                if (androidversion == 5)&#13;
                {&#13;
                    if(presenter.audio.currentTime &gt; 0 &amp;&amp; !presenter.playingEventSent){&#13;
                        presenter.sendOnPlayingEvent();&#13;
                        presenter.playingEventSent = true;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }, false);&#13;
        this.audio.addEventListener('playing', function () {&#13;
            var ua = navigator.userAgent;&#13;
            if( ua.indexOf("Android") &gt;= 0 ){&#13;
                var androidversion = parseFloat(ua.slice(ua.indexOf("Android")+8));&#13;
                if (androidversion == 5){&#13;
                    //do nothing&#13;
                }else{&#13;
                    presenter.sendOnPlayingEvent();&#13;
                }&#13;
            }else{&#13;
                presenter.sendOnPlayingEvent();&#13;
            }&#13;
        }, false);&#13;
        this.audio.addEventListener('play', function () {&#13;
        }, false);&#13;
        this.audio.addEventListener('click', function(e) {&#13;
            e.stopPropagation();&#13;
        }, false);&#13;
        this.audio.addEventListener('ended', function() {&#13;
            presenter.stop();&#13;
            presenter.sendOnEndEvent();&#13;
            presenter.playingEventSent = false;&#13;
        }, false);&#13;
&#13;
        if (!presenter.isLoaded) {&#13;
            this.audio.addEventListener("loadeddata", function() {&#13;
                presenter.isLoaded = true;&#13;
&#13;
                if (!presenter.commandsQueue.isQueueEmpty()) {&#13;
                    presenter.commandsQueue.executeAllTasks();&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
        switch(interfaceType) {&#13;
            case "Default controls":&#13;
                $(this.audio).attr("controls", "controls").attr("preload", "auto");&#13;
                break;&#13;
            case "Display time":&#13;
                this.createCurrentAndDuration(audioWrapper);&#13;
                this.audio.addEventListener('loadeddata', onLoadedMetadataCallback, false);&#13;
                this.audio.addEventListener('timeupdate', onTimeUpdateCallback, false);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createCurrentAndDuration = function(audioWrapper) {&#13;
        var currentTime = document.createElement("span");&#13;
        var durationTime = document.createElement("span");&#13;
        $(currentTime).attr("id", "currentTime");&#13;
        $(durationTime).attr("id", "durationTime");&#13;
        audioWrapper.html(currentTime).append(durationTime);&#13;
    };&#13;
&#13;
    presenter.formatTime = function(seconds) {&#13;
        var minutes = Math.floor(seconds / 60);&#13;
        minutes = (minutes &gt;= 10) ? minutes : "0" + minutes;&#13;
        seconds = Math.floor(seconds % 60);&#13;
        seconds = (seconds &gt;= 10) ? seconds : "0" + seconds;&#13;
        return minutes + ":" + seconds;&#13;
    };&#13;
&#13;
    function onLoadedMetadataCallback() {&#13;
        var duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        presenter.displayTimer(0, duration);&#13;
    }&#13;
&#13;
    function onTimeUpdateCallback() {&#13;
        var duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        var currentTime = presenter.audio.currentTime;&#13;
        presenter.displayTimer(currentTime, duration);&#13;
    }&#13;
&#13;
    presenter.displayTimer = function(current, duration) {&#13;
        presenter.globalView.find('#currentTime').html(presenter.formatTime(current) + ' / ');&#13;
        presenter.globalView.find('#durationTime').html(presenter.formatTime(duration));&#13;
    };&#13;
&#13;
    presenter.loadFiles = function(audio, model){&#13;
        this.files = model["Files"];&#13;
        var oggFile = this.files[this.currentAudio]["Ogg"];&#13;
        var mp3File = this.files[this.currentAudio]["Mp3"];&#13;
        var loop = !!(this.files[this.currentAudio]["Enable loop"] == "True");&#13;
        var canPlayMp3 = false;&#13;
        var canPlayOgg = false;&#13;
&#13;
        var validated = this.validateFiles(this.files[this.currentAudio]);&#13;
&#13;
        if (!validated) {&#13;
            this.globalView.find(".wrapper-addon-audio").html(AUDIO_FILES_MISSING);&#13;
        }&#13;
&#13;
        if (loop) {&#13;
            presenter.addAttributeLoop(audio);&#13;
        }&#13;
&#13;
        if(audio.canPlayType) {&#13;
            canPlayMp3 = !!audio.canPlayType &amp;&amp; "" != audio.canPlayType('audio/mpeg');&#13;
            canPlayOgg = !!audio.canPlayType &amp;&amp; "" != audio.canPlayType('audio/ogg; codecs="vorbis"');&#13;
            if(canPlayMp3){&#13;
                $(audio).attr("src", mp3File);&#13;
            } else if (canPlayOgg) {&#13;
                $(audio).attr("src", oggFile);&#13;
            }&#13;
        } else {&#13;
            $(audio).append("Your browser doesn't support audio.");&#13;
        }&#13;
&#13;
        audio.load();&#13;
&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.commandsQueue = CommandsQueueFactory.create(presenter);&#13;
&#13;
        this.initialize(view, model, false);&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        presenter.addonID = model.ID;&#13;
        eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        this.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.initialize = function(view, model, isPreview) {&#13;
        this.globalModel = model;&#13;
        this.globalView = $(view);&#13;
        this.createView(view, model);&#13;
        if (!isPreview) {&#13;
        	this.loadFiles(this.audio, model);	&#13;
        }&#13;
        this.visible = !!(model['Is Visible'] == 'True');&#13;
        this.defaultVisibility = this.visible;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'play': presenter.play,&#13;
            'stop': presenter.stop,&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous,&#13;
            'jumpTo': presenter.jumpToCommand,&#13;
            'jumpToID': presenter.jumpToIDCommand,&#13;
            'pause': presenter.pause&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        $(presenter.globalView).css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.play = function() {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('play', []);&#13;
            return;&#13;
        }&#13;
&#13;
        if (!this.audio.playing) {&#13;
            this.audio.play();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stop = function() {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('stop', []);&#13;
            return;&#13;
        }&#13;
&#13;
        if (!presenter.audio.paused) {&#13;
            presenter.audio.pause();&#13;
            presenter.playingEventSent = false;&#13;
        }&#13;
&#13;
        presenter.audio.currentTime = 0;&#13;
    };&#13;
&#13;
    presenter.pause = function() {&#13;
        if (!presenter.audio.paused) {&#13;
            presenter.audio.pause();&#13;
            presenter.playingEventSent = false;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.show = function() {&#13;
        this.setVisibility(true);&#13;
        this.visible = true;&#13;
        if(audioStarted(this.audio)) {&#13;
            this.audio.play();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        this.setVisibility(false);&#13;
        this.visible = false;&#13;
        if(audioStarted(this.audio)){&#13;
            this.audio.pause();&#13;
        }&#13;
    };&#13;
&#13;
    function audioStarted(audio) {&#13;
        return audio.currentTime &gt; 0;&#13;
    }&#13;
    &#13;
    presenter.reset = function() {&#13;
        this.visible = this.defaultVisibility;&#13;
        if (this.visible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hide();&#13;
        }&#13;
        this.stop();&#13;
        this.currentAudio = 0;&#13;
        presenter.loadFiles(this.audio, this.globalModel);&#13;
    };&#13;
&#13;
    presenter.jumpTo = function(audioNumber) {&#13;
        var newAudio = parseInt(audioNumber, 10) - 1;&#13;
        if (0 &lt;= newAudio &amp;&amp; newAudio &lt; this.files.length) {&#13;
            this.currentAudio = newAudio;&#13;
            presenter.isLoaded = false;&#13;
            presenter.loadFiles(this.audio, this.globalModel);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToCommand = function(params) {&#13;
        presenter.jumpTo(params[0]);&#13;
        presenter.playingEventSent = false;&#13;
    };&#13;
&#13;
    presenter.previous = function() {&#13;
        if (this.currentAudio &gt; 0) {&#13;
            this.currentAudio--;&#13;
            this.initialize(this.globalView, this.globalModel);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.next = function() {&#13;
        if (this.currentAudio &lt; this.files.length - 1) {&#13;
            this.currentAudio++;&#13;
            this.initialize(this.globalView, this.globalModel);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToID = function(id) {&#13;
        for (var i = 0; i &lt; this.files.length; i++) {&#13;
            if (id === this.files[i].ID) {&#13;
                this.jumpTo(i + 1);  // Audio numbers are counted from 1 to n&#13;
                break;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToIDCommand = function(params) {&#13;
        presenter.jumpToID(params[0]);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        this.audio.pause();&#13;
        var state = {&#13;
            'visible' : "" + this.visible,&#13;
            'currentAudio' : "" + this.currentAudio,&#13;
            'currentTime'   : "" + this.audio.currentTime&#13;
        };&#13;
        return this.convertStateToString(state);&#13;
    };&#13;
&#13;
    presenter.convertStateToString = function(state) {&#13;
        var stateString = "";&#13;
        $.each(state, function(key, value){&#13;
            stateString += "[" + key + ":" + value + "]";&#13;
        });&#13;
        return stateString;&#13;
    };&#13;
&#13;
    presenter.convertStringToState = function(stateString) {&#13;
        var state = {};&#13;
        var pattern = /\w+:\w+/g;&#13;
        var stateElements = stateString.match(pattern);&#13;
        for (var i = 0; i &lt; stateElements.length; i++) {&#13;
            var keyAndValue = stateElements[i].split(":");&#13;
            var key = keyAndValue[0];&#13;
            state[key] = keyAndValue[1];&#13;
        }&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        var state = this.convertStringToState(stateString);&#13;
        var visible = !!(state["visible"] == "true");&#13;
        var currentAudio = parseInt(state["currentAudio"]);&#13;
        var currentTime = parseInt(state["currentTime"]);&#13;
&#13;
        if (visible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hide();&#13;
        }&#13;
&#13;
        this.currentAudio = currentAudio;&#13;
        presenter.loadFiles(this.audio, this.globalModel);&#13;
    };&#13;
&#13;
    presenter.validateFiles = function(files) {&#13;
        return !(!files["Ogg"] &amp;&amp; !files["Mp3"]);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Multiple_Audio_Controls_Binder" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Connections" nameLabel="Multiple_Audio_Controls_Binder_property_connections" type="text"/>
	</model>
<css/><view/><preview/><presenter>function AddonMultiple_Audio_Controls_Binder_create() {&#13;
    var presenter = function () {};&#13;
    presenter.configuration = {};&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'CONNECTIONS_01': "Connections cannot be empty!",&#13;
        'CONNECTIONS_02': "Missing separator character!",&#13;
        'CONNECTIONS_03': "Missing Audio addon ID!",&#13;
        'CONNECTIONS_04': "Missing Double State Button addon ID!",&#13;
        'CONNECTIONS_05': "Empty lines are not allowed!",&#13;
        'CONNECTIONS_06': "Repeated Audio addon ID!",&#13;
        'CONNECTIONS_07': "Repeated Double State Button addon ID!"&#13;
    };&#13;
&#13;
    presenter.STATES = {&#13;
        AUDIO: {&#13;
            PLAYING: 1,&#13;
            STOPPED: 2&#13;
        },&#13;
&#13;
        DOUBLE_STATE_BUTTON: {&#13;
            SELECTED: 1,&#13;
            DESELECTED: 2&#13;
        }&#13;
    };&#13;
&#13;
    function showErrorMessage(errorCode) {&#13;
        presenter.$view.html(presenter.ERROR_CODES[errorCode]);&#13;
    }&#13;
&#13;
    function presenterLogic (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        var connections = presenter.parseConnections(model.Connections);&#13;
        if (!connections.isValid) {&#13;
            showErrorMessage(connections.errorCode);&#13;
&#13;
            delete presenter.getState;&#13;
            delete presenter.setState;&#13;
&#13;
            return;&#13;
        }&#13;
&#13;
        if (isPreview) return;&#13;
&#13;
        presenter.$view.css('visible', 'hidden');&#13;
        presenter.configuration.connections = new presenter.Connections(connections.connections);&#13;
    }&#13;
&#13;
    presenter.isAudioIDPresent = function (connections, audioID) {&#13;
        var i;&#13;
&#13;
        for (i = 0; i &lt; connections.length; i++) {&#13;
            if (connections[i].Audio === audioID) return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.isDoubleStateButtonIDPresent = function (connections, doubleStateButtonID) {&#13;
        var i;&#13;
&#13;
        for (i = 0; i &lt; connections.length; i++) {&#13;
            if (connections[i].DoubleStateButton === doubleStateButtonID) return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.parseConnections = function (connections) {&#13;
        var parsedConnections = [], isValid = true, errorCode;&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(connections)) return { isValid: false, errorCode: 'CONNECTIONS_01'};&#13;
&#13;
        jQuery.each(connections.split('\n'), function (elementIndex, element) {&#13;
            var indexOfSeparator, modules, audioID, doubleStateButtonID;&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(element)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_05';&#13;
                return false;&#13;
            }&#13;
&#13;
            indexOfSeparator = element.indexOf('|');&#13;
            if (indexOfSeparator === -1) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_02';&#13;
                return false;&#13;
            }&#13;
&#13;
            modules = element.split('|');&#13;
            audioID = modules[0];&#13;
            doubleStateButtonID = modules[1];&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(audioID)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_03';&#13;
                return false;&#13;
            }&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(doubleStateButtonID)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_04';&#13;
                return false;&#13;
            }&#13;
&#13;
            if (presenter.isAudioIDPresent(parsedConnections, audioID)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_06';&#13;
                return false;&#13;
            }&#13;
&#13;
            if (presenter.isDoubleStateButtonIDPresent(parsedConnections, doubleStateButtonID)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_07';&#13;
                return false;&#13;
            }&#13;
&#13;
            parsedConnections.push({ Audio: audioID, DoubleStateButton: doubleStateButtonID });&#13;
        });&#13;
&#13;
        return {&#13;
            isValid: isValid,&#13;
            connections: parsedConnections,&#13;
            errorCode: errorCode&#13;
        };&#13;
    };&#13;
&#13;
    presenter.Connection = function (audioID, doubleStateButtonID, ID) {&#13;
        var self = this;&#13;
&#13;
        this.DoubleStateButton = {&#13;
            ID: doubleStateButtonID,&#13;
            getModule: function () { return presenter.getModule(self.DoubleStateButton.ID); },&#13;
            state: presenter.STATES.DOUBLE_STATE_BUTTON.DESELECTED&#13;
        };&#13;
&#13;
        this.Audio = {&#13;
            ID: audioID,&#13;
            getModule: function () { return presenter.getModule(self.Audio.ID); },&#13;
            state: presenter.STATES.AUDIO.STOPPED&#13;
        };&#13;
&#13;
        this.ID = ID;&#13;
    };&#13;
&#13;
    presenter.Connections = function (connections) {&#13;
        this.connections = [];&#13;
&#13;
        for (var i = 0; i &lt; connections.length; i++) {&#13;
            var audioID = connections[i].Audio;&#13;
            var doubleStateButtonID = connections[i].DoubleStateButton;&#13;
&#13;
            this.connections.push(new presenter.Connection(audioID, doubleStateButtonID, i));&#13;
        }&#13;
&#13;
        this.getConnection = function (connectionID) {&#13;
            return jQuery.grep(this.connections, function (element) {&#13;
                return element.ID == connectionID;&#13;
            })[0];&#13;
        };&#13;
&#13;
        this.getConnectionWithAudio = function (audioID) {&#13;
            for (var i = 0; i &lt; this.connections.length; i++) {&#13;
                if (this.connections[i].Audio.ID == audioID) return this.connections[i];&#13;
            }&#13;
&#13;
            return undefined;&#13;
        };&#13;
&#13;
        this.getConnectionWithDSB = function (doubleStateButtonID) {&#13;
            for (var i = 0; i &lt; this.connections.length; i++) {&#13;
                if (this.connections[i].DoubleStateButton.ID == doubleStateButtonID) return this.connections[i];&#13;
            }&#13;
&#13;
            return undefined;&#13;
        };&#13;
&#13;
        this.getConnectionsOtherThan = function (connectionID) {&#13;
            return jQuery.grep(this.connections, function (connection) {&#13;
                return connection.ID != connectionID;&#13;
            });&#13;
        };&#13;
&#13;
        this.getAllConnections = function () {&#13;
            return this.connections;&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getModule = function (moduleID) {&#13;
        return presenter.playerController.getModule(moduleID);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
&#13;
        var matchedModule = presenter.matchEventToModules(eventData);&#13;
&#13;
        if (!matchedModule.isMatch) return;&#13;
&#13;
        switch (matchedModule.action) {&#13;
            case presenter.EVENT_ACTIONS.AUDIO_END:&#13;
                presenter.audioEndHandler(matchedModule.moduleID);&#13;
                break;&#13;
            case presenter.EVENT_ACTIONS.DOUBLE_STATE_BUTTON_SELECT:&#13;
                presenter.doubleStateButtonSelectionHandler(matchedModule.moduleID);&#13;
                break;&#13;
            case presenter.EVENT_ACTIONS.DOUBLE_STATE_BUTTON_DESELECT:&#13;
                presenter.doubleStateButtonDeselectionHandler(matchedModule.moduleID);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.audioEndHandler = function (audioID) {&#13;
        var connection = presenter.configuration.connections.getConnectionWithAudio(audioID);&#13;
&#13;
        connection.Audio.state = presenter.STATES.AUDIO.STOPPED;&#13;
        connection.DoubleStateButton.getModule().deselect();&#13;
        connection.DoubleStateButton.state = presenter.STATES.DOUBLE_STATE_BUTTON.DESELECTED;&#13;
    };&#13;
&#13;
    presenter.doubleStateButtonSelectionHandler = function (moduleID) {&#13;
        var connection = presenter.configuration.connections.getConnectionWithDSB(moduleID),&#13;
            otherConnections = presenter.configuration.connections.getConnectionsOtherThan(connection.ID),&#13;
            audio, doubleStateButton;&#13;
&#13;
        jQuery.each(otherConnections, function (index, connection) {&#13;
            audio = connection.Audio;&#13;
            doubleStateButton = connection.DoubleStateButton;&#13;
            if (presenter.STATES.AUDIO.PLAYING == audio.state) {&#13;
                audio.getModule().stop();&#13;
                audio.state = presenter.STATES.AUDIO.STOPPED;&#13;
                doubleStateButton.getModule().deselect();&#13;
                doubleStateButton.state = presenter.STATES.DOUBLE_STATE_BUTTON.DESELECTED;&#13;
            }&#13;
        });&#13;
&#13;
        connection.Audio.getModule().play();&#13;
        connection.Audio.state = presenter.STATES.AUDIO.PLAYING;&#13;
        connection.DoubleStateButton.state = presenter.STATES.DOUBLE_STATE_BUTTON.SELECTED;&#13;
    };&#13;
&#13;
    presenter.doubleStateButtonDeselectionHandler = function (moduleID) {&#13;
        var connection = presenter.configuration.connections.getConnectionWithDSB(moduleID);&#13;
&#13;
        connection.Audio.getModule().stop();&#13;
        connection.Audio.state = presenter.STATES.AUDIO.STOPPED;&#13;
        connection.DoubleStateButton.state = presenter.STATES.DOUBLE_STATE_BUTTON.DESELECTED;&#13;
    };&#13;
&#13;
    presenter.matchEventToModules = function (eventData) {&#13;
        var moduleID = eventData.source,&#13;
            connection = presenter.configuration.connections.getConnectionWithAudio(moduleID),&#13;
            eventActions = presenter.EVENT_ACTIONS;&#13;
&#13;
        if (connection) {&#13;
            if (eventData.item !== 'end') return { isMatch: false };&#13;
&#13;
            return {&#13;
                isMatch: true,&#13;
                moduleID: moduleID,&#13;
                moduleType: presenter.MODULE_TYPE.AUDIO,&#13;
                action: eventActions.AUDIO_END,&#13;
                connectionID: connection.ID&#13;
            };&#13;
        }&#13;
&#13;
        // No Audio module with given ID&#13;
        connection = presenter.configuration.connections.getConnectionWithDSB(moduleID);&#13;
        if (!connection) return { isMatch: false };&#13;
&#13;
        return {&#13;
            isMatch: true,&#13;
            moduleType: presenter.MODULE_TYPE.DOUBLE_STATE_BUTTON,&#13;
            moduleID: moduleID,&#13;
            action: eventData.value == '1' ? eventActions.DOUBLE_STATE_BUTTON_SELECT : eventActions.DOUBLE_STATE_BUTTON_DESELECT,&#13;
            connectionID: connection.ID&#13;
        };&#13;
    };&#13;
&#13;
    presenter.EVENT_ACTIONS = {&#13;
        AUDIO_END: 0,&#13;
        DOUBLE_STATE_BUTTON_SELECT: 1,&#13;
        DOUBLE_STATE_BUTTON_DESELECT: 2&#13;
    };&#13;
&#13;
    presenter.MODULE_TYPE = {&#13;
        AUDIO: 0,&#13;
        DOUBLE_STATE_BUTTON: 1&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        var state = jQuery.map(presenter.configuration.connections.getAllConnections(), function (connection) {&#13;
            var isSelected = presenter.STATES.DOUBLE_STATE_BUTTON.SELECTED === connection.DoubleStateButton.state;&#13;
&#13;
            return { ID: connection.ID, isSelected: isSelected };&#13;
        });&#13;
&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.setState = function (stringifiedState) {&#13;
        var state = JSON.parse(stringifiedState);&#13;
&#13;
        state = jQuery.grep(state, function (element) {&#13;
            return element.isSelected;&#13;
        });&#13;
&#13;
        presenter.pageLoadedHandlerLoad(state);&#13;
    };&#13;
&#13;
    presenter.pageLoadedHandlerLoad = function (state) {&#13;
        var connection;&#13;
        presenter.pageLoaded.then(function() {&#13;
            jQuery.each(state, function (index, value) {&#13;
                connection = presenter.configuration.connections.getConnection(value.ID);&#13;
                connection.DoubleStateButton.getModule().deselect();&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Navigation_Bar" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property displayName="Show Next and Prev arrows" name="ShowNextPrevArrows" nameLabel="Navigation_Bar_property_show_next_prev_arrows" type="boolean"/>
		<property displayName="Hide Home and Last arrows" name="HideHomeLastArrows" nameLabel="Navigation_Bar_property_show_home_last_arrows" type="boolean"/>
		<property name="Numericals" nameLabel="Navigation_Bar_property_numericals" type="{Western Arabic,Eastern Arabic,Perso-Arabic}"/>
        <property displayName="Styles" name="Styles" nameLabel="Navigation_Bar_property_styles" type="list">
            <property name="Pages" nameLabel="Navigation_Bar_property_pages" type="string"/>
            <property name="Class" nameLabel="Navigation_Bar_property_class" type="string"/>
            <property name="Style" nameLabel="Navigation_Bar_property_style" type="string"/>
        </property>
        <property displayName="Real-time navigationbar-page-ok" name="AddClassNBPageOK" nameLabel="Navigation_Bar_property_add_class_nb_page_ok" type="boolean"/>
        <property displayName="First page as cover" name="firstPageAsCover" nameLabel="Navigation_Bar_property_first_page_as_cover" type="boolean"/>
        <property displayName="Last page separated" name="lastPageSeparated" nameLabel="Navigation_Bar_property_last_page_separated" type="boolean"/>
	</model>
<css>.navigationbar-wrapper {&#13;
    direction: inherit;&#13;
}&#13;
&#13;
.navigationbar-wrapper * {&#13;
    direction: inherit;&#13;
}&#13;
&#13;
.navigationbar-wrapper a {&#13;
    text-decoration: none !important;&#13;
}&#13;
&#13;
.navigationbar-wrapper a span {&#13;
    display: block;&#13;
    float: left;&#13;
    text-align: center;&#13;
    white-space: nowrap;&#13;
    text-decoration: none;&#13;
    height: auto;&#13;
    font: 1.5em "Lucida Grande", Geneva, Verdana, Arial, Helvetica, sans-serif;&#13;
    width: 40px;&#13;
}&#13;
&#13;
.navigationbar-element,&#13;
.navigationbar-element-first,&#13;
.navigationbar-element-next,&#13;
.navigationbar-element-previous,&#13;
.navigationbar-element-last {&#13;
    color: #7F7F7F;&#13;
    background-color: #F3F3F3;&#13;
}&#13;
&#13;
.navigationbar-element-current {&#13;
    background-color: #2091AB;&#13;
    color: white;&#13;
}&#13;
&#13;
.navigationbar-element-mouse-hover,&#13;
.navigationbar-element-first-mouse-hover,&#13;
.navigationbar-element-next-mouse-hover,&#13;
.navigationbar-element-previous-mouse-hover,&#13;
.navigationbar-element-last-mouse-hover {&#13;
    background-color: #7F7F7F;&#13;
    color: #F3F3F3;&#13;
}&#13;
&#13;
.navigationbar-element-current-mouse-hover {&#13;
    background-color: #17697B;&#13;
}&#13;
&#13;
.navigationbar-element-first-inactive,&#13;
.navigationbar-element-next-inactive,&#13;
.navigationbar-element-previous-inactive,&#13;
.navigationbar-element-last-inactive {&#13;
    background-color: #80BBC8;&#13;
    color: #C0C0C0;&#13;
}&#13;
&#13;
.navigationbar-element-mouse-click,&#13;
.navigationbar-element-current-mouse-click,&#13;
.navigationbar-element-first-mouse-click,&#13;
.navigationbar-element-next-mouse-click,&#13;
.navigationbar-element-previous-mouse-click,&#13;
.navigationbar-element-last-mouse-click {&#13;
    background-color: #0A7058;&#13;
    color: white;&#13;
}&#13;
</css><view>&lt;div class="navigationbar-wrapper"&gt;&#13;
    &lt;a title="First page" href="#"&gt;&#13;
        &lt;span class="navigationbar-element-first"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&#13;
    &lt;/a&gt;&#13;
    &lt;a title="Last page" href="#"&gt;&#13;
        &lt;span class="navigationbar-element-last"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&#13;
    &lt;/a&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="navigationbar-wrapper"&gt;&#13;
    &lt;a title="First page" href="#"&gt;&#13;
        &lt;span class="navigationbar-element-first"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&#13;
    &lt;/a&gt;&#13;
    &lt;a title="Last page" href="#"&gt;&#13;
        &lt;span class="navigationbar-element-last"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&#13;
    &lt;/a&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonNavigation_Bar_create() {&#13;
    var presenter = function () { };&#13;
    presenter.eventBus = null;&#13;
    presenter.pagesOk = [];&#13;
    presenter.allPagesDisplayed = false;&#13;
&#13;
    var NAVIGATION_PAGE = {&#13;
        FIRST: 0,&#13;
        LAST: 1,&#13;
        PREVIOUS: 2,&#13;
        NEXT: 3,&#13;
        OTHER: 4&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'E_01': "Pages and Style or Class attribute in 'Styles' must be filled",&#13;
        'E_04': "Pages attribute in Styles may contain only previous, next, first, last and positive integer page numbers",&#13;
        'P_01': "Cannot load module - HTML element doesn't exists"&#13;
    };&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    var DOTTED_SIDE = {&#13;
        LEFT: { CSSClass: "dotted-element-left" },&#13;
        RIGHT: { CSSClass: "dotted-element-right" }&#13;
    };&#13;
&#13;
    var movedFromIndex,&#13;
        maxElementCount;&#13;
&#13;
    function getLanguage(model) {&#13;
    	if (model['Numericals'] == 'Eastern Arabic') {&#13;
    		return Internationalization.EASTERN_ARABIC;&#13;
    	}&#13;
    	if (model['Numericals'] == 'Perso-Arabic') {&#13;
    		return Internationalization.PERSO_ARABIC;&#13;
    	}&#13;
    	return Internationalization.WESTERN_ARABIC;&#13;
    }&#13;
&#13;
    presenter.keyboardController = function(keycode) {&#13;
&#13;
        $(document).on('keydown', function(e) {&#13;
            e.preventDefault();&#13;
            $(this).off('keydown');&#13;
        });&#13;
&#13;
        var elements = presenter.$view.find("span").not("[class*='inactive']");&#13;
&#13;
        function getCurrentPosition() {&#13;
            var pos;&#13;
            $.each(elements, function(i, el) {&#13;
                if ($(el).is("[class*='mouse-hover']")) {&#13;
                    pos = i;&#13;
                    return false;&#13;
                }&#13;
            });&#13;
&#13;
            if (typeof pos === "undefined") {&#13;
                $.each(elements, function(i, el) {&#13;
                    if ($(el).is("[class*='current']")) {&#13;
                        pos = i;&#13;
                        return false;&#13;
                    }&#13;
                });&#13;
            }&#13;
            // dotted&#13;
            if (typeof pos === "undefined") {&#13;
                $.each(elements, function(i, el) {&#13;
                    if ($(el).hasClass("navigationbar-dotted-element")) {&#13;
                        pos = i;&#13;
                        return false;&#13;
                    }&#13;
                });&#13;
            }&#13;
&#13;
            return pos;&#13;
        }&#13;
&#13;
        function select(element) {&#13;
            if (!element) return;&#13;
&#13;
            presenter.$view.find('span').removeClass('navigationbar-element-mouse-hover');&#13;
&#13;
            $(element).removeClass('navigationbar-element');&#13;
            $(element).addClass('navigationbar-element-mouse-hover');&#13;
&#13;
            var pageNumber = $(element).attr('data-page-number');&#13;
        }&#13;
&#13;
        function skipToPage() {&#13;
            $(elements[getCurrentPosition()]).trigger('click');&#13;
        }&#13;
&#13;
        function back() {&#13;
            select(elements[getCurrentPosition() - 1]);&#13;
        }&#13;
&#13;
        function forward() {&#13;
            select(elements[getCurrentPosition() + 1]);&#13;
        }&#13;
&#13;
        function deselect() {&#13;
            presenter.$view.find('span').removeClass('navigationbar-element-mouse-hover');&#13;
        }&#13;
&#13;
        switch(keycode) {&#13;
            case 13:&#13;
                skipToPage();&#13;
                break;&#13;
            case 37:&#13;
                back();&#13;
                break;&#13;
            case 39:&#13;
                forward();&#13;
                break;&#13;
            case 27:&#13;
                deselect();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.presentation = controller.getPresentation();&#13;
        presenter.commander = controller.getCommands();&#13;
        presenter.pageCount = controller.getPresentation().getPageCount();&#13;
        presenter.currentIndex = controller.getCurrentPageIndex();&#13;
        presenter.scoreService = controller.getScore();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        presenter.eventBus.addEventListener('closePage', this);&#13;
    };&#13;
&#13;
    function goToPage(whereTo, index) {&#13;
        var currentIndex = presenter.playerController.getCurrentPageIndex(),&#13;
            goToIndex = 0;&#13;
&#13;
        switch (whereTo) {&#13;
            case NAVIGATION_PAGE.FIRST:&#13;
                if (currentIndex !== 0) {&#13;
                    goToIndex = 0;&#13;
                }&#13;
                break;&#13;
            case NAVIGATION_PAGE.LAST:&#13;
                if (currentIndex !== (presenter.pageCount - 1)) {&#13;
                    goToIndex = presenter.pageCount - 1;&#13;
                }&#13;
                break;&#13;
            case NAVIGATION_PAGE.NEXT:&#13;
                if (currentIndex !== (presenter.pageCount - 1)) {&#13;
                    goToIndex = presenter.currentIndex + 1;&#13;
                }&#13;
                break;&#13;
            case NAVIGATION_PAGE.PREVIOUS:&#13;
                if (currentIndex !== 0) {&#13;
                    goToIndex = presenter.currentIndex - 1;&#13;
                }&#13;
                break;&#13;
            case NAVIGATION_PAGE.OTHER:&#13;
                if (currentIndex !== index &amp;&amp; (index &gt;= 0) &amp;&amp; (index &lt;= (presenter.pageCount - 1))) {&#13;
                    goToIndex = index;&#13;
                }&#13;
                break;&#13;
        }&#13;
&#13;
        presenter.commander.gotoPageIndex(goToIndex);&#13;
    }&#13;
&#13;
    function handleMouseActions(dotsLeftIndex, dotsRightIndex, elementWidth, elementHeight, preview, horizontalGap) {&#13;
        handleArrowClickActions();&#13;
        handleIndexClickActions();&#13;
        handleDottedClickActions(dotsLeftIndex, dotsRightIndex, elementWidth, elementHeight, preview, horizontalGap);&#13;
        handleHoverAndMouseDownActions();&#13;
    }&#13;
&#13;
    function handleArrowClickActions() {&#13;
        presenter.$view.find('[class="navigationbar-element-first"]').parent().click(function () {&#13;
            goToPage(NAVIGATION_PAGE.FIRST);&#13;
            return false;&#13;
        });&#13;
&#13;
        presenter.$view.find('[class="navigationbar-element-previous"]').parent().click(function () {&#13;
            goToPage(NAVIGATION_PAGE.PREVIOUS);&#13;
            return false;&#13;
        });&#13;
&#13;
        presenter.$view.find('[class="navigationbar-element-next"]').parent().click(function () {&#13;
            goToPage(NAVIGATION_PAGE.NEXT);&#13;
            return false;&#13;
        });&#13;
&#13;
        presenter.$view.find('[class="navigationbar-element-last"]').parent().click(function () {&#13;
            goToPage(NAVIGATION_PAGE.LAST);&#13;
            return false;&#13;
        });&#13;
    }&#13;
&#13;
    function handleIndexClickActions() {&#13;
        presenter.$view.find('[class*="navigationbar-indexed-element"]').each(function () {&#13;
            var isCurrentPage = $(this).hasClass("navigationbar-element-current");&#13;
            var pageIndex = parseInt($(this).attr("data-page-number"), 10) - 1;&#13;
&#13;
            $(this).parent().click(function (event) {&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
&#13;
                if (!isCurrentPage) {&#13;
                    goToPage(NAVIGATION_PAGE.OTHER, pageIndex);&#13;
                }&#13;
            });&#13;
        });&#13;
&#13;
    }&#13;
&#13;
    presenter.checkIfPagesOk = function () {&#13;
        presenter.$view.find(".navigationbar-indexed-element").each(function () {&#13;
            if($(this).hasClass('navigationbar-page-ok')){&#13;
                var pageIndex = parseInt($(this).attr("data-page-number"), 10);&#13;
                presenter.pagesOk.push(pageIndex);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.addClassPageOK = function () {&#13;
        for (var i=0; i &lt; presenter.pagesOk.length; i++){&#13;
            presenter.$wrapper.find("[data-page-number='" + presenter.pagesOk[i] + "']").addClass('navigationbar-page-ok');&#13;
        }&#13;
    };&#13;
&#13;
    function handleDottedClickActions(dotsLeftIndex, dotsRightIndex, elementWidth, elementHeight, preview, horizontalGap) {&#13;
        presenter.$view.find(".dotted-element-left:first").click(function () {&#13;
            if (dotsLeftIndex === undefined || dotsLeftIndex &lt; 0) {&#13;
                dotsLeftIndex = 0;&#13;
            }&#13;
&#13;
            removeAllElements();&#13;
            if (movedFromIndex == undefined) {&#13;
                movedFromIndex = presenter.currentIndex;&#13;
            }&#13;
            presenter.currentIndex = dotsLeftIndex;&#13;
&#13;
            generateElements(elementWidth, elementHeight, true, preview, horizontalGap);&#13;
&#13;
            presenter.addClassPageOK();&#13;
&#13;
            presenter.isPageOK();&#13;
&#13;
            return false;&#13;
        });&#13;
&#13;
        presenter.$view.find(".dotted-element-right:first").click(function () {&#13;
            if (dotsRightIndex === undefined || dotsRightIndex &gt; presenter.pageCount - 1) {&#13;
                dotsRightIndex = presenter.pageCount - 1;&#13;
            }&#13;
&#13;
            removeAllElements();&#13;
            if (movedFromIndex == undefined) {&#13;
                movedFromIndex = presenter.currentIndex;&#13;
            }&#13;
            presenter.currentIndex = dotsRightIndex;&#13;
&#13;
            generateElements(elementWidth, elementHeight, true, preview, horizontalGap);&#13;
&#13;
            presenter.addClassPageOK();&#13;
&#13;
            presenter.isPageOK();&#13;
&#13;
            return false;&#13;
        });&#13;
    }&#13;
&#13;
    function handleHoverAndMouseDownActions() {&#13;
        var isHomeInactive = presenter.currentIndex === 0;&#13;
        var isReportInactive = presenter.currentIndex === presenter.pageCount - 1;&#13;
&#13;
        handleSpecificElementHoverAndMouseDown('navigationbar-element-first', isHomeInactive);&#13;
        handleSpecificElementHoverAndMouseDown('navigationbar-element-previous', isHomeInactive);&#13;
        handleSpecificElementHoverAndMouseDown('navigationbar-element-next', isReportInactive);&#13;
        handleSpecificElementHoverAndMouseDown('navigationbar-element-last', isReportInactive);&#13;
        handleSpecificElementHoverAndMouseDown('navigationbar-element-current', false);&#13;
&#13;
        handleElementHoverAndMouseDown();&#13;
    }&#13;
&#13;
    function handleSpecificElementHoverAndMouseDown(selector, inactive) {&#13;
        var removeClassNames = selector + ' ' + selector + '-mouse-hover' +&#13;
            ' ' + selector + '-mouse-click' + ' ' + selector + '-inactive';&#13;
&#13;
        var iOS = ( navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false );&#13;
&#13;
        presenter.$wrapper.find("span[class^=" + selector + "]").each(function() {&#13;
            var addClassName = inactive ? selector + '-inactive' : selector;&#13;
&#13;
            if (!iOS) {&#13;
            	$(this).hover(&#13;
            		function() {&#13;
                    	$(this).removeClass(removeClassNames);&#13;
                    	$(this).addClass(selector + '-mouse-hover');&#13;
                	},&#13;
                	function() {&#13;
                    	$(this).removeClass(removeClassNames);&#13;
                    	$(this).addClass(addClassName);&#13;
                	}&#13;
            	);&#13;
            }&#13;
&#13;
            $(this).mousedown(&#13;
                function() {&#13;
                    $(this).removeClass(removeClassNames);&#13;
                    $(this).addClass(selector + '-mouse-click');&#13;
                }&#13;
            );&#13;
&#13;
            $(this).mouseup(&#13;
                function() {&#13;
                    $(this).removeClass(removeClassNames);&#13;
                    $(this).addClass(addClassName);&#13;
                }&#13;
            );&#13;
        });&#13;
    }&#13;
&#13;
    function handleElementHoverAndMouseDown() {&#13;
        var notSelectorsList = '.navigationbar-element-first,.navigationbar-element-last,' +&#13;
            '.navigationbar-element-next,.navigationbar-element-previous,.navigationbar-element-current';&#13;
&#13;
        var iOS = ( navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false );&#13;
&#13;
        presenter.$wrapper.find('.navigationbar-element').not(notSelectorsList).each(function() {&#13;
            if (!iOS) {&#13;
            	$(this).hover(&#13;
            		function() {&#13;
                    	$(this).removeClass('navigationbar-element');&#13;
                    	$(this).addClass('navigationbar-element-mouse-hover');&#13;
                	},&#13;
                	function() {&#13;
                    	$(this).removeClass('navigationbar-element-mouse-hover');&#13;
                    	$(this).addClass('navigationbar-element');&#13;
                	}&#13;
            	);&#13;
            }&#13;
&#13;
            $(this).mousedown(&#13;
                function() {&#13;
                    $(this).removeClass('navigationbar-element');&#13;
                    $(this).addClass('navigationbar-element-mouse-click');&#13;
                }&#13;
            );&#13;
&#13;
            $(this).mouseup(&#13;
                function() {&#13;
                    $(this).removeClass('navigationbar-element-mouse-click');&#13;
                    $(this).addClass('navigationbar-element');&#13;
                }&#13;
            );&#13;
        });&#13;
    }&#13;
&#13;
    function removeAllElements() {&#13;
        presenter.$view.find("span[class*=navigationbar-element]").parent().remove();&#13;
    }&#13;
&#13;
    function generateHomeArrowElement() {&#13;
        var isElementInactive = presenter.currentIndex === 0;&#13;
        var elementStyle = isElementInactive ? "navigationbar-element-first-inactive" : "navigationbar-element-first";&#13;
&#13;
        if (presenter.$view.has('[class*="navigationbar-element-first"]').length &lt; 1) {&#13;
            var homeElementArrow = '&lt;a href="#"&gt;' +&#13;
                '&lt;span class="' + elementStyle + '"&gt;&amp;lt;&amp;lt;&lt;/span&gt;' +&#13;
                '&lt;/a&gt;';&#13;
&#13;
            presenter.$wrapper.append(homeElementArrow);&#13;
        }&#13;
    }&#13;
&#13;
    function generatePreviousArrowElement() {&#13;
        var homeElement = presenter.$view.find('[class*="navigationbar-element-first"]:first').parent();&#13;
        var isElementInactive = presenter.currentIndex === 0;&#13;
        var elementStyle = isElementInactive ? "navigationbar-element-previous-inactive inactive" : "navigationbar-element-previous";&#13;
&#13;
        var previousElementArrow = '&lt;a href="#"&gt;&lt;span class="' + elementStyle + '"&gt;&amp;lt;&lt;/span&gt;&lt;/a&gt;';&#13;
&#13;
        if (presenter.configuration.hideHomeLastArrows) {&#13;
            presenter.$wrapper.append(previousElementArrow);&#13;
        } else {&#13;
            homeElement.after(previousElementArrow);&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    function generateNextArrowElement() {&#13;
        var previousElement = presenter.$view.find('[class*="navigationbar-element-previous"]:first').parent();&#13;
        var isElementInactive = presenter.currentIndex === presenter.pageCount - 1;&#13;
        var elementStyle = isElementInactive ? "navigationbar-element-next-inactive inactive" : "navigationbar-element-next";&#13;
&#13;
        var nextElementArrow = '&lt;a href="#"&gt;&lt;span class="' + elementStyle + '"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;';&#13;
&#13;
        presenter.$wrapper.append(nextElementArrow);&#13;
    }&#13;
&#13;
    function generateReportArrowElement() {&#13;
        var isElementInactive = presenter.currentIndex === presenter.pageCount - 1;&#13;
        var elementStyle = isElementInactive ? "navigationbar-element-last-inactive" : "navigationbar-element-last";&#13;
&#13;
        if (presenter.$view.has('[class*="navigationbar-element-last"]').length &lt; 1) {&#13;
            var reportElementArrow = '&lt;a href="#"&gt;&lt;span class="' + elementStyle + '"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;';&#13;
&#13;
            presenter.$wrapper.append(reportElementArrow);&#13;
        }&#13;
    }&#13;
&#13;
    function generateHomeAndPreviousArrowsElements() {&#13;
        if (!presenter.configuration.hideHomeLastArrows) {&#13;
            generateHomeArrowElement();&#13;
        }&#13;
&#13;
        if (presenter.configuration.showNextPrevArrows) {&#13;
            generatePreviousArrowElement();&#13;
        }&#13;
    }&#13;
&#13;
    function generateReportAndNextArrowsElements() {&#13;
        if (presenter.configuration.showNextPrevArrows) {&#13;
            generateNextArrowElement();&#13;
        }&#13;
&#13;
        if (!presenter.configuration.hideHomeLastArrows) {&#13;
            generateReportArrowElement();&#13;
        }&#13;
    }&#13;
&#13;
    function generateDottedElement(dotsSide) {&#13;
        return '&lt;a href="#"&gt;' +&#13;
            '&lt;span class="navigationbar-element navigationbar-dotted-element ' + dotsSide.CSSClass + '"&gt;&amp;hellip;&lt;/span&gt;' +&#13;
            '&lt;/a&gt;';&#13;
    }&#13;
&#13;
    // Index is displayed page number&#13;
    function generateIndexElementStub(index, navigationBarMoved) {&#13;
        var isCurrentElement, pageIndex;&#13;
&#13;
        if(presenter.configuration.firstPageAsCover){&#13;
            isCurrentElement = !navigationBarMoved ? (index - 1 + 1) === presenter.currentIndex : (index - 1 + 1) === movedFromIndex;&#13;
            pageIndex = parseInt(index, 10) + 1;&#13;
        }else{&#13;
            isCurrentElement = !navigationBarMoved ? (index - 1) === presenter.currentIndex : (index - 1) === movedFromIndex;&#13;
            pageIndex = parseInt(index, 10);&#13;
        }&#13;
&#13;
        var currentElementStyle = isCurrentElement ? "navigationbar-element-current" : "navigationbar-element";&#13;
&#13;
        return '&lt;a href="#"&gt;' +&#13;
            '&lt;span class="' + currentElementStyle + ' navigationbar-indexed-element' +'" data-page-number="' + pageIndex + '"&gt;' + Internationalization.translate(index, presenter.configuration.language) + '&lt;/span&gt;' +&#13;
            '&lt;/a&gt;';&#13;
    }&#13;
&#13;
    function generateIndexedElements(navigationBarMoved) {&#13;
        var firstElementSelector = presenter.configuration.showNextPrevArrows ? '[class*="navigationbar-element-previous"]' : '[class*="navigationbar-element-first"]';&#13;
        //var firstElement = presenter.$view.find(firstElementSelector).parent();&#13;
&#13;
        var element; // Works as temporary indexed element&#13;
        var dottedElement; // Works as temporary dotted element&#13;
&#13;
        var dotsLeftTargetIndex;&#13;
        var dotsRightTargetIndex;&#13;
        var n = 0;&#13;
&#13;
        var pageCount;&#13;
        if(presenter.configuration.firstPageAsCover){&#13;
            pageCount = presenter.pageCount-1;&#13;
        }else{&#13;
            pageCount = presenter.pageCount;&#13;
        }&#13;
&#13;
        if (maxElementCount &gt;= pageCount) { // All pages will be displayed&#13;
            if(presenter.configuration.lastPageSeparated){&#13;
                for (n = 1; n &lt;= pageCount; n++) {&#13;
                    if(n != pageCount){&#13;
                        element = generateIndexElementStub(n, navigationBarMoved);&#13;
                        presenter.$wrapper.append(element);&#13;
                    }&#13;
                }&#13;
                presenter.allPagesDisplayed = true;&#13;
            }else{&#13;
                for (n = 1; n &lt;= pageCount; n++) {&#13;
                    element = generateIndexElementStub(n, navigationBarMoved);&#13;
                    presenter.$wrapper.append(element);&#13;
                }&#13;
            }&#13;
            presenter.allPagesDisplayed = true;&#13;
        } else {&#13;
            if (presenter.currentIndex &lt; (maxElementCount - 1)) { // -1 for dotted element&#13;
                for (n = 0; n &lt; maxElementCount - 1; n++) {&#13;
                    element = generateIndexElementStub(n + 1, navigationBarMoved);&#13;
                    presenter.$wrapper.append(element);&#13;
                }&#13;
&#13;
                // Dots are displayed on the right&#13;
                dotsRightTargetIndex = maxElementCount - 1;&#13;
                presenter.$wrapper.append(generateDottedElement(DOTTED_SIDE.RIGHT));&#13;
            } else if (presenter.currentIndex &gt; (presenter.pageCount - maxElementCount)) {&#13;
                // Dots are displayed on the left -&gt; -1 to max element count&#13;
                dotsLeftTargetIndex = (pageCount - 1) - (maxElementCount - 2) - 1;&#13;
                dottedElement = generateDottedElement(DOTTED_SIDE.LEFT);&#13;
                presenter.$wrapper.append(dottedElement);&#13;
&#13;
                if(presenter.configuration.lastPageSeparated){&#13;
                    for (n = pageCount - maxElementCount; n &lt; pageCount; n++) {&#13;
                        if(presenter.configuration.lastPageSeparated &amp;&amp; n != (pageCount-1)){&#13;
                            element = generateIndexElementStub(n + 1, navigationBarMoved);&#13;
                            presenter.$wrapper.append(element);&#13;
                        }&#13;
                    }&#13;
                }else{&#13;
                    for (n = pageCount - maxElementCount + 1; n &lt; pageCount; n++) {&#13;
                        element = generateIndexElementStub(n + 1, navigationBarMoved);&#13;
                        presenter.$wrapper.append(element);&#13;
                    }&#13;
                }&#13;
            } else {&#13;
                var numberOfElement = maxElementCount - 2;&#13;
&#13;
                var temp = presenter.currentIndex - (numberOfElement + 1);&#13;
                var multiplier = parseInt(temp / numberOfElement, 10);&#13;
                var startIndex = (numberOfElement + 1) + multiplier * numberOfElement;&#13;
&#13;
                dotsLeftTargetIndex = startIndex - 1;&#13;
                dottedElement = generateDottedElement(DOTTED_SIDE.LEFT);&#13;
                presenter.$wrapper.append(dottedElement);&#13;
&#13;
                for (n = 0; n &lt; numberOfElement; n++) {&#13;
                    var indexedElement = generateIndexElementStub(startIndex + 1 + n, navigationBarMoved);&#13;
                    presenter.$wrapper.append(indexedElement);&#13;
                }&#13;
&#13;
                dotsRightTargetIndex = startIndex + numberOfElement;&#13;
                presenter.$wrapper.append(generateDottedElement(DOTTED_SIDE.RIGHT));&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            leftIndex: dotsLeftTargetIndex,&#13;
            rightIndex: dotsRightTargetIndex&#13;
        };&#13;
    }&#13;
&#13;
    function generateElements(elementWidth, elementHeight, navigationBarMoved, preview, horizontalGap) {&#13;
        removeAllElements();&#13;
&#13;
        generateHomeAndPreviousArrowsElements();&#13;
&#13;
        var dotsIndexes = generateIndexedElements(navigationBarMoved);&#13;
&#13;
        generateReportAndNextArrowsElements();&#13;
&#13;
        if (!preview) {&#13;
            handleMouseActions(dotsIndexes.leftIndex, dotsIndexes.rightIndex, elementWidth, elementHeight, preview, horizontalGap);&#13;
        }&#13;
&#13;
        if (presenter.$wrapper.css('direction') === 'rtl') {&#13;
            reorderElements(dotsIndexes, elementWidth, elementHeight, preview, horizontalGap);&#13;
        }&#13;
&#13;
        if(presenter.configuration.lastPageSeparated &amp;&amp; presenter.allPagesDisplayed){&#13;
            var elementsCount = presenter.$view.find("span[class^=navigationbar-element]").length;&#13;
            var missingWidth = parseInt(elementWidth/elementsCount, 10);&#13;
            elementWidth = elementWidth + missingWidth;&#13;
        }&#13;
&#13;
        presenter.$view.find("span[class^=navigationbar-element]").each(function () {&#13;
            var width = $(this).hasClass('navigationbar-element-last') ? elementWidth + horizontalGap : elementWidth;&#13;
            $(this).width(width + 'px');&#13;
            $(this).height(elementHeight + 'px');&#13;
            $(this).css('line-height', elementHeight + 'px');&#13;
        });&#13;
&#13;
        return dotsIndexes;&#13;
    }&#13;
&#13;
    function reorderElements(dotsIndexes, elementWidth, elementHeight, preview, horizontalGap) {&#13;
        var elements = [];&#13;
&#13;
        presenter.$wrapper.children('a').each(function () {&#13;
            elements.push($(this));&#13;
            $(this).remove();&#13;
        });&#13;
&#13;
        for (var i = elements.length - 1; i &gt;= 0; i--) {&#13;
            presenter.$wrapper.append(elements[i]);&#13;
        }&#13;
&#13;
        if (!preview) {&#13;
            handleMouseActions(dotsIndexes.leftIndex, dotsIndexes.rightIndex, elementWidth, elementHeight, preview, horizontalGap);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.arePagesNamesCorrect = function (pageNames, length) {&#13;
        for (var i = 0; i &lt; pageNames.length; i++) {&#13;
            if (length &gt; 1 &amp;&amp; pageNames[i] == "") {&#13;
                return false;&#13;
            }&#13;
            if (isNaN(pageNames[i])) {&#13;
                switch (pageNames[i]) {&#13;
                    case "previous":&#13;
                        break;&#13;
                    case "first":&#13;
                        break;&#13;
                    case "last":&#13;
                        break;&#13;
                    case "next":&#13;
                        break;&#13;
                    default:&#13;
                        return false;&#13;
                }&#13;
            } else {&#13;
                if(length&gt;1) {&#13;
                    if (pageNames[i] % 1 !== 0 || pageNames[i] &lt;= 0) {&#13;
                        return false;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedModel = {&#13;
            isError: false,&#13;
            styles: model['Styles'],&#13;
            showNextPrevArrows: model.ShowNextPrevArrows === 'True',&#13;
            hideHomeLastArrows: model.HideHomeLastArrows === 'True',&#13;
            language: getLanguage(model),&#13;
            addClassNBPageOK: model.AddClassNBPageOK === 'True',&#13;
            ID: model.ID,&#13;
            firstPageAsCover: ModelValidationUtils.validateBoolean(model["firstPageAsCover"]),&#13;
            lastPageSeparated: ModelValidationUtils.validateBoolean(model["lastPageSeparated"])&#13;
        };&#13;
&#13;
        if (!model['Styles']) {&#13;
            return validatedModel;&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; model['Styles'].length; i++) {&#13;
            var pages = model['Styles'][i].Pages;&#13;
            var pageNames = pages.trim().split(',');&#13;
            if (model['Styles'].length &gt; 1) {&#13;
                if (!pages) {&#13;
                    return returnErrorObject('E_01');&#13;
                }&#13;
                if (!model['Styles'][i]['Style'] &amp;&amp; !model['Styles'][i]['Class']) {&#13;
                    return returnErrorObject('E_01');&#13;
                }&#13;
            }&#13;
            if(!presenter.arePagesNamesCorrect(pageNames, model['Styles'].length)){&#13;
                return returnErrorObject('E_04');&#13;
            }&#13;
        }&#13;
&#13;
        return validatedModel;&#13;
    };&#13;
&#13;
    presenter.getArrowsCount = function () {&#13;
        var arrowsCount = 0;&#13;
&#13;
        if (!presenter.configuration.hideHomeLastArrows) arrowsCount += 2;&#13;
        if (presenter.configuration.showNextPrevArrows) arrowsCount += 2;&#13;
&#13;
        return arrowsCount;&#13;
    };&#13;
&#13;
    presenter.addAdditionalStyleToPage = function (page, styleName, styleValue, clazz) {&#13;
        if (isNaN(page)) {&#13;
            presenter.$wrapper.find("span[class^='navigationbar-element-"+ page +"']").css(styleName, styleValue);&#13;
            presenter.$wrapper.find("span[class^='navigationbar-element-"+ page +"']").addClass(clazz);&#13;
&#13;
        } else {&#13;
            presenter.$wrapper.find("[data-page-number='" + page + "']").addClass(clazz);&#13;
            presenter.$wrapper.find("[data-page-number='" + page + "']").css(styleName, styleValue);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPageStyles = function() {&#13;
        $.each(presenter.configuration.styles, function() {&#13;
            var pages = this['Pages'].split(',');&#13;
            var cssStyle = this['Style'];&#13;
            var styles = cssStyle.split(';');&#13;
&#13;
            for (var page = 0; page &lt; pages.length; page++) {&#13;
                var pageElement = pages[page].trim();&#13;
                for(var pageStyle = 0; pageStyle &lt; styles.length; pageStyle++) {&#13;
                    var oneStyle =  styles[pageStyle].split(':');&#13;
                    if(oneStyle[0]) {&#13;
                        oneStyle[0] = oneStyle[0].trim();&#13;
                    }&#13;
                    if(oneStyle[1]) {&#13;
                        oneStyle[1] = oneStyle[1].trim();&#13;
                    }&#13;
                    presenter.addAdditionalStyleToPage(pageElement, oneStyle[0], oneStyle[1], this['Class']);&#13;
                }&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
    	presenter.$view = $(view);&#13;
        presenter.$wrapper = presenter.$view.find('.navigationbar-wrapper:first');&#13;
        var $element = presenter.$view.find('.navigationbar-element-first');&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        var arrowsCount = presenter.getArrowsCount();&#13;
&#13;
        if(presenter.configuration.isError){&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        if (isPreview) {&#13;
            presenter.currentIndex = 0;&#13;
            presenter.pageCount = 21;&#13;
        }&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, presenter.$wrapper);&#13;
        var elementDimensions = DOMOperationsUtils.getOuterDimensions($element),&#13;
            elementDistances = DOMOperationsUtils.calculateOuterDistances(elementDimensions);&#13;
&#13;
        var elementBaseWidth = parseInt($element.width(), 10) + elementDistances.horizontal;&#13;
        maxElementCount = parseInt((presenter.$wrapper.width() - (arrowsCount * elementBaseWidth)) / elementBaseWidth, 10) - 4;&#13;
        var pageCount;&#13;
        if(presenter.configuration.firstPageAsCover){&#13;
            pageCount = presenter.pageCount-1;&#13;
        }else{&#13;
            pageCount = presenter.pageCount;&#13;
        }&#13;
        var numberOfElements = pageCount &lt; maxElementCount ? pageCount + arrowsCount : maxElementCount + arrowsCount;&#13;
        var elementWidth = parseInt(presenter.$wrapper.width() / numberOfElements  - elementDistances.horizontal, 10);&#13;
        var elementHeight = parseInt(presenter.$wrapper.height() - elementDistances.vertical, 10);&#13;
        var horizontalGap = presenter.$wrapper.width() - (elementWidth + elementDistances.horizontal) * numberOfElements;&#13;
&#13;
        removeAllElements();&#13;
&#13;
        generateElements(elementWidth, elementHeight, false, isPreview, horizontalGap);&#13;
        if(model['Styles']) {&#13;
            presenter.setPageStyles();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
        presenter.isCurrentPageOk();&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.isCurrentPageOk();&#13;
    };&#13;
&#13;
    presenter.getPercentageScore = function (pageIndex) {&#13;
        var id = presenter.presentation.getPage(pageIndex).getId();&#13;
        var pageScore = presenter.scoreService.getPageScoreById(id);&#13;
&#13;
        return (pageScore.score/pageScore.maxScore) * 100;&#13;
    };&#13;
&#13;
    presenter.isCurrentPageOk = function () {&#13;
        if(presenter.presentation.getPage(presenter.currentIndex).isReportable()){&#13;
            var percentageScore = presenter.getPercentageScore(presenter.currentIndex);&#13;
            var $page = presenter.$wrapper.find("[data-page-number='" + (presenter.currentIndex + 1) + "']");&#13;
            var id = presenter.presentation.getPage(presenter.currentIndex).getId();&#13;
            var pageScore = presenter.scoreService.getPageScoreById(id);&#13;
&#13;
            if((percentageScore == 100 &amp;&amp; pageScore.errorCount == 0) || isNaN(percentageScore)){&#13;
                $page.addClass("navigationbar-page-ok");&#13;
                presenter.pagesOk.push(presenter.currentIndex + 1);&#13;
            }&#13;
&#13;
            if(percentageScore &lt; 100 || pageScore.errorCount &gt; 0){&#13;
                $page.removeClass("navigationbar-page-ok");&#13;
                for(var k = presenter.pagesOk.length - 1; k &gt;= 0; k--) {&#13;
                    if(presenter.pagesOk[k] === (presenter.currentIndex + 1)) {&#13;
                        presenter.pagesOk.splice(k, 1);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isPageOK = function () {&#13;
      for (var i=0; i&lt;presenter.pageCount; i++){&#13;
          if(presenter.presentation.getPage(i).isReportable() &amp;&amp; presenter.presentation.getPage(i).isVisited()){&#13;
              var percentageScore = presenter.getPercentageScore(i);&#13;
              var id = presenter.presentation.getPage(i).getId();&#13;
              var pageScore = presenter.scoreService.getPageScoreById(id);&#13;
&#13;
              if(isNaN(percentageScore)){&#13;
                  percentageScore = 100;&#13;
              }&#13;
&#13;
              if(percentageScore == 100 &amp;&amp; pageScore.errorCount == 0){&#13;
                  presenter.$wrapper.find("[data-page-number='" + (i+1) + "']").addClass("navigationbar-page-ok");&#13;
              }&#13;
          }&#13;
      }&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
&#13;
        presenterLogic(view, model, false);&#13;
&#13;
        presenter.pageLoaded.then(function() {&#13;
            presenter.isPageOK();&#13;
        });&#13;
    };&#13;
    &#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.currentIndex = presenter.playerController.getCurrentPageIndex();&#13;
            presenter.pageIndex = presenter.currentIndex;&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
        if (eventName == "ValueChanged" &amp;&amp; presenter.configuration.addClassNBPageOK &amp;&amp; !presenter.isShowAnswersActive) {&#13;
            presenter.currentIndex = presenter.pageIndex;&#13;
            presenter.isCurrentPageOk();&#13;
        }&#13;
        if(eventData.value == "resetClicked"){&#13;
            presenter.currentIndex = presenter.pageIndex;&#13;
            presenter.isCurrentPageOk();&#13;
        }&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Next" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property isLocalized="true" name="Text" nameLabel="Next_property_text" type="string"/>
	</model>
<css>.next-wrapper,&#13;
.next-wrapper .next-container,&#13;
.next-wrapper .next-container .next-button {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.next-wrapper .next-container .next-button {&#13;
    background: url('resources/next-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.next-wrapper.disabled .next-container .next-button {&#13;
    cursor: not-allowed;&#13;
    background: url('resources/next-button-disabled.png') no-repeat center;&#13;
}&#13;
</css><view>&lt;div class="next-wrapper"&gt;&#13;
    &lt;div class="next-container"&gt;&#13;
        &lt;div class="next-button"&gt;&#13;
&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="next-wrapper"&gt;&#13;
    &lt;div class="next-container"&gt;&#13;
        &lt;div class="next-button"&gt;&#13;
&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonNext_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.wasSubmitted = false;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
        presenter.eventBus.addEventListener('Submitted', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        } else if (eventName == 'Submitted') {&#13;
            presenter.pageSubmittedDeferred.resolve();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function (additionalEventData) {&#13;
        var eventData = { 'source': presenter.configuration.addonID };&#13;
        for (var key in additionalEventData) {&#13;
            eventData[key] = additionalEventData[key];&#13;
        }&#13;
        return eventData;&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(eventName, eventData) {&#13;
        presenter.eventBus.sendEvent(eventName, eventData);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model, isPreview) {&#13;
        var buttonText = model['Text'];&#13;
&#13;
        return {&#13;
            'buttonText' : buttonText,&#13;
            'addonID' : model['ID']&#13;
        }&#13;
    };&#13;
&#13;
    function getAllOfTheModulesThatImplementIsAttempted() {&#13;
        var pageIndex = presenter.playerController.getCurrentPageIndex(),&#13;
            ids = presenter.playerController.getPresentation().getPage(pageIndex).getModulesAsJS(),&#13;
            modules = [];&#13;
&#13;
        $.each(ids, function() {&#13;
            var id = this.toString(),&#13;
                currentModule = presenter.playerController.getModule(id);&#13;
&#13;
            if (currentModule &amp;&amp; currentModule.isAttempted !== undefined) {&#13;
                modules.push(currentModule);&#13;
            }&#13;
&#13;
        });&#13;
&#13;
        return modules;&#13;
    }&#13;
&#13;
    function areAllModulesAttempted() {&#13;
        var areAllAttempted = true;&#13;
&#13;
        $.each(presenter.modulesOnPage, function() {&#13;
            if (!this.isAttempted()) {&#13;
                areAllAttempted = false;&#13;
                return false; // break;&#13;
            }&#13;
        });&#13;
&#13;
        return areAllAttempted;&#13;
    }&#13;
&#13;
    presenter.goToNextPage = function() {&#13;
        var pageIndex = presenter.playerController.getCurrentPageIndex();&#13;
        if (pageIndex + 1 &lt; presenter.playerController.getPresentation().getPageCount()) {&#13;
            presenter.playerController.getCommands().gotoPageIndex(pageIndex + 1);&#13;
        }&#13;
    };&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
        presenter.pageSubmittedDeferred = new $.Deferred();&#13;
        presenter.pageSubmitted = presenter.pageSubmittedDeferred.promise();&#13;
        presenter.runEndedDeferred = new $.Deferred();&#13;
        presenter.runEnded = presenter.runEndedDeferred.promise();&#13;
&#13;
        presenter.configuration = presenter.validateModel(model, isPreview);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.submitButton = presenter.$view.find('.next-button');&#13;
        presenter.submitButton.html(presenter.configuration.buttonText);&#13;
        presenter.nextWrapper = presenter.$view.find('.next-wrapper');&#13;
        presenter.nextWrapper.addClass('disabled');&#13;
&#13;
        presenter.pageSubmitted.then(function() {&#13;
            presenter.nextWrapper.removeClass('disabled');&#13;
        });&#13;
&#13;
        presenter.pageLoaded.then(function() {&#13;
&#13;
            presenter.modulesOnPage = getAllOfTheModulesThatImplementIsAttempted();&#13;
&#13;
            presenter.submitButton.click(function(e) {&#13;
                e.stopPropagation();&#13;
&#13;
                if (presenter.nextWrapper.hasClass('disabled')) {&#13;
&#13;
                    if (areAllModulesAttempted()) {&#13;
&#13;
                        presenter.sendEvent('AllAttempted', presenter.createEventData());&#13;
&#13;
                    } else {&#13;
&#13;
                        presenter.sendEvent('NotAllAttempted', presenter.createEventData());&#13;
&#13;
                    }&#13;
&#13;
                } else {&#13;
&#13;
                    presenter.wasSubmitted = true;&#13;
                    presenter.goToNextPage();&#13;
&#13;
                }&#13;
&#13;
            });&#13;
&#13;
            presenter.runEndedDeferred.resolve();&#13;
        });&#13;
&#13;
    }&#13;
&#13;
    presenter.run = function(view, model){&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function(){&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        return JSON.stringify({&#13;
            'wasSubmitted' : presenter.wasSubmitted&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
        var parsed = JSON.parse(state);&#13;
&#13;
        presenter.wasSubmitted = parsed.wasSubmitted;&#13;
&#13;
        presenter.runEnded.then(function() {&#13;
            if (parsed.wasSubmitted) {&#13;
                presenter.nextWrapper.removeClass('disabled');&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Page_Counter" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Numericals" nameLabel="Page_Counter_property_numericals" type="{Western Arabic,Eastern Arabic,Perso-Arabic}"/>
		<property name="startFrom" nameLabel="Page_Counter_property_start_from" type="string"/>
		<property name="omittedPagesTexts" nameLabel="Page_Counter_property_omitted_pages_texts" type="list">
			<property name="pages" nameLabel="Page_Counter_property_pages" type="string"/>
			<property name="text" nameLabel="Page_Counter_property_text" type="string"/>
		</property>
	</model>
<css>.pagecounter {&#13;
    text-align: center;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    border: 0px solid black;&#13;
    padding: 1px;&#13;
    color: #7C818E;&#13;
    font-family: Georgia;&#13;
    font-size: 25px;&#13;
    direction: inherit;&#13;
}&#13;
</css><view>&lt;div class="pagecounter"&gt;&#13;
    &lt;!-- Here goes current page index / page count --&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="pagecounter"&gt;&#13;
    &lt;!-- Here goes current page index / page count --&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonPage_Counter_create() {&#13;
    var presenter = function() { };&#13;
    var presentationController;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
            "L_01": "No language selected, have to be selected proper language in Numericals property",&#13;
            'ST_01': "Start from property have to be a positive integer.",&#13;
            "OPT_01": "Omitted pages texts have to be comma separated positive integers, greater than 0.",&#13;
            "OPT_02": "Omitted pages texts property can define only one text for one page.",&#13;
            "OPT_03": "Omitted pages texts property page number can't be greater than Start From property.",&#13;
            "OPT_04": "Omitted pages texts needs pages filled, not only texts",&#13;
            "OPT_05": "Omitted pages texts needs text filled, not only pages"&#13;
        };&#13;
    &#13;
    presenter.isPositiveInt = function (value) {&#13;
        if (value.trim() == "0") {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(value.trim()) == true) {&#13;
            return false;&#13;
        }&#13;
&#13;
    	var exp = /[0-9]/;&#13;
    	for(var i = 0 ; i &lt; value.length; i++) {&#13;
    		var character = value.charAt(i);&#13;
    		if(!exp.test(character)) {&#13;
    			return false;&#13;
    		}&#13;
    	}&#13;
    	return true;&#13;
    };&#13;
    &#13;
    presenter.validateLanguage = function (model) {&#13;
    	if (model.Numericals == 'Eastern Arabic') {&#13;
    		return {isValid: true, value: Internationalization.EASTERN_ARABIC};&#13;
    	}&#13;
&#13;
        else if (model.Numericals == 'Perso-Arabic') {&#13;
    		return {isValid: true, value: Internationalization.PERSO_ARABIC};&#13;
    	}&#13;
&#13;
        return {isValid: true, value: Internationalization.WESTERN_ARABIC};&#13;
    };&#13;
&#13;
    function render(view, language, pageIndex, pageCount) {&#13;
        if (pageIndex &gt;= 0) {&#13;
            var viewContainer = $(view);&#13;
            var element = viewContainer.find(".pagecounter:first")[0];&#13;
            DOMOperationsUtils.setReducedSize(view, element);&#13;
&#13;
            var addonText = Internationalization.translate((pageIndex + 1), language) + ' / ' + Internationalization.translate(pageCount, language);&#13;
&#13;
            // This asures us that text will be center vertically&#13;
            $(element).css('line-height', $(element).height() + 'px');&#13;
            $(element).html(addonText);&#13;
        }&#13;
    }&#13;
&#13;
    function renderText(view, text) {&#13;
    	var viewContainer = $(view);&#13;
        var element = viewContainer.find(".pagecounter:first")[0];&#13;
        DOMOperationsUtils.setReducedSize(view, element);&#13;
&#13;
        // This asures us that text will be center vertically&#13;
        $(element).css('line-height', $(element).height() + 'px');&#13;
        $(element).html(text);&#13;
    }&#13;
&#13;
&#13;
    presenter.validateStartFrom = function (startFrom) {&#13;
        if (ModelValidationUtils.isStringEmpty(startFrom)) {&#13;
            return { isValid: true, value: undefined};&#13;
        }&#13;
&#13;
        if (!presenter.isPositiveInt(startFrom)) {&#13;
            return { isValid: false, errorCode: "ST_01"};&#13;
        }&#13;
&#13;
        return {isValid: true, value: (parseInt(startFrom, 10) - 1)};&#13;
    };&#13;
&#13;
    function parsePages(omittedPagesTextsObject) {&#13;
    	var pages = omittedPagesTextsObject.pages;&#13;
        var text = omittedPagesTextsObject.text;&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(pages) &amp;&amp; !ModelValidationUtils.isStringEmpty(text)) {&#13;
            return {isValid: false, errorCode: "OPT_04"};&#13;
        } else {&#13;
            if (ModelValidationUtils.isStringEmpty(text) &amp;&amp; !ModelValidationUtils.isStringEmpty(pages)) {&#13;
                return {isValid: false, errorCode: "OPT_05"};&#13;
            }&#13;
        }&#13;
&#13;
    	pages = pages.split(",");&#13;
&#13;
    	var parsedPages = [];&#13;
    	for(var page = 0; page &lt; pages.length; page++) {&#13;
    		var number = pages[page].trim();&#13;
&#13;
            if(!presenter.isPositiveInt(number)) {&#13;
                return {isValid: false, errorCode: "OPT_01"};&#13;
            }&#13;
&#13;
    		parsedPages.push((parseInt(number, 10) - 1));&#13;
    	}&#13;
    	&#13;
    	return {isValid: true, value: parsedPages};&#13;
    }&#13;
&#13;
    presenter.validateOmittedPagesTexts = function (model, validatedStartFrom) {&#13;
        var omittedPagesTexts = model.omittedPagesTexts;&#13;
&#13;
        if (omittedPagesTexts.length == 1 &amp;&amp;&#13;
            ModelValidationUtils.isStringEmpty(omittedPagesTexts[0].pages) &amp;&amp;&#13;
            ModelValidationUtils.isStringEmpty(omittedPagesTexts[0].text)) {&#13;
&#13;
            return {isValid: true, value: {}};&#13;
        }&#13;
&#13;
    	var parsedOPT = {};&#13;
    	&#13;
    	for(var i = 0; i &lt; (omittedPagesTexts).length; i++) {&#13;
    		var parsedPages = parsePages(omittedPagesTexts[i]);&#13;
    		if(!parsedPages.isValid) {&#13;
    			return parsedPages;&#13;
    		}&#13;
    		&#13;
    		for(var page = 0; page &lt; parsedPages.value.length; page++) {&#13;
    			if(parsedOPT[parsedPages.value[page]] != undefined) {&#13;
    				return {isValid: false, errorCode: "OPT_02"};&#13;
    			}&#13;
&#13;
&#13;
    			if(parsedPages.value[page] &gt;= validatedStartFrom) {&#13;
    				return {isValid: false, errorCode: "OPT_03"};&#13;
    			}&#13;
    			&#13;
    			parsedOPT[parsedPages.value[page]] = omittedPagesTexts[i].text;&#13;
    		}&#13;
    		&#13;
		}&#13;
    	&#13;
    	return {isValid: true, value: parsedOPT};&#13;
    };&#13;
    &#13;
    presenter.validateModel = function(model) {&#13;
    	var validatedStartFrom = presenter.validateStartFrom(model.startFrom);&#13;
    	if (!validatedStartFrom.isValid) {&#13;
    		return validatedStartFrom;&#13;
    	}&#13;
&#13;
    	var validatedOmittedPagesTexts = presenter.validateOmittedPagesTexts(model, validatedStartFrom.value);&#13;
    	if (!validatedOmittedPagesTexts.isValid) {&#13;
    		return validatedOmittedPagesTexts;&#13;
    	}&#13;
&#13;
        return {&#13;
    		isValid: true,&#13;
    		ID: model.ID,&#13;
    		startFrom: validatedStartFrom.value,&#13;
    		omittedPagesTexts: validatedOmittedPagesTexts.value,&#13;
            Numericals: presenter.validateLanguage(model).value&#13;
    	};&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeStartFromAndOPT(model);&#13;
    };&#13;
&#13;
    presenter.upgradeStartFromAndOPT = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model.startFrom == undefined) {&#13;
            upgradedModel["startFrom"] = "";&#13;
        }&#13;
&#13;
        if(model.omittedPagesTexts == undefined) {&#13;
            upgradedModel["omittedPagesTexts"] = [{"pages": "", "text": ""}];&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
    &#13;
    function presenterLogic(view, model, isPreview) {&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
    	var validatedModel = presenter.validateModel(upgradedModel);&#13;
    	&#13;
    	if (!validatedModel.isValid) {&#13;
    		DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, validatedModel.errorCode);&#13;
            return;&#13;
    	}&#13;
&#13;
        var language = validatedModel.Numericals;&#13;
&#13;
    	if (isPreview) {&#13;
            render(view, language, 0, 5);&#13;
    	} else {&#13;
        	var currentPageIndex = presentationController.getCurrentPageIndex();&#13;
    		var pageCount = presentationController.getPresentation().getPageCount();&#13;
&#13;
            if (validatedModel.startFrom) {&#13;
                var modifiedPageIndex = currentPageIndex - validatedModel.startFrom;&#13;
                pageCount = pageCount - validatedModel.startFrom;&#13;
&#13;
                if (validatedModel.omittedPagesTexts[currentPageIndex]) {&#13;
                    renderText(view, validatedModel.omittedPagesTexts[currentPageIndex]);&#13;
                } else{&#13;
                    render(view, language, modifiedPageIndex, pageCount);&#13;
                }&#13;
&#13;
            } else {&#13;
                render(view, language, currentPageIndex, pageCount);&#13;
            }&#13;
    	}&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presentationController = controller;&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
    	presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon id="Page_Name">
	<model>
	</model>
<css>.pagename {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    border: 0;&#13;
    padding: 1px;&#13;
    color: #7C818E;&#13;
    font-size: 25px;&#13;
    direction: inherit;&#13;
}&#13;
</css><view>&lt;div class="pagename"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="pagename"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonPage_Name_create() {&#13;
    var presenter = function () {};&#13;
    var presentationController;&#13;
&#13;
    function presenterLogic(view, name) {&#13;
        var nameElement = $(view).find('.pagename')[0];&#13;
&#13;
        $(nameElement).text(name);&#13;
    }&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenterLogic(view, "Page Name");&#13;
    };&#13;
&#13;
    presenter.getPageName = function () {&#13;
        var presentation = presentationController.getPresentation();&#13;
        var currentPage = presentationController.getCurrentPageIndex();&#13;
&#13;
        return presentation.getPage(currentPage).getName();&#13;
    };&#13;
&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        var pageName = this.getPageName();&#13;
&#13;
        presenterLogic(view, pageName);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presentationController = controller;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Page_Rating" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Title Text" nameLabel="Page_Rating_property_title_text" type="string"/>
		<property name="Comment Text" nameLabel="Page_Rating_property_comment_text" type="string"/>
		<property name="Rates" nameLabel="Page_Rating_property_rates" type="list">
            <property name="Deselected" nameLabel="Page_Rating_property_deselected" type="image"/>
		    <property name="Selected" nameLabel="Page_Rating_property_selected" type="image"/>
		</property>
        <property isLocalized="true" name="Close button visible" nameLabel="Page_Rating_property_close_button_visible" type="boolean"/>
	</model>
<css>.page-rating-wrapper {&#13;
	border-style: solid;&#13;
	border-color: black;&#13;
    background-color: #ffffff;&#13;
	height: 100%;&#13;
	width: 100%;&#13;
}&#13;
&#13;
.page-rating-comment &gt; [data-name="textarea"] {&#13;
    width: 65%;&#13;
	border: 2px solid #bfbab5;&#13;
	border-radius: 10px;&#13;
    padding: 3px;&#13;
	height: 60px;&#13;
	overflow: hidden;&#13;
    resize: none;&#13;
    float: left;&#13;
    margin-left: 10px;&#13;
    margin-bottom: 10px;&#13;
}&#13;
&#13;
.page-rating-comment &gt; [data-name="textarea"]:focus {&#13;
	border-color:#333; &#13;
}&#13;
&#13;
.page-rating-comment{&#13;
    display: block;&#13;
	position: absolute;&#13;
	text-align: center;&#13;
	padding-top: 10px;&#13;
	bottom: 0;&#13;
	background-color: #f2f1d5;&#13;
	width: 100%;&#13;
}&#13;
&#13;
.page-rating-comment &gt; p {&#13;
    padding-bottom: 3px;&#13;
    position: relative;&#13;
    text-align: left;&#13;
    margin-left: 15px;&#13;
}&#13;
&#13;
.page-rating-rates &gt; img {&#13;
	height: 80px;&#13;
	width: 80px;&#13;
    margin: 2px;&#13;
    border-radius: 5px;&#13;
}&#13;
&#13;
.page-rating-rates {&#13;
	text-align: center;&#13;
	bottom: 10px;&#13;
    padding: 3px;&#13;
}&#13;
&#13;
.page-rating-title {&#13;
	background-color: #e1f2d5;&#13;
    padding-bottom: 3px;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.page-rating-comment &gt; .page-rating-submit-button {&#13;
    display: block;&#13;
    padding: 10px 15px;&#13;
    float: right;&#13;
    background: #4479BA;&#13;
    color: #FFF;&#13;
    margin-top: 28px;&#13;
    margin-right: 10px;&#13;
    margin-left: 10px;&#13;
    margin-bottom: 10px;&#13;
    border-radius: 4px;&#13;
    border: solid 1px #20538D;&#13;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.4);&#13;
    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.4), 0 1px&#13;
}&#13;
&#13;
.page-rating-comment &gt; .page-rating-submit-button:disabled {&#13;
    background-color: grey;&#13;
}&#13;
&#13;
.page-rating-comment &gt; button:hover{&#13;
    background: #356094;&#13;
    border: solid 1px #2A4E77;&#13;
    text-decoration: none;&#13;
}&#13;
&#13;
.page-rating-wrapper &gt; .page-rating-close-button {&#13;
    float: right;&#13;
    background: #4479BA;&#13;
    color: #FFF;&#13;
    margin-top: 2px;&#13;
    margin-right: 2px;&#13;
    border-radius: 4px;&#13;
    border: solid 1px #20538D;&#13;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.4);&#13;
    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.4), 0 1px&#13;
}&#13;
</css><view>&lt;div class="page-rating-wrapper"&gt;&#13;
    &lt;div class="page-rating-title"&gt;&lt;/div&gt;&#13;
    &lt;div class="page-rating-rates"&gt;&lt;/div&gt;&#13;
    &lt;div class="page-rating-comment"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="page-rating-wrapper"&gt;&#13;
    &lt;div class="page-rating-title"&gt;&lt;/div&gt;&#13;
    &lt;div class="page-rating-rates"&gt;&lt;/div&gt;&#13;
    &lt;div class="page-rating-comment"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonPage_Rating_create() {&#13;
    var presenter = function () { };&#13;
    var eventBus;&#13;
    var selected_img = [],&#13;
    	deselected_img = [];&#13;
    &#13;
    presenter.currentRate = 0;&#13;
    presenter.playerController = null;&#13;
	presenter.isElementSelected = null;&#13;
	presenter.isModelError = false;&#13;
    presenter.addonID = null;&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
	&#13;
    presenter.ERROR_CODES = {&#13;
        'E_01': "You have to add at least 2 rates.",&#13;
        'E_02': "You did not add Selected or/and Deselected image for at least one rate."&#13;
    };&#13;
    &#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    presenter.sanitizeModel = function (model)  {&#13;
        if(model.Rates.length &lt;2){&#13;
            return returnErrorObject('E_01');&#13;
        }&#13;
&#13;
    	for (var model_img=0; model_img &lt; model.Rates.length; model_img++){&#13;
    		selected_img[model_img] = model.Rates[model_img].Selected;&#13;
			deselected_img[model_img] = model.Rates[model_img].Deselected;&#13;
    	}&#13;
        if(model.Rates.length &gt; 1) {&#13;
            for (var img = 0; img &lt; model.Rates.length; img++) {&#13;
                if (!model.Rates[img].Selected || !model.Rates[img].Deselected) {&#13;
                    return returnErrorObject('E_02');&#13;
                }&#13;
            }&#13;
        }&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        var buttonCloseVisible = ModelValidationUtils.validateBoolean(model['Close button visible']);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            rates: {&#13;
                selected: selected_img,&#13;
                deselected: deselected_img&#13;
            },&#13;
            length: model.Rates.length,&#13;
            title: model['Title Text'],&#13;
            comment: model['Comment Text'],&#13;
            isVisible: isVisible,&#13;
            closeButtonVisible: buttonCloseVisible&#13;
        }&#13;
    };&#13;
&#13;
    function submitEventHandler (e) {&#13;
        e.stopPropagation();&#13;
        presenter.hide();&#13;
    }&#13;
&#13;
    presenter.createRatingEventData = function (data) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : data.index,&#13;
            value : data.selected ? "1" : "0"&#13;
        };&#13;
    };&#13;
    &#13;
    function clickEventHandler (e) {&#13;
        e.stopPropagation();&#13;
&#13;
    	var $image = $(this),&#13;
            index = parseInt($image.data('index'), 10),&#13;
    		eventData = presenter.createRatingEventData({'index' : index+1, 'selected' : $image.attr("name") === "deselected"});&#13;
    	&#13;
    	if($image.attr("name") === "deselected") {&#13;
    		presenter.currentRate = index+1;&#13;
    	} else {&#13;
    		presenter.currentRate = 0;&#13;
    	}&#13;
    	eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
    	if( $image.attr("name") === "deselected" ) {&#13;
        	if(presenter.isElementSelected !== null) {&#13;
                var $selectedImage = presenter.$view.find('img[data-index="'+ presenter.isElementSelected +'"]');&#13;
&#13;
                $selectedImage.attr({&#13;
                    'src': deselected_img[presenter.isElementSelected],&#13;
                    'name': "deselected"&#13;
                });&#13;
            }&#13;
              presenter.setSelectedImage(index);&#13;
        } else {&#13;
        	if(presenter.isElementSelected === index) {&#13;
                $image.attr({&#13;
                    "src": deselected_img[index],&#13;
                    "name": "deselected"&#13;
                });&#13;
&#13;
                presenter.isElementSelected = null;&#13;
                presenter.$view.find('.page-rating-submit-button').attr('disabled','disabled');&#13;
        	}&#13;
        }&#13;
        &#13;
    }&#13;
    &#13;
    function updateTitle (view, title) {&#13;
    	if(title){&#13;
        	$(view).find('.page-rating-title').html(title);&#13;
        }&#13;
    }&#13;
    &#13;
    function updateComment(view, comment, isPreview){&#13;
        $(view).find('.page-rating-comment').prepend('&lt;p class="CommentText"&gt;&lt;/p&gt;');&#13;
        $(view).find('.CommentText').html(comment);&#13;
        $(view).find('.page-rating-comment').append('&lt;textarea&gt;&lt;/textarea&gt;');&#13;
        $(view).find('textarea').attr('data-name', 'textarea');&#13;
        $(view).find('.page-rating-comment').append('&lt;button type="button" class="page-rating-submit-button"&gt;Submit&lt;/button&gt;');&#13;
        $(view).find('.page-rating-submit-button').attr('disabled','disabled');&#13;
&#13;
        if(!isPreview) {&#13;
            $(view).find(".page-rating-submit-button").live("click", submitEventHandler);&#13;
        }&#13;
    }&#13;
    &#13;
    function updateRates(view, rates, length,isPreview){&#13;
        if(rates){&#13;
            for (var i=0; i&lt;length; i++){&#13;
                var $image = $(document.createElement('img'));&#13;
&#13;
                $image.attr({&#13;
                    'src': deselected_img[i],&#13;
                    'name': "deselected",&#13;
                    'data-index': i&#13;
                });&#13;
&#13;
                $(view).find('.page-rating-rates').append($image);&#13;
            }&#13;
            if(!isPreview){&#13;
                $(view).find("img").live("click", clickEventHandler);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.updateView = function (isPreview){&#13;
        if(presenter.configuration.closeButtonVisible){&#13;
            presenter.$view.find('.page-rating-wrapper').prepend('&lt;button type="button" class="page-rating-close-button"&gt;Close&lt;/button&gt;');&#13;
            presenter.$view.find(".page-rating-close-button").live("click", submitEventHandler);&#13;
        }&#13;
        updateTitle(presenter.$view, presenter.configuration.title);&#13;
        updateRates(presenter.$view, presenter.configuration.rates, presenter.configuration.length, isPreview);&#13;
        updateComment(presenter.$view, presenter.configuration.comment, isPreview);&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
    	presenter.$view = $(view);&#13;
    	presenter.configuration = presenter.sanitizeModel(model);&#13;
&#13;
        if(presenter.configuration.isError){&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.updateView(isPreview);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        presenter.presenterLogic(view, model, false);&#13;
        presenter.addonID = model.ID;&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setSelectedImage = function(index){&#13;
        var $img_RateIndex = presenter.$view.find('img[data-index="'+ index +'"]');&#13;
        $img_RateIndex.attr({&#13;
            'src': selected_img[index],&#13;
            'name': 'selected'&#13;
        });&#13;
&#13;
        presenter.isElementSelected = index;&#13;
&#13;
        if(index == null){&#13;
            presenter.$view.find('.page-rating-submit-button').attr('disabled', 'disabled');&#13;
        }else {&#13;
            presenter.$view.find('.page-rating-submit-button').removeAttr('disabled');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setCommentValue = function(comment){&#13;
        presenter.$view.find('textarea[data-name="textarea"]').text(comment);&#13;
    };&#13;
&#13;
    presenter.getCommentValue = function(){&#13;
        return presenter.$view.find('textarea[data-name="textarea"]').val();&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if (presenter.configuration.isError) {&#13;
            return "";&#13;
        }&#13;
&#13;
    	return JSON.stringify({&#13;
    		commentValue: presenter.getCommentValue(),&#13;
    		isVisible: presenter.configuration.isVisible,&#13;
    		selectedItem: presenter.isElementSelected,&#13;
    		currentRate: presenter.currentRate&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) return;&#13;
&#13;
    	var parsedState = JSON.parse(state),&#13;
            selectedItem = parsedState.selectedItem,&#13;
            currentRate = parsedState.currentRate;&#13;
            &#13;
    		&#13;
        presenter.setCommentValue(parsedState.commentValue);&#13;
        presenter.setSelectedImage(selectedItem);&#13;
        presenter.currentRate = currentRate ? currentRate : "0";&#13;
    	presenter.configuration.isVisible = parsedState.isVisible;&#13;
    	presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
    &#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'getRate': presenter.getRate&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
    &#13;
    presenter.getRate = function() {&#13;
		return presenter.currentRate;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.isElementSelected = null;&#13;
        var $img = presenter.$view.find("img[name='selected']"),&#13;
            index = parseInt($img.data('index'), 10);&#13;
&#13;
        $img.attr({&#13;
            "src": deselected_img[index],&#13;
            "name": "deselected"&#13;
        });&#13;
&#13;
        presenter.$view.find('textarea[data-name="textarea"]').val("");&#13;
        presenter.$view.find('.page-rating-submit-button').attr('disabled','disabled');&#13;
    };&#13;
        &#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Page_Score_Counter" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
<model>
    <property displayName="Display Mode" name="DisplayMode" nameLabel="Page_Score_Counter_property_display_mode" type="{Fraction (Score/Max Score),Score,Max Score}"/>
</model>
<css>.addon_Page_Score_Counter {&#13;
    color: green;&#13;
}&#13;
&#13;
.page-score-counter-wrapper &gt; div.hidden {&#13;
    display: none;&#13;
}&#13;
&#13;
.page-score-counter-wrapper &gt; div {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.page-score-counter-wrapper .fraction &gt; div {&#13;
    text-align: left;&#13;
    display: inline-block;&#13;
}&#13;
</css><view>&lt;div class="page-score-counter-wrapper"&gt;&#13;
    &lt;div class="fraction"&gt;&#13;
        &lt;div class="score"&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="separator"&gt;&#13;
            /&#13;
        &lt;/div&gt;&#13;
        &lt;div class="max-score"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="score hidden"&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="max-score hidden"&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="page-score-counter-wrapper"&gt;&#13;
    &lt;div class="fraction hidden"&gt;&#13;
        &lt;div class="score"&gt;&#13;
            6&#13;
        &lt;/div&gt;&#13;
        &lt;div class="separator"&gt;&#13;
            /&#13;
        &lt;/div&gt;&#13;
        &lt;div class="max-score"&gt;&#13;
            13&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="score hidden"&gt;&#13;
        6&#13;
    &lt;/div&gt;&#13;
    &lt;div class="max-score hidden"&gt;&#13;
        13&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonPage_Score_Counter_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.isVisible = true;&#13;
    presenter.isScoreVisible = false;&#13;
    presenter.currentScore = 0;&#13;
    presenter.maxScore = 0;&#13;
&#13;
    presenter.DISPLAY_MODE = {&#13;
        FRACTION: 1,&#13;
        SCORE: 2,&#13;
        MAX_SCORE: 3&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
&#13;
        var presentation = presenter.playerController.getPresentation();&#13;
        presenter.page = presentation.getPage(presenter.playerController.getCurrentPageIndex());&#13;
    };&#13;
&#13;
    presenter.createEventData = function (score) {&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'pageScore',&#13;
            'value' : '',&#13;
            'score': score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(eventName, eventData) {&#13;
        presenter.eventBus.sendEvent(eventName, eventData);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        return {&#13;
            'isVisible' : ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            'addonID' : model['ID'],&#13;
            'displayMode' : getDisplayMode(model['DisplayMode'])&#13;
        }&#13;
    };&#13;
&#13;
    function getDisplayMode(rawDisplayMode) {&#13;
        if (rawDisplayMode == 'Fraction (Score/Max Score)' || rawDisplayMode == '') { // when dropdown hasn't been changed it gives you empty string&#13;
            return presenter.DISPLAY_MODE.FRACTION;&#13;
        } else if (rawDisplayMode == 'Score'){&#13;
            return presenter.DISPLAY_MODE.SCORE;&#13;
        } else if (rawDisplayMode == 'Max Score') {&#13;
            return presenter.DISPLAY_MODE.MAX_SCORE;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.attachEventHandler = function () {&#13;
        if (presenter.page.isReportable()) {&#13;
            presenter.eventBus.addEventListener('ValueChanged', this);&#13;
            presenter.eventBus.addEventListener('PageLoaded', this);&#13;
        }&#13;
    };&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        presenter.isPreview = isPreview;&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        presenter.$fractionWrapper = presenter.$view.find('.page-score-counter-wrapper &gt; .fraction');&#13;
        presenter.$scoreWrapper = presenter.$view.find('.page-score-counter-wrapper &gt; .score');&#13;
        presenter.$maxScoreWrapper = presenter.$view.find('.page-score-counter-wrapper &gt; .max-score');&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.attachEventHandler();&#13;
        } else {&#13;
            toggleBoxesVisibility();&#13;
        }&#13;
    }&#13;
&#13;
    function toggleBoxesVisibility() {&#13;
        if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.FRACTION) {&#13;
            toggleBoxVisibility(presenter.$fractionWrapper);&#13;
        } else if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.SCORE) {&#13;
            toggleBoxVisibility(presenter.$scoreWrapper);&#13;
        } else if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.MAX_SCORE) {&#13;
            toggleBoxVisibility(presenter.$maxScoreWrapper);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName == "ValueChanged" &amp;&amp; eventData.source != presenter.configuration.addonID) {&#13;
            if(eventData.item != 'pageScore'){&#13;
                presenter.countScore();&#13;
                updateView();&#13;
                presenter.sendEvent('ValueChanged', presenter.createEventData(presenter.currentScore));&#13;
            }&#13;
        }&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.countScore();&#13;
            updateView();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.countScore = function () {&#13;
        var scoreService = presenter.playerController.getScore(),&#13;
            pageScore = scoreService.getPageScoreById(presenter.page.getId());&#13;
&#13;
        presenter.currentScore = pageScore.score;&#13;
        presenter.maxScore = pageScore.maxScore;&#13;
    };&#13;
&#13;
    function updateView() {&#13;
        if (!presenter.isScoreVisible) {&#13;
            toggleBoxesVisibility();&#13;
            presenter.isScoreVisible = true;&#13;
        }&#13;
&#13;
        presenter.$fractionWrapper.find('.score').html(presenter.currentScore);&#13;
        presenter.$fractionWrapper.find('.max-score').html(presenter.maxScore);&#13;
        presenter.$scoreWrapper.html(presenter.currentScore);&#13;
        presenter.$maxScoreWrapper.html(presenter.maxScore);&#13;
    }&#13;
&#13;
    function toggleBoxVisibility($element) {&#13;
        presenter.$view.find('.page-score-counter-wrapper &gt; div').addClass('hidden');&#13;
        $element.removeClass('hidden');&#13;
    }&#13;
&#13;
    presenter.run = function(view, model) {&#13;
       runLogic(view, model, false);&#13;
&#13;
        if(presenter.configuration.displayMode == presenter.DISPLAY_MODE.FRACTION){&#13;
            presenter.$fractionWrapper.find('.score').text('0');&#13;
            presenter.$fractionWrapper.find('.max-score').html('0');&#13;
        }&#13;
        if(presenter.configuration.displayMode == presenter.DISPLAY_MODE.SCORE){&#13;
            presenter.$scoreWrapper.text('0');&#13;
            presenter.$scoreWrapper.removeClass('hidden');&#13;
            presenter.$view.find('.separator').css('display', 'none');&#13;
        }&#13;
        if(presenter.configuration.displayMode == presenter.DISPLAY_MODE.MAX_SCORE){&#13;
            presenter.$maxScoreWrapper.text('0');&#13;
            presenter.$maxScoreWrapper.removeClass('hidden');&#13;
            presenter.$view.find('.separator').css('display', 'none');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.currentScore = 0;&#13;
        updateView();&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'getPageScore' : presenter.getPageScore,&#13;
            'getPageMaxScore' : presenter.getPageMaxScore&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getPageScore = function() {&#13;
        return presenter.currentScore;&#13;
    };&#13;
&#13;
    presenter.getPageMaxScore = function() {&#13;
        return presenter.maxScore;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            'isVisible' : presenter.isVisible,&#13;
            'isScoreVisible': presenter.isScoreVisible,&#13;
            'score' : presenter.currentScore,&#13;
            'maxScore' : presenter.maxScore&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (!state) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.currentScore = parsedState.score;&#13;
        presenter.maxScore = parsedState.maxScore;&#13;
&#13;
        if (parsedState.isScoreVisible) {&#13;
            updateView();&#13;
        }&#13;
&#13;
        presenter.setVisibility(parsedState.isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Paragraph" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Default font family" nameLabel="Paragraph_property_default_font_family" type="string"/>
		<property name="Default font size" nameLabel="Paragraph_property_default_font_size" type="string"/>
		<property name="Hide toolbar" nameLabel="Paragraph_property_hide_toolbar" type="boolean"/>
		<property name="Custom toolbar" nameLabel="Paragraph_property_custom_toolbar" type="string"/>
		<property name="Custom CSS" nameLabel="Paragraph_property_custom_css" type="file"/>
        <property name="Placeholder Text" nameLabel="Paragraph_property_placeholder_text" type="html"/>
        <property name="Layout Type" nameLabel="Paragraph_property_layout_type" type="{Default, French}"/>
	</model>
<css>div.paragraph-wrapper {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
	border: solid 1px #9E9E9E;&#13;
	border-radius: 2px;&#13;
    overflow-y: hidden;&#13;
    overflow-x: auto;&#13;
    -webkit-overflow-scrolling: touch;&#13;
}&#13;
&#13;
div.paragraph-wrapper textarea {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
}&#13;
</css><view>&lt;div class="paragraph-wrapper"&gt;&#13;
	&lt;form&gt;&#13;
		&lt;textarea class="paragraph_field"&gt;&lt;/textarea&gt;&#13;
	&lt;/form&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="paragraph-wrapper"&gt;&#13;
	&lt;form&gt;&#13;
		&lt;textarea class="paragraph_field"&gt;&lt;/textarea&gt;&#13;
	&lt;/form&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonParagraph_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.placeholder = null;&#13;
    presenter.editor = null;&#13;
    presenter.jQueryTinyMCEHTML = null;&#13;
    presenter.$tinyMCEToolbar = null;&#13;
    presenter.tinyMceContainer = null;&#13;
    presenter.editor = null;&#13;
    presenter.playerController = null;&#13;
    presenter.isVisibleValue = null;&#13;
&#13;
    presenter.LANGUAGES = {&#13;
        DEFAULT: "en_GB",&#13;
        FRENCH: "fr_FR"&#13;
    };&#13;
&#13;
    presenter.DEFAULTS = {&#13;
        TOOLBAR: 'bold italic underline numlist bullist alignleft aligncenter alignright alignjustify',&#13;
        FONT_FAMILY: 'Verdana,Arial,Helvetica,sans-serif',&#13;
        FONT_SIZE: '11px',&#13;
        BUTTON_WIDTH: 37,&#13;
        FORMAT_WIDTH: 85,&#13;
        STYLE_SELECT_NAME: "styleselect"&#13;
    };&#13;
&#13;
    presenter.ALLOWED_TOOLBAR_BUTTONS = 'customBold customUnderline customItalic newdocument bold italic underline strikethrough alignleft aligncenter '+&#13;
        'alignright alignjustify styleselect formatselect fontselect fontsizeselect '+&#13;
        'bullist numlist outdent indent blockquote undo redo '+&#13;
        'removeformat subscript superscript forecolor backcolor |'.split(' ');&#13;
&#13;
    presenter.executeCommand = function AddonParagraph_executeCommand(name, params) {&#13;
        if (!presenter.configuration.isValid) { return; }&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isVisible': presenter.isVisible&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
&#13;
    presenter.setVisibility = function AddonParagraph_setVisibility(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        if (isVisible) {&#13;
            presenter.$view.find(".paragraph-wrapper").show();&#13;
        } else {&#13;
            presenter.$view.find(".paragraph-wrapper").hide();&#13;
        }&#13;
&#13;
        presenter.isVisibleValue = isVisible;&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonParagraph_createPreview(view, model) {&#13;
        presenter.initializeEditor(view, model);&#13;
        var clickhandler = $("&lt;div&gt;&lt;/div&gt;").css({"background":"transparent", 'width': '100%', 'height': '100%', 'position':'absolute', 'top':0, 'left':0});&#13;
        presenter.$view.append(clickhandler);&#13;
    };&#13;
&#13;
    presenter.run = function AddonParagraph_run(view, model) {&#13;
        presenter.initializeEditor(view, model);&#13;
    };&#13;
&#13;
    presenter.initializeEditor = function AddonParagraph_initializeEditor(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.$view.on('click', function viewClickHandler(e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        });&#13;
&#13;
        presenter.$view.find('.paragraph-wrapper').attr('id', presenter.configuration.ID + '-wrapper');&#13;
&#13;
        presenter.placeholder = new presenter.placeholderElement();&#13;
        presenter.configuration.plugins = presenter.getPlugins();&#13;
        presenter.addPlugins();&#13;
&#13;
        tinymce.init(presenter.getTinymceInitConfiguration(presenter.getTinyMceSelector())).then(function (editors) {&#13;
            presenter.editor = editors[0];&#13;
            presenter.onInit();&#13;
&#13;
            var ua = window.navigator.userAgent,&#13;
                iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i),&#13;
                webkit = !!ua.match(/WebKit/i),&#13;
                iOSSafari = iOS &amp;&amp; webkit &amp;&amp; !ua.match(/CriOS/i);&#13;
&#13;
            if (iOSSafari) {&#13;
                presenter.findIframeAndSetStyles();&#13;
            }&#13;
        });&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.getTinyMceSelector = function AddonParagraph_getTinyMceSelector() {&#13;
        return '#' + presenter.configuration.ID + '-wrapper .paragraph_field';&#13;
    };&#13;
&#13;
    presenter.getTinymceInitConfiguration = function AddonParagraph_getTinyMceConfiguration(selector) {&#13;
        var layoutType = presenter.configuration.layoutType;&#13;
&#13;
        return {&#13;
            plugins: presenter.configuration.plugins,&#13;
            selector : selector,&#13;
            width: presenter.configuration.width,&#13;
            height: presenter.configuration.textAreaHeight,&#13;
            statusbar: false,&#13;
            menubar: false,&#13;
            toolbar: layoutType === "Default" ? presenter.configuration.toolbar : presenter.getSpecifyToolbar(layoutType),&#13;
            content_css: presenter.configuration.content_css,&#13;
            setup: presenter.setup,&#13;
            language: layoutType === "Default" ? presenter.LANGUAGES.DEFAULT : presenter.LANGUAGES.FRENCH&#13;
        };&#13;
    };&#13;
&#13;
     presenter.findIframeAndSetStyles = function AddonParagraph_findIframeAndSetStyles() {&#13;
        var iframe = presenter.$view.find(".paragraph-wrapper").find("iframe"),&#13;
            body = $(iframe).contents().find("#tinymce"),&#13;
            element = body.find("p");&#13;
&#13;
        element.css({&#13;
            'overflow-wrap': 'break-word',&#13;
            'word-wrap': 'break-word',&#13;
            '-ms-word-break': 'break-all',&#13;
            'word-break': 'break-word',&#13;
            '-ms-hyphen': 'auto',&#13;
            '-moz-hyphens': 'auto',&#13;
            '-webkit-hyphens': 'auto',&#13;
            'hyphens': 'auto'&#13;
        });&#13;
&#13;
        presenter.$view.find(".paragraph-wrapper").css("overflow", "scroll");&#13;
    };&#13;
&#13;
    presenter.validateToolbar = function AddonParagraph_validateToolbar(controls, width) {&#13;
        if (!controls) {&#13;
            controls = presenter.DEFAULTS.TOOLBAR;&#13;
        }&#13;
&#13;
        controls = controls.split(" ");&#13;
        if (controls.indexOf("|") != -1) {&#13;
            return presenter.parseToolbarWithGroups(controls, width);&#13;
        } else {&#13;
            return presenter.parseToolbarWithoutGroups(controls, width);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.parseToolbarWithGroups = function (controls, toolbarWidth) {&#13;
        var controlGroups = controls.join(" ").split("|");&#13;
        return controlGroups.filter(function (group) {&#13;
            return group.trim().length &gt; 0;&#13;
        }).map(function (group) {&#13;
            return presenter.parseToolbarWithoutGroups(group.trim().split(" "), toolbarWidth);&#13;
        }).join(" | ");&#13;
    };&#13;
&#13;
    presenter.parseToolbarWithoutGroups = function (controls, toolbarWidth) {&#13;
        var filteredControls = controls.filter(function(param){&#13;
            return presenter.ALLOWED_TOOLBAR_BUTTONS.indexOf(param) != -1;&#13;
        });&#13;
&#13;
        var result = "";&#13;
        var bufor = 0;&#13;
        var widthToAdd = 0;&#13;
        for(var i = 0; i &lt; filteredControls.length; i++) {&#13;
            if (filteredControls[i] !== presenter.DEFAULTS.STYLE_SELECT_NAME) {&#13;
                widthToAdd = presenter.DEFAULTS.BUTTON_WIDTH;&#13;
            } else {&#13;
                widthToAdd = presenter.DEFAULTS.FORMAT_WIDTH;&#13;
            }&#13;
&#13;
            if (bufor + widthToAdd &lt; toolbarWidth) {&#13;
                bufor += widthToAdd;&#13;
                result += filteredControls[i].trim() + " ";&#13;
            } else {&#13;
                bufor = widthToAdd;&#13;
                result += "| " + filteredControls[i].trim() + " ";&#13;
            }&#13;
        }&#13;
&#13;
        return result.trim();&#13;
    };&#13;
&#13;
    /**&#13;
     * Parses model and set settings to default values if either of them is empty&#13;
     *&#13;
     * @param model&#13;
     * @returns {{fontFamily: *, fontSize: *}}&#13;
     */&#13;
    presenter.validateModel = function AddonParagraph_validateModel(model) {&#13;
        var fontFamily = model['Default font family'],&#13;
            fontSize = model['Default font size'],&#13;
            isToolbarHidden = ModelValidationUtils.validateBoolean(model['Hide toolbar']),&#13;
            toolbar = presenter.validateToolbar(model['Custom toolbar'], model.Width),&#13;
            height = model.Height,&#13;
            hasDefaultFontFamily = false,&#13;
            hasDefaultFontSize = false,&#13;
            layoutType = model["Layout Type"] || "Default";&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(fontFamily)) {&#13;
            fontFamily = presenter.DEFAULTS.FONT_FAMILY;&#13;
            hasDefaultFontFamily = true;&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(fontSize)) {&#13;
            fontSize = presenter.DEFAULTS.FONT_SIZE;&#13;
            hasDefaultFontSize = true;&#13;
        }&#13;
&#13;
        height -= !isToolbarHidden ? 37 : 2;&#13;
&#13;
        return {&#13;
            ID: model["ID"],&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isValid: true,&#13;
            fontFamily: fontFamily,&#13;
            fontSize: fontSize,&#13;
            isToolbarHidden: isToolbarHidden,&#13;
            toolbar: toolbar,&#13;
            textAreaHeight: height,&#13;
            hasDefaultFontFamily: hasDefaultFontFamily,&#13;
            hasDefaultFontSize: hasDefaultFontSize,&#13;
            content_css: model['Custom CSS'],&#13;
            isPlaceholderSet: !ModelValidationUtils.isStringEmpty(model["Placeholder Text"]),&#13;
            placeholderText: model["Placeholder Text"],&#13;
            pluginName: presenter.makePluginName(model["ID"]),&#13;
            width: model['Width'],&#13;
            height: parseInt(height, 10),&#13;
            layoutType: layoutType&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * Initialize the addon.&#13;
     * For now the height is set to addon height minus 37 which is TinyMCE toolbar height.&#13;
     * It was not possible to get that value in easy and dynamic way and it didn't make sense&#13;
     * for prototype purpose. Also the set of controls is static and it could be be moved to&#13;
     * configuration.&#13;
     */&#13;
    presenter.getPlugins = function AddonParagraph_getPlugins() {&#13;
        var plugins = [];&#13;
        if (presenter.configuration.toolbar.indexOf('forecolor') &gt; -1 ||&#13;
            presenter.configuration.toolbar.indexOf('backcolor') &gt; -1 ) {&#13;
            plugins.push("textcolor");&#13;
        }&#13;
&#13;
        if(presenter.configuration.isPlaceholderSet) {&#13;
            plugins.push(presenter.configuration.pluginName);&#13;
        }&#13;
&#13;
        return plugins.join(" ");&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradePlaceholderText(model);&#13;
    };&#13;
&#13;
    presenter.upgradePlaceholderText = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (model["Placeholder Text"] == undefined) {&#13;
            upgradedModel["Placeholder Text"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonParagraph_destroy() {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.placeholder = null;&#13;
        presenter.editor.destroy();&#13;
        presenter.jQueryTinyMCEHTML.off();&#13;
        tinymce.remove();&#13;
&#13;
        presenter.$view.off();&#13;
        presenter.$tinyMCEToolbar.off();&#13;
&#13;
        tinymce.AddOnManager.PluginManager.items.length = 0;&#13;
        presenter.$tinyMCEToolbar = null;&#13;
        presenter.jQueryTinyMCEHTML = null;&#13;
        presenter.configuration = null;&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
        presenter.editor = null;&#13;
        presenter.isVisibleValue = null;&#13;
        presenter.findIframeAndSetStyles = null;&#13;
        presenter.getSpecifyToolbar = null;&#13;
        presenter.addStylesToButton = null;&#13;
        presenter.getButton = null;&#13;
        presenter.onBlur = null;&#13;
        presenter.onFocus = null;&#13;
        presenter.onInit = null;&#13;
        presenter.setIframeHeight = null;&#13;
        presenter.destroy = null;&#13;
        presenter.tinyMceContainer = null;&#13;
        presenter.editor = null;&#13;
        presenter.playerController = null;&#13;
        presenter.LANGUAGES = null;&#13;
    };&#13;
&#13;
    presenter.addPlugins = function AddonParagraph_addPlugins() {&#13;
        if (presenter.configuration.isPlaceholderSet) {&#13;
            presenter.addPlaceholderPlugin();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.makePluginName = function AddonParagraph_makePluginName(addonID) {&#13;
        var name = 'placeholder';&#13;
        addonID.replace(/[a-z0-9]+/gi, function(x) {&#13;
            name += "_" + x;&#13;
        });&#13;
&#13;
        return name;&#13;
    };&#13;
&#13;
     presenter.onFocus = function AddonParagraph_onFocus() {&#13;
        if (presenter.placeholder.isSet) {&#13;
            presenter.placeholder.removePlaceholder();&#13;
            presenter.placeholder.shouldBeSet = (presenter.placeholder.getEditorContent() == "");&#13;
        }&#13;
    };&#13;
&#13;
     presenter.onBlur = function AddonParagraph_onBlur() {&#13;
        if (presenter.placeholder.shouldBeSet) {&#13;
            presenter.placeholder.addPlaceholder();&#13;
        } else {&#13;
            presenter.placeholder.removePlaceholder();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addPlaceholderPlugin = function AddonParagraph_addPlaceholderPlugin() {&#13;
        tinymce.PluginManager.add(presenter.configuration.pluginName, function(editor) {&#13;
            editor.on('init', function () {&#13;
                presenter.placeholder.init(editor.id);&#13;
                editor.on('blur', presenter.onBlur);&#13;
                editor.on('focus', presenter.onFocus);&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    presenter.placeholderElement = function AddonParagraph_placeholderElement() {&#13;
        this.isSet = true;&#13;
        this.shouldBeSet = false;&#13;
        this.placeholderText = presenter.configuration.placeholderText;&#13;
        this.contentAreaContainer = null;&#13;
        this.el = null;&#13;
        this.attrs = {style: {position: 'absolute', top:'5px', left:0, color: '#888', padding: '1%', width:'98%', overflow: 'hidden'} };&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.init = function AddonParagraph_placeholderElement_init() {&#13;
        this.contentAreaContainer = presenter.editor.getBody();&#13;
        this.el = presenter.editor.dom.add(this.contentAreaContainer, "placeholder", this.attrs, this.placeholderText);&#13;
&#13;
        tinymce.DOM.setStyle(this.contentAreaContainer, 'position', 'relative');&#13;
        tinymce.DOM.addClass(this.el, "placeholder");&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.addPlaceholder = function AddonParagraph_addPlaceholder() {&#13;
        this.el = presenter.editor.dom.add(this.contentAreaContainer, "placeholder", this.attrs, this.placeholderText);&#13;
        presenter.editor.dom.addClass(this.el, "placeholder");&#13;
        this.isSet = true;&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.setPlaceholderAfterEditorChange = function AddonParagraph_setPlaceholderAfterEditorChange() {&#13;
        if (this.getEditorContent() == "") {&#13;
            this.shouldBeSet = true;&#13;
        } else {&#13;
            this.shouldBeSet = false;&#13;
            this.removePlaceholder();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.removePlaceholder = function AddonParagraph_removePlaceholder() {&#13;
        this.isSet = false;&#13;
        presenter.editor.dom.remove(this.el);&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.getEditorContent = function AddonParagraph_getEditorContent() {&#13;
        return presenter.editor.getContent();&#13;
    };&#13;
&#13;
    presenter.onTinymceChange = function AddonParagraph_onTinymceChange(editor, event) {&#13;
        if (presenter.configuration.isPlaceholderSet) {&#13;
            presenter.placeholder.setPlaceholderAfterEditorChange();&#13;
        }&#13;
    };&#13;
&#13;
     presenter.getSpecifyToolbar = function AddonParagraph_getSpecifyToolbar(language) {&#13;
        var toolbar = "";&#13;
&#13;
        if (language === "French") {&#13;
            toolbar = "customBold customItalic customUnderline numlist bullist alignleft aligncenter alignright alignjustify";&#13;
        }&#13;
&#13;
        return toolbar;&#13;
    };&#13;
&#13;
     presenter.addStylesToButton =  function AddonParagraph_addStylesToButton() {&#13;
        var boldButton = presenter.$view.find("[aria-label='" + presenter.getButton("Bold").title + "'] button"),&#13;
            italicButton = presenter.$view.find("[aria-label='" + presenter.getButton("Italic").title + "'] button"),&#13;
            underlineButton = presenter.$view.find("[aria-label='" + presenter.getButton("Underline").title + "'] button");&#13;
&#13;
        boldButton.css({'font-family': 'tinymce', 'font-size': '18px', 'font-weight': 'bold'});&#13;
        italicButton.css({'font-family': 'tinymce', 'font-size': '18px', 'font-weight': 'bold', 'font-style': 'italic'});&#13;
        underlineButton.css({'font-family': 'tinymce', 'font-size': '18px', 'font-weight': 'bold', 'text-decoration': 'underline'});&#13;
    };&#13;
&#13;
     presenter.getButton = function AddonParagraph_getButton(type) {&#13;
        var layoutLanguage = presenter.configuration.layoutType;&#13;
&#13;
        var french = {&#13;
            Bold: {&#13;
                text: '\u0047',&#13;
                title: 'Bold'&#13;
            },&#13;
            Underline: {&#13;
                text: 'S',&#13;
                title: 'Underline'&#13;
            },&#13;
            Italic: {&#13;
                text: 'I',&#13;
                title: 'Italic'&#13;
            }&#13;
        };&#13;
&#13;
        var languages = {&#13;
            French: french&#13;
        };&#13;
&#13;
        return languages[layoutLanguage][type];&#13;
    };&#13;
&#13;
     presenter.createButton = function AddonParagraph_createButton(editor, type) {&#13;
        var button = presenter.getButton(type);&#13;
&#13;
        return {&#13;
            text: button.text,&#13;
            title: button.title,&#13;
            icon: false,&#13;
            onclick: function() {&#13;
                editor.execCommand(type);&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setup = function AddonParagraph_setup(ed) {&#13;
        if (presenter.editor == null) {&#13;
            presenter.editor = ed;&#13;
        }&#13;
&#13;
        ed.on("NodeChange", presenter.onNodeChange);&#13;
        ed.on("keyup", presenter.onTinymceChange);&#13;
        if (presenter.configuration.layoutType !== "Default") {&#13;
            ed.addButton('customBold', presenter.createButton(this, "Bold"));&#13;
            ed.addButton('customItalic', presenter.createButton(this, "Italic"));&#13;
            ed.addButton('customUnderline', presenter.createButton(this, "Underline"));&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onNodeChange = function AddonParagraph_onNodeChange() {&#13;
        presenter.setStyles();&#13;
    };&#13;
&#13;
    presenter.setStyles = function AddonParagraph_setStyles() {&#13;
        if (presenter.editor == null) {&#13;
            return;&#13;
        }&#13;
&#13;
        var hasDefaultFontFamily = presenter.configuration.hasDefaultFontFamily,&#13;
            hasDefaultFontSize = presenter.configuration.hasDefaultFontSize,&#13;
            hasContentCss = !ModelValidationUtils.isStringEmpty(presenter.configuration.content_css);&#13;
&#13;
        if (presenter.editor.dom.$("placeholder").length &gt; 0) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (!hasDefaultFontFamily || !hasDefaultFontSize || !hasContentCss) {&#13;
            var elements = [ presenter.editor.dom.$('p'), presenter.editor.dom.$('ol'), presenter.editor.dom.$('ul')];&#13;
&#13;
            for (var i = 0; i &lt; elements.length; i++) {&#13;
                if (elements[i].length == 0) {&#13;
                    continue;&#13;
                }&#13;
&#13;
                if (!hasDefaultFontFamily || !hasContentCss) {&#13;
                    elements[i].css('font-family', presenter.configuration.fontFamily);&#13;
                }&#13;
&#13;
                if (!hasDefaultFontSize || !hasContentCss) {&#13;
                    elements[i].css('font-size', presenter.configuration.fontSize);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setIframeHeight = function AddonParagraph_setIframeHeight() {&#13;
        if (presenter.$view == null) {&#13;
            return;&#13;
        }&#13;
&#13;
        var $editor = presenter.$view.find('#' + presenter.editor.id + '_ifr'),&#13;
            editorHeight = presenter.$view.height();&#13;
&#13;
        if (!presenter.configuration.isToolbarHidden) {&#13;
            editorHeight -= presenter.$view.find('.mce-toolbar').height();&#13;
        }&#13;
&#13;
        $editor.height(editorHeight);&#13;
    };&#13;
&#13;
    presenter.onInit = function AddonParagraph_onInit() {&#13;
        if (presenter.configuration.isToolbarHidden) {&#13;
            presenter.$view.find('.mce-container.mce-panel.mce-first').remove();&#13;
            presenter.$view.find('.mce-edit-area').css('border-top-width', '0');&#13;
        }&#13;
&#13;
        presenter.jQueryTinyMCEHTML = $(presenter.editor.dom.select('html'));&#13;
        presenter.jQueryTinyMCEHTML.click(function editorDOMSelectClick() {&#13;
            presenter.editor.contentWindow.focus();&#13;
            $(presenter.editor.contentDocument).find('body').focus();&#13;
        });&#13;
&#13;
        presenter.editor.dom.loadCSS(DOMOperationsUtils.getResourceFullPath(presenter.playerController, "addons/resources/style.css"));&#13;
        presenter.editor.dom.$("body").css("height", "100%");&#13;
&#13;
        presenter.setStyles();&#13;
        if (presenter.configuration.state !== undefined) {&#13;
            presenter.editor.setContent(presenter.configuration.state, {format : 'raw'});&#13;
        }&#13;
&#13;
        presenter.$tinyMCEToolbar = presenter.$view.find('.mce-toolbar');&#13;
        presenter.$tinyMCEToolbar.on('resize', presenter.setIframeHeight);&#13;
&#13;
        presenter.tinyMceContainer = presenter.$view.find('.mce-container.mce-panel.mce-tinymce');&#13;
        presenter.tinyMceContainer.css('border', 0);&#13;
&#13;
&#13;
        if (presenter.configuration.layoutType !== "Default") {&#13;
            presenter.addStylesToButton();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function AddonParagraph_setPlayerController(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.getState = function AddonParagraph_getState() {&#13;
        var tinymceState;&#13;
        if (presenter.editor != undefined &amp;&amp; presenter.editor.hasOwnProperty("id")) {&#13;
            tinymceState = presenter.editor.getContent({format : 'raw'});&#13;
        } else {&#13;
            tinymceState = '';&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            'tinymceState' : tinymceState,&#13;
            'isVisible' : presenter.isVisibleValue&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function AddonParagraph_setState(state) {&#13;
        var parsedState = JSON.parse(state),&#13;
            tinymceState = parsedState.tinymceState;&#13;
&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        if (tinymceState!="" &amp;&amp; tinymceState.indexOf("class=\"placeholder\"") == -1) {&#13;
            if (presenter.editor != null) {&#13;
                presenter.editor.setContent(tinymceState, {format: 'raw'});&#13;
            } else {&#13;
                presenter.configuration.state = tinymceState;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function AddonParagraph_reset() {&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.placeholder.removePlaceholder();&#13;
        presenter.editor.setContent('');&#13;
        presenter.placeholder.addPlaceholder();&#13;
    };&#13;
&#13;
    presenter.show = function AddonParagraph_show() {&#13;
        presenter.configuration.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function AddonParagraph_hide() {&#13;
        presenter.configuration.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.isVisible = function AddonParagraph_isVisible() {&#13;
        return presenter.configuration.isVisible;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Paragraph_Keyboard" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Default font family" nameLabel="Paragraph_Keyboard_property_default_font_family" type="string"/>
		<property name="Default font size" nameLabel="Paragraph_Keyboard_property_default_font_size" type="string"/>
		<property name="Hide toolbar" nameLabel="Paragraph_Keyboard_property_hide_toolbar" type="boolean"/>
		<property name="Custom toolbar" nameLabel="Paragraph_Keyboard_property_custom_toolbar" type="string"/>
		<property name="Custom CSS" nameLabel="Paragraph_Keyboard_property_custom_css" type="file"/>
        <property displayName="Keyboard Layout Type" name="layoutType" nameLabel="Paragraph_Keyboard_property_layout_type" type="{French (Special Characters), German (Special Characters), Spanish (Special Characters), Custom}"/>
		<property displayName="Custom Keyboard Layout" name="keyboardLayout" nameLabel="Paragraph_Keyboard_property_keyboard_layout" type="text"/>
		<property displayName="Keyboard position" name="keyboardPosition" nameLabel="Paragraph_Keyboard_property_keyboard_position" type="{Bottom, Top, Left, Right, Custom}"/>
	</model>
<css>div.paragraph-keyboard-wrapper {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
    position: relative;&#13;
}&#13;
&#13;
div.paragraph-wrapper {&#13;
    position: absolute;&#13;
    border: solid 1px #9E9E9E;&#13;
	border-radius: 2px;&#13;
    overflow-y: hidden;&#13;
    overflow-x: auto;&#13;
}&#13;
&#13;
div.paragraph-wrapper textarea {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
}&#13;
&#13;
.paragraph-keyboard {&#13;
    position: absolute;&#13;
    display: inline-block;&#13;
    background: #eeeeee;&#13;
    border: solid 1px #dddddd;&#13;
    padding: 2px;&#13;
    border-radius: 4px;&#13;
}&#13;
&#13;
.paragraph-keyboard-letter {&#13;
    min-width: 2em;&#13;
    width: auto;&#13;
    float: left;&#13;
    text-align: center;&#13;
    padding: 2px;&#13;
    color: #1c94c4;&#13;
    border: solid 1px #ccc;&#13;
    background: #f6f6f6;&#13;
    border-radius: 4px;&#13;
    cursor: pointer;&#13;
    margin: 2px;&#13;
}&#13;
&#13;
.paragraph-keyboard-empty {&#13;
    min-width: 2em;&#13;
    width: auto;&#13;
    float: left;&#13;
    text-align: center;&#13;
    padding: 2px;&#13;
    margin: 3px;&#13;
}&#13;
&#13;
.paragraph-keyboard-letter.clicked {&#13;
    background: #fdf5ce;&#13;
    color: #c77405;&#13;
    border-color: #fbcb09;&#13;
}&#13;
&#13;
.keyRow {&#13;
    width: auto;&#13;
    float: left;&#13;
}&#13;
&#13;
.keyboard-clear {&#13;
    clear: both;&#13;
    width: auto;&#13;
}&#13;
&#13;
.paragraph-keyboard-shift {&#13;
    padding: 2px;&#13;
    color: #1c94c4;&#13;
    border: solid 1px #ccc;&#13;
    border-radius: 4px;&#13;
    cursor: pointer;&#13;
    min-width: 2em;&#13;
    width: auto;&#13;
    float: left;&#13;
    text-align: center;&#13;
    padding: 2px;&#13;
    margin: 3px;&#13;
    background: url("resources/ic_keyboard_capslock_24px.svg") no-repeat center center #f6f6f6;&#13;
}&#13;
&#13;
.paragraph-keyboard-shift.clicked {&#13;
    background-color: #fdf5ce;&#13;
    border-color: #fbcb09;&#13;
}&#13;
</css><view>&lt;div class="paragraph-keyboard-wrapper"&gt;&#13;
	&lt;div class="paragraph-wrapper"&gt;&#13;
		&lt;form&gt;&#13;
			&lt;textarea class="paragraph_field"&gt;&lt;/textarea&gt;&#13;
		&lt;/form&gt;&#13;
	&lt;/div&gt;&#13;
	&lt;div class="paragraph-keyboard"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="paragraph-keyboard-wrapper"&gt;&#13;
	&lt;div class="paragraph-wrapper"&gt;&#13;
		&lt;form&gt;&#13;
			&lt;textarea class="paragraph_field"&gt;&lt;/textarea&gt;&#13;
		&lt;/form&gt;&#13;
	&lt;/div&gt;&#13;
	&lt;div class="paragraph-keyboard"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonParagraph_Keyboard_create() {&#13;
    var presenter = function () {};&#13;
    presenter.editor = null;&#13;
    presenter.window = null;&#13;
    presenter.isVisibleValue = null;&#13;
    presenter.view = null;&#13;
    presenter.configuration = null;&#13;
    presenter.$view = null;&#13;
    presenter.jQueryTinyMCEHTML = null;&#13;
    presenter.$tinyMCEToolbar = null;&#13;
    presenter.$TinyMCEBody = null;&#13;
    presenter.eKeyboardButtons = [];&#13;
&#13;
    presenter.DEFAULTS = {&#13;
        TOOLBAR: 'bold italic underline numlist bullist alignleft aligncenter alignright alignjustify',&#13;
        FONT_FAMILY: 'Verdana,Arial,Helvetica,sans-serif',&#13;
        FONT_SIZE: '11px',&#13;
        BUTTON_WIDTH: 37,&#13;
        FORMAT_WIDTH: 85,&#13;
        STYLE_SELECT_NAME: "styleselect",&#13;
    };&#13;
&#13;
    presenter.ALLOWED_TOOLBAR_BUTTONS = 'customBold customUnderline customItalic newdocument bold italic underline strikethrough alignleft aligncenter '+&#13;
        'alignright alignjustify styleselect formatselect fontselect fontsizeselect '+&#13;
        'bullist numlist outdent indent blockquote undo redo '+&#13;
        'removeformat subscript superscript forecolor backcolor |'.split(' ');&#13;
    &#13;
    presenter.ERROR_CODES = {&#13;
        'defaultLayoutError' : 'Custom Keyboard Layout should be a JavaScript object with at least "default" property ' +&#13;
            'which should be an array of strings with space-seperated chars.'&#13;
    };&#13;
&#13;
    presenter.LAYOUT_TO_LANGUAGE_MAPPING = {&#13;
        'french (special characters)' : "{ \&#13;
            'default': ['\u00e0 \u00e2 \u00e7 \u00e8 \u00e9 \u00ea \u00ee \u00ef \u00f4 \u00f9 \u0153 \u00e6 \u00eb {shift}'], \&#13;
            'shift': ['\u00c0 \u00c2 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00ce \u00cf \u00d4 \u00d9 \u00c6 \u0152 {shift}'] \&#13;
        }",&#13;
        'german (special characters)' : "{ \&#13;
            'default': ['\u00e4 \u00f6 \u00fc \u00df {shift}'], \&#13;
            'shift': ['\u00c4 \u00d6 \u00dc {empty} {shift}'] \&#13;
        }",&#13;
        'spanish (special characters)' : "{ \&#13;
            'default': ['\u00e1 \u00e9 \u00ed \u00f3 \u00fa \u00f1 \u00e7 \u00fc \u00a1 \u00bf \u00ba \u00aa {shift}'], \&#13;
            'shift': ['\u00c1 \u00c9 \u00cd \u00d3 \u00da \u00d1 \u00c7 \u00dc {empty} {empty} {empty} {empty} {shift}'] \&#13;
        }"&#13;
    };&#13;
&#13;
    presenter.validateType = function AddonParagraph_Keyboard_validateType(rawType) {&#13;
        if (!rawType || rawType.length == 0) {&#13;
            return 'french (special characters)';&#13;
        }&#13;
&#13;
        return rawType.toLowerCase();&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonParagraph_Keyboard_setVisibility(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        if (isVisible) {&#13;
            presenter.$view.find(".paragraph-keyboard-wrapper").show();&#13;
        } else {&#13;
            presenter.$view.find(".paragraph-keyboard-wrapper").hide();&#13;
        }&#13;
&#13;
        presenter.isVisibleValue = isVisible;&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonParagraph_Keyboard_createPreview(view, model) {&#13;
        presenter.initializeEditor(view, model);&#13;
        var clickhandler = $("&lt;div&gt;&lt;/div&gt;").css({"background":"transparent", 'width': '100%', 'height': '100%', 'position':'absolute', 'top':0, 'left':0});&#13;
        presenter.$view.append(clickhandler);&#13;
    };&#13;
&#13;
    presenter.run = function AddonParagraph_Keyboard_run(view, model) {&#13;
        presenter.initializeEditor(view, model);&#13;
    };&#13;
&#13;
    presenter.validateToolbar = function AddonParagraph_validateToolbar(controls, width) {&#13;
        if (!controls) {&#13;
            controls = presenter.DEFAULTS.TOOLBAR;&#13;
        }&#13;
&#13;
        controls = controls.split(" ");&#13;
        if (controls.indexOf("|") != -1) {&#13;
            return presenter.parseToolbarWithGroups(controls, width);&#13;
        } else {&#13;
            return presenter.parseToolbarWithoutGroups(controls, width);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.parseToolbarWithGroups = function (controls, toolbarWidth) {&#13;
        var controlGroups = controls.join(" ").split("|");&#13;
        return controlGroups.filter(function (group) {&#13;
            return group.trim().length &gt; 0;&#13;
        }).map(function (group) {&#13;
            return presenter.parseToolbarWithoutGroups(group.trim().split(" "), toolbarWidth);&#13;
        }).join(" | ");&#13;
    };&#13;
&#13;
    presenter.parseToolbarWithoutGroups = function (controls, toolbarWidth) {&#13;
        var filteredControls = controls.filter(function(param){&#13;
            return presenter.ALLOWED_TOOLBAR_BUTTONS.indexOf(param) != -1;&#13;
        });&#13;
&#13;
        var result = "";&#13;
        var bufor = 0;&#13;
        var widthToAdd = 0;&#13;
        for(var i = 0; i &lt; filteredControls.length; i++) {&#13;
            if (filteredControls[i] !== presenter.DEFAULTS.STYLE_SELECT_NAME) {&#13;
                widthToAdd = presenter.DEFAULTS.BUTTON_WIDTH;&#13;
            } else {&#13;
                widthToAdd = presenter.DEFAULTS.FORMAT_WIDTH;&#13;
            }&#13;
&#13;
            if (bufor + widthToAdd &lt; toolbarWidth) {&#13;
                bufor += widthToAdd;&#13;
                result += filteredControls[i].trim() + " ";&#13;
            } else {&#13;
                bufor = widthToAdd;&#13;
                result += "| " + filteredControls[i].trim() + " ";&#13;
            }&#13;
        }&#13;
&#13;
        return result.trim();&#13;
    };&#13;
&#13;
    function pasteHtmlAtCaret(html, wnd, ownerDocument) {&#13;
        var sel, range;&#13;
        if (wnd.getSelection) {&#13;
            // IE9 and non-IE&#13;
            sel = wnd.getSelection();&#13;
            if (sel.getRangeAt &amp;&amp; sel.rangeCount) {&#13;
                range = sel.getRangeAt(0);&#13;
                range.deleteContents();&#13;
&#13;
                // Range.createContextualFragment() would be useful here but is&#13;
                // only relatively recently standardized and is not supported in&#13;
                // some browsers (IE9, for one)&#13;
                var el = document.createElement("div");&#13;
                el.innerHTML = html;&#13;
                var frag = document.createDocumentFragment(), node, lastNode;&#13;
&#13;
                // fix for IE&#13;
                if (ownerDocument) {&#13;
                    frag = ownerDocument.createDocumentFragment()&#13;
                }&#13;
&#13;
                while ( (node = el.firstChild) ) {&#13;
                    lastNode = frag.appendChild(node);&#13;
                }&#13;
                range.insertNode(frag);&#13;
&#13;
                // Preserve the selection&#13;
                if (lastNode) {&#13;
                    range = range.cloneRange();&#13;
                    range.setStartAfter(lastNode);&#13;
                    range.collapse(true);&#13;
                    sel.removeAllRanges();&#13;
                    sel.addRange(range);&#13;
                }&#13;
            }&#13;
        } else if (document.selection &amp;&amp; document.selection.type != "Control") {&#13;
            // IE &lt; 9&#13;
            document.selection.createRange().pasteHTML(html);&#13;
        }&#13;
    }&#13;
&#13;
     function transposeLayout(layout){&#13;
        var newLayout = {};&#13;
        $.each(layout, function(name,keyset){&#13;
            var ar = [];&#13;
            for (var i=0; i &lt; keyset.length; i++) {&#13;
                var row = keyset[i].split(' ');&#13;
                for (var j=0; j &lt; row.length; j++) {&#13;
                    if (!ar[j]) ar[j] = [];&#13;
                    ar[j][i] = row[j];&#13;
                }&#13;
            }&#13;
            for (var k=0; k &lt; ar.length; k++) {&#13;
                ar[k] = ar[k].join(' ');&#13;
            }&#13;
            newLayout[name] = ar;&#13;
        });&#13;
        return newLayout;&#13;
    }&#13;
&#13;
    /**&#13;
     * Parses model and set settings to default values if either of them is empty&#13;
     *&#13;
     * @param model&#13;
     * @returns {{fontFamily: *, fontSize: *}}&#13;
     */&#13;
    presenter.parseModel = function AddonParagraph_Keyboard_parseModel(model) {&#13;
        var fontFamily = model['Default font family'],&#13;
            fontSize = model['Default font size'],&#13;
            isToolbarHidden = ModelValidationUtils.validateBoolean(model['Hide toolbar']),&#13;
            toolbar = presenter.validateToolbar(model['Custom toolbar'], model["Width"]),&#13;
            height = model.Height,&#13;
            hasDefaultFontFamily = false,&#13;
            hasDefaultFontSize = false,&#13;
            keyboardPosition = model['keyboardPosition'] ? model['keyboardPosition'].toLowerCase() : 'bottom',&#13;
            layoutType = presenter.validateType(model['layoutType']),&#13;
            keyboardLayout = model['keyboardLayout'];&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(fontFamily)) {&#13;
            fontFamily = presenter.DEFAULTS.FONT_FAMILY;&#13;
            hasDefaultFontFamily = true;&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(fontSize)) {&#13;
            fontSize = presenter.DEFAULTS.FONT_SIZE;&#13;
            hasDefaultFontSize = true;&#13;
        }&#13;
&#13;
        if (presenter.LAYOUT_TO_LANGUAGE_MAPPING[layoutType] != undefined) {&#13;
            keyboardLayout = presenter.LAYOUT_TO_LANGUAGE_MAPPING[layoutType];&#13;
        }&#13;
&#13;
        height -= !isToolbarHidden ? 37 : 2;&#13;
&#13;
        if (keyboardLayout.length &gt; 0) {&#13;
            try {&#13;
                eval('keyboardLayout = ' + keyboardLayout);&#13;
            } catch(e) {&#13;
                presenter.ERROR_CODES['evaluationError'] = 'Custom keyboard layout parsing error: ' + e.message;&#13;
                return {error: 'evaluationError'};&#13;
            }&#13;
        }&#13;
&#13;
        if (typeof keyboardLayout['default'] !== 'object' || keyboardLayout['default'].length &lt; 1) {&#13;
            return {error: 'defaultLayoutError'};&#13;
        }&#13;
&#13;
        var supportedPositions = ['top', 'bottom', 'custom', 'left', 'right'];&#13;
&#13;
        if (keyboardPosition == 'left' || keyboardPosition == 'right') {&#13;
            keyboardLayout = transposeLayout(keyboardLayout);&#13;
        } else if (supportedPositions.indexOf(keyboardPosition) == -1) {&#13;
            keyboardPosition = 'bottom';&#13;
        }&#13;
&#13;
        return {&#13;
            ID: model["ID"],&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isValid: true,&#13;
&#13;
            fontFamily: fontFamily,&#13;
            fontSize: fontSize,&#13;
            isToolbarHidden: isToolbarHidden,&#13;
            toolbar: toolbar,&#13;
            textAreaHeight: height,&#13;
            paragraphHeight: model.Height,&#13;
            width: model['Width'],&#13;
            hasDefaultFontFamily: hasDefaultFontFamily,&#13;
            hasDefaultFontSize: hasDefaultFontSize,&#13;
            content_css: model['Custom CSS'],&#13;
&#13;
            keyboardLayout: keyboardLayout,&#13;
            keyboardPosition: keyboardPosition,&#13;
            error: false&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setWrapperID = function AddonParagraph_Keyboard_setWrapperID() {&#13;
        var $paragraphWrapper = presenter.$view.find('.paragraph-wrapper');&#13;
        $paragraphWrapper.attr('id', presenter.configuration.ID + '-wrapper');&#13;
    };&#13;
&#13;
    /**&#13;
     * Initialize the addon.&#13;
     * For now the height is set to addon height minus 37 which is TinyMCE toolbar height.&#13;
     * It was not possible to get that value in easy and dynamic way and it didn't make sense&#13;
     * for prototype purpose. Also the set of controls is static and it could be be moved to&#13;
     * configuration.&#13;
     */&#13;
    presenter.initializeEditor = function AddonParagraph_Keyboard_initializeEditor(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.parseModel(model);&#13;
&#13;
        if (presenter.configuration.error) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.error);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.$view.on('click', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        });&#13;
&#13;
        presenter.setWrapperID();&#13;
        presenter.buildKeyboard();&#13;
&#13;
        var $keyboard = presenter.$view.find('.paragraph-keyboard'),&#13;
            $paragraph = presenter.$view.find('.paragraph-wrapper'),&#13;
            keyboardPosition = presenter.configuration.keyboardPosition;&#13;
&#13;
        if (keyboardPosition != 'custom') {&#13;
&#13;
            var width, height, offset = {};&#13;
&#13;
            width = parseInt($keyboard.width(), 10);&#13;
            height = parseInt($keyboard.height(), 10);&#13;
            offset.bottom = parseInt($keyboard.css('padding-bottom'), 10);&#13;
            offset.bottom += parseInt($keyboard.css('border-bottom-width'), 10);&#13;
            offset.top = parseInt($keyboard.css('padding-top'), 10);&#13;
            offset.top += parseInt($keyboard.css('border-top-width'), 10);&#13;
&#13;
            offset.left = parseInt($keyboard.css('padding-left'), 10);&#13;
            offset.left += parseInt($keyboard.css('border-left-width'), 10);&#13;
            offset.right = parseInt($keyboard.css('padding-right'), 10);&#13;
            offset.right += parseInt($keyboard.css('border-right-width'), 10);&#13;
&#13;
            switch (keyboardPosition) {&#13;
                case 'top':&#13;
                    presenter.configuration.paragraphHeight -= height + 2 * offset.bottom + offset.top + 1;&#13;
                    $paragraph.css('top', (height + offset.top + offset.bottom) + 'px');&#13;
                    $paragraph.width('100%');&#13;
                    break;&#13;
                case 'bottom':&#13;
                    presenter.configuration.paragraphHeight -= height + offset.bottom + 2 * offset.top - 1;&#13;
                    offset.additional = presenter.configuration.isToolbarHidden ? 1 : 0;&#13;
                    $keyboard.css('top', (presenter.configuration.paragraphHeight + offset.top - offset.additional) + 'px');&#13;
                    $paragraph.width('100%');&#13;
                    break;&#13;
                case 'left':&#13;
                    presenter.configuration.width -= width + offset.right + 1;&#13;
                    $paragraph.width(presenter.configuration.width + 'px');&#13;
                    $paragraph.css('left', (width + offset.left + offset.right) + 'px');&#13;
                    $paragraph.height('100%');&#13;
                    break;&#13;
                case 'right':&#13;
                    presenter.configuration.width -= width + offset.left + offset.right + 2;&#13;
                    $paragraph.width(presenter.configuration.width + 'px');&#13;
                    $keyboard.css('left', (presenter.configuration.width + offset.left - 1) + 'px');&#13;
                    $paragraph.height('100%');&#13;
                    break;&#13;
            }&#13;
        }&#13;
&#13;
        var plugins = undefined;&#13;
        if (presenter.configuration.toolbar.indexOf('forecolor') &gt; -1 ||&#13;
            presenter.configuration.toolbar.indexOf('backcolor') &gt; -1 ) {&#13;
            plugins = "textcolor";&#13;
        }&#13;
&#13;
        tinymce.init({&#13;
            plugins: plugins,&#13;
            selector : presenter.getTinyMCESelector(),&#13;
            width: presenter.configuration.width,&#13;
            height: presenter.configuration.paragraphHeight,&#13;
            statusbar: false,&#13;
            menubar: false,&#13;
            toolbar: presenter.configuration.toolbar,&#13;
            content_css: presenter.configuration.content_css,&#13;
            setup : function(editor) {&#13;
                editor.on("NodeChange", presenter.setStyles);&#13;
            }&#13;
        }).then(function (editors) {&#13;
            presenter.editor = editors[0];&#13;
            presenter.onInit();&#13;
        });&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonParagraph_Keyboard_destroy(event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.$view.off();&#13;
        presenter.jQueryTinyMCEHTML.off();&#13;
        presenter.$tinyMCEToolbar.off();&#13;
        presenter.$TinyMCEBody.off();&#13;
        presenter.editor.destroy();&#13;
        tinymce.remove();&#13;
        tinymce.AddOnManager.PluginManager.items.length = 0;&#13;
&#13;
        presenter.$tinyMCEToolbar = null;&#13;
        presenter.jQueryTinyMCEHTML = null;&#13;
        presenter.$TinyMCEBody = null;&#13;
        presenter.configuration = null;&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
        presenter.editor = null;&#13;
        presenter.tinyMceContainer = null;&#13;
        presenter.window = null;&#13;
        presenter.isVisibleValue = null;&#13;
        presenter.ERROR_CODES = null;&#13;
        presenter.DEFAULTS = null;&#13;
        presenter.LAYOUT_TO_LANGUAGE_MAPPING = null;&#13;
&#13;
        presenter.setWrapperID = null;&#13;
        presenter.findIframeAndSetStyles = null;&#13;
        presenter.getSpecifyToolbar = null;&#13;
        presenter.addStylesToButton = null;&#13;
        presenter.getButton = null;&#13;
        presenter.onBlur = null;&#13;
        presenter.onFocus = null;&#13;
        presenter.onInit = null;&#13;
        presenter.setIframeHeight = null;&#13;
        presenter.destroy = null;&#13;
        presenter.setStyles = null;&#13;
        transposeLayout = null;&#13;
        pasteHtmlAtCaret = null;&#13;
&#13;
        presenter.switchKeyboard = null;&#13;
        presenter.clickKeyboard = null;&#13;
        presenter.buildKeyboard = null;&#13;
        presenter.eKeyboardButtons.forEach(function ($button) {&#13;
            $button.off();&#13;
        });&#13;
        presenter.eKeyboardButtons.length = 0;&#13;
        presenter.eKeyboardButtons = null;&#13;
    };&#13;
&#13;
    presenter.getTinyMCESelector = function AddonParagraph_Keyboard_getTinyMCESelector() {&#13;
        return '#' + presenter.configuration.ID + '-wrapper .paragraph_field';&#13;
    };&#13;
&#13;
    presenter.setStyles = function AddonParagraph_Keyboard_setStyles() {&#13;
        if (presenter.editor == null) {&#13;
            return;&#13;
        }&#13;
&#13;
        var hasDefaultFontFamily = presenter.configuration.hasDefaultFontFamily,&#13;
            hasDefaultFontSize = presenter.configuration.hasDefaultFontSize,&#13;
            hasContentCss = !ModelValidationUtils.isStringEmpty(presenter.configuration.content_css);&#13;
&#13;
        if (!hasDefaultFontFamily || !hasDefaultFontSize || !hasContentCss) {&#13;
            var elements = [ presenter.editor.dom.$('p'), presenter.editor.dom.$('ol'), presenter.editor.dom.$('ul')];&#13;
&#13;
            for (var i = 0; i &lt; elements.length; i++) {&#13;
                if (!hasDefaultFontFamily || !hasContentCss) {&#13;
                    elements[i].css('font-family', presenter.configuration.fontFamily);&#13;
                }&#13;
&#13;
                if (!hasDefaultFontSize || !hasContentCss) {&#13;
                    elements[i].css('font-size', presenter.configuration.fontSize);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setIframeHeight = function AddonParagraph_Keyboard_setIframeHeight() {&#13;
        var $editor = presenter.$view.find('#' + presenter.editor.id + '_ifr'),&#13;
            editorHeight = presenter.configuration.paragraphHeight;&#13;
&#13;
        if (!presenter.configuration.isToolbarHidden) {&#13;
            editorHeight -=  presenter.$view.find('.mce-toolbar').height();&#13;
        }&#13;
&#13;
        $editor.height(editorHeight);&#13;
    };&#13;
&#13;
&#13;
    presenter.caret = function AddonParagraph_Keyboard_caret() {&#13;
        var caretData;&#13;
        if (arguments.length) {&#13;
            caretData = arguments[0];&#13;
            presenter.window.getSelection().collapse(caretData.start.node, caretData.start.offset);&#13;
            if (caretData.range) {&#13;
                caretData.range.deleteContents();&#13;
            }&#13;
        } else {&#13;
            var selection = presenter.window.getSelection(),&#13;
                start = {&#13;
                    offset: selection.anchorOffset,&#13;
                    node: selection.anchorNode&#13;
                },&#13;
                range = false;&#13;
&#13;
            if (selection.rangeCount &gt; 0) {&#13;
                range = selection.getRangeAt(0);&#13;
            }&#13;
&#13;
            caretData = {&#13;
                start : start,&#13;
                range: range&#13;
            };&#13;
        return caretData;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.clickKeyboard = function AddonParagraph_Keyboard_clickKeyboard(e){&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        var $this = $(this),&#13;
            text = $this.text();&#13;
&#13;
        presenter.window.focus();&#13;
        $(presenter.editor.contentDocument).find('body').focus();&#13;
&#13;
        if (presenter.lastCaret) {&#13;
            // in IE 11 we have to set caret's position manually, because by default it is set at the beginning&#13;
            presenter.caret(presenter.lastCaret);&#13;
            pasteHtmlAtCaret(text, presenter.window, presenter.ownerDocument);&#13;
            presenter.lastCaret = presenter.caret();&#13;
        } else {&#13;
            pasteHtmlAtCaret(text, presenter.window, presenter.ownerDocument);&#13;
        }&#13;
&#13;
        $this.addClass('clicked');&#13;
        window.setTimeout(function(){&#13;
            $this.removeClass('clicked');&#13;
        }, 200);&#13;
    };&#13;
&#13;
    presenter.switchKeyboard = function AddonParagraph_Keyboard_switchKeyboard(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        presenter.$view.find('.keySetLayer:visible').hide();&#13;
        presenter.currentKeyboard = (presenter.currentKeyboard == 'default' ? 'shift' : 'default');&#13;
        presenter.$view.find('.keyset-' + presenter.currentKeyboard).show();&#13;
        presenter.$view.find('.paragraph-keyboard-shift:visible').addClass('clicked');&#13;
&#13;
        window.setTimeout(function(){&#13;
            presenter.$view.find('.paragraph-keyboard-shift.clicked').removeClass('clicked');&#13;
        }, 200);&#13;
&#13;
        presenter.window.focus();&#13;
        $(presenter.editor.contentDocument).find('body').focus();&#13;
        if (presenter.lastCaret) {&#13;
            presenter.caret(presenter.lastCaret);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.buildKeyboard = function AddonParagraph_Keyboard_buildKeyboard(){&#13;
        var keyboard = presenter.$view.find('.paragraph-keyboard'),&#13;
            row, currentSet, keys, key, keyRow, $button, t, keySetLayer;&#13;
        $.each(presenter.configuration.keyboardLayout, function(set, keySet) {&#13;
            keySetLayer = $('&lt;div&gt;').addClass('keySetLayer');&#13;
            keySetLayer.addClass('keyset-' + set);&#13;
            &#13;
            for ( row = 0; row &lt; keySet.length; row++ ){&#13;
                currentSet = $.trim(keySet[row]).replace(/\{(\.?)[\s+]?:[\s+]?(\.?)\}/g,'{$1:$2}');&#13;
                keys = currentSet.split(/\s+/);&#13;
                &#13;
                if (!keys) { &#13;
                    continue; &#13;
                }&#13;
                &#13;
                keyRow = $('&lt;div&gt;').addClass('keyRow');&#13;
                for ( key = 0; key &lt; keys.length; key++ ) {&#13;
                    // ignore empty keys&#13;
                    if (keys[key].length === 0) { &#13;
                        continue; &#13;
                    }&#13;
                    &#13;
                    t = keys[key];&#13;
&#13;
                    if (t == '{empty}') {&#13;
                        keyRow.append($('&lt;div&gt;').addClass('paragraph-keyboard-empty').html('&amp;nbsp;'));&#13;
                    } else if (t == '{shift}') {&#13;
                        $button = $('&lt;div&gt;').addClass('paragraph-keyboard-shift').html('&amp;nbsp;');&#13;
                        $button.on('click', presenter.switchKeyboard);&#13;
                        keyRow.append($button);&#13;
                    } else {&#13;
                        $button = $('&lt;div&gt;').addClass('paragraph-keyboard-letter').text(t);&#13;
                        $button.on('click', presenter.clickKeyboard);&#13;
                        keyRow.append($button);&#13;
                    }&#13;
&#13;
                    presenter.eKeyboardButtons.push($button);&#13;
&#13;
                }&#13;
                keySetLayer.append(keyRow);&#13;
                keySetLayer.append($('&lt;div&gt;').addClass('keyboard-clear'));&#13;
            }&#13;
            if (set != 'default') {&#13;
                keySetLayer.hide();&#13;
            } else {&#13;
                presenter.currentKeyboard = 'default';&#13;
            }&#13;
            keyboard.append(keySetLayer);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.onInit = function AddonParagraph_Keyboard_onInit() {&#13;
        presenter.window = presenter.editor.contentWindow;&#13;
&#13;
        if (presenter.configuration.isToolbarHidden) {&#13;
            presenter.$view.find('.mce-container.mce-panel.mce-first').remove();&#13;
            presenter.$view.find('.mce-edit-area').css('border-top-width', '0');&#13;
        }&#13;
&#13;
        presenter.jQueryTinyMCEHTML = $(presenter.editor.dom.select('html'));&#13;
        presenter.jQueryTinyMCEHTML.click(function () {&#13;
            presenter.window.focus();&#13;
            $(presenter.editor.contentDocument).find('body').focus();&#13;
        });&#13;
&#13;
        var stylesheetFullPath = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "addons/resources/style.css");&#13;
        presenter.editor.dom.loadCSS(stylesheetFullPath);&#13;
&#13;
        presenter.setStyles();&#13;
&#13;
        if (presenter.configuration.state !== undefined) {&#13;
        	presenter.editor.setContent(presenter.configuration.state, {format : 'raw'});&#13;
        }&#13;
&#13;
        presenter.setIframeHeight();&#13;
&#13;
        presenter.$tinyMCEToolbar = presenter.$view.find('.mce-toolbar');&#13;
        presenter.$tinyMCEToolbar.on('resize', function () {&#13;
            presenter.setIframeHeight();&#13;
        });&#13;
&#13;
        presenter.$view.find('.mce-container.mce-panel.mce-tinymce').css('border',0);&#13;
&#13;
        var el = presenter.editor.dom.select('body')[0];&#13;
        presenter.$TinyMCEBody = $(el);&#13;
        if (typeof el.ownerDocument.parentWindow !== 'undefined') {&#13;
            presenter.window = el.ownerDocument.parentWindow;&#13;
            presenter.ownerDocument = el.ownerDocument;&#13;
            presenter.lastCaret = presenter.caret();&#13;
            presenter.$TinyMCEBody.on('mouseup keyup', function(e){&#13;
                presenter.lastCaret = presenter.caret();&#13;
            });&#13;
        } else {&#13;
            presenter.ownerDocument = false;&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function AddonParagraph_Keyboard_playerController(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.getState = function AddonParagraph_Keyboard_getState() {&#13;
        var tinymceState = '';&#13;
&#13;
        if (presenter.editor != null &amp;&amp; presenter.editor.hasOwnProperty("id")) {&#13;
            tinymceState = presenter.editor.getContent({format : 'raw'});&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            'tinymceState' : tinymceState,&#13;
            'isVisible' : presenter.isVisibleValue&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function AddonParagraph_Keyboard_setState(state) {&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        if (presenter.editor  != null) {&#13;
            presenter.editor.setContent(parsedState.tinymceState, {format : 'raw'});&#13;
        } else {&#13;
            presenter.configuration.state = parsedState.tinymceState;&#13;
        }&#13;
&#13;
        presenter.setVisibility(parsedState.isVisible);&#13;
    };&#13;
&#13;
&#13;
    presenter.executeCommand = function AddonParagraph_Keyboard_executeCommand(name, params) {&#13;
        if (!presenter.configuration.isValid) { return; }&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isVisible': presenter.isVisible&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.reset = function AddonParagraph_Keyboard_reset() {&#13;
        presenter.editor.setContent('');&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.show = function AddonParagraph_Keyboard_show() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function AddonParagraph_Keyboard_hide() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.isVisible = function AddonParagraph_Keyboard_isVisible() {&#13;
        return presenter.isVisibleValue;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PieChart" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="Items" nameLabel="PieChart_property_items" type="list">
            <property name="Name" nameLabel="PieChart_property_name" type="string"/>
            <property name="Color" nameLabel="PieChart_property_color" type="string"/>
            <property name="Starting percent" nameLabel="PieChart_property_starting_percent" type="string"/>
            <property name="Answer" nameLabel="PieChart_property_answer" type="string"/>
        </property>
        <property name="Step" nameLabel="PieChart_property_step" type="string"/>
        <property name="Show values" nameLabel="PieChart_property_show_values" type="boolean"/>
        <property name="Show names" nameLabel="PieChart_property_show_names" type="boolean"/>
        <property name="Is Activity" nameLabel="PieChart_property_is_activity" type="boolean"/>
        <property name="Is Disabled" nameLabel="PieChart_property_is_disabled" type="boolean"/>
        <property displayName="Radius size" name="Radius" nameLabel="PieChart_property_radius" type="string"/>
		<property displayName="Percents positions" name="Percents" nameLabel="PieChart_property_percents" type="string"/>
    </model>
<css>.addon_PieChart_dev{&#13;
}&#13;
.piechart {&#13;
    border: 3px solid #ccc;&#13;
    float: left;&#13;
}&#13;
.disabled {&#13;
    opacity: 0.5;&#13;
}&#13;
.correct {&#13;
    border: 3px solid green;&#13;
}&#13;
.wrong {&#13;
    border: 3px solid red;&#13;
}&#13;
.graph {&#13;
    stroke: #000;&#13;
    stroke-width: 2px;&#13;
    fill-opacity: 0;&#13;
}&#13;
.line {&#13;
    stroke-width: 20px;&#13;
    stroke: #A52A2A;&#13;
    stroke-opacity: 0;&#13;
}&#13;
.item {&#13;
    fill: red;&#13;
    background: red;&#13;
}&#13;
.item1 {&#13;
    fill: #ffaaff;&#13;
    background: #ffaaff;&#13;
}&#13;
.item2 {&#13;
    fill: #ffaaaa;&#13;
    background: #ffaaaa;&#13;
}&#13;
.item3 {&#13;
    fill: #00aaaa;&#13;
    background: #00aaaa;&#13;
}&#13;
.legend {&#13;
    border:1px solid #000;&#13;
    padding: 5px;&#13;
    float: left;&#13;
    margin: 10px;&#13;
}&#13;
.legendItem {&#13;
    padding-bottom:2px;&#13;
}&#13;
.legendSquare {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin-right: 10px;&#13;
    display: inline-block;&#13;
}&#13;
.legendText {&#13;
    display: inline;&#13;
}&#13;
.percentsValues{&#13;
    fill: blue;&#13;
}&#13;
</css><view>&lt;div class="piechart"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="piechart"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonPieChart_create(){&#13;
    var presenter = function(){};&#13;
    presenter.error = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
    var i, ii, j, tmp1, tmp2, tmp3, tmp4;&#13;
    presenter.move = false;&#13;
    presenter.isMoved = false;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    presenter.isLineInMove = false;&#13;
    presenter.ERROR_CODES = {&#13;
        'WrongStep' : 'The step is wrong!',&#13;
        'WrongStart' : 'Wrong starting data!',&#13;
        'WrongAnswer' : 'Wrong answers!',&#13;
        'WrongName' : 'Define the names!',&#13;
        'WrongColor' : 'Wrong color!',&#13;
        'WrongSize' : 'Wrong Radius size, choose a number beetween 0 and 1!',&#13;
        'WrongPosition' : 'Wrong Percents positions, choose a number beetween 0 and 1!'&#13;
    };&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'isAllOK'.toLowerCase():&#13;
                presenter.isAllOK();&#13;
                break;&#13;
            case 'isOK'.toLowerCase():&#13;
                presenter.isOK(params[0]);&#13;
                break;&#13;
            case 'getPercent'.toLowerCase():&#13;
                presenter.getPercent(params[0]);&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
        }&#13;
    };&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (!presenter.activity || presenter.isMoved) {&#13;
            return true;&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    };&#13;
    presenter.isAllOK = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.getScore() == presenter.getMaxScore() &amp;&amp; presenter.getErrorCount() === 0) {&#13;
            return true;&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    };&#13;
    presenter.isOK = function(item) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.activity &amp;&amp; presenter.currentPercents[item-1] == presenter.items[item-1]['Answer']) {&#13;
            return true;&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    };&#13;
    presenter.getPercent = function(item) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return presenter.currentPercents[item-1];&#13;
    };&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
    presenter.updateVisibility = function() {&#13;
        (presenter.isVisible) ?	presenter.show() : presenter.hide();&#13;
    };&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.disabled = true;&#13;
        presenter.$view.find('.piechart').addClass('disabled');&#13;
    };&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.disabled = false;&#13;
        presenter.$view.find('.piechart').removeClass('disabled');&#13;
    };&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
    presenter.createEventData = function(score) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : '',&#13;
            value : '',&#13;
            score : score&#13;
        };&#13;
    };&#13;
    presenter.triggerLineEvent = function(line, state, score) {&#13;
        var eventData = presenter.createEventData(line, state, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
    presenter.validateColor = function(colour){&#13;
        if (colour === '#28e32a') {&#13;
            return true;&#13;
        }&#13;
        var rgb = $('&lt;div style="color:#28e32a"&gt;');&#13;
        var valid_rgb = "rgb(40, 227, 42)";&#13;
        rgb.css("color", colour);&#13;
        if(rgb.css('color') == valid_rgb &amp;&amp; colour != ':#28e32a' &amp;&amp; colour.replace(/ /g,"") != valid_rgb.replace(/ /g,"") &amp;&amp; colour !== '') {&#13;
            return false;&#13;
        } else {&#13;
            return true;&#13;
        }&#13;
    };&#13;
    presenter.initiate = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        presenter.piechart = presenter.$view.find('.piechart');&#13;
        presenter.activity = ModelValidationUtils.validateBoolean(presenter.model['Is Activity']);&#13;
        presenter.disabled = ModelValidationUtils.validateBoolean(presenter.model['Is Disabled']);&#13;
        presenter.initDisabled = presenter.disabled;&#13;
        if (presenter.disabled) presenter.disable();&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(presenter.model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        presenter.updateVisibility();&#13;
        presenter.values = ModelValidationUtils.validateBoolean(presenter.model['Show values']);&#13;
        presenter.names = ModelValidationUtils.validateBoolean(presenter.model['Show names']);&#13;
        presenter.step = presenter.model['Step'];&#13;
        presenter.items = presenter.model['Items'];&#13;
        presenter.radiusSize = presenter.model['Radius'];&#13;
        presenter.percentsPosition = presenter.model['Percents'];&#13;
        presenter.numberOfItems = presenter.items.length;&#13;
        tmp1 = 0;&#13;
        tmp2 = 0;&#13;
        if (presenter.radiusSize === '' &amp;&amp; presenter.values) {&#13;
            presenter.radiusSize = 0.7;&#13;
        } else if (presenter.radiusSize === '') {&#13;
            presenter.radiusSize = 1;&#13;
        } else if (isNaN(presenter.radiusSize) || presenter.radiusSize &lt;= 0 ||	presenter.radiusSize &gt; 1) {&#13;
            presenter.error = 'WrongSize';&#13;
            return false;&#13;
        }&#13;
        if (presenter.percentsPosition == '') {&#13;
            presenter.percentsPosition = 0.85;&#13;
        } else if (isNaN(presenter.percentsPosition) || presenter.percentsPosition &lt;= 0 ||	presenter.percentsPosition &gt; 1) {&#13;
            presenter.error = 'WrongPosition';&#13;
            return false;&#13;
        }&#13;
        (presenter.step == '') ? (presenter.step = parseFloat(1)) : (presenter.step = parseFloat(presenter.step));&#13;
        if (presenter.step &lt; 0 || presenter.step &gt;=100 || isNaN(presenter.step)) {&#13;
            presenter.error = 'WrongStep';&#13;
            return false;&#13;
        }&#13;
        presenter.startingLines = new Array(presenter.numberOfItems);&#13;
        presenter.angles = new Array(presenter.numberOfItems);&#13;
        for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
            if (!presenter.validateColor(presenter.items[i]['Color'])) {&#13;
                presenter.error = 'WrongColor';&#13;
                return false;&#13;
            }&#13;
            if (isNaN(presenter.items[i]['Starting percent']) || presenter.items[i]['Starting percent'] === '') {&#13;
                presenter.error = 'WrongStart';&#13;
                return false;&#13;
            }&#13;
            if (isNaN(presenter.items[i]['Answer']) || (presenter.activity &amp;&amp; presenter.items[i]['Starting percent'] === '')) {&#13;
                presenter.error = 'WrongAnswer';&#13;
                return false;&#13;
            }&#13;
            if (presenter.names &amp;&amp; presenter.items[i]['Name'] === '') {&#13;
                presenter.error = 'WrongName';&#13;
                return false;&#13;
            }&#13;
            tmp1 += parseFloat(presenter.items[i]['Starting percent']);&#13;
            tmp2 += parseFloat(presenter.items[i]['Answer']);&#13;
            if((Math.abs(presenter.items[i]['Starting percent'] - presenter.items[i]['Answer']) % presenter.step) !== 0 &amp;&amp; presenter.activity) {&#13;
                presenter.error = 'WrongStep';&#13;
                return false;&#13;
            }&#13;
        }&#13;
        if (tmp1 !== 100) {&#13;
            presenter.error = 'WrongStart';&#13;
            return false;&#13;
        }&#13;
        if (tmp2 !== 100 &amp;&amp; presenter.activity) {&#13;
            presenter.error = 'WrongAnswer';&#13;
            return false;&#13;
        }&#13;
        return true;&#13;
    };&#13;
    presenter.drawGraph = function(type) {&#13;
        var wrapper = presenter.piechart.parent();&#13;
        var graphSize = Math.min(wrapper.width(),wrapper.height());&#13;
        presenter.center = Math.floor(graphSize / 2);&#13;
        presenter.radius = presenter.center * presenter.radiusSize-5;&#13;
        presenter.piechart.css({'width' : graphSize, 'height' : graphSize});&#13;
        var x1, x2, y1, y2, x3, y3, angle, angle2, lines, percents;&#13;
        var $svg = '&lt;svg height="'+graphSize+'" width="'+graphSize+'" version="1.1" xmlns:xlink="http://www.w3.org/2000/svg" class="chart'&#13;
        if (type == 'showAnswers') $svg += '-show-answers';&#13;
        $svg += '"&gt;';&#13;
        angle = 0;&#13;
        lines = '';&#13;
        percents = '';&#13;
        var parameter;&#13;
        if (type != 'showAnswers') {&#13;
            presenter.currentPercents = new Array(presenter.numberOfItems);&#13;
            presenter.startingItems = new Array(presenter.numberOfItems);&#13;
        }&#13;
        for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
            if (type == 'showAnswers') {&#13;
                parameter = parseFloat(presenter.items[i]['Answer']);&#13;
            } else {&#13;
                parameter = parseFloat(presenter.items[i]['Starting percent']);&#13;
            }&#13;
            x1 = parseFloat(presenter.center + presenter.radius * Math.sin(angle));&#13;
            y1 = parseFloat(presenter.center - presenter.radius * Math.cos(angle));&#13;
            angle2 = angle + 0.5*(parameter)/50 * Math.PI;&#13;
            angle += (parameter)/50 * Math.PI;&#13;
            x2 = parseFloat(presenter.center + presenter.radius * Math.sin(angle));&#13;
            y2 = parseFloat(presenter.center - presenter.radius * Math.cos(angle));&#13;
            x3 = parseFloat(presenter.center + Math.sin(angle2)*(presenter.center * presenter.percentsPosition));&#13;
            y3 = parseFloat(presenter.center - Math.cos(angle2)*(presenter.center * presenter.percentsPosition));&#13;
            $svg += '&lt;path id="item'+(i+1)+'" class="item item'+(i+1)+'" d="';&#13;
            ItemData = 'M '+presenter.center+' '+presenter.center+' L '+x1+' '+y1+' A '+presenter.radius+' '+presenter.radius+' 0 ';&#13;
            ((parameter) &gt; 50) ? (ItemData += '1') : (ItemData += '0');&#13;
            ItemData += ' 1 '+x2+' '+y2+' L '+presenter.center+' '+presenter.center+' Z';&#13;
            if (type != 'showAnswers') presenter.startingItems[i] = ItemData;&#13;
            $svg += ItemData + '" stroke-width="0"';&#13;
            if (presenter.items[i]['Color'] !== '') {&#13;
                $svg += 'style="fill: '+presenter.items[i]['Color']+';"';&#13;
            }&#13;
            $svg += '&gt;&lt;/path&gt;';&#13;
            if (type != 'showAnswers')&#13;
                presenter.currentPercents[i] = (parameter);&#13;
            if (presenter.values) {&#13;
                percents += presenter.drawPercent(i,x3,y3,parameter);&#13;
            }&#13;
            if (type != 'showAnswers') {&#13;
                presenter.angles[i] = ((angle/Math.PI*180-180)+360)%360;&#13;
                presenter.startingLines[i] = presenter.angles[i];&#13;
            }&#13;
            lines += '&lt;rect id="'+(i+1)+'" class ="line" height="'+presenter.radius+'" width="2" y="'+presenter.center+'" x="'+(presenter.center-1)+'" transform="rotate('+ (((angle/Math.PI*180-180)+360)%360) +', '+presenter.center+', '+presenter.center+')"&gt;&lt;/rect&gt;';&#13;
        }&#13;
        $svg += '&lt;circle class="graph';&#13;
        $svg += '" r="'+presenter.radius+'" cy="'+presenter.center+'" cx="'+presenter.center+'"&gt;&lt;/circle&gt;';&#13;
        $svg += lines;&#13;
        $svg += percents;&#13;
        $svg += '&lt;/svg&gt;';&#13;
        presenter.piechart.prepend($svg);&#13;
    };&#13;
    presenter.drawPercent = function(i,x,y,value) {&#13;
        var tmp = '&lt;text id="Text'+(i+1)+'" class="percentsValues" x="'+x+'" y="'+y+'" text-anchor="middle"&gt;'+value+'%&lt;/text&gt;';&#13;
        return tmp;&#13;
    };&#13;
    presenter.drawLegend = function() {&#13;
        var $legend = '&lt;div class = "legend"&gt;', colorItem = '';&#13;
        for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
            if (presenter.items[i]['Color'] !== '') {&#13;
                colorItem = 'style="background: '+presenter.items[i]['Color']+';"';&#13;
            }&#13;
            $legend += '&lt;div class="legendItem"&gt;&lt;div class="legendSquare item'+(i+1)+' item"'+colorItem+'&gt;&lt;/div&gt;&lt;div class="legendText"&gt;'+ presenter.items[i]['Name']+'&lt;/div&gt;&lt;/div&gt;';&#13;
            colorItem = '';&#13;
        }&#13;
        $legend += '&lt;/div';&#13;
        presenter.$view.find('.piechart').parent().append($legend);&#13;
    };&#13;
    presenter.run = function(view, model){&#13;
        var x, y, angle, k, angle2, percent, angleTmp, previousItem, nextItem;&#13;
        if (!presenter.initiate(view, model)) {&#13;
            presenter.piechart.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return false;&#13;
        }&#13;
        var Width = presenter.piechart.width();&#13;
        var Height = presenter.piechart.height();&#13;
        presenter.drawGraph();&#13;
        if (presenter.names) {&#13;
            presenter.drawLegend();&#13;
        }&#13;
        presenter.$view.find('.line')&#13;
            .mousedown(function(e) {&#13;
                e.stopImmediatePropagation();&#13;
                e.preventDefault();&#13;
                i = parseInt($(this).attr('id'),10);&#13;
                e.stopPropagation();&#13;
                presenter.isLineInMove = true;&#13;
            });&#13;
        presenter.$view&#13;
            .click(function(e) {&#13;
                e.preventDefault();&#13;
                e.stopPropagation();&#13;
                if (presenter.isLineInMove &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    (presenter.isAllOK()) ? (score=1) : (score=0);&#13;
                    if (!presenter.activity) score ='';&#13;
                    presenter.triggerLineEvent(score);&#13;
                }&#13;
                presenter.isLineInMove = false;&#13;
            })&#13;
            .mouseup(function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (presenter.isLineInMove &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    (presenter.isAllOK()) ? (score=1) : (score=0);&#13;
                    if (!presenter.activity) score ='';&#13;
                    presenter.triggerLineEvent(score);&#13;
                }&#13;
                presenter.isLineInMove = false;&#13;
            })&#13;
            .mouseleave(function(e) {&#13;
                e.preventDefault();&#13;
                e.stopPropagation();&#13;
                if (presenter.isLineInMove &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    (presenter.isAllOK()) ? (score=1) : (score=0);&#13;
                    if (!presenter.activity) score ='';&#13;
                    presenter.triggerLineEvent(score);&#13;
                }&#13;
                presenter.isLineInMove = false;&#13;
            })&#13;
            .mousemove(function(e) {&#13;
                e.preventDefault();&#13;
                e.stopPropagation();&#13;
                if (presenter.isLineInMove 	&amp;&amp; !presenter.disabled &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.isMoved = true;&#13;
                    x = e.originalEvent.pageX - presenter.piechart.offset().left - presenter.center;&#13;
                    y = presenter.piechart.offset().top - e.originalEvent.pageY + presenter.center;&#13;
                    //	alert("x: "+x+"   y:"+y);&#13;
                    for (k = 1; k &lt;= presenter.numberOfItems; k++) {&#13;
                        if (presenter.currentPercents[k-1] === 100) {&#13;
                            i = k;&#13;
                        }&#13;
                    }&#13;
                    presenter.doTheMove(i,x,y);&#13;
                }&#13;
            });&#13;
        presenter.$view.find('.line').on('touchstart', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            i = parseInt($(this).attr('id'),10);&#13;
            presenter.isLineInMove = true;&#13;
        });&#13;
        presenter.$view.find('.piechart').on('touchend', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (presenter.isLineInMove &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                (presenter.isAllOK()) ? (score=1) : (score=0);&#13;
                if (!presenter.activity) score ='';&#13;
                presenter.triggerLineEvent(score);&#13;
            }&#13;
            presenter.isLineInMove = false;&#13;
        });&#13;
        presenter.$view.find('.piechart').on('touchmove', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            x = parseInt(e.originalEvent.touches[0].pageX,10) - presenter.piechart.offset().left - presenter.center;&#13;
            y = presenter.piechart.offset().top - parseInt(e.originalEvent.touches[0].pageY,10) + presenter.center;&#13;
            if (presenter.isLineInMove &amp;&amp; (x &lt; -presenter.center || y &lt; -presenter.center || x &gt;presenter.center || y &gt; presenter.center) &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                presenter.isLineInMove = false;&#13;
                (presenter.isAllOK()) ? (score=1) : (score=0);&#13;
                if (!presenter.activity) score ='';&#13;
                presenter.triggerLineEvent(score);&#13;
            }&#13;
            if (presenter.isLineInMove 	&amp;&amp; !presenter.disabled &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                presenter.isMoved = true;&#13;
                for (k = 1; k &lt;= presenter.numberOfItems; k++) {&#13;
                    if (presenter.currentPercents[k-1] === 100) {&#13;
                        i = k;&#13;
                    }&#13;
                }&#13;
                presenter.doTheMove(i,x,y);&#13;
            }&#13;
        });&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
    presenter.doTheMove = function(i,x,y) {&#13;
        var angle, angle2, angleTmp, previousItem, nextItem;&#13;
&#13;
        if (i === presenter.numberOfItems) {&#13;
            nextItem = 1;&#13;
        } else {&#13;
            nextItem = i+1;&#13;
        }&#13;
        if (i === 1) {&#13;
            previousItem = presenter.numberOfItems;&#13;
        } else {&#13;
            previousItem = i-1;&#13;
        }&#13;
        angle = Math.atan((x)/(y))*180/Math.PI;&#13;
        if (y &gt;= 0) {&#13;
            angle = 180 + angle;&#13;
        }&#13;
        presenter.move = false;&#13;
        angle = (angle + 360) % 360;&#13;
        if (angle &gt;= (presenter.angles[i-1] + presenter.step/100*360 + 1)%360 - 1 &amp;&amp; (angle - presenter.angles[i-1] +360)%360 &lt; 90) {&#13;
            angle = presenter.angles[i-1] + presenter.step/100*360;&#13;
            presenter.move = 'plus';&#13;
        } else if (angle &lt;= (presenter.angles[i-1] - presenter.step/100*360 + 359) % 360+1 &amp;&amp; (presenter.angles[i-1] -angle + 360)%360 &lt; 90) {&#13;
            angle = presenter.angles[i-1] - presenter.step/100*360;&#13;
            presenter.move = 'minus';&#13;
        }&#13;
        angle = (angle + 360) % 360;&#13;
        if ((presenter.move == 'plus' &amp;&amp; presenter.currentPercents[nextItem-1]-presenter.step &lt; 0) || (presenter.move == 'minus' &amp;&amp; presenter.currentPercents[i-1]-presenter.step &lt; 0)) {&#13;
            presenter.move = false;&#13;
        }&#13;
        if (presenter.move !== false) {&#13;
            angle = (angle + 360) % 360;&#13;
            presenter.$view.find('#'+i).attr("transform", "rotate(" + angle + ", "+presenter.center+", "+presenter.center+")");&#13;
            presenter.angles[i-1] = angle;&#13;
            angle = (angle + 180) /180 * Math.PI;&#13;
            x1 = parseFloat(presenter.center + presenter.radius * Math.sin(angle));&#13;
            y1 = parseFloat(presenter.center - presenter.radius * Math.cos(angle));&#13;
            tmp1 = presenter.$view.find('#item'+(i)).attr('d');&#13;
            tmp4 = " 1 "+x1+" "+y1+" L";&#13;
            tmp3 = tmp1.replace(/ 1 \d+\.?\d* \d+\.?\d* L/, tmp4);&#13;
            tmp1 = presenter.$view.find('#item'+(nextItem)).attr('d');&#13;
            tmp2 = tmp1.replace(/L \d+\.?\d* \d+\.?\d* A/, "L "+x1+" "+y1+" A");&#13;
            angle2 = (Math.round((presenter.angles[i-1] - presenter.angles[previousItem-1])*100)/100+360)%360;&#13;
            if (angle2 &gt; 180 || (angle2 &lt;0 &amp;&amp; angle2 &gt; -180)) {&#13;
                tmp3 = tmp3.replace(" 0 0 1 "," 0 1 1 ");&#13;
            } else {&#13;
                tmp3 = tmp3.replace(" 0 1 1 "," 0 0 1 ");&#13;
            }&#13;
            angleTmp = presenter.angles[previousItem-1] + 0.5*angle2-180;&#13;
            angle2 = (Math.round((presenter.angles[nextItem-1] - presenter.angles[i-1])*100)/100+360)%360;&#13;
            if (angle2 &gt; 180 || (angle2 &lt;0 &amp;&amp; angle2 &gt; -180)) {&#13;
                tmp2 = tmp2.replace(" 0 0 1 "," 0 1 1 ");&#13;
            } else {&#13;
                tmp2 = tmp2.replace(" 0 1 1 "," 0 0 1 ");&#13;
            }&#13;
            if (presenter.move == 'plus') {&#13;
                presenter.currentPercents[i-1]+=presenter.step;&#13;
                presenter.currentPercents[nextItem-1]-=presenter.step;&#13;
            } else {&#13;
                presenter.currentPercents[i-1]-=presenter.step;&#13;
                presenter.currentPercents[nextItem-1]+=presenter.step;&#13;
            }&#13;
            presenter.$view.find('#item'+(i)).attr("d", tmp3);&#13;
            angle = 0;&#13;
            if (presenter.currentPercents[i-1] === 100) {&#13;
                if (presenter.items[i-1]['Color'] != '') {&#13;
                    presenter.$view.find('.graph').attr("style", "fill:"+presenter.items[i-1]['Color']+"; fill-opacity:1;");&#13;
                } else {&#13;
                    presenter.$view.find('.graph').attr("class","graph item item"+i);&#13;
                    presenter.$view.find('.graph').attr("style", "fill-opacity:1");&#13;
                }&#13;
                angleTmp += 180;&#13;
            } else if (presenter.currentPercents[nextItem-1] === 100) {&#13;
                if (presenter.items[nextItem-1]['Color'] != '') {&#13;
                    presenter.$view.find('.graph').attr("style", "fill:"+presenter.items[nextItem-1]['Color']+"; fill-opacity:1;");&#13;
                } else {&#13;
                    presenter.$view.find('.graph').attr("class","graph item item"+nextItem);&#13;
                    presenter.$view.find('.graph').attr("style", "fill-opacity:1");&#13;
                }&#13;
                angle = 180;&#13;
            } else {&#13;
                presenter.$view.find('.graph').attr("style", "fill-opacity:0");&#13;
                presenter.$view.find('.graph').attr("class","graph");&#13;
            }&#13;
            presenter.$view.find('#item'+(nextItem)).attr("d", tmp2);&#13;
            presenter.changePercent(i, angleTmp);&#13;
            angleTmp = presenter.angles[i-1] + 0.5*angle2-180 + angle;&#13;
            presenter.changePercent(nextItem, angleTmp);&#13;
        }&#13;
    };&#13;
    presenter.changePercent = function(id, angle) {&#13;
        presenter.$view.find('#Text'+id).attr("x", (parseFloat(presenter.center + Math.sin(angle/180 * Math.PI)*(presenter.center * presenter.percentsPosition))));&#13;
        presenter.$view.find('#Text'+id).attr("y", (parseFloat(presenter.center - Math.cos(angle/180 * Math.PI)*(presenter.center * presenter.percentsPosition))));&#13;
        presenter.$view.find('#Text'+id)[0].textContent = presenter.currentPercents[id-1]+'%';&#13;
    };&#13;
    presenter.createPreview = function(view, model) {&#13;
        if (!presenter.initiate(view, model)) {&#13;
            presenter.piechart.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return false;&#13;
        }&#13;
        presenter.drawGraph();&#13;
        if (presenter.names) {&#13;
            presenter.currentPercents = new Array(presenter.numberOfItems);&#13;
            for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
                presenter.currentPercents[i] = parseFloat(presenter.items[i]['Starting percent']);&#13;
            }&#13;
            presenter.drawLegend();&#13;
        }&#13;
    };&#13;
    presenter.setShowErrorsMode = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isErrorCheckingMode = true;&#13;
        if (!presenter.activity)&#13;
            return 0;&#13;
        if (presenter.getErrorCount() &gt; 0) {&#13;
            presenter.$view.find('.piechart').addClass('wrong');&#13;
        } else if (presenter.getScore() &gt; 0) {&#13;
            presenter.$view.find('.piechart').addClass('correct');&#13;
        }&#13;
    };&#13;
    presenter.setWorkMode = function(){&#13;
        presenter.isErrorCheckingMode = false;&#13;
        presenter.$view.find('.piechart').removeClass('wrong');&#13;
        presenter.$view.find('.piechart').removeClass('correct');&#13;
    };&#13;
    presenter.reset = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var angle, angle2, angleTmp, x1, y1;&#13;
        presenter.isMoved = false;&#13;
        if (!presenter.error) {&#13;
            presenter.disabled = presenter.initDisabled;&#13;
            presenter.disabled ? presenter.disable() : presenter.enable();&#13;
            presenter.isVisible = presenter.initIsVisible;&#13;
            presenter.updateVisibility();&#13;
            for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
                ii = (i===0) ? (presenter.numberOfItems-1) : i-1;&#13;
                presenter.$view.find('#'+(i+1)).attr("transform", "rotate(" + presenter.startingLines[i] + ", "+presenter.center+", "+presenter.center+")");&#13;
                presenter.$view.find('#item'+(i+1)).attr("d", presenter.startingItems[i]);&#13;
                angle = (Math.round((presenter.startingLines[i] - presenter.startingLines[ii])*100)/100+360)%360;&#13;
                angleTmp = presenter.startingLines[ii] + 0.5*angle + 180;&#13;
                presenter.angles[i] = presenter.startingLines[i];&#13;
                presenter.currentPercents[i] = parseFloat(presenter.items[i]['Starting percent']);&#13;
                if (parseFloat(presenter.items[i]['Starting percent']) === 100) {&#13;
                    if (presenter.items[i]['Color'] != '') {&#13;
                        presenter.$view.find('.graph').attr("style", "fill:"+presenter.items[i]['Color']+"; fill-opacity:1;");&#13;
                    } else {&#13;
                        presenter.$view.find('.graph').attr("class","graph item item"+(i+1));&#13;
                        presenter.$view.find('.graph').attr("style", "fill-opacity:1");&#13;
                    }&#13;
                    angleTmp += 180;&#13;
                }&#13;
                if (presenter.values) presenter.changePercent((i+1), angleTmp);&#13;
            }&#13;
        }&#13;
        presenter.setWorkMode();&#13;
    };&#13;
    presenter.getErrorCount = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.isMoved &amp;&amp; presenter.activity) {&#13;
            for(var i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
                if (!(presenter.currentPercents[i] == presenter.items[i]['Answer'])) return 1;&#13;
            }&#13;
        }&#13;
        return 0;&#13;
    };&#13;
    presenter.getMaxScore = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.activity &amp;&amp; !presenter.error) {&#13;
            return 1;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
    presenter.getScore = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (!presenter.error) {&#13;
            for(var i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
                if (!(presenter.currentPercents[i] == presenter.items[i]['Answer'])) return 0;&#13;
            }&#13;
            return 1;&#13;
        }&#13;
    };&#13;
    presenter.getState = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.itemsData = new Array(presenter.numberOfItems);&#13;
        for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
            presenter.itemsData[i] = presenter.$view.find('#item'+(i+1)).attr('d');&#13;
        }&#13;
        return JSON.stringify({&#13;
            isMoved : presenter.isMoved,&#13;
            currentPercents : presenter.currentPercents,&#13;
            angles : presenter.angles,&#13;
            itemsData : presenter.itemsData,&#13;
            disabled : presenter.disabled,&#13;
            isVisible : presenter.isVisible&#13;
        });&#13;
    };&#13;
    presenter.setState = function(state){&#13;
        var angle, angle2, angleTmp, x1, y1;&#13;
        if (!presenter.error) {&#13;
            presenter.isMoved = JSON.parse(state).isMoved;&#13;
            presenter.currentPercents = JSON.parse(state).currentPercents;&#13;
            presenter.angles = JSON.parse(state).angles;&#13;
            presenter.itemsData = JSON.parse(state).itemsData;&#13;
            presenter.isVisible = JSON.parse(state).isVisible;&#13;
            presenter.updateVisibility();&#13;
            presenter.disabled = JSON.parse(state).disabled;&#13;
            presenter.disabled ? presenter.disable() : presenter.enable();&#13;
            for(i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
                ii = (i===0) ? (presenter.numberOfItems-1) : i-1;&#13;
                presenter.$view.find('#'+(i+1)).attr("transform", "rotate(" + presenter.angles[i] + ", "+presenter.center+", "+presenter.center+")");&#13;
                presenter.$view.find('#item'+(i+1)).attr("d", presenter.itemsData[i]);&#13;
                angle = (Math.round((presenter.angles[i] - presenter.angles[ii])*100)/100+360)%360;&#13;
                angleTmp = presenter.angles[ii] + 0.5*angle + 180;&#13;
                if (presenter.currentPercents[i] === 100) {&#13;
                    if (presenter.items[i]['Color'] != '') {&#13;
                        presenter.$view.find('.graph').attr("style", "fill:"+presenter.items[i]['Color']+"; fill-opacity:1;");&#13;
                    } else {&#13;
                        presenter.$view.find('.graph').attr("class","graph item item"+(i+1));&#13;
                        presenter.$view.find('.graph').attr("style", "fill-opacity:1");&#13;
                    }&#13;
                    angleTmp += 180;&#13;
                }&#13;
                if (presenter.values) presenter.changePercent((i+1), angleTmp);&#13;
            }&#13;
        }&#13;
    };&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            if (presenter.isShowAnswersActive) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.setWorkMode();&#13;
            presenter.$view.find('.chart').css("visibility", "hidden");&#13;
            presenter.drawGraph('showAnswers');&#13;
        }&#13;
        //	console.log('ShowAnswers: '+presenter.addonID);&#13;
    };&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find('.chart-show-answers').remove();&#13;
            presenter.$view.find('.chart').css("visibility", "visible");&#13;
        }&#13;
        //	console.log('HideAnswers: '+presenter.addonID);&#13;
    };&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Plot" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Expressions" nameLabel="Plot_property_expressions" type="list">
			<property isLocalized="false" name="id" nameLabel="Plot_property_id" type="string"/>
			<property isLocalized="false" name="expression" nameLabel="Plot_property_expression" type="string"/>
			<property isLocalized="false" name="xMin" nameLabel="Plot_property_x_min" type="int"/>
			<property isLocalized="false" name="xMax" nameLabel="Plot_property_x_max" type="int"/>
			<property isLocalized="false" name="yMin" nameLabel="Plot_property_y_min" type="int"/>
			<property isLocalized="false" name="yMax" nameLabel="Plot_property_y_max" type="int"/>
			<property isLocalized="false" name="selectable" nameLabel="Plot_property_selectable" type="boolean"/>
			<property isLocalized="false" name="correct" nameLabel="Plot_property_correct" type="boolean"/>
			<property isLocalized="false" name="y to x" nameLabel="Plot_property_y_to_x" type="boolean"/>
			<property isLocalized="false" name="hidden" nameLabel="Plot_property_hidden" type="boolean"/>
			<property isLocalized="false" name="color" nameLabel="Plot_property_color" type="string"/>
		</property>
		<property name="Variables" nameLabel="Plot_property_variables" type="list">
			<property isLocalized="false" name="plot id" nameLabel="Plot_property_plot_id" type="string"/>
			<property isLocalized="false" name="variable" nameLabel="Plot_property_variable" type="string"/>
			<property isLocalized="false" name="value" nameLabel="Plot_property_value" type="string"/>
			<property isLocalized="false" name="expected" nameLabel="Plot_property_expected" type="string"/>
		</property>
		<property name="Points" nameLabel="Plot_property_points" type="list">
			<property isLocalized="false" name="x value" nameLabel="Plot_property_x_value" type="string"/>
			<property isLocalized="false" name="y value" nameLabel="Plot_property_y_value" type="string"/>
			<property isLocalized="false" name="selected" nameLabel="Plot_property_selected" type="boolean"/>
			<property isLocalized="false" name="correct" nameLabel="Plot_property_correct" type="boolean"/>
			<property isLocalized="false" name="not scored" nameLabel="Plot_property_not_scored" type="boolean"/>
		</property>
		<property isLocalized="false" name="xMin" nameLabel="Plot_property_x_min" type="int"/>
		<property isLocalized="false" name="xMax" nameLabel="Plot_property_x_max" type="int"/>
		<property isLocalized="false" name="yMin" nameLabel="Plot_property_y_min" type="int"/>
		<property isLocalized="false" name="yMax" nameLabel="Plot_property_y_max" type="int"/>
		<property isLocalized="false" name="Grid" nameLabel="Plot_property_grid" type="boolean"/>
		<property isLocalized="false" name="GridStepX" nameLabel="Plot_property_grid_step_x" type="int"/>
		<property isLocalized="false" name="GridStepY" nameLabel="Plot_property_grid_step_y" type="int"/>
		<property isLocalized="false" name="Arrowhead size" nameLabel="Plot_property_arrow_head_size" type="int"/>
		<property isLocalized="false" name="Axis values" nameLabel="Plot_property_axis_values" type="boolean"/>
		<property isLocalized="false" name="Axis x values" nameLabel="Plot_property_axis_x_values" type="string"/>
		<property isLocalized="false" name="Axis y values" nameLabel="Plot_property_axis_y_values" type="string"/>
		<property isLocalized="true" name="X axis description" nameLabel="Plot_property_x_axis_description" type="string"/>
		<property isLocalized="true" name="Y axis description" nameLabel="Plot_property_y_axis_description" type="string"/>
		<property isLocalized="false" name="hide X axis" nameLabel="Plot_property_hide_x_axis" type="boolean"/>
		<property isLocalized="false" name="hide Y axis" nameLabel="Plot_property_hide_y_axis" type="boolean"/>
		<property isLocalized="false" name="Point active area size" nameLabel="Plot_property_points_active_area_size" type="int"/>
		<property isLocalized="false" name="Point radius" nameLabel="Plot_property_points_radius" type="int"/>
		<property isLocalized="false" name="Point outline radius" nameLabel="Plot_property_points_outline_radius" type="int"/>
		<property isLocalized="false" name="Max selected points" nameLabel="Plot_property_max_selected_points" type="int"/>
		<property isLocalized="false" name="Not activity" nameLabel="Plot_property_not_activity" type="boolean"/>
		<property isLocalized="false" name="Free points" nameLabel="Plot_property_free_points" type="boolean"/>
		<property isLocalized="false" name="Asymptote DY" nameLabel="Plot_property_asymptote_dy" type="int"/>
		<property isLocalized="false" name="Broadcast" nameLabel="Plot_property_broadcast" type="string"/>
		<property isLocalized="false" name="Decimal separator" nameLabel="Plot_property_decimal_separator" type="string"/>
        <property isLocalized="false" name="X axis values position" nameLabel="Plot_property_x_axis_values_position" type="int"/>
        <property isLocalized="false" name="Y axis values position" nameLabel="Plot_property_y_axis_values_position" type="int"/>
	</model>
<css>.canvas {&#13;
	background-color:#ffffff;&#13;
}&#13;
/* axis */&#13;
.axisText {&#13;
	font-family:Verdana, sans-serif; &#13;
	font-size:8pt; &#13;
	fill:#000000;&#13;
	stroke-width:0;&#13;
}&#13;
.axisXText {&#13;
	text-anchor: end;&#13;
}		&#13;
.axisYText {&#13;
}	&#13;
.axis {&#13;
	stroke:#000000;&#13;
	stroke-width: 1;&#13;
}&#13;
.axisArrows {&#13;
	fill: #000000;&#13;
}&#13;
.axisThicksTextX {&#13;
	text-anchor: middle;&#13;
	dominant-baseline: central&#13;
}&#13;
.axisThicksTextY {&#13;
	text-anchor: left;&#13;
	dominant-baseline: central&#13;
}&#13;
/* grid */&#13;
.grid {&#13;
	stroke:#ddd;&#13;
	stroke-width: 1;&#13;
    stroke-dasharray: 2 2;&#13;
}&#13;
/* plot */&#13;
.draw_active_area {&#13;
	stroke-opacity:0.0;&#13;
	stroke-linecap:round;&#13;
	stroke-linejoin:round;&#13;
	stroke-width:10;&#13;
	fill:none;&#13;
	stroke:#ffffff;&#13;
}&#13;
.draw_outline_base {&#13;
	stroke-linecap:round;&#13;
	stroke-linejoin:round;&#13;
	stroke-opacity:0;&#13;
	fill:none;&#13;
}&#13;
.draw_outline {&#13;
	stroke-opacity:0.5;&#13;
	stroke-width:5;&#13;
	fill:none;&#13;
	stroke:#008800;&#13;
}&#13;
.draw_outline_mark_error {&#13;
	stroke-opacity:0.5;&#13;
	stroke-width:5;&#13;
	fill:none;			&#13;
	stroke:#ff0000;&#13;
}&#13;
.draw_outline_mark_correct {&#13;
	stroke-opacity:0.5;&#13;
	stroke-width:5;&#13;
	fill:none;&#13;
	stroke:#008800;&#13;
}&#13;
.draw {&#13;
	fill: none;&#13;
	stroke:#0000ff;&#13;
	stroke-width: 2;			&#13;
}&#13;
.draw_selected {&#13;
	fill: none;&#13;
	stroke-width:3;&#13;
	stroke:#008800;&#13;
}&#13;
.draw_over{&#13;
	stroke:#888888;&#13;
}	&#13;
.draw_mark_error {&#13;
	stroke: #ff0000;&#13;
    stroke-width:2;&#13;
}&#13;
.draw_mark_correct {&#13;
	stroke:#008800;&#13;
}&#13;
/* point */&#13;
.point_active_area {&#13;
	stroke-width:0;&#13;
	fill:#ff0000;&#13;
	fill-opacity:0;&#13;
}&#13;
.point_outline_base {&#13;
	stroke-opacity:0;&#13;
	stroke:#bb0000;&#13;
	stroke-width:2;&#13;
	fill-opacity:0;&#13;
	fill:#dd0000;&#13;
}		&#13;
.point_outline {&#13;
	stroke-opacity:1;&#13;
	stroke:#006600;&#13;
	stroke-width:2;&#13;
	fill-opacity:1;&#13;
	fill:#00bb00;&#13;
}	&#13;
.point_outline_mark_error {&#13;
	stroke-opacity:1;&#13;
	stroke:#bb0000;&#13;
	stroke-width:2;&#13;
    fill-opacity:1;&#13;
	fill:#ff0000;&#13;
}&#13;
.point_outline_mark_correct {&#13;
	stroke-opacity:1;&#13;
	stroke:#006600;&#13;
	stroke-width:2;&#13;
	fill-opacity:1;&#13;
	fill:#00bb00;&#13;
}&#13;
.point {&#13;
	fill:#dddddd;&#13;
	stroke:#bbbbbb;&#13;
	stroke-width:0.5;&#13;
}&#13;
.point_selected {&#13;
	fill:#00bb00;&#13;
	stroke:#006600;&#13;
	stroke-width:2;&#13;
}&#13;
.point_over {&#13;
	fill:#aaaaaa;&#13;
	stroke:#666666;&#13;
	stroke-width:2;&#13;
}&#13;
.point_error {&#13;
	fill:#ff0000;&#13;
	stroke:#bb0000;&#13;
	stroke-width:2;&#13;
}&#13;
.point_correct {&#13;
	fill:#00bb00;&#13;
	stroke:#00bb00;&#13;
	stroke-width:2;&#13;
}&#13;
&#13;
.plot_show_answers {&#13;
    stroke-opacity:1;&#13;
    stroke:#006600;&#13;
    stroke-width:2;&#13;
    fill-opacity:1;&#13;
    fill:#00bb00;&#13;
}&#13;
</css><view>&lt;div class="canvas" style="width:100%; height:100%; overflow:hidden"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="canvas" style="width:100%; height:100%; overflow:hidden"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonPlot_create(){&#13;
    function Plot() {&#13;
        this.VERSION = '1.1.17';&#13;
        this.STATE_CORRECT = 1;&#13;
        this.STATE_INCORRECT = 0;&#13;
        this.STATE_NOT_ACTIVITY = '';&#13;
        this.STATE_NULL = 0;&#13;
        this.STATE_SELECT_POINT = 1;&#13;
        this.STATE_DESELECT_POINT = 0;&#13;
        this.INFINITY_NEGATIVE_VALUE = -2147483647;&#13;
        this.INFINITY_POSITIVE_VALUE = 2147483647;&#13;
        this.ASYMPTOTE_MINIMUM_TRIAL = 3;&#13;
        this.TYPE_X_TO_Y = 1;&#13;
        this.TYPE_Y_TO_X = 2;&#13;
        this.asymptoteMinimumDY = 5;&#13;
        this.interactive = true;&#13;
        this.xMin = -10;&#13;
        this.xMax = 10;&#13;
        this.yMin = -10;&#13;
        this.yMax = 10;&#13;
        this.zoomStep = 0.1;&#13;
        this.expressions = [];&#13;
        this.points = [];&#13;
        this.svg = null;&#13;
        this.stepX = 0;&#13;
        this.stepY = 0;&#13;
        this.offsetX = 0;&#13;
        this.offsetY = 0;&#13;
        this.width = 0;&#13;
        this.height = 0;&#13;
        this.gridStepX = 1;&#13;
        this.gridStepY = 1;&#13;
        this.grid = true;&#13;
        this.lastOffsetX = 0;&#13;
        this.lastOffsetY = 0;&#13;
        this.arrowheadSize = 6;&#13;
        this.axisValues = true;&#13;
        this.svgDoc = null;&#13;
        this.uiEnabled = true;&#13;
        this.initXMin = this.xMin;&#13;
        this.initXMax = this.xMax;&#13;
        this.initYMin = this.yMin;&#13;
        this.initYMax = this.yMax;&#13;
        this.pointActiveArea = 15;&#13;
        this.pointRadius = 3;&#13;
        this.pointOutlineRadius = 7;&#13;
        this.selectedPoints = [];&#13;
        this.xAxisDescription = 'x';&#13;
        this.yAxisDescription = 'y';&#13;
        this.xAxisVisible = true;&#13;
        this.yAxisVisible = true;&#13;
        this.xAxisCyclicValues = [];&#13;
        this.xAxisCustomValues = [];&#13;
        this.yAxisCyclicValues = [];&#13;
        this.yAxisCustomValues = [];&#13;
        this.maxSelectedPoints = 0;&#13;
        this.stateChanged = function(){};&#13;
        this.convertValueToDisplay = function(val){ return val; };&#13;
        this.isActivity = true;&#13;
        this.freePoints = false;&#13;
        this.precision = {x: 100, y:100};&#13;
        this.attempted = false;&#13;
        this.xAxisValuesPosition = 0;&#13;
        this.yAxisValuesPosition = 0;&#13;
&#13;
        this.setXAxisValuesPosition = function (value) {&#13;
            this.svgDoc.find('.axisThicksTextX').attr('y', value);&#13;
        };&#13;
&#13;
        this.setYAxisValuesPosition = function (value) {&#13;
            var element = this.svgDoc.find('.axisThicksTextY');&#13;
            element.attr('x', value);&#13;
            if(value &lt; 0) {&#13;
                element.attr("text-anchor", "end");&#13;
            }&#13;
        };&#13;
&#13;
        this.setScale = function () {&#13;
            this.svgDoc.find('.scale').attr('transform', 'scale(1, -1)');&#13;
        };&#13;
        this.setStep = function () {&#13;
            this.stepX = this.width/(Math.max(this.xMin, this.xMax) - Math.min(this.xMin, this.xMax));&#13;
            this.stepY = this.height/(Math.max(this.yMin, this.yMax) - Math.min(this.yMin, this.yMax));&#13;
        };&#13;
        this.translate = function() {&#13;
            this.offsetX = this.xMin*this.stepX*(-1);&#13;
            this.offsetY = this.yMax*this.stepY*(-1);&#13;
            this.svgDoc.find('.translate').attr('transform', 'translate('+this.offsetX+', '+this.offsetY+')');&#13;
        };&#13;
        this.draw = function() {&#13;
            this.clearCanvas();&#13;
            if(this.grid) {&#13;
                this.drawGrid();&#13;
            }&#13;
            this.drawAxis();&#13;
            this.drawPlots();&#13;
            if(this.points.length &gt; 0 || this.freePoints) {&#13;
                this.drawPoints();&#13;
            }&#13;
            this.enableUI(this.uiEnabled);&#13;
            if(this.xAxisValuesPosition != '' &amp;&amp; !isNaN(this.xAxisValuesPosition)){&#13;
                this.setXAxisValuesPosition(this.xAxisValuesPosition);&#13;
            }&#13;
&#13;
            if(this.yAxisValuesPosition != '' &amp;&amp; !isNaN(this.yAxisValuesPosition)){&#13;
                this.setYAxisValuesPosition(this.yAxisValuesPosition);&#13;
            }&#13;
        };&#13;
        this.clearCanvas = function() {&#13;
            this.svgDoc.find('.drawings').children().remove();&#13;
            this.svgDoc.find('.grid').children().remove();&#13;
            this.svgDoc.find('.axis').children().remove();&#13;
            this.svgDoc.find('.points').children().remove();&#13;
            this.svgDoc.find('.pointsAreas').children().remove();&#13;
            this.svgDoc.find('.drawingsAreas').children().remove();&#13;
        }&#13;
        this.drawXAxis = function() {&#13;
            var path = this.svg.createPath();&#13;
            this.svg.line(this.svgDoc.find('.axis'), -this.offsetX, 0, this.width-this.offsetX, 0);&#13;
            path.move(this.width - this.offsetX, 0).&#13;
            line(this.width - this.offsetX - this.arrowheadSize, this.arrowheadSize/2).&#13;
            line(this.width - this.offsetX - this.arrowheadSize, -this.arrowheadSize/2).&#13;
            line(this.width - this.offsetX, 0);&#13;
            this.svg.text(this.svgDoc.find('.axis'), this.width-this.offsetX-3, 13, this.xAxisDescription, {&#13;
                'class':'axisText axisXText',&#13;
                transform:'scale(1,-1)'&#13;
            });&#13;
            this.svg.path(this.svgDoc.find('.axis'), path, {&#13;
                'class':'axisArrows'&#13;
            });&#13;
        };&#13;
        this.drawYAxis = function() {&#13;
            var path = this.svg.createPath();&#13;
            this.svg.line(this.svgDoc.find('.axis'), 0, -this.offsetY, 0, -this.height-this.offsetY);&#13;
            path.move(0, -this.offsetY).&#13;
            line(this.arrowheadSize/2, -this.offsetY - this.arrowheadSize).&#13;
            line(-this.arrowheadSize/2, -this.offsetY - this.arrowheadSize).&#13;
            line(0, -this.offsetY);&#13;
            this.svg.text(this.svgDoc.find('.axis'), 7, this.offsetY+10, this.yAxisDescription, {&#13;
                'class':'axisText axisYText',&#13;
                transform:'scale(1,-1)'&#13;
            });&#13;
            this.svg.path(this.svgDoc.find('.axis'), path, {&#13;
                'class':'axisArrows'&#13;
            });&#13;
        };&#13;
        this.drawAxis0Point = function() {&#13;
            this.svg.text(this.svgDoc.find('.axis'), 3, 13, '0', {&#13;
                'class':'axisText',&#13;
                transform:'scale(1,-1)'&#13;
            });&#13;
        };&#13;
        this.drawXTick = function(x) {&#13;
            if(x &lt; this.width - this.offsetX - this.arrowheadSize) {&#13;
                this.svg.line(this.svgDoc.find('.axis'), x, -3, x, 3);&#13;
            }&#13;
        };&#13;
        this.drawYTick = function(y) {&#13;
            if(y &lt; -this.offsetY - this.arrowheadSize) {&#13;
                this.svg.line(this.svgDoc.find('.axis'), -3, y, 3, y);&#13;
            }&#13;
        };&#13;
        this.drawXTickValue = function(x, coords) {&#13;
            if(x &lt; this.width - this.offsetX - 15) {&#13;
                if(this.xAxisVisible &amp;&amp; this.yAxisVisible &amp;&amp; coords.x == 0) {&#13;
                    return;&#13;
                } else {&#13;
                    this.svg.text(this.svgDoc.find('.axis'), x, 10, this.convertValueToDisplay(coords.x.toString()), {&#13;
                        'class':'axisText axisThicksTextX',&#13;
                        transform:'scale(1,-1)'&#13;
                    });&#13;
                }&#13;
            }&#13;
        };&#13;
        this.drawYTickValue = function(y, coords) {&#13;
            if(this.xAxisVisible &amp;&amp; this.yAxisVisible &amp;&amp; coords.y == 0) {&#13;
            ;&#13;
            } else {&#13;
                this.svg.text(this.svgDoc.find('.axis'), 7, y, this.convertValueToDisplay(coords.y.toString()), {&#13;
                    'class':'axisText axisThicksTextY',&#13;
                    transform:'scale(1,-1)'&#13;
                });&#13;
            }&#13;
        };&#13;
        this.checkAndDrawXTickValue = function(x, dx, cx, tx) {&#13;
            var currentTick;&#13;
            var coords = this.px2coords(cx, 0);&#13;
            //check cyclic values&#13;
            if(this.xAxisCyclicValues.length &gt; 0) {&#13;
                currentTick = Math.round(x/dx);&#13;
                $.each(this.xAxisCyclicValues, function(k, v) {&#13;
                    if(currentTick%v == 0) {&#13;
                        plot.drawXTickValue(tx, coords);&#13;
                        return;&#13;
                    }&#13;
                })&#13;
            } else if(this.xAxisCustomValues.length == 0) {&#13;
                this.drawXTickValue(tx, coords);&#13;
            }&#13;
        };&#13;
        this.drawCustomXTicks = function() {&#13;
            $.each(this.xAxisCustomValues, function(idx, val) {&#13;
                p = plot.coords2px(val, 0);&#13;
                plot.drawXTick(p.x);&#13;
                plot.drawXTickValue(p.x, {x:val, y:0});&#13;
            });&#13;
        };&#13;
        this.drawXTicks = function() {&#13;
            var x, sp;&#13;
            var dx = this.gridStepX*this.stepX;&#13;
            var modX = this.offsetX%(dx);&#13;
            //get starting point of viewport&#13;
            sp = this.offsetX &lt; 0 ? -this.offsetX + modX: 0&#13;
            //above 0&#13;
            for(x = sp; x &lt;= this.width - this.offsetX; x += dx) {&#13;
                this.drawXTick(x);&#13;
                this.checkAndDrawXTickValue(x, dx, x+this.offsetX, x);&#13;
            }&#13;
            //below 0&#13;
            for(x = sp; x &gt;= -this.offsetX - modX; x-= dx) {&#13;
                this.drawXTick(x);&#13;
                this.checkAndDrawXTickValue(x, dx, x+this.offsetX, x);&#13;
            }&#13;
            this.drawCustomXTicks();&#13;
        };&#13;
        this.checkAndDrawYTickValue = function(y, dy, cy, ty) {&#13;
            coords = this.px2coords(0, cy);&#13;
            //check cyclic values&#13;
            if(this.yAxisCyclicValues.length &gt; 0) {&#13;
                currentTick = Math.round(y/dy);&#13;
                $.each(this.yAxisCyclicValues, function(k, v) {&#13;
                    if(currentTick%v == 0) {&#13;
                        plot.drawYTickValue(ty, coords);&#13;
                        return;&#13;
                    }&#13;
                })&#13;
            } else if(this.yAxisCustomValues.length == 0) {&#13;
                this.drawYTickValue(ty, coords);&#13;
            }&#13;
        };&#13;
        this.drawCustomYTicks = function() {&#13;
            var p;&#13;
            $.each(this.yAxisCustomValues, function(idx, val){&#13;
                p = plot.coords2px(0, val);&#13;
                plot.drawYTick(p.y);&#13;
                plot.drawYTickValue(-p.y, {&#13;
                    x:0,&#13;
                    y:val&#13;
                });&#13;
            });&#13;
        };&#13;
        this.drawYTicks = function() {&#13;
            var y;&#13;
            var dy = this.gridStepY*this.stepY;&#13;
            var modY = this.offsetY%(dy);&#13;
            sp = Math.abs(this.offsetY) &lt; this.height ? 0 : Math.abs(this.offsetY) - this.height - (Math.abs(this.offsetY) - this.height)%dy;&#13;
            //above 0&#13;
            for(y = sp; y &lt;= sp+this.height+dy; y += dy) {&#13;
                this.drawYTick(y);&#13;
                this.checkAndDrawYTickValue(y, dy, -y-this.offsetY, -y);&#13;
            }&#13;
            //below 0&#13;
            sp = this.offsetY &gt; 0 ? this.offsetY - modY : 0;&#13;
            for(y = sp; y &lt; this.offsetY + this.height; y += dy) {&#13;
                this.drawYTick(-y);&#13;
                this.checkAndDrawYTickValue(y, dy, y-this.offsetY, y);&#13;
            }&#13;
            this.drawCustomYTicks();&#13;
        };&#13;
        this.drawAxis = function() {&#13;
            if(this.yAxisVisible) {&#13;
                this.drawYAxis();&#13;
            }&#13;
            if(this.xAxisVisible) {&#13;
                this.drawXAxis();&#13;
            }&#13;
            if(this.xAxisVisible &amp;&amp; this.yAxisVisible) {&#13;
                this.drawAxis0Point();&#13;
            }&#13;
            if(this.axisValues) {&#13;
                if(this.xAxisVisible) {&#13;
                    this.drawXTicks();&#13;
                }&#13;
                if(this.yAxisVisible) {&#13;
                    this.drawYTicks();&#13;
                }&#13;
            }&#13;
        };&#13;
        this.drawGrid = function() {&#13;
            var dx = this.gridStepX*this.stepX;&#13;
            var modX = this.offsetX%(dx);&#13;
            for(var x = -this.offsetX+modX; x &lt;= this.width-this.offsetX; x += dx) {&#13;
                //pionowe&#13;
                this.svg.line(this.svgDoc.find('.grid'), x, -this.offsetY, x, -this.height-this.offsetY);&#13;
            }&#13;
&#13;
            var dy = this.gridStepY*this.stepY;&#13;
            var modY = this.offsetY%(dy);&#13;
            for(var y = -this.offsetY+modY; y &gt;= -this.height-this.offsetY; y -= dy) {&#13;
                //poziome&#13;
                this.svg.line(this.svgDoc.find('.grid'), -this.offsetX, y, this.width-this.offsetX, y);&#13;
            }&#13;
        };&#13;
        this.drawPoints = function() {&#13;
            var dx = this.gridStepX*this.stepX;&#13;
            var modX = this.offsetX%(dx);&#13;
            var dy = this.gridStepY*this.stepY;&#13;
            var modY = this.offsetY%(dy);&#13;
            var point;&#13;
            var html = $('&lt;span class="point"&gt;&lt;/span&gt;');&#13;
            for(var x = -this.offsetX+modX; x &lt;= this.width-this.offsetX; x += dx) {&#13;
                var idx = 0;&#13;
                for(var y = -this.offsetY+modY; y &gt;= -this.height-this.offsetY; y -= dy) {&#13;
                    point = this.px2coords(x+this.offsetX,dy*idx-modY);&#13;
                    this.svg.circle(this.svgDoc.find('.points'), x, y, this.pointOutlineRadius, {&#13;
                        'class':'point_outline_base',&#13;
                        vx:point.x,&#13;
                        vy:point.y&#13;
                        });&#13;
                    this.svg.circle(this.svgDoc.find('.points'), x, y, this.pointRadius, {&#13;
                        'class':'point',&#13;
                        vx:point.x,&#13;
                        vy:point.y&#13;
                        });&#13;
                    if(this.interactive) {&#13;
                        this.svg.rect(this.svgDoc.find('.pointsAreas'), x-this.pointActiveArea/2, y-this.pointActiveArea/2, this.pointActiveArea, this.pointActiveArea, {&#13;
                            'class':'point_active_area',&#13;
                            vx:point.x,&#13;
                            vy:point.y&#13;
                            });&#13;
                    }&#13;
                    idx++;&#13;
                }&#13;
            }&#13;
            $.each(plot.selectedPoints, function(k, v) {&#13;
                var refObj = plot.svgDoc.find('.point[vx="'+v.x+'"][vy="'+v.y+'"]');&#13;
                var refObjOutline = plot.svgDoc.find('.point_outline_base[vx="'+v.x+'"][vy="'+v.y+'"]');&#13;
                refObj.addClass('point_selected');&#13;
                refObjOutline.addClass('point_outline');&#13;
                if(!v.clickable) {&#13;
                    refObj.addClass('nonclickable');&#13;
                }&#13;
            });&#13;
&#13;
            if(this.interactive) {&#13;
                obj = this.svgDoc.find('.point_active_area');&#13;
                obj.mouseover(function() {&#13;
                    var vx = $(this).attr('vx');&#13;
                    var vy = $(this).attr('vy');&#13;
                    var point;&#13;
                    var point = plot.svgDoc.find('.point[vx="'+vx+'"][vy="'+vy+'"]');&#13;
                    if(plot.maxSelectedPoints == 0 || plot.selectedPoints.length &lt; plot.maxSelectedPoints || point.hasClass('point_selected')) {&#13;
                        point = plot.svgDoc.find('.point[vx="'+vx+'"][vy="'+vy+'"]');&#13;
                        if(!point.hasClass('nonclickable')) {&#13;
                            point.addClass('point_over');&#13;
                        }&#13;
                    }&#13;
                });&#13;
                obj.mouseout(function() {&#13;
                    var vx = $(this).attr('vx');&#13;
                    var vy = $(this).attr('vy');&#13;
                    plot.svgDoc.find('.point[vx="'+vx+'"][vy="'+vy+'"]').removeClass('point_over');&#13;
                });&#13;
                obj.click(function(e) {&#13;
                    e.stopPropagation();&#13;
&#13;
                    var vx = $(this).attr('vx');&#13;
                    var vy = $(this).attr('vy');&#13;
                    var refObj = plot.svgDoc.find('.point[vx="'+vx+'"][vy="'+vy+'"]');&#13;
                    if(!refObj.hasClass('nonclickable')) {&#13;
                        if(refObj.hasClass('point_selected')) {&#13;
                            plot._deselectPoint(vx, vy, false);&#13;
                        } else {&#13;
                            plot._selectPoint(vx, vy, false);&#13;
                        }&#13;
                    }&#13;
                });&#13;
            }&#13;
        };&#13;
        this._touchPoint = function(x, y) {&#13;
            this.attempted = true;&#13;
            var pvx = parseFloat(x);&#13;
            var pvy = parseFloat(y);&#13;
            //mark as touched in model if exists&#13;
            $.each(plot.points, function(k,v) {&#13;
                if(v.x == pvx &amp;&amp; v.y == pvy) {&#13;
                    v.touched = true;&#13;
                }&#13;
            });&#13;
        }&#13;
        this._deselectPoint = function(x,y, isShowAnswersMode) {&#13;
            if (!isShowAnswersMode) {&#13;
                 this._touchPoint(x, y);&#13;
            }&#13;
            var pvx = parseFloat(x);&#13;
            var pvy = parseFloat(y);&#13;
            var refObj = plot.svgDoc.find('.point[vx="'+x+'"][vy="'+y+'"]');&#13;
            var refObjOutline = plot.svgDoc.find('.point_outline_base[vx="'+x+'"][vy="'+y+'"]');&#13;
            refObj.removeClass('point_selected');&#13;
            refObjOutline.removeClass('point_outline');&#13;
            $.each(this.selectedPoints, function(k, v) {&#13;
                if(v.x == pvx &amp;&amp; v.y == pvy) {&#13;
                    plot.selectedPoints.splice(k, 1);&#13;
                    if (!isShowAnswersMode) {&#13;
                        plot.stateChanged({&#13;
                            item:'point_'+pvx+'_'+pvy,&#13;
                            value:0,&#13;
                            score:plot.getPointEventScore(pvx, pvy, plot.STATE_DESELECT_POINT)&#13;
                        });&#13;
                    }&#13;
                    return false;&#13;
                }&#13;
            });&#13;
        }&#13;
        this._selectPoint = function(x,y, isShowAnswersMode) {&#13;
            if (!isShowAnswersMode) {&#13;
                this._touchPoint(x, y);&#13;
            }&#13;
            var pvx = parseFloat(x);&#13;
            var pvy = parseFloat(y);&#13;
            var refObj = plot.svgDoc.find('.point[vx="'+x+'"][vy="'+y+'"]');&#13;
            var refObjOutline = plot.svgDoc.find('.point_outline_base[vx="'+x+'"][vy="'+y+'"]');&#13;
            //check if we can add another point&#13;
            if(plot.maxSelectedPoints == 0 || plot.selectedPoints.length &lt; plot.maxSelectedPoints) {&#13;
                refObj.addClass('point_selected');&#13;
                refObjOutline.addClass('point_outline');&#13;
                var hasPoint = false;&#13;
                $.each(plot.selectedPoints, function(k, v) {&#13;
                    if(v.x == pvx &amp;&amp; v.y == pvy) {&#13;
                        hasPoint = true;&#13;
                        return false;&#13;
                    }&#13;
                });&#13;
                if(!hasPoint) {&#13;
                    plot.selectedPoints.push({&#13;
                        x:pvx,&#13;
                        y:pvy,&#13;
                        clickable: true&#13;
                    });&#13;
                    if (!isShowAnswersMode) {&#13;
                        plot.stateChanged({&#13;
                            item:'point_'+pvx+'_'+pvy,&#13;
                            value:1,&#13;
                            score:plot.getPointEventScore(pvx, pvy, plot.STATE_SELECT_POINT)&#13;
                        });&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
        this.removePlot = function(p) {&#13;
            this.svgDoc.find('.drawingsAreas .draw_active_area[refuid="'+p+'"]').remove();&#13;
            this.svgDoc.find('.drawings .draw_outline_base[ouid="'+p+'"]').remove();&#13;
            this.svgDoc.find('.drawings .draw[uid="'+p+'"]').remove();&#13;
        }&#13;
        this.drawPlot = function(p) {&#13;
            var obj, cp;&#13;
            var path = this.svg.createPath();&#13;
            //function type x to y&#13;
            if(this.expressions[p].type == this.TYPE_X_TO_Y) {&#13;
                path = this._drawXToY(p);&#13;
            //function type y to x&#13;
            } else if(this.expressions[p].type == this.TYPE_Y_TO_X) {&#13;
                path = this._drawYToX(p);&#13;
            }&#13;
            this.svg.path(this.svgDoc.find('.drawings'), path, {&#13;
                ouid:p,&#13;
                'class': 'draw_outline_base'&#13;
            });&#13;
            this.svg.path(this.svgDoc.find('.drawings'), path, {&#13;
                uid:p,&#13;
                isselected: this.expressions[p].selected ? 1 : 0,&#13;
                'class': 'is_plot draw draw_'+(parseInt(p)+1)&#13;
            });&#13;
            //restore style&#13;
            cp = plot.svgDoc.find('.drawings [uid="'+p+'"]');&#13;
            var props = this.expressions[p].cssProperties;&#13;
            props['stroke'] = this.expressions[p].cssColor;&#13;
            cp.data({&#13;
                cssStyle: this._composeStyle(props)&#13;
            });&#13;
            cp.attr('style', cp.data().cssStyle);&#13;
            if(this.interactive) {&#13;
                this.svg.path(this.svgDoc.find('.drawingsAreas'), path, {&#13;
                    refuid:p,&#13;
                    'class':'draw_active_area'&#13;
                });&#13;
            }&#13;
            if(this.expressions[p].selected) {&#13;
                plot.svgDoc.find('.is_plot[uid="'+p+'"]').addClass('draw_selected draw_'+(parseInt(p)+1)+'_selected').removeAttr('style');&#13;
                plot.svgDoc.find('.draw_outline_base[ouid="'+p+'"]').addClass('draw_outline draw_'+(parseInt(p)+1)+'_outline');&#13;
            }&#13;
            if(this.expressions[p].selectable &amp;&amp; this.interactive) {&#13;
                obj = this.svgDoc.find('.draw_active_area[refuid="'+p+'"]');&#13;
                obj.mouseover(function() {&#13;
                    var id = parseInt($(this).attr('refuid'));&#13;
                    p = plot.svgDoc.find('.is_plot[uid="'+id+'"]');&#13;
                    p.addClass('draw_over draw_'+(id+1)+'_over').removeAttr('style');&#13;
                });&#13;
                obj.mouseout(function() {&#13;
                    var id = parseInt($(this).attr('refuid'));&#13;
                    p = plot.svgDoc.find('.is_plot[uid="'+id+'"]');&#13;
                    p.removeClass('draw_over draw_'+(id+1)+'_over');&#13;
                    if(p.attr('isselected') != 1) {&#13;
                        p.attr('style', p.data().cssStyle);&#13;
                    }&#13;
                });&#13;
                obj.click(function(e) {&#13;
                    e.stopPropagation();&#13;
&#13;
                    var id = parseInt($(this).attr('refuid'));&#13;
                    var refObj = plot.svgDoc.find('.is_plot[uid="'+id+'"]');&#13;
                    var refObjOutline = plot.svgDoc.find('.draw_outline_base[ouid="'+id+'"]');&#13;
                    var selected = parseInt(refObj.attr('isselected'));&#13;
                    plot.expressions[id].touched = true;&#13;
                    plot.attempted = true;&#13;
                    if(selected) {&#13;
                        refObj.attr('isselected', 0);&#13;
                        refObj.attr('style', refObj.data().cssStyle);&#13;
                        refObj.removeClass('draw_selected draw_'+(id+1)+'_selected');&#13;
                        refObjOutline.removeClass('draw_outline draw_'+(id+1)+'_outline');&#13;
                        plot.expressions[id].selected = false;&#13;
                        plot.stateChanged({&#13;
                            item:'plot_'+plot.expressions[id].id,&#13;
                            value:0,&#13;
                            score: plot.getPlotEventScore(plot.expressions[id].id)&#13;
                        });&#13;
                    } else {&#13;
                        refObj.attr('isselected', 1);&#13;
                        refObj.addClass('draw_selected draw_'+(id+1)+'_selected');&#13;
                        refObj.removeAttr('style');&#13;
                        refObjOutline.addClass('draw_outline draw_'+(id+1)+'_outline');&#13;
                        plot.expressions[id].selected = true;&#13;
                        plot.stateChanged({&#13;
                            item:'plot_'+plot.expressions[id].id,&#13;
                            value:1,&#13;
                            score: plot.getPlotEventScore(plot.expressions[id].id)&#13;
                        });&#13;
                    }&#13;
                });&#13;
            }&#13;
        }&#13;
        this.drawPlots = function() {&#13;
            $.each(this.expressions, function(idx, val) {&#13;
                if(val.visible) {&#13;
                    plot.drawPlot(idx);&#13;
                }&#13;
            });&#13;
        };&#13;
        this._drawYToX = function(p) {&#13;
            var path = this.svg.createPath();&#13;
            var rx, ry, i;&#13;
            var idx = 0;&#13;
            var values = [];&#13;
            var sy = -this.offsetY;&#13;
            var ey = -this.height-this.offsetY;&#13;
            var domain = this._getPlotDomain(p);&#13;
            var xMin = domain.xMin;&#13;
            var xMax = domain.xMax;&#13;
            var yMin = domain.yMin;&#13;
            var yMax = domain.yMax;&#13;
&#13;
            //create variables for parser&#13;
            var variables = this._mapPlotVariables(p);&#13;
&#13;
            for(i = sy; i &gt;= ey; i--) {&#13;
                ry = this.yMax-(idx)/this.stepY;&#13;
                //add x to parser variables&#13;
                variables.y = ry;&#13;
                try {&#13;
                    rx = Parser.evaluate(this.expressions[p].expression, variables);&#13;
                } catch (e) {&#13;
                    break;&#13;
                }&#13;
                if(rx &gt; this.INFINITY_POSITIVE_VALUE) {&#13;
                    //console.log(i,ry,'-n');&#13;
                    rx = Infinity;&#13;
                }&#13;
                if(rx &lt; this.INFINITY_NEGATIVE_VALUE) {&#13;
                    //console.log(i,ry,'+n');&#13;
                    rx = -Infinity;&#13;
                }&#13;
&#13;
                values.push({&#13;
                   rx: rx.toFixed(5),&#13;
                   ry: ry.toFixed(5),&#13;
                   i: i&#13;
                });&#13;
&#13;
                idx++;&#13;
            }&#13;
&#13;
            var d1 = d2 = d3 = dX = 0;&#13;
            var asymptote = false;&#13;
            var positioning = true; //set position at the beginning of drawing&#13;
            var closedAsymptote = false;&#13;
            var prevXMin = prevXMax = prevYMin = prevYMax = false;&#13;
&#13;
            for(var j = 0; j&lt;values.length; j+=1) {&#13;
                ry = values[j].ry;&#13;
                rx = values[j].rx;&#13;
                i = values[j].i;&#13;
&#13;
                //yMin is set&#13;
                if(yMin !== null) {&#13;
                    //range check&#13;
                    if(ry &lt; yMin) {&#13;
                        prevYMin = ry;&#13;
                        positioning = true;&#13;
                        continue;&#13;
                    }&#13;
                    //if we pass from out of range to in range&#13;
                    if(prevYMin !== false &amp;&amp; prevYMin &lt; yMin &amp;&amp; ry &gt;= yMin) {&#13;
                        prevYMin = false;&#13;
                        //console.log('przejscie xmin',i,rx)&#13;
                        //calculate equation for xMin&#13;
                        variables.y = yMin;&#13;
                        try {&#13;
                            rx = Parser.evaluate(this.expressions[p].expression, variables);&#13;
                        } catch (e) {&#13;
                            break;&#13;
                        }&#13;
                        //force to draw y at draw point x&#13;
                        i = this.coords2px(0, yMin).y;&#13;
                    }&#13;
                }&#13;
&#13;
                //yMax is set&#13;
                if(yMax !== null) {&#13;
                    //we are in range&#13;
                    if(ry &lt;= yMax) {&#13;
                        prevYMax = ry;&#13;
                    }&#13;
                    //we pass xMax&#13;
                    if(prevYMax !== false &amp;&amp; prevYMax &lt;= yMax &amp;&amp; ry &gt; yMax) {&#13;
                        prevYMax = false;&#13;
                        //console.log('przejscie xmax',i,rx)&#13;
                        //calculate equation for xMin&#13;
                        variables.y = yMax;&#13;
                        try {&#13;
                            rx = Parser.evaluate(this.expressions[p].expression, variables);&#13;
                        } catch (e) {&#13;
                            break;&#13;
                        }&#13;
                        //force draw x value&#13;
                        i = this.coords2px(0,yMax).y;&#13;
                    } else if(ry &gt; yMax) {&#13;
                        positioning = true;&#13;
                        prevYMax = false;&#13;
                        continue;&#13;
                    }&#13;
                }&#13;
&#13;
                if(xMin !== null) {&#13;
                    //range check&#13;
                    if(rx &lt; xMin) {&#13;
                        prevXMin = rx;&#13;
                    }&#13;
                    //if we pass from out of range to in range - open path with yMin&#13;
                    if(prevXMin !== false &amp;&amp; prevXMin &lt; xMin &amp;&amp; rx &gt;= xMin) {&#13;
                        positioning = true;&#13;
                        prevXMin = false;&#13;
                        //console.log('wejscie xmin',i,rx,ry);&#13;
                        rx = xMin;&#13;
                    } else if(j&gt;0 &amp;&amp; values[j-1].rx &gt;= xMin &amp;&amp; rx &lt; xMin)  {&#13;
                        //if we pass from in range to out of range (close path)&#13;
                        positioning = false;&#13;
                        //console.log('zejscie xmin', i, rx, ry);&#13;
                        rx = xMin;&#13;
                    } else if( rx &lt; xMin){&#13;
                        continue;&#13;
                    }&#13;
                }&#13;
&#13;
                if(xMax !== null) {&#13;
                    if(rx &lt;= xMax) {&#13;
                        prevXMax = rx;&#13;
                    }&#13;
                    //we pass yMax&#13;
                    if(prevXMax !== false &amp;&amp; prevXMax &lt;= xMax &amp;&amp; rx &gt; xMax) {&#13;
                        prevXMax = false;&#13;
                        //console.log('zejscie poza xmax',j,i,rx,ry)&#13;
                        rx = xMax;&#13;
                    } else if(j &gt; 0 &amp;&amp; values[j-1].rx &gt; xMax &amp;&amp; rx &lt;= xMax) {&#13;
                        //console.log('wejscie z poza xmax',j,i,rx,ry,values[j-1].ry )&#13;
                        positioning = true;&#13;
                        rx = xMax;&#13;
                    } else if(rx &gt; xMax) {&#13;
                        positioning = true;&#13;
                        prevXMax = false;&#13;
                        continue;&#13;
                    }&#13;
                }&#13;
&#13;
                if(j &gt; this.ASYMPTOTE_MINIMUM_TRIAL) {&#13;
                    dX = rx-values[j-1].rx;&#13;
                    d3 = values[j-1].rx - values[j-2].rx;&#13;
                    d2 = values[j-2].rx - values[j-3].rx;&#13;
                    d1 = values[j-3].rx - values[j-4].rx;&#13;
                }&#13;
&#13;
                //detect discontinuous&#13;
                if(this.isDiscontinuous(d1, d2, d3, dX)) {&#13;
                    rx = Number.NaN;&#13;
                }&#13;
&#13;
                //detect asymptote&#13;
                asymptote=this.hasAsymptote(d1, d2, d3, dX);&#13;
&#13;
                if(asymptote.asymptote) {&#13;
                    //console.log('Asymptote: ',i, j,asymptote.asymptote,asymptote.val, rx,ry,'d:',d1,d2,d3,dX);&#13;
                    //draw graph to -+Infinity&#13;
                    //draw to -Infinity&#13;
                    if(!closedAsymptote) {&#13;
                        //draw to -Infinity&#13;
                        if(asymptote.val == 1) {&#13;
                            //if prevoius value was in range draw closing asymptote line&#13;
                            if(j&gt;0 &amp;&amp; values[j-1].rx &gt;= xMin &amp;&amp; rx &lt; xMin) {&#13;
                                path.line((this.xMin*this.stepX).toFixed(5), i);&#13;
                            }&#13;
                            path.move((this.xMax*this.stepX).toFixed(5), i);&#13;
                            //console.log(i,'-n closing');&#13;
                            closedAsymptote = true;&#13;
                        }&#13;
                        //draw to +Infinity&#13;
                        if(asymptote.val == -1) {&#13;
                            //if prevoius value was in range draw closing asymptote line&#13;
                            if(j &gt; 0 &amp;&amp; !(values[j-1].rx &gt; xMax &amp;&amp; rx &lt;= xMax)) {&#13;
                                path.line((this.xMax*this.stepX).toFixed(5), i);&#13;
                            }&#13;
                            path.move((this.xMin*this.stepX).toFixed(5), i);&#13;
                            //console.log(i,'+n closing');&#13;
                            closedAsymptote = true;&#13;
                        }&#13;
                    }&#13;
                } else {&#13;
                    closedAsymptote = false;&#13;
                    //if point in range&#13;
                    if(rx != Infinity &amp;&amp; rx != -Infinity &amp;&amp; !isNaN(rx)) {&#13;
                        //set starting point&#13;
                        if(positioning) {&#13;
                            path.move((rx*this.stepX).toFixed(5), i);&#13;
                            positioning = false;&#13;
                        }&#13;
                        //draw&#13;
                        if(!positioning) {&#13;
                            path.line((rx*this.stepX).toFixed(5),i);&#13;
                        }&#13;
                    } else {&#13;
                        positioning = true;&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            return path;&#13;
        }&#13;
&#13;
        this.isDiscontinuous = function(d1, d2, d3, dY) {&#13;
            if(Math.abs(dY) &gt; this.asymptoteMinimumDY &amp;&amp; d1 == 0 &amp;&amp; d2 == 0 &amp;&amp; d3 == 0 &amp;&amp; dY != 0) {&#13;
                return true;&#13;
            }&#13;
        };&#13;
&#13;
        //detect asymptote&#13;
        this.hasAsymptote = function(d1, d2, d3, dY) {&#13;
            //if dY is greater than minimum step or is equal to +- infinity check deltas&#13;
            if(Math.abs(dY) &gt; this.asymptoteMinimumDY || dY == -Infinity || dY == Infinity) {&#13;
                if(d1 &gt; 0 &amp;&amp; d2 &gt; 0 &amp;&amp; d3 &gt; 0 &amp;&amp; d1 &lt; d2 &amp;&amp; d2 &lt; d3)	{&#13;
                    if(dY &lt; d3) {&#13;
                        return {&#13;
                            asymptote: true,&#13;
                            val: -1&#13;
                        };&#13;
                    } else {&#13;
                        return {&#13;
                            asymptote: false,&#13;
                            val: 0&#13;
                        };&#13;
                    }&#13;
                }&#13;
                if(d1 &lt; 0 &amp;&amp; d2 &lt; 0 &amp;&amp; d3 &lt; 0 &amp;&amp; d1 &gt; d2 &amp;&amp; d2 &gt; d3) {&#13;
                    if(dY &gt; d3) {&#13;
                        return {&#13;
                            asymptote: true,&#13;
                            val: 1&#13;
                        };&#13;
                    } else {&#13;
                        return {&#13;
                            asymptote: false,&#13;
                            val: 0&#13;
                        };&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            return {&#13;
                asymptote: false,&#13;
                val: 0&#13;
            };&#13;
        }&#13;
        this._mapPlotVariables = function(p) {&#13;
            var variables = {};&#13;
            $.each(this.expressions[p].variables, function(k,v) {&#13;
                variables[k] = v.value;&#13;
            });&#13;
&#13;
            return variables;&#13;
        }&#13;
        this._getPlotDomain = function(p) {&#13;
            var variables = this._mapPlotVariables(p);&#13;
            var xMin = this.expressions[p].xMin !== false ? Parser.evaluate(this.expressions[p].xMin.toString(), variables) : null;&#13;
            var xMax = this.expressions[p].xMax !== false ? Parser.evaluate(this.expressions[p].xMax.toString(), variables) : null;&#13;
            var yMin = this.expressions[p].yMin !== false ? Parser.evaluate(this.expressions[p].yMin.toString(), variables) : null;&#13;
            var yMax = this.expressions[p].yMax !== false ? Parser.evaluate(this.expressions[p].yMax.toString(), variables) : null;&#13;
            if(xMin === null || xMin &lt; this.xMin) {&#13;
                xMin = this.xMin;&#13;
            }&#13;
            if(xMax === null || xMax &gt; this.xMax) {&#13;
                xMax = this.xMax;&#13;
            }&#13;
            if(yMin === null || yMin &lt; this.yMin) {&#13;
                yMin = this.yMin;&#13;
            }&#13;
            if(yMax === null || yMax &gt; this.yMax) {&#13;
                yMax = this.yMax;&#13;
            }&#13;
&#13;
            return {xMin: xMin, xMax:xMax, yMin: yMin, yMax: yMax};&#13;
        }&#13;
        this._drawXToY = function(p) {&#13;
            var path = this.svg.createPath();&#13;
            var rx, ry, i;&#13;
            var values = [];&#13;
            var sx = -this.offsetX;&#13;
            var ex = sx+this.width;&#13;
            var domain = this._getPlotDomain(p);&#13;
            var xMin = domain.xMin;&#13;
            var xMax = domain.xMax;&#13;
            var yMin = domain.yMin;&#13;
            var yMax = domain.yMax;&#13;
&#13;
            //create variables for parser&#13;
            var variables = this._mapPlotVariables(p);&#13;
&#13;
            //calculate values for every pixel&#13;
            for(i = sx; i &lt;= ex; i++) {&#13;
                rx = this.xMin+(i-sx)/this.stepX;&#13;
                //add x to parser variables&#13;
                variables.x = rx;&#13;
                try {&#13;
                    ry = Parser.evaluate(this.expressions[p].expression, variables);&#13;
                } catch (e) {&#13;
                    break;&#13;
                }&#13;
                if(ry &gt; this.INFINITY_POSITIVE_VALUE) {&#13;
                    //console.log(i,ry,'-n');&#13;
                    ry = Infinity;&#13;
                }&#13;
                if(ry &lt; this.INFINITY_NEGATIVE_VALUE) {&#13;
                    //console.log(i,ry,'+n');&#13;
                    ry = -Infinity;&#13;
                }&#13;
&#13;
                values.push({&#13;
                   rx: rx.toFixed(5),&#13;
                   ry: ry.toFixed(5),&#13;
                   i: i&#13;
                });&#13;
            }&#13;
&#13;
            var d1 = d2 = d3 = dY = 0;&#13;
            var asymptote = false;&#13;
            var positioning = true; //set position at the beginning of drawing&#13;
            var closedAsymptote = false;&#13;
            var prevXMin = prevXMax = prevYMin = prevYMax = false;&#13;
&#13;
            for(var j = 0; j&lt;values.length; j+=1) {&#13;
                ry = values[j].ry;&#13;
                rx = values[j].rx;&#13;
                i = values[j].i;&#13;
&#13;
                //xMin is set&#13;
                if(xMin !== null) {&#13;
                    //range check&#13;
                    if(rx &lt; xMin) {&#13;
                        prevXMin = rx;&#13;
                        positioning = true;&#13;
                        continue;&#13;
                    }&#13;
                    //if we pass from out of range to in range&#13;
                    if(prevXMin !== false &amp;&amp; prevXMin &lt; xMin &amp;&amp; rx &gt;= xMin) {&#13;
                        prevXMin = false;&#13;
                        //console.log('przejscie xmin',i,rx)&#13;
                        //calculate equation for xMin&#13;
                        variables.x = xMin;&#13;
                        try {&#13;
                            ry = Parser.evaluate(this.expressions[p].expression, variables);&#13;
                        } catch (e) {&#13;
                            break;&#13;
                        }&#13;
                        //force to draw y at draw point x&#13;
                        i = this.coords2px(xMin, 0).x;&#13;
                    }&#13;
                }&#13;
&#13;
                //xMax is set&#13;
                if(xMax !== null) {&#13;
                    //we are in range&#13;
                    if(rx &lt;= xMax) {&#13;
                        prevXMax = rx;&#13;
                    }&#13;
                    //we pass xMax&#13;
                    if(prevXMax !== false &amp;&amp; prevXMax &lt;= xMax &amp;&amp; rx &gt; xMax) {&#13;
                        prevXMax = false;&#13;
                        //console.log('przejscie xmax',i,rx)&#13;
                        //calculate equation for xMin&#13;
                        variables.x = xMax;&#13;
                        try {&#13;
                            ry = Parser.evaluate(this.expressions[p].expression, variables);&#13;
                        } catch (e) {&#13;
                            break;&#13;
                        }&#13;
                        //force draw x value&#13;
                        i = this.coords2px(xMax, 0).x;&#13;
                    } else if(rx &gt; xMax) {&#13;
                        positioning = true;&#13;
                        prevXMax = false;&#13;
                        continue;&#13;
                    }&#13;
                }&#13;
&#13;
                if(yMin !== null) {&#13;
                    //range check&#13;
                    if(ry &lt; yMin) {&#13;
                        prevYMin = ry;&#13;
                    }&#13;
&#13;
                    //if we pass from out of range to in range - open path with yMin&#13;
                    if(prevYMin !== false &amp;&amp; prevYMin &lt; yMin &amp;&amp; ry &gt;= yMin) {&#13;
                        positioning = true;&#13;
                        prevYMin = false;&#13;
                        //console.log('wejscie ymin',i,rx,ry);&#13;
                        ry = yMin;&#13;
                    } else if(j&gt;0 &amp;&amp; values[j-1].ry &gt;= yMin &amp;&amp; ry &lt; yMin)  {&#13;
                        //if we pass from in range to out of range (close path)&#13;
                        positioning = false;&#13;
                        //console.log('zejscie ymin', i, rx, ry);&#13;
                        ry = yMin;&#13;
                    } else if( ry &lt; yMin){&#13;
                        continue;&#13;
                    }&#13;
                }&#13;
&#13;
                if(yMax !== null) {&#13;
                    if(ry &lt;= yMax) {&#13;
                        prevYMax = ry;&#13;
                    }&#13;
                    //we pass yMax&#13;
                    if(prevYMax !== false &amp;&amp; prevYMax &lt;= yMax &amp;&amp; ry &gt; yMax) {&#13;
                        prevYMax = false;&#13;
                        //console.log('zejscie poza ymax',j,i,rx,ry)&#13;
                        ry = yMax;&#13;
                    } else if(j &gt; 0 &amp;&amp; values[j-1].ry &gt; yMax &amp;&amp; ry &lt;= yMax) {&#13;
                        //console.log('wejscie z poza ymax',j,i,rx,ry,values[j-1].ry )&#13;
                        positioning = true;&#13;
                        ry = yMax;&#13;
                    } else if(ry &gt; yMax) {&#13;
                        positioning = true;&#13;
                        prevYMax = false;&#13;
                        continue;&#13;
                    }&#13;
                }&#13;
&#13;
                //calculate deltas&#13;
                if(j &gt; this.ASYMPTOTE_MINIMUM_TRIAL) {&#13;
                    dY = ry-values[j-1].ry;&#13;
                    d3 = values[j-1].ry - values[j-2].ry;&#13;
                    d2 = values[j-2].ry - values[j-3].ry;&#13;
                    d1 = values[j-3].ry - values[j-4].ry;&#13;
                }&#13;
&#13;
                //detect discontinuous&#13;
                if(this.isDiscontinuous(d1, d2, d3, dY)) {&#13;
                    ry = Number.NaN;&#13;
                }&#13;
                //detect asymptote&#13;
                asymptote=this.hasAsymptote(d1, d2, d3, dY);&#13;
&#13;
                if(asymptote.asymptote) {&#13;
                    //console.log('Asymptote: ',i, j,asymptote.asymptote,asymptote.val, rx,ry,'d:',d1,d2,d3,dY);&#13;
                    //draw graph to -+Infinity&#13;
                    //draw to -Infinity&#13;
                    if(!closedAsymptote) {&#13;
                        //draw to -Infinity&#13;
                        if(asymptote.val == 1) {&#13;
                            //if prevoius value was in range draw closing asymptote line&#13;
                            if(j&gt;0 &amp;&amp; values[j-1].ry &gt;= yMin &amp;&amp; ry &lt; yMin) {&#13;
                                path.line(i, (this.yMin*this.stepY).toFixed(5));&#13;
                            }&#13;
                            path.move(i, (this.yMax*this.stepY).toFixed(5));&#13;
                            //console.log(i,'-n closing');&#13;
                            closedAsymptote = true;&#13;
                        }&#13;
                        //draw to +Infinity&#13;
                        if(asymptote.val == -1) {&#13;
                            //if prevoius value was in range draw closing asymptote line&#13;
                            if(j &gt; 0 &amp;&amp; !(values[j-1].ry &gt; yMax &amp;&amp; ry &lt;= yMax)) {&#13;
                                path.line(i, (this.yMax*this.stepY).toFixed(5));&#13;
                            }&#13;
                            path.move(i, (this.yMin*this.stepY).toFixed(5));&#13;
                            //console.log(i,'+n closing');&#13;
                            closedAsymptote = true;&#13;
                        }&#13;
                    }&#13;
                }  else {&#13;
                    closedAsymptote = false;&#13;
                    //if point in range&#13;
                    if(ry != Infinity &amp;&amp; ry != -Infinity &amp;&amp; !isNaN(ry)) {&#13;
                        //set starting point&#13;
                        if(positioning) {&#13;
                            path.move(i, (ry*this.stepY).toFixed(5));&#13;
                            positioning = false;&#13;
                        }&#13;
                        //draw&#13;
                        if(!positioning) {&#13;
                            path.line(i, (ry*this.stepY).toFixed(5));&#13;
                        }&#13;
                    } else {&#13;
                        positioning = true;&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            return path;&#13;
        }&#13;
        this.reset = function() {&#13;
            $.each(this.expressions, function(idx, val) {&#13;
                if(val.selectable) {&#13;
                    val.selected = false;&#13;
                }&#13;
                val.touched = false;&#13;
            })&#13;
&#13;
            this.selectedPoints = [];&#13;
            $.each(this.points, function(idx, val) {&#13;
                if(val.initiallySelected) {&#13;
                    plot.selectedPoints.push({&#13;
                        x: val.x,&#13;
                        y: val.y,&#13;
                        clickable: val.clickable&#13;
                    });&#13;
                }&#13;
            });&#13;
            this.uiEnabled = true;&#13;
            this.restoreInitialViewPort();&#13;
        }&#13;
        this.restoreInitialViewPort = function() {&#13;
            this.xMin = this.initXMin;&#13;
            this.xMax = this.initXMax;&#13;
            this.yMin = this.initYMin;&#13;
            this.yMax = this.initYMax;&#13;
            this.setStep();&#13;
            this.translate();&#13;
            this.draw();&#13;
        }&#13;
        this.coords2px = function(cx, cy) {&#13;
            return {&#13;
                x:cx*this.stepX,&#13;
                y:cy*this.stepY&#13;
            }&#13;
        };&#13;
        this.px2coords = function(px, py) {&#13;
            var xRange = Math.max(this.xMin, this.xMax) - Math.min(this.xMin, this.xMax);&#13;
            var yRange = Math.max(this.yMin, this.yMax) - Math.min(this.yMin, this.yMax);&#13;
&#13;
            var x = px*xRange/this.width+this.xMin;&#13;
            x = Math.round(this.precision.x*x)/this.precision.x;&#13;
            var y = (py*yRange/this.height)*(-1)+this.yMax;&#13;
            y = Math.round(this.precision.y*y)/this.precision.y;&#13;
&#13;
            return {&#13;
                x: x,&#13;
                y: y&#13;
            };&#13;
        };&#13;
&#13;
        this.calculateRange = function() {&#13;
            var xRange = Math.max(this.xMin, this.xMax) - Math.min(this.xMin, this.xMax);&#13;
            var offsetX = this.lastOffsetX*xRange/this.width&#13;
            this.lastOffsetX = 0;&#13;
            this.xMin -= offsetX;&#13;
            this.xMax -= offsetX;&#13;
&#13;
            var yRange = Math.max(this.yMin, this.yMax) - Math.min(this.yMin, this.yMax);&#13;
            var offsetY = this.lastOffsetY*yRange/this.height&#13;
            this.lastOffsetY = 0;&#13;
&#13;
            this.yMin -= offsetY;&#13;
            this.yMax -= offsetY;&#13;
&#13;
            this.setStep();&#13;
        };&#13;
&#13;
        this.calculatePrecision = function() {&#13;
            var idx = this.gridStepX.toString().indexOf('.');&#13;
            var idy = this.gridStepY.toString().indexOf('.');&#13;
            this.precision.x = idx !== -1 ? Math.pow(10, this.gridStepX.toString().length - idx - 1) : 100;&#13;
            this.precision.y = idy !== -1 ? Math.pow(10, this.gridStepY.toString().length - idx - 1) : 100;&#13;
        };&#13;
&#13;
        /**&#13;
         * param int direction - -1 zoomOut, +1 zoomIn&#13;
         **/&#13;
        this.zoom = function(direction) {&#13;
            this.xMin -= this.xMin*this.zoomStep*direction;&#13;
            this.xMax -= this.xMax*this.zoomStep*direction;&#13;
            this.yMin -= this.yMin*this.zoomStep*direction;&#13;
            this.yMax -= this.yMax*this.zoomStep*direction;&#13;
            this.setStep();&#13;
            this.draw();&#13;
        };&#13;
&#13;
        this.zoomIn = function(direction) {&#13;
            this.zoom(1);&#13;
        }&#13;
&#13;
        this.zoomOut = function(direction) {&#13;
            this.zoom(-1);&#13;
        }&#13;
&#13;
        this.move = function(dx, dy) {&#13;
            this.offsetX += dx;&#13;
            this.offsetY += dy;&#13;
            this.svgDoc.find('.translate').attr('transform', 'translate('+this.offsetX+', '+this.offsetY+')');&#13;
            this.lastOffsetX = dx;&#13;
            this.lastOffsetY = dy;&#13;
            this.calculateRange();&#13;
            this.draw();&#13;
        };&#13;
&#13;
        this.moveLeft = function(dx) {&#13;
            this.move(parseInt(dx),0);&#13;
        }&#13;
&#13;
        this.moveRight = function(dx) {&#13;
            this.move(parseInt(dx)*(-1),0);&#13;
        }&#13;
&#13;
        this.moveUp = function(dy) {&#13;
            this.move(0, parseInt(dy)*(-1));&#13;
        }&#13;
&#13;
        this.moveDown = function(dy) {&#13;
            this.move(0, parseInt(dy));&#13;
        }&#13;
&#13;
        this._composeStyle = function(style) {&#13;
            var formattedStyle = '';&#13;
            $.each(style, function(o, v) {&#13;
                if(v!='') {&#13;
                    formattedStyle += o+':'+v+';'&#13;
                }&#13;
            });&#13;
            return formattedStyle;&#13;
        }&#13;
        this.enableUI = function(state) {&#13;
            this.svgDoc.find('.blocker').remove();&#13;
            if(state) {&#13;
                this.uiEnabled = true;&#13;
            } else {&#13;
                this.uiEnabled = false;&#13;
                this.svg.polygon(this.svgDoc.find('.overall'), [[-this.offsetX,-this.offsetY], [this.width-this.offsetX,-this.offsetY], [this.width-this.offsetX,-this.height-this.offsetY], [-this.offsetX, -this.height-this.offsetY]], {&#13;
                    'class':'blocker',&#13;
                    fill: '#000000',&#13;
                    'fill-opacity':0,&#13;
                    strokeWidth: 0&#13;
                });&#13;
            }&#13;
        }&#13;
        this.setVariable = function(id, variable, value) {&#13;
            if(id != '' &amp;&amp; variable != '') {&#13;
                $.each(this.expressions, function(idx, val){&#13;
                    if(val.id == id) {&#13;
                        if(val.variables[variable] != undefined) {&#13;
                            plot.attempted = true;&#13;
                            val.variables[variable]['value'] = value != '' ? value : 0;&#13;
                            if(val.variables[variable]['isExercise']) {&#13;
                                val.variables[variable]['touched'] = true;&#13;
                                //call chain of events&#13;
                                plot.stateChanged([&#13;
                                {&#13;
                                    item:'variable_'+val.id+'_'+variable,&#13;
                                    value:value,&#13;
                                    score: plot.isCorrectVariable(val.id, variable)&#13;
                                },&#13;
&#13;
                                {&#13;
                                    item:'variables_'+val.id+'_'+variable,&#13;
                                    value:'',&#13;
                                    score: plot.areCorrectPlotVariables(val.id)&#13;
                                }&#13;
                                ]);&#13;
                            }&#13;
                        }&#13;
                        plot.removePlot(idx);&#13;
                        if(val.visible) {&#13;
                            plot.drawPlot(idx);&#13;
                        }&#13;
                    }&#13;
&#13;
                });&#13;
            }&#13;
        }&#13;
        this.setVisible = function(id, value) {&#13;
            if(id != '') {&#13;
                $.each(this.expressions, function(idx, val) {&#13;
                    if(val.id == id) {&#13;
                        val.visible = value;&#13;
                        //remove existing plot&#13;
                        plot.removePlot(idx);&#13;
                        //show plot&#13;
                        if(value) {&#13;
                            plot.drawPlot(idx);&#13;
                        }&#13;
                    }&#13;
                });&#13;
            }&#13;
        }&#13;
        this.setPointVisibility = function(x, y, visibility) {&#13;
            if(x != '' &amp;&amp; y != '') {&#13;
                var refObj = plot.svgDoc.find('.point[vx="'+x+'"][vy="'+y+'"]');&#13;
                var refObjOutline = plot.svgDoc.find('.point_outline_base[vx="'+x+'"][vy="'+y+'"]');&#13;
                if(visibility &amp;&amp; !refObj.hasClass('point_selected')) {&#13;
                    this._selectPoint(x, y, false);&#13;
                } else if(!visibility &amp;&amp; refObj.hasClass('point_selected')) {&#13;
                    this._deselectPoint(x, y, false);&#13;
                }&#13;
            }&#13;
        }&#13;
        this.setPlotStyle = function(id, type, prop, value) {&#13;
            if(id != '') {&#13;
                if(type == 'plot') {&#13;
                    $.each(this.expressions, function(idx, val) {&#13;
                        if(val.id == id) {&#13;
                            if(prop == 'color' || prop == 'stroke') {&#13;
                                val.cssColor = value;&#13;
                            } else {&#13;
                                val.cssProperties[prop] = value;&#13;
                            }&#13;
                            //remove existing plot&#13;
                            plot.removePlot(idx);&#13;
                            //show plot&#13;
                            if(val.visible) {&#13;
                                plot.drawPlot(idx);&#13;
                            }&#13;
                        }&#13;
                    });&#13;
                }&#13;
            }&#13;
        }&#13;
        this.plotVariablesResult = function(plotId) {&#13;
            //check variables&#13;
            var variablesTodo = 0;&#13;
            var variablesDone = 0;&#13;
            var touched = false;&#13;
            $.each(this.expressions[plotId].variables, function(k,v) {&#13;
                if(v.isExercise) {&#13;
                    variablesTodo++;&#13;
                    if(v.expectedValue == v.value) {&#13;
                        variablesDone++;&#13;
                    }&#13;
                    if(v.touched) {&#13;
                        touched = true;&#13;
                    }&#13;
                }&#13;
            });&#13;
&#13;
            return {&#13;
                todo: variablesTodo,&#13;
                done: variablesDone,&#13;
                touched: touched&#13;
            };&#13;
        };&#13;
&#13;
        this.getPlotEventScore = function(pid) {&#13;
            if(!this.isActivity) {&#13;
                return this.STATE_NOT_ACTIVITY;&#13;
            }&#13;
            var state = this.STATE_INCORRECT;&#13;
            $.each(this.expressions, function(idx, val) {&#13;
                if(val.id == pid) {&#13;
                    if(val.selected == val.correctAnswer &amp;&amp; val.correctAnswer == true) {&#13;
                        state = plot.STATE_CORRECT;&#13;
                    } else if((val.correctAnswer == true &amp;&amp; val.selected == false) || (val.correctAnswer == false &amp;&amp; val.selected == false)) {&#13;
                        state = plot.STATE_NULL;&#13;
                    } else if(val.correctAnswer == false &amp;&amp; val.selected == true) {&#13;
                        state = plot.STATE_INCORRECT;&#13;
                    }&#13;
                    return false;&#13;
                }&#13;
            });&#13;
            return state;&#13;
        };&#13;
        this.isPointOnPlot = function(pid, x, y) {&#13;
            var rv, rc, domain;&#13;
            var isCorrect = false;&#13;
            $.each(this.expressions, function(idx, val) {&#13;
                if (val.id == pid) {&#13;
                    var variables = plot._mapPlotVariables(idx);&#13;
                    if(val.type == plot.TYPE_X_TO_Y) {&#13;
                        rc = y;&#13;
                        variables.x = x;&#13;
                    } else {&#13;
                        rc = x;&#13;
                        variables.y = y;&#13;
                    }&#13;
                    try {&#13;
                        rv = Parser.evaluate(plot.expressions[idx].expression, variables);&#13;
                    } catch (e) {&#13;
                        return false;&#13;
                    }&#13;
&#13;
                    isCorrect = rv == rc;&#13;
&#13;
                    //check if point is in range&#13;
                    if(isCorrect) {&#13;
                        domain = plot._getPlotDomain(idx);&#13;
                        if(x &lt; domain.xMin || x &gt; domain.xMax || y &lt; domain.yMin || y &gt; domain.yMax) {&#13;
                            isCorrect = false;&#13;
                        }&#13;
                    }&#13;
                    return false;&#13;
                }&#13;
            });&#13;
&#13;
            return isCorrect;&#13;
        };&#13;
        this.getPointEventScore = function(vx, vy, state) {&#13;
            var currentState = this.STATE_NULL;&#13;
            var pointInDefinedPoints = false;&#13;
            if(!this.isActivity || (this.points.length == 0 &amp;&amp; this.freePoints)) {&#13;
                return this.STATE_NOT_ACTIVITY;&#13;
            }&#13;
&#13;
            //check point in model points&#13;
            $.each(this.points, function(idx, val) {&#13;
                //we have this point&#13;
                if(val.x == vx &amp;&amp; val.y == vy) {&#13;
                    //check if should be selected or not&#13;
                    if((val.correct &amp;&amp; state == plot.STATE_SELECT_POINT) || (!val.correct &amp;&amp; state == plot.STATE_DESELECT_POINT)) {&#13;
                        currentState = plot.STATE_CORRECT;&#13;
                    } else if(state == plot.STATE_SELECT_POINT) {&#13;
                        currentState = plot.STATE_INCORRECT;&#13;
                    } else {&#13;
                        currentState = plot.STATE_NULL;&#13;
                    }&#13;
                    pointInDefinedPoints = true;&#13;
                    return false;&#13;
                }&#13;
            });&#13;
&#13;
            if(pointInDefinedPoints) {&#13;
                return currentState;&#13;
            } else {&#13;
                return state == this.STATE_SELECT_POINT ? this.STATE_INCORRECT : this.STATE_NULL;&#13;
            }&#13;
        };&#13;
&#13;
        this.isCorrectVariable = function(pid, variable) {&#13;
            var state = this.STATE_INCORRECT;&#13;
            if(!this.isActivity) {&#13;
                return this.STATE_NOT_ACTIVITY;&#13;
            }&#13;
&#13;
            $.each(this.expressions, function(idx, val) {&#13;
                if(val.id == pid) {&#13;
                    state = val.variables[variable].value == val.variables[variable].expectedValue ? plot.STATE_CORRECT : plot.STATE_INCORRECT;&#13;
                    return false;&#13;
                }&#13;
            });&#13;
&#13;
            return state;&#13;
        }&#13;
&#13;
        this.areCorrectPlotVariables = function(pid) {&#13;
            if(!this.isActivity) {&#13;
                return this.STATE_NOT_ACTIVITY;&#13;
            }&#13;
&#13;
            var state = this.STATE_CORRECT;&#13;
            $.each(this.expressions, function(idx, val) {&#13;
                if(val.id == pid) {&#13;
                    $.each(val, function(vidx, variableObj) {&#13;
                        if(variableObj.isExercise &amp;&amp; variableObj.value != variableObj.expectedValue) {&#13;
                            state = plot.STATE_INCORRECT;&#13;
                            return false;&#13;
                        }&#13;
                    })&#13;
                }&#13;
            })&#13;
&#13;
            return state;&#13;
        }&#13;
&#13;
        this.isAttempted = function () {&#13;
            return this.attempted;&#13;
        }&#13;
&#13;
        this.setAttempted = function (state) {&#13;
            this.attempted = state;&#13;
        }&#13;
    }&#13;
&#13;
    var presenter = function(){};&#13;
    var addonID;&#13;
    var plot = new Plot();&#13;
    presenter.isShowAnswersActive = false;&#13;
&#13;
    presenter.setWorkMode = function(){&#13;
        var ref;&#13;
        if(!presenter.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.errorsMode = false;&#13;
        $.each(plot.expressions, function(idx, val) {&#13;
            ref = plot.svgDoc.find('.is_plot[uid="'+idx+'"]');&#13;
            if(ref.length &gt; 0) {&#13;
                ref.removeClass('draw_mark_error draw_'+(parseInt(idx)+1)+'_mark_error draw_mark_correct draw_'+(parseInt(idx)+1)+'_mark_correct');&#13;
                ref.attr('style', ref.data().cssStyle);&#13;
                plot.svgDoc.find('.draw_outline_base[ouid="'+idx+'"]').removeClass('draw_outline_mark_error draw_'+(parseInt(idx)+1)+'_outline_mark_error draw_outline_mark_correct draw_'+(parseInt(idx)+1)+'_outline_mark_correct');&#13;
            }&#13;
        });&#13;
        this.removePointsStateMarks();&#13;
        plot.enableUI(true);&#13;
    };&#13;
    presenter.removePointsStateMarks = function() {&#13;
        plot.svgDoc.find('.point_error').removeClass('point_error');&#13;
        plot.svgDoc.find('.point_outline_mark_error').removeClass('point_outline_mark_error');&#13;
        plot.svgDoc.find('.point_correct').removeClass('point_correct');&#13;
        plot.svgDoc.find('.point_outline_mark_correct').removeClass('point_outline_mark_correct');&#13;
        plot.svgDoc.find('.point_outline_base').removeClass('plot_show_answers');&#13;
    };&#13;
    presenter.markPointAsError = function(x, y) {&#13;
        plot.svgDoc.find('.point[vx="' + x + '"][vy="' + y + '"]').addClass('point_error');&#13;
        plot.svgDoc.find('.point_outline_base[vx="' + x + '"][vy="' + y + '"]').addClass('point_outline_mark_error');&#13;
    };&#13;
    presenter.markPointAsCorrect = function(x, y) {&#13;
        plot.svgDoc.find('.point[vx="' + x + '"][vy="' + y + '"]').addClass('point_correct');&#13;
        plot.svgDoc.find('.point_outline_base[vx="' + x + '"][vy="' + y + '"]').addClass('point_outline_mark_correct');&#13;
    };&#13;
&#13;
    presenter.setPointShowAnswersClass = function(x, y) {&#13;
        plot.svgDoc.find('.point_outline_base[vx="' + x + '"][vy="' + y + '"]').addClass('plot_show_answers');&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function() {&#13;
        if(!presenter.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
&#13;
        // POINTS&#13;
        presenter.clickedPoints = {};&#13;
&#13;
        $.extend( true, presenter.clickedPoints, plot.selectedPoints );&#13;
&#13;
        $.each(presenter.clickedPoints, function(_, point) {&#13;
            plot._deselectPoint(point.x, point.y, true);&#13;
        });&#13;
&#13;
        presenter.removePointsStateMarks();&#13;
&#13;
        $.each(plot.points, function(_, point) {&#13;
            if (point.correct) {&#13;
                presenter.setPointShowAnswersClass(point.x, point.y);&#13;
            }&#13;
        });&#13;
&#13;
        // FUNCTIONS&#13;
        $.each(plot.expressions, function(idx, val) {&#13;
            plot.removePlot(idx);&#13;
        });&#13;
&#13;
        $.each(plot.expressions, function(idx, val) {&#13;
            if(val.correctAnswer) {&#13;
                plot.drawPlot(idx);&#13;
                plot.svgDoc.find('.is_plot[uid="'+idx+'"]').addClass('show_answers').removeAttr('style');&#13;
                plot.svgDoc.find('.is_plot[uid="'+idx+'"]').removeClass('draw_selected');&#13;
                plot.svgDoc.find('.draw_outline_base[ouid="'+idx+'"]').addClass('show_answers');&#13;
                plot.svgDoc.find('.draw_outline_base[ouid="'+idx+'"]').removeClass('draw_outline').removeClass('draw_"' + idx + '"_outline');&#13;
            }&#13;
        });&#13;
&#13;
        plot.enableUI(false);&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function() {&#13;
        if(!presenter.isActivity) {&#13;
            return;&#13;
        }&#13;
        presenter.isShowAnswersActive = false;&#13;
&#13;
        // POINTS&#13;
        presenter.removePointsStateMarks();&#13;
&#13;
        $.each(presenter.clickedPoints, function(_, point) {&#13;
            plot._selectPoint(point.x, point.y, true);&#13;
        });&#13;
&#13;
        //FUNCTIONS&#13;
        $.each(plot.expressions, function(idx, val) {&#13;
            if(val.correctAnswer) {&#13;
                plot.removePlot(idx);&#13;
            }&#13;
        });&#13;
&#13;
        plot.drawPlots();&#13;
&#13;
        plot.enableUI(true);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(!presenter.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var res;&#13;
        presenter.errorsMode = true;&#13;
        plot.enableUI(false);&#13;
&#13;
        $.each(plot.expressions, function(idx, val) {&#13;
            if(val.selectable &amp;&amp; val.touched) {&#13;
                if(val.correctAnswer == false &amp;&amp; val.selected == true) {&#13;
                    //mark error&#13;
                    plot.svgDoc.find('.is_plot[uid="'+idx+'"]').addClass('draw_mark_error draw_'+(parseInt(idx)+1)+'_mark_error').removeAttr('style');&#13;
                    plot.svgDoc.find('.draw_outline_base[ouid="'+idx+'"]').addClass('draw_outline_mark_error draw_'+(parseInt(idx)+1)+'_outline_mark_error');&#13;
                } else if(val.correctAnswer == true &amp;&amp; val.selected == true) {&#13;
                    //mark as correct only plots which are selectable, selected, touched and it\'s correct answer is true (selected)&#13;
                    plot.svgDoc.find('.is_plot[uid="'+idx+'"]').addClass('draw_mark_correct draw_'+(parseInt(idx)+1)+'_mark_correct').removeAttr('style');&#13;
                    plot.svgDoc.find('.draw_outline_base[ouid="'+idx+'"]').addClass('draw_outline_mark_correct draw_'+(parseInt(idx)+1)+'_outline_mark_correct');&#13;
                }&#13;
            }&#13;
            res = plot.plotVariablesResult(idx);&#13;
            if(res.todo != res.done &amp;&amp; res.todo &gt; 0 &amp;&amp; res.touched) {&#13;
                //mark error&#13;
                plot.svgDoc.find('.is_plot[uid="'+idx+'"]').addClass('draw_mark_error draw_'+(parseInt(idx)+1)+'_mark_error').removeAttr('style');&#13;
                plot.svgDoc.find('.draw_outline_base[ouid="'+idx+'"]').addClass('draw_outline_mark_error draw_'+(parseInt(idx)+1)+'_outline_mark_error');&#13;
            } else if(res.todo == res.done &amp;&amp; res.todo &gt; 0 &amp;&amp; res.touched) {&#13;
                //mark correct&#13;
                plot.svgDoc.find('.is_plot[uid="'+idx+'"]').addClass('draw_mark_correct draw_'+(parseInt(idx)+1)+'_mark_correct').removeAttr('style');&#13;
                plot.svgDoc.find('.draw_outline_base[ouid="'+idx+'"]').addClass('draw_outline_mark_correct draw_'+(parseInt(idx)+1)+'_outline_mark_correct');&#13;
            }&#13;
        });&#13;
&#13;
        if(plot.points.length &gt; 0) {&#13;
            $.each(plot.points, function(idx, val) {&#13;
                res = presenter.grepPoints(plot.selectedPoints, val);&#13;
                if(val.notScored === false) {&#13;
                    if(!val.correct &amp;&amp; res &amp;&amp; val.touched) {&#13;
                        //mark wrong&#13;
                        presenter.markPointAsError(val.x, val.y);&#13;
                    } else if(val.correct &amp;&amp; res &amp;&amp; val.touched) {&#13;
                        //mark correct&#13;
                        presenter.markPointAsCorrect(val.x, val.y);&#13;
                    }&#13;
                }&#13;
            });&#13;
&#13;
            //check excess points&#13;
            $.each(plot.selectedPoints, function(idx, val) {&#13;
                res = presenter.grepPoints(plot.points, val);&#13;
                if(!res) {&#13;
                    presenter.markPointAsError(val.x, val.y);&#13;
                }&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function(){&#13;
        if(!presenter.isActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        var todo = 0;&#13;
&#13;
        $.each(plot.expressions, function(idx, val) {&#13;
            //include selectable plots&#13;
            if(val.selectable &amp;&amp; val.correctAnswer) {&#13;
                todo++;&#13;
            }&#13;
            //include expected variables&#13;
            var res = plot.plotVariablesResult(idx);&#13;
            if(res.todo &gt; 0) {&#13;
                todo++;&#13;
            }&#13;
        });&#13;
        //include all scorable points&#13;
        $.each(plot.points, function(idx, val) {&#13;
            if(val.notScored === false) {&#13;
                todo++;&#13;
            }&#13;
        })&#13;
&#13;
        return todo;&#13;
    }&#13;
&#13;
    presenter.getScore = function(){&#13;
        if(!presenter.isActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        var done = 0;&#13;
        var res;&#13;
&#13;
        $.each(plot.expressions, function(idx, val) {&#13;
            if(val.selectable &amp;&amp; val.correctAnswer == val.selected &amp;&amp; val.correctAnswer) {&#13;
                done++;&#13;
            }&#13;
            //get variables score&#13;
            res = plot.plotVariablesResult(idx);&#13;
            if(res.todo &gt; 0 &amp;&amp; res.todo == res.done) {&#13;
                done++;&#13;
            }&#13;
        });&#13;
&#13;
        $.each(plot.points, function(idx, val) {&#13;
            res = presenter.grepPoints(plot.selectedPoints, val);&#13;
            if(((val.correct &amp;&amp; res) || (!val.correct &amp;&amp; !res)) &amp;&amp; val.notScored === false) {&#13;
                done++;&#13;
            }&#13;
        })&#13;
&#13;
        return done;&#13;
    }&#13;
&#13;
    presenter.grepPoints = function(arr, point) {&#13;
        var res = false;&#13;
        $.each(arr, function(idx, el) {&#13;
            if(el.x == point.x &amp;&amp; el.y == point.y) {&#13;
                res = true;&#13;
                return;&#13;
            }&#13;
        });&#13;
&#13;
        return res;&#13;
    }&#13;
&#13;
    presenter.getErrorCount = function(){&#13;
        if(!presenter.isActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        var errors = 0;&#13;
        var res;&#13;
        $.each(plot.expressions, function(idx, val) {&#13;
            if(val.selectable &amp;&amp; val.correctAnswer == false &amp;&amp; val.selected == true &amp;&amp; val.touched) {&#13;
                errors++;&#13;
            }&#13;
            //check variables&#13;
            res = plot.plotVariablesResult(idx);&#13;
            if(res.todo != res.done &amp;&amp; res.touched) {&#13;
                errors++;&#13;
            }&#13;
        })&#13;
&#13;
        //check points&#13;
        if(plot.points.length &gt; 0) {&#13;
            $.each(plot.points, function(idx, val) {&#13;
                res = presenter.grepPoints(plot.selectedPoints, val);&#13;
                //var res = $.grep(plot.selectedPoints, function(e){ return e.x == plot.points[p].x &amp;&amp; e.y == plot.points[p].y; });&#13;
                if(!val.correct &amp;&amp; res &amp;&amp; val.touched &amp;&amp; val.notScored === false) {&#13;
                    errors++;&#13;
                }&#13;
            })&#13;
&#13;
            $.each(plot.selectedPoints, function(idx, val) {&#13;
                res = presenter.grepPoints(plot.points, val);&#13;
                //var res = $.grep(plot.points, function(e){ return e.x == plot.selectedPoints[p].x &amp;&amp; e.y == plot.selectedPoints[p].y; });&#13;
                if(!res) {&#13;
                    errors++;&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
        return errors;&#13;
    }&#13;
&#13;
    presenter.reset = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.errorsMode = false;&#13;
        presenter._allDoneState = false;&#13;
        presenter.isShowAnswersActive = false;&#13;
        plot.setAttempted(false);&#13;
        $.each(plot.expressions, function(idx, val) {&#13;
            val.touched = false;&#13;
            val.cssColor = val.cssColorInitialValue;&#13;
            val.cssProperties = {};&#13;
            val.visible = val.initVisible;&#13;
            $.each(val.variables, function(vidx, variableObj) {&#13;
                variableObj.touched = false;&#13;
                variableObj.value = variableObj.initialValue;&#13;
            })&#13;
        });&#13;
&#13;
        $.each(plot.points, function(idx, val) {&#13;
            val.touched = false;&#13;
        })&#13;
        plot.reset();&#13;
        presenter.isVisible = presenter.initIsVisible;&#13;
        presenter.updateVisibility();&#13;
    }&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.errorsMode = false;&#13;
        presenter.view = view;&#13;
        presenter.model = model;&#13;
        presenter._allDoneState = false;&#13;
&#13;
        addonID = model.ID;&#13;
&#13;
        presenter.initialize(presenter.view, presenter.model, true);&#13;
&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.updateVisibility = function() {&#13;
        if(presenter.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    }&#13;
    presenter.initialize = function(view, model, interactive) {&#13;
        var v, p, el;&#13;
        this._model = model;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        presenter.decimalSeparator = (model['Decimal separator'] === undefined || model['Decimal separator'] == '') ? '.' : model['Decimal separator'];&#13;
        if(presenter.decimalSeparator != '.' &amp;&amp; presenter.decimalSeparator != ',') {&#13;
            presenter.decimalSeparator = '.';&#13;
        };&#13;
        presenter.updateVisibility();&#13;
        plot.interactive = interactive;&#13;
        plot.width = parseInt(model['Width']);&#13;
        plot.height = parseInt(model['Height']);&#13;
        plot.xMin = (model['xMin'] == '' &amp;&amp; model['xMin'] != '0' ? -10 : parseFloat(this.toDotSeparator(model['xMin'])));&#13;
        plot.xMax = (model['xMax'] == '' &amp;&amp; model['xMax'] != '0' ? 10 : parseFloat(this.toDotSeparator(model['xMax'])));&#13;
        plot.yMin = (model['yMin'] == '' &amp;&amp; model['yMin'] != '0' ? -10 : parseFloat(this.toDotSeparator(model['yMin'])));&#13;
        plot.yMax = (model['yMax'] == '' &amp;&amp; model['yMax'] != '0' ? 10 : parseFloat(this.toDotSeparator(model['yMax'])));&#13;
        plot.initXMin = plot.xMin;&#13;
        plot.initXMax = plot.xMax;&#13;
        plot.initYMin = plot.yMin;&#13;
        plot.initYMax = plot.yMax;&#13;
        plot.grid = model['Grid'].toLowerCase() === 'true' ? true : false;&#13;
        plot.gridStepX = Math.abs(parseFloat(this.toDotSeparator(model['GridStepX']))) || 1;&#13;
        plot.gridStepY = Math.abs(parseFloat(this.toDotSeparator(model['GridStepY']))) || 1;&#13;
        plot.arrowheadSize = parseInt(model['Arrowhead size']) || 6;&#13;
        plot.asymptoteMinimumDY = this.toDotSeparator(model['Asymptote DY']) || 5;&#13;
        plot.axisValues = model['Axis values'].toLowerCase() === 'true' ? true : false;&#13;
        plot.xAxisDescription = model['X axis description'] || 'x';&#13;
        plot.yAxisDescription = model['Y axis description'] || 'y';&#13;
        plot.xAxisVisible = model['hide X axis'] === undefined || model['hide X axis'].toLowerCase() === 'false' || model['hide X axis'] == '' ? true : false;&#13;
        plot.yAxisVisible = model['hide Y axis'] === undefined || model['hide Y axis'].toLowerCase() === 'false' || model['hide Y axis'] == '' ? true : false;&#13;
        plot.xAxisValuesPosition = model['X axis values position'];&#13;
        plot.yAxisValuesPosition = model['Y axis values position'];&#13;
        var xAxisValues = model['Axis x values'] === undefined || model['Axis x values'] == '' || this._hasIllegalCharacters(model['Axis x values'].toString()) ? false : model['Axis x values'].toString().split(this.getSeparatorByDecimalSeparator());&#13;
        var yAxisValues = model['Axis y values'] === undefined || model['Axis y values'] == '' || this._hasIllegalCharacters(model['Axis y values'].toString()) ? false : model['Axis y values'].toString().split(this.getSeparatorByDecimalSeparator());&#13;
        if(xAxisValues !== false &amp;&amp; xAxisValues.length &gt; 0) {&#13;
            $.each(xAxisValues, function(idx, val) {&#13;
                if(val.toString().match(/\*/) !== null) {&#13;
                    plot.xAxisCyclicValues.push(presenter.toDotSeparator(parseInt(val)));&#13;
                } else {&#13;
                    plot.xAxisCustomValues.push(parseFloat(presenter.toDotSeparator(val)));&#13;
                }&#13;
            });&#13;
        }&#13;
        if(yAxisValues !== false &amp;&amp; yAxisValues.length &gt; 0) {&#13;
            $.each(yAxisValues, function(idx, val) {&#13;
                if(val.toString().match(/\*/) !== null) {&#13;
                    plot.yAxisCyclicValues.push(presenter.toDotSeparator(parseInt(val)));&#13;
                } else {&#13;
                    plot.yAxisCustomValues.push(parseFloat(presenter.toDotSeparator(val)));&#13;
                }&#13;
            });&#13;
        }&#13;
        plot.expressions = new Array();&#13;
        plot.pointActiveArea = parseInt(this.toDotSeparator(model['Point active area size'])) || 10;&#13;
        plot.pointRadius = parseInt(this.toDotSeparator(model['Point radius'])) || 3;&#13;
        plot.pointOutlineRadius = parseInt(this.toDotSeparator(model['Point outline radius'])) || 7;&#13;
&#13;
        for (p in model['Expressions']) {&#13;
            if(model['Expressions'][p]['expression'] != '') {&#13;
                el = {&#13;
                    id: model['Expressions'][p]['id'] === undefined || model['Expressions'][p]['id'] == '' ? p : model['Expressions'][p]['id'],&#13;
                    expression: this.toDotSeparator(model['Expressions'][p]['expression']),&#13;
                    selectable: model['Expressions'][p]['selectable'].toLowerCase() === 'true' ? true : false,&#13;
                    selected: false,&#13;
                    correctAnswer: model['Expressions'][p]['correct'].toLowerCase() === 'true' ? true : false,&#13;
                    xMin: model['Expressions'][p]['xMin'] === undefined || (model['Expressions'][p]['xMin'] == '' &amp;&amp; model['Expressions'][p]['xMin'] != '0') ? false : this.toDotSeparator(model['Expressions'][p]['xMin']),&#13;
                    xMax: model['Expressions'][p]['xMax'] === undefined || (model['Expressions'][p]['xMax'] == '' &amp;&amp; model['Expressions'][p]['xMax'] != '0') ? false : this.toDotSeparator(model['Expressions'][p]['xMax']),&#13;
                    yMin: model['Expressions'][p]['yMin'] === undefined || (model['Expressions'][p]['yMin'] == '' &amp;&amp; model['Expressions'][p]['yMin'] != '0') ? false : this.toDotSeparator(model['Expressions'][p]['yMin']),&#13;
                    yMax: model['Expressions'][p]['yMax'] === undefined || (model['Expressions'][p]['yMax'] == '' &amp;&amp; model['Expressions'][p]['yMax'] != '0') ? false : this.toDotSeparator(model['Expressions'][p]['yMax']),&#13;
                    variables: {},&#13;
                    initVisible: model['Expressions'][p]['hidden'] !== undefined &amp;&amp; model['Expressions'][p]['hidden'] != '' &amp;&amp; model['Expressions'][p]['hidden'].toLowerCase() === 'true' ? false : true,&#13;
                    type: model['Expressions'][p]['y to x'] === undefined || model['Expressions'][p]['y to x'] == '' || model['Expressions'][p]['y to x'].toLowerCase() === 'false' ? plot.TYPE_X_TO_Y : plot.TYPE_Y_TO_X,&#13;
                    touched: false,&#13;
                    cssColorInitialValue: model['Expressions'][p]['color'] === undefined || model['Expressions'][p]['color'] == '' ? '' : model['Expressions'][p]['color'],&#13;
                    cssProperties: {}&#13;
                };&#13;
                el.cssColor = el.cssColorInitialValue;&#13;
                el.visible = el.initVisible;&#13;
                plot.expressions.push(el);&#13;
            }&#13;
        }&#13;
        for(v in model['Variables']) {&#13;
            var plotId = model['Variables'][v]['plot id'];&#13;
            var variable = model['Variables'][v]['variable'];&#13;
            var variableValue = this.toDotSeparator(model['Variables'][v]['value']);&#13;
            var expectedValue = model['Variables'][v]['expected'] === undefined || (model['Variables'][v]['expected'] == '' &amp;&amp; model['Variables'][v]['expected'] != '0') ? null : this.toDotSeparator(model['Variables'][v]['expected']);&#13;
&#13;
            if(plotId != '' &amp;&amp; variable != '') {&#13;
                for (var ex in plot.expressions) {&#13;
                    if(plot.expressions[ex].id == plotId) {&#13;
                        var iv = variableValue != '' ? parseFloat(variableValue) : 0;&#13;
                        el = {&#13;
                            initialValue: this.valueToFloat(variableValue),&#13;
                            value: this.valueToFloat(variableValue),&#13;
                            isExercise: expectedValue ? true : false,&#13;
                            expectedValue: parseFloat(expectedValue),&#13;
                            touched: false&#13;
                        };&#13;
                        plot.expressions[ex].variables[variable] = el;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        plot.points = new Array();&#13;
        for (p in model['Points']) {&#13;
            if((model['Points'][p]['x value'] == '0' || model['Points'][p]['y value'] == '0') || (model['Points'][p]['x value'] != '' &amp;&amp; model['Points'][p]['y value'] != '')) {&#13;
                var point = {&#13;
                    x: this.toDotSeparator(model['Points'][p]['x value']),&#13;
                    y: this.toDotSeparator(model['Points'][p]['y value']),&#13;
                    initiallySelected: model['Points'][p]['selected'] === undefined || model['Points'][p]['selected'].toLowerCase() === 'false' ? false : true,&#13;
                    correct: model['Points'][p]['correct'] === undefined || model['Points'][p]['correct'].toLowerCase() === 'true' ? true : false,&#13;
                    touched: false,&#13;
                    notScored: model['Points'][p]['not scored'] === undefined || model['Points'][p]['not scored'].toLowerCase() === 'false' || model['Points'][p]['not scored'] == '' ? false : true,&#13;
                    clickable: true&#13;
                }&#13;
                //if we don't want that point in score make it non-clickable&#13;
                if(point.notScored) {&#13;
                    point.clickable = false;&#13;
                }&#13;
                plot.points.push(point);&#13;
                if(point.initiallySelected) {&#13;
                    plot.selectedPoints.push({&#13;
                        x: point.x,&#13;
                        y: point.y,&#13;
                        clickable: point.clickable&#13;
                    });&#13;
                }&#13;
            }&#13;
        }&#13;
        plot.maxSelectedPoints = model['Max selected points'] === undefined || model['Max selected points'] == '' || model['Max selected points'] == 0 ? 0 : parseInt(model['Max selected points']);&#13;
        presenter.isActivity = model['Not activity'] !== undefined &amp;&amp; model['Not activity'] != '' &amp;&amp; model['Not activity'].toLowerCase() === 'true' ? false : true;&#13;
        plot.isActivity = presenter.isActivity;&#13;
        plot.freePoints = model['Free points'] !== undefined &amp;&amp; model['Free points'] != '' &amp;&amp; model['Free points'].toLowerCase() === 'true' ? true : false;&#13;
&#13;
        presenter.broadcast = [];&#13;
        if(model['Broadcast'] !== '' &amp;&amp; model['Broadcast'] !== undefined) {&#13;
            var broadcasts = model['Broadcast'].split(',');&#13;
            $.each(broadcasts, function(idx, val) {&#13;
                presenter.broadcast.push(val.trim());&#13;
            });&#13;
        }&#13;
        plot.stateChanged = presenter.stateChanged;&#13;
        plot.convertValueToDisplay = presenter.convertValueToDisplay;&#13;
        plot.calculatePrecision();&#13;
&#13;
        var canvas = $(view).find('.canvas:first');&#13;
        canvas.click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        canvas.svg({&#13;
            onLoad: presenter.onSvgCreate,&#13;
            settings: {&#13;
                width: '100%',&#13;
                height: '100%',&#13;
                preserveAspectRatio: "none"&#13;
            }&#13;
        });&#13;
&#13;
        if(plot.xAxisValuesPosition != '' &amp;&amp; !isNaN(plot.xAxisValuesPosition)){&#13;
            plot.setXAxisValuesPosition(plot.xAxisValuesPosition);&#13;
        }&#13;
&#13;
        if(plot.yAxisValuesPosition != '' &amp;&amp; !isNaN(plot.yAxisValuesPosition)){&#13;
            plot.setYAxisValuesPosition(plot.yAxisValuesPosition);&#13;
        }&#13;
    };&#13;
    presenter.toDotSeparator = function(value) {&#13;
        return (value + '').replace(this.decimalSeparator, '.');&#13;
    };&#13;
    presenter.getSeparatorByDecimalSeparator = function() {&#13;
        return this.decimalSeparator == '.' ? ',' : ';';&#13;
    };&#13;
    presenter.convertValueToDisplay = function(value) {&#13;
        //set correct decimal separator&#13;
        value = presenter.replaceDecimalSeparator(value);&#13;
        //change minus to en dash&#13;
        value = value.replace(new RegExp('\-', 'g'), '\u2013');&#13;
        return value;&#13;
    };&#13;
    presenter.replaceDecimalSeparator = function(value) {&#13;
        return (value + '').replace(new RegExp('\\.', 'g'), presenter.decimalSeparator);&#13;
    };&#13;
    presenter.getDecimalSeparator = function() {&#13;
        return presenter.decimalSeparator;&#13;
    };&#13;
    presenter.valueToFloat = function(val) {&#13;
        if(val === '' || val === undefined || !this.isCorrectDecimal(val)) {&#13;
            return Number.NaN;&#13;
        }&#13;
         val = this.toDotSeparator(val);&#13;
         return parseFloat(val);&#13;
    };&#13;
    presenter._hasIllegalCharacters = function(word) {&#13;
        var tmpWord;&#13;
        if(this.decimalSeparator == ',') {&#13;
            //use ';' for ',' seprator&#13;
            tmpWord = word.replace(/[^\*0-9;,-]/g, '');&#13;
        } else {&#13;
            //use ',' for '.' separator&#13;
            tmpWord = word.replace(/[^\*0-9,.-]/g, '');&#13;
        }&#13;
        return tmpWord != word;&#13;
    };&#13;
    presenter.isCorrectDecimal = function(nmb) {&#13;
        if (nmb === null ||&#13;
                ModelValidationUtils.isStringEmpty(nmb) ||&#13;
                (this.getDecimalSeparator() === ',' &amp;&amp; nmb.toString().indexOf('.') !== -1) ||&#13;
                (this.getDecimalSeparator() === '.' &amp;&amp; nmb.toString().indexOf(',') !== -1)) {&#13;
            return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.errorsMode = false;&#13;
        presenter.view = view;&#13;
        presenter.model = model;&#13;
        presenter.initialize(presenter.view, presenter.model, false);&#13;
    };&#13;
&#13;
    presenter.onSvgCreate = function(svg) {&#13;
        plot.svg = svg;&#13;
        plot.svgDoc = $(plot.svg._svg);&#13;
        var plotScale = plot.svg.group({&#13;
            class_:'scale',&#13;
            transform:''&#13;
        });&#13;
        var plotTranslate = plot.svg.group(plotScale, {&#13;
            class_:'translate',&#13;
            transform:''&#13;
        });&#13;
        var plotOverall = plot.svg.group(plotTranslate, {&#13;
            class_:'overall'&#13;
        });&#13;
        plot.svg.group(plotOverall, {&#13;
            class_:'grid'&#13;
        });&#13;
        plot.svg.group(plotOverall, {&#13;
            class_:'axis'&#13;
        });&#13;
        plot.svg.group(plotOverall, {&#13;
            class_:'drawings'&#13;
        });&#13;
        plot.svg.group(plotOverall, {&#13;
            class_:'points'&#13;
        });&#13;
        plot.svg.group(plotOverall, {&#13;
            class_:'drawingsAreas'&#13;
        });&#13;
        plot.svg.group(plotOverall, {&#13;
            class_:'pointsAreas'&#13;
        });&#13;
        plot.setScale();&#13;
        plot.setStep();&#13;
        plot.translate();&#13;
        plot.draw();&#13;
        if(!presenter.isVisible) {&#13;
            presenter.hide();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'zoomIn'.toLowerCase():&#13;
                plot.zoom(1);&#13;
                break;&#13;
            case 'zoomOut'.toLowerCase():&#13;
                plot.zoom(-1);&#13;
                break;&#13;
            case 'moveLeft'.toLowerCase():&#13;
                plot.move(parseInt(this.toDotSeparator(params)),0);&#13;
                break;&#13;
            case 'moveRight'.toLowerCase():&#13;
                plot.move(parseInt(this.toDotSeparator(params))*(-1),0);&#13;
                break;&#13;
            case 'moveDown'.toLowerCase():&#13;
                plot.move(0, parseInt(this.toDotSeparator(params)));&#13;
                break;&#13;
            case 'moveUp'.toLowerCase():&#13;
                plot.move(0, parseInt(this.toDotSeparator(params))*(-1));&#13;
                break;&#13;
            case 'getState'.toLowerCase():&#13;
                return this.getState();&#13;
                break;&#13;
            case 'setState'.toLowerCase():&#13;
                this.setState(params);&#13;
                break;&#13;
            case 'setVariable'.toLowerCase():&#13;
                plot.setVariable(params[0], params[1], presenter.valueToFloat(params[2]));&#13;
                break;&#13;
            case 'setVisible'.toLowerCase():&#13;
                plot.setVisible(params[0], parseInt(params[1]) == 1 ? true : false);&#13;
                break;&#13;
            case 'setPointVisibility'.toLowerCase():&#13;
                plot.setPointVisibility(this.toDotSeparator(params[0]), this.toDotSeparator(params[1]), parseInt(params[2]) == 1 ? true : false);&#13;
                break;&#13;
            case 'setPlotStyle'.toLowerCase():&#13;
                plot.setPlotStyle(params[0], params[1], params[2], params[3]);&#13;
                break;&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'restoreView'.toLowerCase():&#13;
                plot.restoreInitialViewPort();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                return presenter.isAttempted();&#13;
                break;&#13;
            case 'setAttempted'.toLocaleLowerCase():&#13;
                presenter.setAttempted(params);&#13;
                break;&#13;
            case 'isAllOK'.toLocaleLowerCase():&#13;
                return presenter.isAllOK();&#13;
        }&#13;
        if(presenter.errorsMode) {&#13;
            presenter.setShowErrorsMode();&#13;
        }&#13;
    };&#13;
    presenter.enableUI = function(state) {&#13;
        plot.enableUI(state);&#13;
    };&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        $(presenter.view).css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
    presenter.getState = function() {&#13;
        var plotState = [];&#13;
        var variableState = [];&#13;
        var pointsState = [];&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        $.each(plot.expressions, function(idx, val) {&#13;
            plotState[idx] = {&#13;
                selected: val.selected,&#13;
                touched: val.touched,&#13;
                visible: val.visible&#13;
            }&#13;
            //old state&#13;
            //plotState[p] = val.selected;&#13;
&#13;
            $.each(val.variables, function(vidx, variableObj) {&#13;
                variableState.push({&#13;
                    plotId: val.id,&#13;
                    variable: vidx,&#13;
                    value: variableObj.value,&#13;
                    touched: variableObj.touched&#13;
                });&#13;
            });&#13;
        })&#13;
&#13;
        $.each(plot.points, function(idx, val) {&#13;
            pointsState[idx] = {&#13;
                touched: val.touched&#13;
            }&#13;
        });&#13;
&#13;
        var state = JSON.stringify({&#13;
            version: 2,&#13;
            plots: plotState,&#13;
            variables: variableState,&#13;
            selectedPoints: plot.selectedPoints,&#13;
            points: pointsState,&#13;
            isVisible: presenter.isVisible,&#13;
            isAttempted: presenter.isAttempted()&#13;
        });&#13;
        return state;&#13;
    }&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if(state != '' &amp;&amp; state !== undefined) {&#13;
            state = JSON.parse(state);&#13;
            //old state&#13;
            if(state.version == undefined) {&#13;
                if(state.plots.length &gt; 0) {&#13;
                    $.each(state.plots, function(idx, val) {&#13;
                        plot.expressions[idx].touched = true;&#13;
                        plot.expressions[idx].selected = val;&#13;
&#13;
                    });&#13;
                    plot.selectedPoints = state.points;&#13;
                }&#13;
            } else {&#13;
                if(state.plots.length &gt; 0) {&#13;
                    $.each(state.plots, function(idx, val) {&#13;
                        plot.expressions[idx].selected = val.selected;&#13;
                        plot.expressions[idx].touched = val.touched;&#13;
                        plot.expressions[idx].visible = val.visible != undefined ? val.visible : true;&#13;
                    });&#13;
                }&#13;
                //restore variables&#13;
                if(state.variables.length &gt; 0) {&#13;
                    $.each(state.variables, function(sidx, sval) {&#13;
                        $.each(plot.expressions, function(pidx, pval) {&#13;
                            if(sval.plotId == pval.id) {&#13;
                                pval.variables[sval.variable].value = presenter.valueToFloat(sval.value);&#13;
                                pval.variables[sval.variable].touched = sval.touched;&#13;
                            }&#13;
                        });&#13;
                    });&#13;
                }&#13;
                $.each(state.points, function(idx, val) {&#13;
                    plot.points[idx].touched = val.touched&#13;
                })&#13;
                plot.selectedPoints = [];&#13;
                $.each(state.selectedPoints, function(k, v) {&#13;
                    plot.selectedPoints.push(&#13;
                        {&#13;
                            x: v.x,&#13;
                            y: v.y,&#13;
                            clickable: v.clickable != undefined ? v.clickable : true&#13;
                        }&#13;
                    )&#13;
                });&#13;
                if(state.isVisible === false) {&#13;
                    presenter.hide();&#13;
                } else {&#13;
                    presenter.show();&#13;
                }&#13;
                if(state.isAttempted === undefined) {&#13;
                    state.isAttempted = true;&#13;
                }&#13;
                presenter.setAttempted(state.isAttempted);&#13;
            }&#13;
&#13;
            plot.draw();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.stateChanged = function(data) {&#13;
        var receiver;&#13;
        if(data) {&#13;
            //chained events when data is array&#13;
            if(!(data instanceof Array)) {&#13;
                //become chain with single event&#13;
                data = [data];&#13;
            }&#13;
&#13;
            //call chained events&#13;
            for(var t=0;t&lt;data.length;t++) {&#13;
                data[t].source = addonID;&#13;
                data[t].item = data[t].item.toString();&#13;
                if(data[t].item.substring(0,6) == 'point_') {&#13;
                    data[t].item = presenter.replaceDecimalSeparator(data[t].item);&#13;
                }&#13;
                data[t].value = data[t].value.toString();&#13;
                data[t].score = data[t].score === null ? null : data[t].score.toString();&#13;
                //broadcast events or send event to bus&#13;
                if(presenter.broadcast.length &gt; 0) {&#13;
                    $.each(presenter.broadcast, function(idx, broadcastTo) {&#13;
                        receiver = presenter.playerController.getModule(broadcastTo);&#13;
                        if(receiver) {&#13;
                            receiver.onEvent('ValueChanged', data[t]);&#13;
                        }&#13;
                    });&#13;
                } else {&#13;
                    presenter.eventBus.sendEvent('ValueChanged', data[t]);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        if(presenter.broadcast.length === 0) {&#13;
            if(presenter.isActivity &amp;&amp; presenter.isAllOK()) {&#13;
                if(!presenter._allDoneState) {&#13;
                    presenter._allDoneState = true;&#13;
                    sendAllOKEvent();&#13;
                }&#13;
            } else {&#13;
                presenter._allDoneState = false;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function sendAllOKEvent () {&#13;
        var eventData = {&#13;
            'source': addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    presenter.isAttempted = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return !this.isActivity ? true : this.getPlot().isAttempted();&#13;
    }&#13;
&#13;
    presenter.setAttempted = function (state) {&#13;
        this.getPlot().setAttempted(state);&#13;
    }&#13;
&#13;
    presenter.getPlot = function() {&#13;
        return plot;&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PointsLines" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property displayName="Points' coordinates" name="Points" nameLabel="PointsLines_property_points" type="text"/>
		<property displayName="Points' indexes" name="Indexes" nameLabel="PointsLines_property_indexes" type="text"/>
		<property displayName="Starting lines" name="Starting lines" nameLabel="PointsLines_property_starting_lines" type="text"/>
		<property displayName="Answer" name="Lines" nameLabel="PointsLines_property_lines" type="text"/>
		<property name="Is activity" nameLabel="PointsLines_property_is_activity" type="boolean"/>
		<property name="Is disabled" nameLabel="PointsLines_property_is_disabled" type="boolean"/>
        <property name="Blocked lines" nameLabel="PointsLines_property_blocked_lines" type="text"/>
        <property name="Block wrong answers" nameLabel="PointsLines_property_block_wrong_answers" type="boolean"/>
        <property displayName="Single Connection" name="Single" nameLabel="PointsLines_property_single_connection" type="boolean"/>
	</model>
<css>.addon_PointsLines .pointslines {&#13;
    border: 3px solid #ccc;&#13;
    position:absolute;&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
.addon_PointsLines .disabled {&#13;
    height: 100%;&#13;
    width: 100%;&#13;
    background-color: gray;&#13;
    opacity: 0.3;&#13;
    position:absolute;&#13;
}&#13;
&#13;
.addon_PointsLines .correct {&#13;
    border: 3px solid green;&#13;
}&#13;
&#13;
.addon_PointsLines .wrong {&#13;
    border: 3px solid red;&#13;
}&#13;
&#13;
.addon_PointsLines .point_container {&#13;
    position: absolute;&#13;
    min-height: 25px;&#13;
    min-width: 25px;&#13;
}&#13;
&#13;
.addon_PointsLines .point {&#13;
    position: relative;&#13;
    height: 16px;&#13;
    width: 16px;&#13;
    background-color: gray;&#13;
    border-radius: 8px;&#13;
    float: left;&#13;
    left:-8px;&#13;
    top: -8px;&#13;
    margin-bottom: -5px;&#13;
}&#13;
&#13;
.addon_PointsLines .selected {&#13;
    background-color: blue;&#13;
}&#13;
&#13;
.addon_PointsLines .line {&#13;
    position: absolute;&#13;
    height:3px;&#13;
    background-color: blue;&#13;
}&#13;
&#13;
.addon_PointsLines .line-show-answer {&#13;
    position: absolute;&#13;
    height:3px;&#13;
    background-color: gray;&#13;
}&#13;
&#13;
.addon_PointsLines .noremovable {&#13;
    background-color: black;&#13;
}&#13;
&#13;
.addon_PointsLines .correctLine {&#13;
    background-color: green;&#13;
}&#13;
&#13;
.addon_PointsLines .wrongLine {&#13;
    background-color: red;&#13;
}&#13;
&#13;
.addon_PointsLines .point_index {&#13;
    color: black;&#13;
    cursor: default;&#13;
}&#13;
</css><view>&lt;div class="pointslines"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="pointslines"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonPointsLines_create() {&#13;
    var presenter = function() {};&#13;
    presenter.error = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'PE' : 'Points coordinates incorrect!',&#13;
        'PO' : 'Points outside the addon!',&#13;
        'NP' : 'Define the points!',&#13;
        'IE' : 'Indexes incorrect!',&#13;
        'LE' : 'Starting lines incorrect!',&#13;
        'BL' : 'Blocked lines incorrect!',&#13;
        'AE' : 'Answer incorrect!'&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'isAllOK'.toLowerCase():&#13;
                presenter.isAllOK();&#13;
                break;&#13;
            case 'markAsCorrect'.toLowerCase():&#13;
                presenter.markAsCorrect();&#13;
                break;&#13;
            case 'markAsWrong'.toLowerCase():&#13;
                presenter.markAsWrong();&#13;
                break;&#13;
            case 'markAsNeutral'.toLowerCase():&#13;
                presenter.markAsNeutral();&#13;
                break;&#13;
            case 'isEmpty'.toLowerCase():&#13;
                presenter.isEmpty();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'isConnected'.toLowerCase():&#13;
                presenter.isConnected(params[0],params[1]);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return (!(presenter.activity) || (presenter.getScore() !== 0) || (presenter.getErrorCount() !== 0));&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.pointslines').removeClass('wrong');&#13;
        presenter.$view.find('.pointslines').addClass('correct');&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.pointslines').removeClass('correct');&#13;
        presenter.$view.find('.pointslines').addClass('wrong');&#13;
    };&#13;
&#13;
    presenter.markAsNeutral = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.pointslines').removeClass('correct');&#13;
        presenter.$view.find('.pointslines').removeClass('wrong');&#13;
    };&#13;
&#13;
    presenter.isConnected = function(i,j) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var lineIndex = presenter.currentLines[Math.min(i-1,j-1)][Math.max(i-1,j-1)];&#13;
        if (lineIndex == 1 || lineIndex == 2) {&#13;
            return true;&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isEmpty = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var numberOfPoints = presenter.points.length;&#13;
        var i, j;&#13;
        for (i = 0; i &lt; numberOfPoints; i++) {&#13;
            for (j = i; j &lt; numberOfPoints; j++) {&#13;
                if (presenter.startingLines[i][j] !== presenter.currentLines[i][j]) {&#13;
                    return false;&#13;
                }&#13;
            }&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return ((presenter.getScore() == presenter.getMaxScore()) &amp;&amp; (presenter.getErrorCount() === 0));&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (!(presenter.$view.find('.disabled').length &gt; 0)) {&#13;
            presenter.disabled = true;&#13;
            div = $('&lt;div&gt;');&#13;
            div.attr('id', 'disabled_' + presenter.addonID);&#13;
            div.attr('class', 'disabled');&#13;
            presenter.$view.find('.pointslines').append(div);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.disabled = false;&#13;
        presenter.$view.find('.disabled').remove();&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.updateVisibility = function() {&#13;
        if (presenter.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
    presenter.createEventData = function(line, state, score) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : line,&#13;
            value : state,&#13;
            score : score&#13;
        };&#13;
    };&#13;
&#13;
    function uncheckLine(line) {&#13;
        var splittedLine = line.split("_"),&#13;
            point1 = splittedLine[1],&#13;
            point2 = splittedLine[2];&#13;
&#13;
        presenter.$view.find('#line_'+(point1)+'_'+(point2)).remove();&#13;
        presenter.currentLines[point1][point2] = 0;&#13;
&#13;
        presenter.$view.find('#point_'+presenter.addonID+'_'+presenter.selectedPoint).removeClass('selected');&#13;
        presenter.selectedPoint = -1;&#13;
    }&#13;
&#13;
    presenter.triggerLineEvent = function(line, state, score) {&#13;
        var eventData = presenter.createEventData(line, state, score);&#13;
        if(parseInt(score, 10) === 0 &amp;&amp; presenter.blockWrongAnswers) {&#13;
            uncheckLine(line);&#13;
            if(presenter.singleMode) {&#13;
                var splittedLine = line.split("_"),&#13;
                    point1 = splittedLine[1],&#13;
                    point2 = splittedLine[2];&#13;
                presenter.pointsConnected[point1] = 0;&#13;
                presenter.pointsConnected[point2] = 0;&#13;
            }&#13;
        }&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    function checkIndexes(indexes, numberOfPoints) {&#13;
        indexes = indexes.replace(/\s/g, '');&#13;
        pointsIndexes = new Array(numberOfPoints);&#13;
        var i;&#13;
        if (indexes == '') {&#13;
            for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                pointsIndexes[i] = '';&#13;
            }&#13;
            return pointsIndexes;&#13;
        } else {&#13;
            pointsIndexes = indexes.split(',');&#13;
            if (pointsIndexes.length != numberOfPoints) {&#13;
                presenter.error = 'IE';&#13;
                return false;&#13;
            } else {&#13;
                return pointsIndexes;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function getPoint(con, coords) {&#13;
        coords = coords.replace(/\s/g, '');&#13;
        if (coords == '') {&#13;
            presenter.error = 'NP';&#13;
            return false;&#13;
        } else {&#13;
            var points = coords.split(']');&#13;
            var numberOfPoints = points.length - 1;&#13;
            var pointsCoordinates = new Array(numberOfPoints);&#13;
            var tmp_dane;&#13;
            if (points[numberOfPoints] != '') {&#13;
                presenter.error = 'PE';&#13;
                return false;&#13;
            }&#13;
            var i;&#13;
            for (i = 0; i &lt; points.length - 1; i++) {&#13;
                tmp_dane = points[i].split(',');&#13;
                pointsCoordinates[i] = new Array(2);&#13;
                if (tmp_dane[0][0] != '[') {&#13;
                    presenter.error = 'PE';&#13;
                    return false;&#13;
                }&#13;
                pointsCoordinates[i][0] = tmp_dane[0].substring(1);&#13;
                pointsCoordinates[i][1] = tmp_dane[1];&#13;
                if (isNaN(pointsCoordinates[i][0]) || isNaN(pointsCoordinates[i][1])) {&#13;
                    presenter.error = 'PE';&#13;
                    return false;&#13;
                } else if (pointsCoordinates[i][0] &gt;= (con.width()) || pointsCoordinates[i][0] &lt;= 0 || pointsCoordinates[i][1] &lt;= 0 || pointsCoordinates[i][1] &gt;= (con.height())) {&#13;
                    presenter.error = 'PO';&#13;
                    return false;&#13;
                }&#13;
                pointsCoordinates[i][1] = parseInt(pointsCoordinates[i][1], 10);&#13;
                pointsCoordinates[i][0] = parseInt(pointsCoordinates[i][0], 10);&#13;
            }&#13;
        }&#13;
        return pointsCoordinates;&#13;
    }&#13;
    function getLines(dataLines, numberOfPoints, type) {&#13;
        if (dataLines == undefined) dataLines='';&#13;
        dataLines = dataLines.replace(/\s/g, '');&#13;
        var Lines = new Array(numberOfPoints);&#13;
        var i, j, tmp_dane, point1, point2;&#13;
&#13;
        for (i = 0; i &lt; numberOfPoints; i++) {&#13;
            Lines[i] = new Array(numberOfPoints);&#13;
            for (j = i; j &lt; numberOfPoints; j++) {&#13;
                Lines[i][j] = 0;&#13;
            }&#13;
        }&#13;
&#13;
        if (dataLines == '') {&#13;
            return Lines;&#13;
        }&#13;
        var addLine = dataLines.split(',');&#13;
        for (i = 0; i &lt; addLine.length; i++) {&#13;
            tmp_dane = addLine[i].split('-');&#13;
            if (tmp_dane[0] == '' || tmp_dane[1] == '') {&#13;
                presenter.error = 'LE';&#13;
                return false;&#13;
            }&#13;
            if (!isNaN(tmp_dane[0]) &amp;&amp; tmp_dane[0] &lt;= numberOfPoints &amp;&amp; (!isNaN(tmp_dane[1])) &amp;&amp; tmp_dane[1] &lt;= numberOfPoints) {&#13;
                point1 = Math.min(parseInt(tmp_dane[1],10)-1,parseInt(tmp_dane[0],10)-1);&#13;
                point2 = Math.max(parseInt(tmp_dane[1],10)-1,parseInt(tmp_dane[0],10)-1);&#13;
                Lines[point1][point2] = 1;&#13;
            } else if (type == 1 &amp;&amp; !isNaN(tmp_dane[0]) &amp;&amp; parseInt(tmp_dane[0], 10) &lt;= numberOfPoints &amp;&amp; !isNaN(tmp_dane[1].substring(0, tmp_dane[1].length - 1)) &amp;&amp; (tmp_dane[1].substring(tmp_dane[1].length - 1)) === '*' &amp;&amp; parseInt(tmp_dane[1].substring(0, tmp_dane[1].length - 1), 10) &lt;= numberOfPoints) {&#13;
                point1 = Math.min(parseInt(tmp_dane[1].substring(0,tmp_dane[1].length-1),10)-1,parseInt(tmp_dane[0],10)-1);&#13;
                point2 = Math.max(parseInt(tmp_dane[1].substring(0,tmp_dane[1].length-1),10)-1,parseInt(tmp_dane[0],10)-1);&#13;
                Lines[point1][point2] = 2;&#13;
            } else {&#13;
                if (type == 1) {&#13;
                    presenter.error = 'LE';&#13;
                } else if (type == 2) {&#13;
                    presenter.error = 'AE';&#13;
                } else {&#13;
                    presenter.error = 'BL';&#13;
                }&#13;
                return false;&#13;
            }&#13;
        }&#13;
        return Lines;&#13;
    }&#13;
&#13;
    presenter.drawPoints = function() {&#13;
        for ( var i = 0; i &lt; (presenter.points).length; i++) {&#13;
            div = $('&lt;div&gt;');&#13;
            div.attr('id', 'point_container_' + presenter.addonID + '_' + i);&#13;
            div.attr('class', 'point_container');&#13;
            div.attr('order_value', i + 1);&#13;
            div.attr('style', 'left: ' + presenter.points[i][0] + 'px; top: ' + presenter.points[i][1] + 'px;');&#13;
            presenter.$view.find('.pointslines').append(div);&#13;
            div = $('&lt;div class="point"&gt;&lt;/div&gt;');&#13;
            div.attr('id', 'point_' + presenter.addonID + '_' + i);&#13;
            presenter.$view.find('#point_container_' + presenter.addonID + '_' + i).append(div);&#13;
            div = $('&lt;div class="point_index"&gt;' + presenter.indexes[i] + '&lt;/div&gt;');&#13;
            presenter.$view.find('#point_container_' + presenter.addonID + '_' + i).append(div);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawLine = function(i, j, showAnswers) {&#13;
        if (presenter.$view.find('#line_' + (i) + '_' + (j)).length &lt;= 0 || showAnswers) {&#13;
            var m, angle, d, transform, id, line;&#13;
            x1 = parseInt(presenter.points[i][0], 10);&#13;
            y1 = parseInt(presenter.points[i][1], 10);&#13;
            x2 = parseInt(presenter.points[j][0], 10);&#13;
            y2 = parseInt(presenter.points[j][1], 10);&#13;
            m = (y2 - y1) / (x2 - x1);&#13;
            angle = (Math.atan(m)) * 180 / (Math.PI);&#13;
            d = Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));&#13;
            if (x2 &gt;= x1) {&#13;
                transform = (360 + angle) % 360;&#13;
            } else {&#13;
                transform = 180 + angle;&#13;
            }&#13;
&#13;
            div = $('&lt;div&gt;');&#13;
            if (!showAnswers) {&#13;
                id = 'line_' + i + '_' + j;&#13;
            } else {&#13;
                id = 'line_show_answer_' + i + '_' + j;&#13;
            }&#13;
            div.attr('id', id);&#13;
            div.attr('point1', i);&#13;
            div.attr('point2', j);&#13;
            if (!showAnswers) {&#13;
                div.attr('class', 'line');&#13;
            } else {&#13;
                div.attr('class', 'line-show-answer');&#13;
            }&#13;
            div.attr('style', 'left: ' + x1 + 'px; top: ' + y1 + 'px');&#13;
            presenter.$view.find('.pointslines').prepend(div);&#13;
            presenter.$view.find('#'+id).css({&#13;
                'left' : x1,&#13;
                'top' : y1,&#13;
                'width' : d,&#13;
                'transform' : 'rotate(' + transform + 'deg)',&#13;
                'transform-origin' : '0px 0px',&#13;
                '-ms-transform' : 'rotate(' + transform + 'deg)',&#13;
                '-ms-transform-origin' : '0px 0px',&#13;
                '-moz-transform' : 'rotate(' + transform + 'deg)',&#13;
                '-moz-transform-origin' : '0px 0px',&#13;
                '-webkit-transform' : 'rotate(' + transform + 'deg)',&#13;
                '-webkit-transform-origin' : '0px 0px',&#13;
                '-o-transform' : 'rotate(' + transform + 'deg)',&#13;
                '-o-transform-origin' : '0px 0px'&#13;
            });&#13;
            if (presenter.startingLines[i][j] == 2) {&#13;
                presenter.$view.find('#line_' + i + '_' + j).addClass('noremovable');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawTempLine = function(i,x,y) {&#13;
        if (presenter.draw !== false) {&#13;
            if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                presenter.$view.find('#line_tmp').remove();&#13;
            }&#13;
            var m, angle, d, transform, id, line;&#13;
            x1 = parseInt(presenter.points[i][0],10);&#13;
            y1 = parseInt(presenter.points[i][1],10);&#13;
            m = (y-y1)/(x-x1);&#13;
            angle = (Math.atan(m))*180/(Math.PI);&#13;
            d = Math.sqrt(((x-x1)*(x-x1)) + ((y-y1)*(y-y1)));&#13;
            if (x &gt;= x1){&#13;
                transform = (360 + angle) % 360;&#13;
            } else {&#13;
                transform = 180 + angle;&#13;
            }&#13;
&#13;
            div = $('&lt;div&gt;');&#13;
            div.attr('id','line_tmp');&#13;
            div.attr('class','line');&#13;
            div.attr('style','left: '+x1+'px; top: '+y1+'px');&#13;
            presenter.$view.find('.pointslines').prepend(div);&#13;
            presenter.$view.find('#line_tmp').css({&#13;
                'left': x1,&#13;
                'top': y1,&#13;
                'width': d,&#13;
                'transform' : 'rotate('+transform+'deg)',&#13;
                'transform-origin' : '0px 0px',&#13;
                '-ms-transform' : 'rotate('+transform+'deg)',&#13;
                '-ms-transform-origin' : '0px 0px',&#13;
                '-moz-transform' : 'rotate('+transform+'deg)',&#13;
                '-moz-transform-origin' : '0px 0px',&#13;
                '-webkit-transform' : 'rotate('+transform+'deg)',&#13;
                '-webkit-transform-origin' : '0px 0px',&#13;
                '-o-transform' : 'rotate('+transform+'deg)',&#13;
                '-o-transform-origin' : '0px 0px'&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.initiate = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        var coords = presenter.model['Points'];&#13;
        presenter.activity = ModelValidationUtils.validateBoolean(presenter.model['Is activity']);&#13;
        presenter.disabled = ModelValidationUtils.validateBoolean(presenter.model['Is disabled']);&#13;
        presenter.singleMode = ModelValidationUtils.validateBoolean(presenter.model['Single']);&#13;
        presenter.initDisabled = presenter.disabled;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        var startingLines = presenter.model['Starting lines'];&#13;
        var blockedLines = presenter.model['Blocked lines'];&#13;
        presenter.blockWrongAnswers = ModelValidationUtils.validateBoolean(presenter.model['Block wrong answers']);&#13;
        var con = presenter.$view.find('.pointslines').parent();&#13;
        presenter.$view.find('.pointslines').css({&#13;
            'width' : con.width(),&#13;
            'height' : con.height()&#13;
        });&#13;
        presenter.points = getPoint(con, coords);&#13;
        presenter.indexes = checkIndexes(presenter.model['Indexes'],(presenter.points).length);&#13;
        if (presenter.points === false || presenter.indexes === false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return;&#13;
        }&#13;
        presenter.drawPoints();&#13;
        numberOfPoints = presenter.points.length;&#13;
        if (presenter.singleMode) presenter.pointsConnected =  new Array(numberOfPoints);&#13;
        presenter.startingLines = getLines(startingLines, numberOfPoints, 1);&#13;
        if (presenter.startingLines === false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return;&#13;
        }&#13;
        presenter.currentLines = getLines(startingLines, numberOfPoints, 1);&#13;
        presenter.blockedLines = getLines(blockedLines, numberOfPoints, 3);&#13;
        if (presenter.blockedLines === false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return;&#13;
        }&#13;
        if (presenter.singleMode) {&#13;
            for ( var i = 0; i &lt; numberOfPoints; i++) {&#13;
                presenter.pointsConnected[i] = 0;&#13;
            }&#13;
        };&#13;
        for ( var i = 0; i &lt; numberOfPoints; i++) {&#13;
            for ( var j = i; j &lt; numberOfPoints; j++) {&#13;
                if (presenter.currentLines[i][j] == 1 || presenter.currentLines[i][j] == 2) {&#13;
                    presenter.drawLine(i, j);&#13;
                    if (presenter.singleMode) {&#13;
                        presenter.pointsConnected[i] = 1;&#13;
                        presenter.pointsConnected[j] = 1;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
        var answer = presenter.model['Lines'];&#13;
        presenter.answer = getLines(answer, numberOfPoints, 2);&#13;
        if (presenter.answer === false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.doClick = function(i) {&#13;
        if (presenter.selectedPoint == i) {&#13;
            presenter.$view.find('#point_'+presenter.addonID+'_'+i).removeClass('selected');&#13;
            presenter.selectedPoint = -1;&#13;
        } else if (presenter.selectedPoint !== -1) {&#13;
            point1 = Math.min(parseInt(presenter.selectedPoint,10),parseInt(i,10));&#13;
            point2 = Math.max(parseInt(presenter.selectedPoint,10),parseInt(i,10));&#13;
            if (presenter.currentLines[point1][point2] === 0 &amp;&amp; presenter.blockedLines[point1][point2] != 1) {&#13;
                if(presenter.singleMode &amp;&amp; (presenter.pointsConnected[point1]== 1 || presenter.pointsConnected[point2] == 1)) {&#13;
                } else {&#13;
                    if (presenter.singleMode) {&#13;
                        presenter.pointsConnected[point1] = 1;&#13;
                        presenter.pointsConnected[point2] = 1;&#13;
                    };&#13;
                    presenter.drawLine(point1,point2);&#13;
                    presenter.currentLines[point1][point2] = 1;&#13;
                    line = 'line_'+(point1)+'_'+(point2);&#13;
                    if (presenter.startingLines[point1][point2] === 0 &amp;&amp; presenter.answer[point1][point2] == 1) {&#13;
                        score = 1;&#13;
                    } else {&#13;
                        score = 0;&#13;
                    }&#13;
                    presenter.triggerLineEvent(line,1,score);&#13;
                    line = 'all';&#13;
                    score = '';&#13;
                    if (presenter.isAllOK() &amp;&amp; presenter.activity) {&#13;
                        presenter.triggerLineEvent(line,score,score);&#13;
                    }&#13;
                    presenter.$view.find('#point_'+presenter.addonID+'_'+presenter.selectedPoint).removeClass('selected');&#13;
                    presenter.selectedPoint = -1;&#13;
                }&#13;
            } else if (presenter.currentLines[point1][point2] == 1) {&#13;
                presenter.$view.find('#line_'+(point1)+'_'+(point2)).remove();&#13;
                presenter.currentLines[point1][point2] = 0;&#13;
                if (presenter.singleMode) {&#13;
                    presenter.pointsConnected[point1] = 0;&#13;
                    presenter.pointsConnected[point2] = 0;&#13;
                };&#13;
                line = 'line_'+(point1)+'_'+(point2);&#13;
                if (presenter.startingLines[point1][point2] == 1 &amp;&amp; presenter.answer[point1][point2] === 0) {&#13;
                    score = 1;&#13;
                } else {&#13;
                    score = 0;&#13;
                }&#13;
                presenter.triggerLineEvent(line,0,score);&#13;
                line = 'all';&#13;
                score = '';&#13;
                if (presenter.isAllOK() &amp;&amp; presenter.activity) {&#13;
                    presenter.triggerLineEvent(line,score,score);&#13;
                }&#13;
                presenter.$view.find('#point_'+presenter.addonID+'_'+presenter.selectedPoint).removeClass('selected');&#13;
                presenter.selectedPoint = -1;&#13;
            } else {&#13;
                presenter.$view.find('#point_'+presenter.addonID+'_'+presenter.selectedPoint).removeClass('selected');&#13;
                presenter.selectedPoint = -1;&#13;
            }&#13;
        } else {&#13;
            presenter.$view.find('#point_'+presenter.addonID+'_'+i).addClass('selected');&#13;
            presenter.selectedPoint = i;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.initiate(view, model);&#13;
        if (!presenter.error) {&#13;
            var $div = presenter.$view.find('.pointslines');&#13;
            var Width = $div.width();&#13;
            var Height = $div.height();&#13;
            var i, j;&#13;
            var line, score;&#13;
            var point1, point2, distance;&#13;
            presenter.selectedPoint = -1;&#13;
            presenter.draw = false;&#13;
            var timeClick = true;&#13;
            if (presenter.disabled) presenter.disable();&#13;
&#13;
&#13;
            presenter.$view.find('.point_container').on('mousedown', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.draw = parseInt($(this).attr('order_value'),10)-1;&#13;
                }&#13;
&#13;
            });&#13;
&#13;
            presenter.$view.on('mousemove',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.mouseSX = parseInt(e.pageX,10) - parseInt($div.offset().left,10);&#13;
                presenter.mouseSY = parseInt(e.pageY,10) - parseInt($div.offset().top,10);&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.drawTempLine(presenter.draw,presenter.mouseSX,presenter.mouseSY);&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.find('.point_container').on('mouseup',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (presenter.draw !== false &amp;&amp; !presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                        presenter.$view.find('#line_tmp').remove();&#13;
                    }&#13;
                    j = parseInt($(this).attr('order_value'),10)-1;&#13;
                    if (presenter.draw !== j &amp;&amp; presenter.currentLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 0 &amp;&amp; presenter.blockedLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] != 1) {&#13;
                        if(presenter.singleMode &amp;&amp; (presenter.pointsConnected[j]== 1 || presenter.pointsConnected[presenter.draw] == 1)) {&#13;
                        } else {&#13;
                            if(presenter.singleMode) {&#13;
                                presenter.pointsConnected[j] = 1;&#13;
                                presenter.pointsConnected[presenter.draw] = 1;&#13;
                            }&#13;
                            presenter.drawLine(Math.min(presenter.draw,j),Math.max(presenter.draw,j));&#13;
                            presenter.currentLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] = 1;&#13;
                            line = 'line_'+(Math.min(presenter.draw,j))+'_'+(Math.max(presenter.draw,j));&#13;
                            if (presenter.selectedPoint !== -1) {&#13;
                                presenter.$view.find('#point_'+presenter.addonID+'_'+i).removeClass('selected');&#13;
                                presenter.selectedPoint = -1;&#13;
                            }&#13;
                            if (presenter.startingLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 0 &amp;&amp; presenter.answer[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 1) {&#13;
                                score = 1;&#13;
                            } else {&#13;
                                score = 0;&#13;
                            }&#13;
                            presenter.triggerLineEvent(line,1,score);&#13;
                            line = 'all';&#13;
                            score = '';&#13;
                            if (presenter.isAllOK() &amp;&amp; presenter.activity) {&#13;
                                presenter.triggerLineEvent(line,score,score);&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
                presenter.draw = false;&#13;
            });&#13;
&#13;
            presenter.$view.on('mouseup mouseleave',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.draw = false;&#13;
&#13;
                if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                    presenter.$view.find('#line_tmp').remove();&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.find('.point_container').on('touchstart', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.mouseSX = parseInt(e.originalEvent.touches[0].pageX,10) - parseInt($div.offset().left,10);&#13;
                    presenter.mouseSY = parseInt(e.originalEvent.touches[0].pageY,10) - parseInt($div.offset().top,10);&#13;
                    presenter.mouseX = parseInt(e.originalEvent.touches[0].pageX,10) - parseInt($div.offset().left,10);&#13;
                    presenter.mouseY = parseInt(e.originalEvent.touches[0].pageY,10) - parseInt($div.offset().top,10);&#13;
                    presenter.draw = parseInt($(this).attr('order_value'),10)-1;&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.find('.pointslines').on('touchmove', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.mouseX = parseInt(e.originalEvent.touches[0].pageX,10) - parseInt($div.offset().left,10);&#13;
                presenter.mouseY = parseInt(e.originalEvent.touches[0].pageY,10) - parseInt($div.offset().top,10);&#13;
                if (presenter.mouseX &gt;  Width || presenter.mouseY &gt; Height || presenter.mouseX &lt; 0 || presenter.mouseY &lt; 0) {&#13;
                    presenter.draw = false;&#13;
                    if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                        presenter.$view.find('#line_tmp').remove();&#13;
                    }&#13;
                }&#13;
                if (presenter.draw !== false) {&#13;
                    presenter.drawTempLine(presenter.draw,presenter.mouseX,presenter.mouseY);&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.on('touchend', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (Math.abs(presenter.mouseSX - presenter.mouseX) + Math.abs(presenter.mouseSY - presenter.mouseY) &lt; 15 &amp;&amp; presenter.draw !== false) {&#13;
                    if (timeClick) presenter.doClick(presenter.draw);&#13;
                    timeClick = false;&#13;
                    setTimeout(function(){timeClick = true;},310);&#13;
                    //			presenter.doClick(presenter.draw);&#13;
                } else  if (presenter.draw !== false){&#13;
                    j = -1;&#13;
                    for(i = 0; i&lt;(presenter.points).length; i++) {&#13;
                        distance = Math.abs(presenter.mouseX - parseInt(presenter.points[i][0],10))+ Math.abs(presenter.mouseY - parseInt(presenter.points[i][1],10));&#13;
                        if (distance &lt; 25) {&#13;
                            j = i;&#13;
                        }&#13;
                    }&#13;
                    if (j !== -1 &amp;&amp; presenter.draw !== j &amp;&amp; presenter.currentLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 0  &amp;&amp; presenter.blockedLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] != 1) {&#13;
                        if(presenter.singleMode &amp;&amp; (presenter.pointsConnected[j]== 1 || presenter.pointsConnected[presenter.draw] == 1)) {&#13;
                        } else {&#13;
                            if(presenter.singleMode) {&#13;
                                presenter.pointsConnected[j] = 1;&#13;
                                presenter.pointsConnected[presenter.draw] = 1;&#13;
                            }&#13;
                            presenter.drawLine(Math.min(presenter.draw,j),Math.max(presenter.draw,j));&#13;
                            presenter.currentLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] = 1;&#13;
                            line = 'line_'+(Math.min(presenter.draw,j))+'_'+(Math.max(presenter.draw,j));&#13;
                            if (presenter.selectedPoint !== -1) {&#13;
                                presenter.$view.find('#point_'+presenter.addonID+'_'+presenter.selectedPoint).removeClass('selected');&#13;
                                presenter.selectedPoint = -1;&#13;
                            }&#13;
&#13;
                            if (presenter.startingLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 0 &amp;&amp; presenter.answer[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 1) {&#13;
                                score = 1;&#13;
                            } else {&#13;
                                score = 0;&#13;
                            }&#13;
                            presenter.triggerLineEvent(line,1,score);&#13;
                            if (presenter.isAllOK() &amp;&amp; presenter.activity) {&#13;
                                line = 'all';&#13;
                                score = '';&#13;
                                presenter.triggerLineEvent(line,score,score);&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
                presenter.draw = false;&#13;
                if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                    presenter.$view.find('#line_tmp').remove();&#13;
                }&#13;
            });&#13;
            presenter.$view.find('.point_container').click(function(event) {&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; timeClick) {&#13;
                    i = parseInt($(this).attr('order_value'), 10) - 1;&#13;
                    presenter.doClick(i);&#13;
                }&#13;
            });&#13;
            presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
            presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    function getMousePositionOnCanvas(e) {&#13;
        var rect = presenter.canvas.getBoundingClientRect(), client = {&#13;
            x : e.clientX,&#13;
            y : e.clientY&#13;
        };&#13;
&#13;
        return {&#13;
            x : parseInt(client.x - rect.left, 10),&#13;
            y : parseInt(client.y - rect.top, 10)&#13;
        };&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.initiate(view, model);&#13;
        var canvasElement = $('&lt;canvas&gt;&lt;/canvas&gt;'),&#13;
            ctx = canvasElement[0].getContext('2d');&#13;
&#13;
        canvasElement.attr('width', presenter.$view.find('.pointslines').parent().width());&#13;
        canvasElement.attr('height', presenter.$view.find('.pointslines').parent().height());&#13;
&#13;
        presenter.canvasWidth = presenter.$view.find('.pointslines').parent().width;&#13;
        presenter.canvasHeight = presenter.$view.find('.pointslines').parent().height;&#13;
        presenter.canvas = canvasElement[0];&#13;
&#13;
        presenter.$view.find('.pointslines').append(canvasElement);&#13;
        presenter.canvasOffset = canvasElement.offset();&#13;
&#13;
        var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
            xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
            yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
            coloringWrapper = presenter.$view.find('.pointslines');&#13;
&#13;
        coordinatesContainer.css({&#13;
            'width' : 35,&#13;
            'height' : 22,&#13;
            'border' : '1px solid #696969',&#13;
            'borderRadius' : '3px',&#13;
            'position' : 'absolute',&#13;
            'top' : 3,&#13;
            'left' : 3,&#13;
            'fontSize' : '9px',&#13;
            'padding' : '5px',&#13;
            'lineHeight' : '11px'&#13;
        });&#13;
&#13;
        coordinatesContainer.append(xContainer).append(yContainer);&#13;
&#13;
        coloringWrapper.append(coordinatesContainer);&#13;
        coloringWrapper.css({&#13;
            'position' : 'relative',&#13;
            'minHeight' : presenter.canvasHeight,&#13;
            'minWidth' : presenter.canvasWidth&#13;
        });&#13;
&#13;
        function setCalculatedPosition(e) {&#13;
            xContainer.find('.value').html(getMousePositionOnCanvas(e).x);&#13;
            yContainer.find('.value').html(getMousePositionOnCanvas(e).y);&#13;
        }&#13;
&#13;
        var doesElementExist = function() {&#13;
            var $moduleSelector = $('.moduleSelector[data-id="'+presenter.addonID+'"]');&#13;
&#13;
            if ($moduleSelector.length &gt; 0) {&#13;
                $moduleSelector.on('mousemove', function(e) {&#13;
                    setCalculatedPosition(e);&#13;
                });&#13;
&#13;
                clearInterval(interval);&#13;
            }&#13;
        };&#13;
&#13;
        var interval = setInterval(function() { doesElementExist(); }, 500);&#13;
&#13;
        canvasElement.on('mousemove', function(e) {&#13;
            setCalculatedPosition(e);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var numberOfPoints = presenter.points.length;&#13;
        if (presenter.singleMode) {&#13;
            for ( var i = 0; i &lt; numberOfPoints; i++) {&#13;
                presenter.pointsConnected[i] = 0;&#13;
            }&#13;
        };&#13;
        for (i = 0; i &lt; numberOfPoints; i++) {&#13;
            for (var j = i; j &lt; numberOfPoints; j++) {&#13;
                presenter.currentLines[i][j] = presenter.startingLines[i][j];&#13;
                if (presenter.startingLines[i][j] == 1 || presenter.startingLines[i][j] == 2) {&#13;
                    if (presenter.$view.find('#line_' + (i) + '_' + (j)).length &lt;= 0)&#13;
                        presenter.drawLine(i, j);&#13;
                    if (presenter.singleMode) {&#13;
                        presenter.pointsConnected[i] = 1;&#13;
                        presenter.pointsConnected[j] = 1;&#13;
                    }&#13;
                } else if (presenter.startingLines[i][j] === 0 &amp;&amp; presenter.$view.find('#line_' + (i) + '_' + (j)).length == 1) {&#13;
                    presenter.$view.find('#line_' + (i) + '_' + (j)).remove();&#13;
                }&#13;
            }&#13;
        }&#13;
        presenter.$view.find('.selected').removeClass('selected');&#13;
        presenter.selectedPoint = -1;&#13;
        presenter.disabled = presenter.initDisabled;&#13;
        if (presenter.disabled) {&#13;
            presenter.disable();&#13;
        } else {&#13;
            presenter.enable();&#13;
        }&#13;
        presenter.isVisible = presenter.initIsVisible;&#13;
        presenter.updateVisibility();&#13;
        presenter.setWorkMode();&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return JSON.stringify({&#13;
            currentLines : presenter.currentLines,&#13;
            disabled : presenter.disabled,&#13;
            visible : presenter.isVisible,&#13;
            single : presenter.pointsConnected&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        presenter.currentLines = JSON.parse(state).currentLines;&#13;
        presenter.disabled = JSON.parse(state).disabled;&#13;
        presenter.pointsConnected = JSON.parse(state).single;&#13;
        if (presenter.error == false) {&#13;
            if (presenter.disabled) {&#13;
                presenter.disable();&#13;
            } else {&#13;
                presenter.enable();&#13;
            }&#13;
            presenter.isVisible = JSON.parse(state).visible;&#13;
            presenter.updateVisibility();&#13;
            var numberOfPoints = presenter.points.length;&#13;
            for (var i = 0; i &lt; numberOfPoints; i++) {&#13;
                for (var j = i; j &lt; numberOfPoints; j++) {&#13;
                    if ((presenter.currentLines[i][j] == 1 || presenter.currentLines[i][j] == 2) &amp;&amp; (presenter.$view.find('#line_' + (i) + '_' + (j)).length &lt;= 0)) {&#13;
                        presenter.drawLine(i, j);&#13;
                    } else {&#13;
                        if (presenter.currentLines[i][j] === 0 &amp;&amp; presenter.$view.find('#line_' + (i) + '_' + (j)).length == 1) {&#13;
                            presenter.$view.find('#line_' + (i) + '_' + (j)).remove();&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var numberOfPoints = presenter.points.length;&#13;
        if (presenter.activity &amp;&amp; (presenter.error == false)) {&#13;
            var licznik = 0;&#13;
            var i, j;&#13;
            for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                for (j = i; j &lt; numberOfPoints; j++) {&#13;
                    if (presenter.startingLines[i][j] === 0 &amp;&amp; presenter.answer[i][j] == 1) {&#13;
                        licznik++;&#13;
                    } else if (presenter.startingLines[i][j] == 1 &amp;&amp; presenter.answer[i][j] === 0) {&#13;
                        licznik++;&#13;
                    }&#13;
                }&#13;
            }&#13;
            return licznik;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getScore = function(view, model) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var numberOfPoints = presenter.points.length;&#13;
        if (!presenter.activity || (presenter.error !== false)) {&#13;
            return 0;&#13;
        } else {&#13;
            var licznik = 0;&#13;
            var i, j;&#13;
            for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                for (j = i; j &lt; numberOfPoints; j++) {&#13;
                    if (presenter.startingLines[i][j] === 0 &amp;&amp; presenter.answer[i][j] == 1 &amp;&amp; presenter.currentLines[i][j] == 1) {&#13;
                        licznik++;&#13;
                    } else if (presenter.startingLines[i][j] == 1 &amp;&amp; presenter.answer[i][j] === 0 &amp;&amp; presenter.currentLines[i][j] === 0) {&#13;
                        licznik++;&#13;
                    }&#13;
                }&#13;
            }&#13;
            return licznik;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var numberOfPoints = presenter.points.length;&#13;
        if (!presenter.activity || (presenter.error !== false)) {&#13;
            return 0;&#13;
        } else {&#13;
            var licznik = 0;&#13;
            var i, j;&#13;
            for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                for (j = i; j &lt; numberOfPoints; j++) {&#13;
                    if (presenter.startingLines[i][j] === 0 &amp;&amp; presenter.answer[i][j] === 0 &amp;&amp; presenter.currentLines[i][j] == 1) {&#13;
                        licznik++;&#13;
                    } else if (presenter.startingLines[i][j] == 1 &amp;&amp; presenter.answer[i][j] == 1 &amp;&amp; presenter.currentLines[i][j] === 0) {&#13;
                        licznik++;&#13;
                    }&#13;
                }&#13;
            }&#13;
            return licznik;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var numberOfPoints = presenter.points.length;&#13;
        presenter.isErrorMode = true;&#13;
        var i, j;&#13;
        if (!presenter.activity) return 0;&#13;
        if (presenter.getScore() &gt; 0) {&#13;
            for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                for (j = i; j &lt; numberOfPoints; j++) {&#13;
                    if (presenter.startingLines[i][j] === 0 &amp;&amp; presenter.answer[i][j] == 1 &amp;&amp; presenter.currentLines[i][j] == 1) {&#13;
                        presenter.$view.find('#line_' + i + '_' + j).addClass('correctLine');&#13;
                    } else if (presenter.startingLines[i][j] == 1 &amp;&amp; presenter.answer[i][j] === 0 &amp;&amp; presenter.currentLines[i][j] === 0) {&#13;
                        presenter.$view.find('#line_' + i + '_' + j).addClass('correctLine');&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
        if (presenter.getErrorCount() &gt; 0) {&#13;
            for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                for (j = i; j &lt; numberOfPoints; j++) {&#13;
                    if (presenter.startingLines[i][j] === 0 &amp;&amp; presenter.answer[i][j] === 0 &amp;&amp; presenter.currentLines[i][j] == 1) {&#13;
                        presenter.$view.find('#line_' + i + '_' + j).addClass('wrongLine');&#13;
                    } else if (presenter.startingLines[i][j] == 1 &amp;&amp; presenter.answer[i][j] == 1 &amp;&amp; presenter.currentLines[i][j] === 0) {&#13;
                        presenter.$view.find('#line_' + i + '_' + j).addClass('wrongLine');&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
        if (presenter.getScore() == presenter.getMaxScore() &amp;&amp; presenter.getErrorCount() === 0 &amp;&amp; !(presenter.isEmpty())) {&#13;
            presenter.$view.find('.pointslines').addClass('correct');&#13;
        } else if (presenter.getScore() === 0 &amp;&amp; presenter.getErrorCount() === 0) {&#13;
        } else {&#13;
            presenter.$view.find('.pointslines').addClass('wrong');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.isErrorMode = false;&#13;
        presenter.$view.find('.wrongLine').removeClass('wrongLine');&#13;
        presenter.$view.find('.correctLine').removeClass('correctLine');&#13;
        presenter.$view.find('.pointslines').removeClass('correct');&#13;
        presenter.$view.find('.pointslines').removeClass('wrong');&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            if (presenter.isShowAnswersActive) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.setWorkMode();&#13;
            presenter.$view.find('.line').not('.noremovable').css("visibility", "hidden");&#13;
            var numberOfPoints = presenter.points.length;&#13;
            var i, j;&#13;
            for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                for (j = i; j &lt; numberOfPoints; j++) {&#13;
                    if (presenter.answer[i][j] == 1) {&#13;
                        presenter.drawLine(i,j,true);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find('.line-show-answer').remove();&#13;
            presenter.$view.find('.line').css("visibility", "visible");&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Points_To_Plot" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="false" name="Source" nameLabel="Points_To_Plot_property_source" type="string"/>
		<property name="Points to plot" nameLabel="Points_To_Plot_property_points_to_plot" type="list">
			<property isLocalized="false" name="plot id" nameLabel="Points_To_Plot_property_plot_id" type="string"/>
			<property isLocalized="false" name="points" nameLabel="Points_To_Plot_property_points" type="int"/>
			<property isLocalized="false" name="strict points" nameLabel="Points_To_Plot_property_strict_points" type="string"/>
		</property>
		<property isLocalized="false" name="Decimal separator" nameLabel="Points_To_Plot_property_decimal_separator" type="string"/>
	</model>
<css/><view/><preview/><presenter>function AddonPoints_To_Plot_create() {&#13;
&#13;
    var presenter = function() {&#13;
    };&#13;
    var eventBus; // Modules communication&#13;
    var addonID;&#13;
    presenter.data = {&#13;
        pointsOnPlot: [],&#13;
        selectedPoints: []&#13;
    };&#13;
    presenter.STATE_CORRECT = 1;&#13;
    presenter.STATE_INCORRECT = 0;&#13;
    presenter.VERSION = '1.0.2';&#13;
    presenter.run = function(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.model = model;&#13;
&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        addonID = model.ID;&#13;
&#13;
        presenter._allDoneState = false;&#13;
        presenter.initialize(model);&#13;
    };&#13;
    presenter.initialize = function(model) {&#13;
        this.source = model['Source'];&#13;
        this.decimalSeparator = (model['Decimal separator'] === undefined || model['Decimal separator'] == '') ? '.' : model['Decimal separator'];&#13;
        if(presenter.decimalSeparator != '.' &amp;&amp; presenter.decimalSeparator != ',') {&#13;
            presenter.decimalSeparator = '.';&#13;
        };&#13;
        $.each(model['Points to plot'], function(idx, val) {&#13;
            if(val !== undefined) {&#13;
                el = {&#13;
                    plotId: val['plot id'],&#13;
                    pointsToSelect: parseInt(val['points']),&#13;
                    strictPoints: val['strict points'] !== '' ? presenter.parseStrictPoints(val['strict points']) : [],&#13;
                    collectedPoints: []&#13;
                };&#13;
                presenter.data.pointsOnPlot.push(el);&#13;
            }&#13;
        });&#13;
        this.data.selectedPoints = [];&#13;
    };&#13;
    presenter.parseStrictPoints = function(str) {&#13;
        var pairs;&#13;
        if(this.decimalSeparator == ',') {&#13;
            pairs = str.match(/((-?[0-9]+(,?[0-9]+)?){1};{1}(-?[0-9]+(,?[0-9]+)?){1})/g);&#13;
        } else {&#13;
            pairs = str.match(/((-?[0-9]+(\.?[0-9]+)?){1},{1}(-?[0-9]+(\.?[0-9]+)?){1})/g);&#13;
        }&#13;
        var points = [];&#13;
        $.each(pairs, function(idx, val) {&#13;
            var tmp = val.split(presenter.getSeparatorByDecimalSeparator());&#13;
            points.push({x: presenter.toDotSeparator(tmp[0]), y: presenter.toDotSeparator(tmp[1])});&#13;
        });&#13;
&#13;
        return points;&#13;
    };&#13;
    presenter.setShowErrorsMode = function() {&#13;
        var sourceModule = this.getSourceModule();&#13;
        sourceModule.enableUI(false);&#13;
        //check every point&#13;
        $.each(this.data.selectedPoints, function(idx, val){&#13;
            //if point belongs to any plot mark as correct&#13;
            if(val.belongsTo.length &gt; 0) {&#13;
                sourceModule.markPointAsCorrect(val.x, val.y);&#13;
            } else {&#13;
                sourceModule.markPointAsError(val.x, val.y);&#13;
            }&#13;
        });&#13;
    };&#13;
    presenter.setWorkMode = function() {&#13;
        var sourceModule = this.getSourceModule();&#13;
        sourceModule.removePointsStateMarks();&#13;
        sourceModule.enableUI(true);&#13;
    };&#13;
    presenter.reset = function() {&#13;
        this._allDoneState = false;&#13;
        this.data.selectedPoints = [];&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            val.collectedPoints = [];&#13;
        });&#13;
    };&#13;
    presenter.getErrorCount = function() {&#13;
        var errors = 0;&#13;
        $.each(this.data.selectedPoints, function(idx, val){&#13;
            //point belongs to any plot&#13;
            if(val.belongsTo.length === 0) {&#13;
                errors++;&#13;
            }&#13;
        });&#13;
        return errors;&#13;
    };&#13;
    presenter.getMaxScore = function() {&#13;
        var todo = 0;&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            todo += val.pointsToSelect;&#13;
        });&#13;
        return todo;&#13;
    };&#13;
    presenter.getScore = function() {&#13;
        var done = 0;&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            done += val.collectedPoints.length &lt;= val.pointsToSelect ? val.collectedPoints.length : val.pointsToSelect;&#13;
        });&#13;
        return done;&#13;
    };&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
    presenter.getState = function() {&#13;
        var state = JSON.stringify({&#13;
            version: 1,&#13;
            points: presenter.data.selectedPoints,&#13;
            plots: presenter.data.pointsOnPlot&#13;
            });&#13;
        return state;&#13;
    };&#13;
    presenter.setState = function(state) {&#13;
        if(state !== '' &amp;&amp; state !== undefined) {&#13;
            state = JSON.parse(state);&#13;
            presenter.data.selectedPoints = state.points;&#13;
            presenter.data.pointsOnPlot = state.plots;&#13;
        }&#13;
    };&#13;
    presenter.executeCommand = function(name, params) {&#13;
    };&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.model = model;&#13;
    };&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
    presenter.onEvent = function(evt, data) {&#13;
        switch(evt) {&#13;
            case "ValueChanged":&#13;
                if(data.item.match(/point_/)) {&#13;
                    this.processPointEvent(data);&#13;
                }&#13;
                break;&#13;
        }&#13;
    };&#13;
    presenter.processPointEvent = function(data) {&#13;
        var els = data.item.split('_');&#13;
        var x = this.toDotSeparator(els[1]);&#13;
        var y = this.toDotSeparator(els[2]);&#13;
        var state = data.value == 1 ? true : false;&#13;
        if(state) {&#13;
            presenter.selectPoint(x,y);&#13;
        } else {&#13;
            presenter.deselectPoint(x,y);&#13;
        }&#13;
    };&#13;
    presenter.selectPoint = function(x, y) {&#13;
        var hasPoint = false;&#13;
        $.each(this.data.selectedPoints, function(k, v) {&#13;
            if (v.x == x &amp;&amp; v.y == y) {&#13;
                hasPoint = true;&#13;
                return false;&#13;
            }&#13;
        });&#13;
        if (!hasPoint) {&#13;
            var el = {&#13;
                x: x,&#13;
                y: y,&#13;
                belongsTo: presenter.getPointOnPlots(x, y)&#13;
            };&#13;
            this.data.selectedPoints.push(el);&#13;
            this.updatePlotCollectedPoints();&#13;
            this.updatePlotsState();&#13;
            presenter.stateChanged({&#13;
                item: 'point_' + x + '_' + y,&#13;
                value: 1,&#13;
                score: el.belongsTo.length &gt; 0 ? presenter.STATE_CORRECT : presenter.STATE_INCORRECT&#13;
            });&#13;
        }&#13;
    };&#13;
    presenter.deselectPoint = function(x, y) {&#13;
        $.each(this.data.selectedPoints, function(k, v) {&#13;
            if (v.x == x &amp;&amp; v.y == y) {&#13;
                presenter.data.selectedPoints.splice(k, 1);&#13;
                presenter.updatePlotCollectedPoints();&#13;
                presenter.updatePlotsState();&#13;
                return false;&#13;
            }&#13;
        });&#13;
        presenter.stateChanged({&#13;
            item: 'point_' + x + '_' + y,&#13;
            value: 0,&#13;
            score: presenter.STATE_INCORRECT&#13;
        });&#13;
    };&#13;
    /**&#13;
     * Checks if point belongs to any plot&#13;
     *&#13;
     * @param float x - point's x&#13;
     * @param float y - point's y&#13;
     * @returns Array - list of plots where point belongs to&#13;
     */&#13;
    presenter.getPointOnPlots = function(x, y) {&#13;
        var sourceModule = this.getSourceModule();&#13;
        var belongsTo = [];&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            // any point&#13;
            if (val.strictPoints.length === 0) {&#13;
                // check if point belongs to plot&#13;
                var res = sourceModule.getPlot().isPointOnPlot(val.plotId, x, y);&#13;
                if (res) {&#13;
                    belongsTo.push(val.plotId);&#13;
                }&#13;
            } else {&#13;
                // check if point is one of strict points&#13;
                $.each(val.strictPoints, function(spIdx, spVal) {&#13;
                    if (spVal.x == x &amp;&amp; spVal.y == y) {&#13;
                        belongsTo.push(val.plotId);&#13;
                        return false;&#13;
                    }&#13;
                });&#13;
            }&#13;
        });&#13;
&#13;
        return belongsTo;&#13;
    };&#13;
    /**&#13;
     * Update plot's list of correct points&#13;
     *&#13;
     * @returns void&#13;
     */&#13;
    presenter.updatePlotCollectedPoints = function() {&#13;
        //remove all collected points for each plot&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            val.collectedPoints = [];&#13;
        });&#13;
        //set new collected points&#13;
        $.each(this.data.selectedPoints, function(pidx, pval) {&#13;
            $.each(pval.belongsTo, function(btIdx, btVal) {&#13;
                presenter.addCollectedPoint(btVal, pval.x, pval.y);&#13;
            });&#13;
        });&#13;
    };&#13;
    /**&#13;
     * Adds point to plot's collected points&#13;
     *&#13;
     * @param string plotId - id of plot&#13;
     * @param float x - point's x&#13;
     * @param float y - point's y&#13;
     * @returns void&#13;
     */&#13;
    presenter.addCollectedPoint = function(plotId, x, y) {&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
           if(val.plotId == plotId) {&#13;
               val.collectedPoints.push({x: x, y: y});&#13;
               return false;&#13;
           }&#13;
        });&#13;
    };&#13;
    presenter.updatePlotsState = function() {&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            res = val.collectedPoints.length &lt; val.pointsToSelect ? false : true;&#13;
            presenter.stateChanged({&#13;
                item: 'plot_' + val.plotId,&#13;
                value: '',&#13;
                score: res ? presenter.STATE_CORRECT : presenter.STATE_INCORRECT&#13;
            });&#13;
        });&#13;
    };&#13;
    presenter.getSourceModule = function() {&#13;
        return this.playerController.getModule(this.source);&#13;
    };&#13;
    presenter.stateChanged = function(data) {&#13;
        if(data) {&#13;
            //chained events when data is array&#13;
            if(!(data instanceof Array)) {&#13;
                //become chain with single event&#13;
                data = [data];&#13;
            }&#13;
&#13;
            //call chained events&#13;
            for(var t=0;t&lt;data.length;t++) {&#13;
                data[t].source = addonID;&#13;
                data[t].item = data[t].item.toString();&#13;
                if(data[t].item.substring(0,6) == 'point_') {&#13;
                    data[t].item = presenter.convertValueToDisplay(data[t].item);&#13;
                }&#13;
                data[t].value = data[t].value.toString();&#13;
                data[t].score = data[t].score === null ? null : data[t].score.toString();&#13;
                eventBus.sendEvent('ValueChanged', data[t]);&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.isAllOK()) {&#13;
            if (!presenter._allDoneState) {&#13;
                presenter._allDoneState = true;&#13;
                presenter.sendAllOKEvent();&#13;
            }&#13;
        } else {&#13;
            presenter._allDoneState = false;&#13;
        }&#13;
    };&#13;
    presenter.sendAllOKEvent = function() {&#13;
        var eventData = {&#13;
            'source': addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
    presenter.toDotSeparator = function(value) {&#13;
        return (value + '').replace(this.decimalSeparator, '.');&#13;
    };&#13;
    presenter.getSeparatorByDecimalSeparator = function() {&#13;
        return this.decimalSeparator == '.' ? ',' : ';';&#13;
    };&#13;
    presenter.convertValueToDisplay = function(value) {&#13;
        return (value + '').replace(new RegExp('\\.', 'g'), presenter.decimalSeparator);&#13;
    };&#13;
    presenter.getDecimalSeparator = function() {&#13;
        return presenter.decimalSeparator;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Print_Report" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Text" isLocalized="true" name="Text" nameLabel="Print_Report_property_text" type="string"/>
        <property displayName="Print Report Label" isLocalized="true" name="PrintReportLabel" nameLabel="Print_Report_property_print_report_label" type="string"/>
        <property displayName="Close Report Label" isLocalized="true" name="CloseReportLabel" nameLabel="Print_Report_property_close_report_label" type="string"/>
        <property displayName="Show Export Button" name="ShowExportButton" nameLabel="Print_Report_property_show_export_button" type="boolean"/>
        <property displayName="Export Button Label" isLocalized="true" name="ExportCsvLabel" nameLabel="Print_Report_property_export_csv_label" type="string"/>
        <property displayName="Title" name="Title" nameLabel="Print_Report_property_title" type="boolean"/>
        <property displayName="Title Label" isLocalized="true" name="TitleLabel" nameLabel="Print_Report_property_title_label" type="string"/>
        <property displayName="Show subtitle" name="Subtitle" nameLabel="Print_Report_property_subtitle" type="boolean"/>
        <property displayName="Subtitle" isLocalized="true" name="SubtitleLabel" nameLabel="Print_Report_property_subtitle_label" type="string"/>
        <property displayName="Show User First And Last Name" name="Username" nameLabel="Print_Report_property_username" type="boolean"/>
        <property displayName="Percentage Score" name="PercentageScore" nameLabel="Print_Report_property_percentage_score" type="boolean"/>
        <property displayName="Percentage Score Label" isLocalized="true" name="PercentageScoreLabel" nameLabel="Print_Report_property_percentage_score_label" type="string"/>
        <property displayName="Checks" name="Checks" nameLabel="Print_Report_property_checks" type="boolean"/>
        <property displayName="Checks Label" isLocalized="true" name="ChecksLabel" nameLabel="Print_Report_property_checks_label" type="string"/>
        <property displayName="Mistakes" name="Mistakes" nameLabel="Print_Report_property_mistakes" type="boolean"/>
        <property displayName="Mistakes Label" isLocalized="true" name="MistakesLabel" nameLabel="Print_Report_property_mistakes_label" type="string"/>
        <property displayName="Errors" name="Errors" nameLabel="Print_Report_property_errors" type="boolean"/>
        <property displayName="Errors Label" isLocalized="true" name="ErrorsLabel" nameLabel="Print_Report_property_errors_label" type="string"/>
        <property displayName="Page Score" name="PageScore" nameLabel="Print_Report_property_page_score" type="boolean"/>
        <property displayName="Page Score Label" isLocalized="true" name="PageScoreLabel" nameLabel="Print_Report_property_page_score_label" type="string"/>
        <property displayName="Time Per Page" name="TimePerPage" nameLabel="Print_Report_property_time_per_page" type="boolean"/>
        <property displayName="Time Per Page Label" isLocalized="true" name="TimePerPageLabel" nameLabel="Print_Report_property_time_per_page_label" type="string"/>
        <property displayName="Show Total Results" name="Total" nameLabel="Print_Report_property_total" type="boolean"/>
        <property displayName="Total Results Label" isLocalized="true" name="TotalLabel" nameLabel="Print_Report_property_total_label" type="string"/>
        <property displayName="Show Current Date" name="Date" nameLabel="Print_Report_property_date" type="boolean"/>
        <property displayName="Date Format" isLocalized="true" name="DateLabel" nameLabel="Print_Report_property_date_label" type="{dd-mm-yy, mm-dd-yy, yy-mm-dd, dd/mm/yy, mm/dd/yy, yy/mm/dd}"/>
        <property displayName="Time Per Page: Days Label" isLocalized="true" name="TimePerPageDaysLabel" nameLabel="Print_Report_property_time_per_page_days_label" type="string"/>
        <property displayName="Time Per Page: Hours Label" isLocalized="true" name="TimePerPageHoursLabel" nameLabel="Print_Report_property_time_per_page_hours_label" type="string"/>
        <property displayName="Time Per Page: Minutes Label" isLocalized="true" name="TimePerPageMinutesLabel" nameLabel="Print_Report_property_time_per_page_minutes_label" type="string"/>
        <property displayName="Time Per Page: Seconds Label" isLocalized="true" name="TimePerPageSecondsLabel" nameLabel="Print_Report_property_time_per_page_seconds_label" type="string"/>
        <property displayName="User Form: First Name Label" isLocalized="true" name="UsernameFirstLabel" nameLabel="Print_Report_property_username_first_label" type="string"/>
        <property displayName="User Form: Last Name Label" isLocalized="true" name="UsernameLastLabel" nameLabel="Print_Report_property_username_last_label" type="string"/>
        <property displayName="User Form: Confirm Label" isLocalized="true" name="UsernameConfirmLabel" nameLabel="Print_Report_property_username_confirm_label" type="string"/>
        <property displayName="User Form: Cancel Label" isLocalized="true" name="UsernameCancelLabel" nameLabel="Print_Report_property_username_cancel_label" type="string"/>
        <property displayName="Styles" name="Styles" nameLabel="Print_Report_property_styles" type="text"/>
    </model>
<css>.print-report-addon-wrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.print-report-popup {&#13;
    position: absolute;&#13;
    z-index: 9999;&#13;
    background: rgba(0,0,0,0.5);&#13;
    color: #000000;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form {&#13;
    display: table;&#13;
    padding: 15px;&#13;
    margin: 10px auto 0 auto;&#13;
    background: #ffffff;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form label,&#13;
.print-report-popup .print-report-form input {&#13;
    display: block;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form label {&#13;
    margin: 5px 0;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form input {&#13;
    height: 34px;&#13;
    width: 100%;&#13;
    min-width: 300px;&#13;
    padding: 6px 12px;&#13;
    border: 1px solid #cccccc;&#13;
    box-sizing: border-box;&#13;
    display: block;&#13;
    font-size: 14px;&#13;
    line-height: 1.42857143;&#13;
    border-radius: 6px;&#13;
    color: #555;&#13;
    background-color: #ffffff;&#13;
    background-image: none;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form .print-report-form-actions {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form .print-report-form-actions button {&#13;
    display: inline-block;&#13;
    padding: 6px 12px;&#13;
    margin: 5px 5px 0 5px;&#13;
    font-size: 14px;&#13;
    font-weight: 400;&#13;
    line-height: 1.42857143;&#13;
    text-align: center;&#13;
    white-space: nowrap;&#13;
    vertical-align: middle;&#13;
    background-image: none;&#13;
    border: 1px solid transparent;&#13;
    border-radius: 4px;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form button.print-report-form-confirm-btn {&#13;
    background: #0000ff;&#13;
    color: #ffffff;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form button.export-report-form-confirm-btn {&#13;
    background: #0000ff;&#13;
    color: #ffffff;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form button.print-report-form-cancel-btn {&#13;
    background: #ff0000;&#13;
    color: #ffffff;&#13;
}&#13;
&#13;
.export-button {&#13;
    width: 100%;&#13;
}&#13;
</css><view/><preview/><presenter>function AddonPrint_Report_create(){&#13;
    var presenter = function AddonPrint_Report_presenter () {};&#13;
&#13;
    presenter.logic = function addonPrint_Report_logic (view, model, preview) {&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        presenter.$body = $('body');&#13;
        presenter.$view = $(view);&#13;
        presenter.$page = $('.ic_page');&#13;
        presenter.$wrapper = $('&lt;div&gt;&lt;/div&gt;').addClass('print-report-addon-wrapper').text(presenter.configuration.text);&#13;
        presenter.$exportButton = $('&lt;button&gt;&lt;/button&gt;').addClass('export-button').text(presenter.configuration.labels.exportCsvReport);&#13;
        presenter.$view.append(presenter.$exportButton);&#13;
        presenter.$view.append(presenter.$wrapper);&#13;
&#13;
        if(!presenter.configuration.report.showExportButton){&#13;
            presenter.$exportButton.hide();&#13;
        }&#13;
&#13;
        presenter.originalViewStyles = presenter.$view.attr('style');&#13;
        presenter.originalViewClasses = presenter.$view.attr('class');&#13;
&#13;
        presenter.user = {&#13;
            'firstName': '',&#13;
            'lastName': ''&#13;
        };&#13;
&#13;
        if (!preview) {&#13;
            presenter.$wrapper.click(presenter.clickAction);&#13;
            presenter.$popup = presenter.createPopup();&#13;
            presenter.$view.append(presenter.$popup);&#13;
            presenter.$popup.hide();&#13;
            presenter.bindPopupEvents();&#13;
            presenter.$exportButton.on("click", function () {&#13;
                presenter.showPopup(true);&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.exportButtonClickAction = function () {&#13;
        var data = presenter.getPagesData(),&#13;
            name = presenter.user.firstName || '',&#13;
            lastName = presenter.user.lastName || '',&#13;
            date = presenter.prepareDate(presenter.configuration.labels.date),&#13;
            firstNameLabel = presenter.configuration.labels.userFirstName,&#13;
            lastNameLabel = presenter.configuration.labels.userLastName,&#13;
            scoreLabel = presenter.configuration.labels.pageScore || "Score",&#13;
            errorsLabel = presenter.configuration.labels.errors || "Errors";&#13;
&#13;
            var blob = new Blob([firstNameLabel+ ": " + name + ", " + lastNameLabel + ": " + lastName + ", " + scoreLabel + ": " + data.total.score + "/" + data.total.maxScore + ", " + errorsLabel + ": " + data.total.errors + ", " + date], {type: "text/plain;charset=utf-8"});&#13;
            saveAs(blob, "report.txt");&#13;
    };&#13;
&#13;
    presenter.clickAction = function addonPrint_Report_clickAction () {&#13;
        if (presenter.configuration.report.username) {&#13;
            presenter.showPopup(false);&#13;
        } else {&#13;
            presenter.showReport();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getPagesData = function addonPrint_Report_getPagesData () {&#13;
        var data = {}, page, total;&#13;
&#13;
        for(var i = 0; i &lt; presenter.pageCount; i += 1) {&#13;
            page = presenter.presentation.getPage(i);&#13;
            if (page.isReportable()) {&#13;
                data[i + 1] = presenter.getPageData(page);&#13;
            }&#13;
        }&#13;
        page = null;&#13;
&#13;
        total = presenter.calculateTotal(data);&#13;
&#13;
        return {&#13;
            pages: data,&#13;
            total: total&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getPageData = function addonPrint_Report_getPageData (page) {&#13;
        var id = page.getId(),&#13;
            score = presenter.scoreService.getPageScoreById(id),&#13;
            time = presenter.timeService.getPageTimeById(id),&#13;
            percentageScore;&#13;
&#13;
        if (score.score === 0 &amp;&amp; score.maxScore === 0) {&#13;
            if (page.isVisited()) {&#13;
                percentageScore = 100;&#13;
            } else {&#13;
                percentageScore = 0;&#13;
            }&#13;
        } else {&#13;
            percentageScore = parseInt(Math.floor( (score.score / score.maxScore) * 100 ));&#13;
        }&#13;
&#13;
        return {&#13;
            'name': page.getName(),&#13;
            'score': score.score,&#13;
            'maxScore': score.maxScore,&#13;
            'percentageScore': percentageScore,&#13;
            'mistakes': score.mistakeCount,&#13;
            'errors': score.errorCount,&#13;
            'checks': score.checkCount,&#13;
            'time': parseInt(time),&#13;
            'visited': page.isVisited()&#13;
        };&#13;
    };&#13;
&#13;
    presenter.calculateTotal = function addonPrint_Report_calculateTotal (data) {&#13;
        var count = 0, total = {&#13;
            'score': 0,&#13;
            'maxScore': 0,&#13;
            'percentageScore': 0,&#13;
            'mistakes': 0,&#13;
            'errors': 0,&#13;
            'checks': 0,&#13;
            'time': 0&#13;
        };&#13;
&#13;
        $.each(data, function AddonPrint_Report_calculateTotalEach (_, page) {&#13;
            count += 1;&#13;
            total.score += page.score;&#13;
            total.maxScore += page.maxScore;&#13;
            total.percentageScore += page.percentageScore;&#13;
            total.mistakes += page.mistakes;&#13;
            total.errors += page.errors;&#13;
            total.checks += page.checks;&#13;
            total.time += page.time;&#13;
        });&#13;
&#13;
        total.percentageScore = parseInt(Math.floor( total.percentageScore / count ));&#13;
        return total;&#13;
    };&#13;
&#13;
    presenter.createPopup = function addonPrint_Report_createPopup () {&#13;
        var $popup = $('&lt;div&gt;&lt;/div&gt;').&#13;
                addClass('print-report-popup'),&#13;
            $form = $('&lt;div&gt;&lt;/div&gt;').&#13;
                addClass('print-report-form'),&#13;
            $firstNameLabel = $('&lt;label&gt;&lt;/label&gt;').&#13;
                addClass('print-report-form-firstname-label').&#13;
                text(presenter.configuration.labels.userFirstName),&#13;
            $firstName = $('&lt;input&gt;').&#13;
                attr('type', 'text').&#13;
                attr('value', presenter.user.firstName).&#13;
                addClass('print-report-form-firstname'),&#13;
            $lastNameLabel = $('&lt;label&gt;&lt;/label&gt;').&#13;
                addClass('print-report-form-lastname-label').&#13;
                text(presenter.configuration.labels.userLastName),&#13;
            $lastName = $('&lt;input&gt;').&#13;
                attr('type', 'text').&#13;
                attr('value', presenter.user.lastName).&#13;
                addClass('print-report-form-lastname'),&#13;
            $confirmBtn = $('&lt;button&gt;&lt;/button&gt;').&#13;
                addClass('print-report-form-confirm-btn').&#13;
                text(presenter.configuration.labels.userConfirm),&#13;
            $exportBtn = $('&lt;button&gt;&lt;/button&gt;').&#13;
                addClass('export-report-form-confirm-btn').&#13;
                text(presenter.configuration.labels.exportCsvReport),&#13;
            $cancelBtn = $('&lt;button&gt;&lt;/button&gt;').&#13;
                addClass('print-report-form-cancel-btn').&#13;
                text(presenter.configuration.labels.userCancel);&#13;
&#13;
        $form.append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').&#13;
                    addClass('print-report-form-firstname-wrapper').&#13;
                    append($firstNameLabel).&#13;
                    append($firstName)&#13;
            ).&#13;
            append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').&#13;
                    addClass('print-report-form-lastname-wrapper').&#13;
                    append($lastNameLabel).&#13;
                    append($lastName)&#13;
            ).&#13;
            append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').&#13;
                    addClass('print-report-form-actions').&#13;
                    append($cancelBtn).&#13;
                    append($confirmBtn).&#13;
                    append($exportBtn)&#13;
            );&#13;
&#13;
        $popup.css({&#13;
            width: presenter.$page.width() + 'px',&#13;
            height: presenter.$page.height() + 'px'&#13;
        });&#13;
&#13;
        $popup.append($form);&#13;
&#13;
        return $popup;&#13;
    };&#13;
&#13;
    presenter.bindPopupEvents = function addonPrint_Report_bindPopupEvents () {&#13;
        presenter.$popup.on('click', '.print-report-form-confirm-btn', function addonPrint_Report_onConfirmClick (event) {&#13;
            event.preventDefault();&#13;
            presenter.hidePopup();&#13;
            presenter.showReport();&#13;
        });&#13;
&#13;
        presenter.$popup.on('click', '.export-report-form-confirm-btn', function addonPrint_Report_onConfirmClick (event) {&#13;
            event.preventDefault();&#13;
            presenter.hidePopup();&#13;
            presenter.exportButtonClickAction();&#13;
        });&#13;
&#13;
        presenter.$popup.on('click', '.print-report-form-cancel-btn', function addonPrint_Report_onCancelClick (event) {&#13;
            event.preventDefault();&#13;
            presenter.hidePopup();&#13;
        });&#13;
&#13;
        presenter.$popup.on('input', '.print-report-form-firstname', function addonPrint_Report_onFirstNameInput () {&#13;
            presenter.user.firstName = $(this).val();&#13;
        });&#13;
&#13;
        presenter.$popup.on('input', '.print-report-form-lastname', function addonPrint_Report_onLastNameInput () {&#13;
            presenter.user.lastName = $(this).val();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.unbindPopupEvents = function addonPrint_Report_unbindPopupEvents () {&#13;
        presenter.$popup.off();&#13;
    };&#13;
&#13;
    presenter.showPopup = function AddonPrint_Report_showPopup (exportButtonClicked) {&#13;
        if(exportButtonClicked){&#13;
            presenter.$popup.find('.print-report-form-confirm-btn').hide();&#13;
        }else{&#13;
            presenter.$popup.find('.export-report-form-confirm-btn').hide();&#13;
        }&#13;
&#13;
        var $firstName = presenter.$popup.find('.print-report-form-firstname'),&#13;
            $lastName = presenter.$popup.find('.print-report-form-lastname');&#13;
&#13;
        $firstName.attr('value', presenter.user.firstName);&#13;
        $lastName.attr('value', presenter.user.lastName);&#13;
&#13;
        $firstName = null;&#13;
        $lastName = null;&#13;
&#13;
        presenter.$wrapper.hide();&#13;
        presenter.$exportButton.hide();&#13;
&#13;
        presenter.$view.&#13;
            removeAttr('style class').&#13;
            css({&#13;
                'width': presenter.$page.width() + 'px',&#13;
                'height': presenter.$page.height() + 'px',&#13;
                'z-index': 9999&#13;
            });&#13;
&#13;
        presenter.$popup.show();&#13;
        presenter.$body.animate({scrollTop: presenter.$popup.offset().top}, 'fast', 'swing');&#13;
    };&#13;
&#13;
    presenter.hidePopup = function AddonPrint_Report_hidePopup () {&#13;
        presenter.$popup.hide();&#13;
&#13;
        presenter.$view.&#13;
            removeAttr('style class').&#13;
            attr('style', presenter.originalViewStyles).&#13;
            attr('class', presenter.originalViewClasses);&#13;
&#13;
        presenter.$popup.find('.print-report-form-confirm-btn').show();&#13;
        presenter.$popup.find('.export-report-form-confirm-btn').show();&#13;
        presenter.$wrapper.show();&#13;
        if(presenter.configuration.report.showExportButton){&#13;
            presenter.$exportButton.show();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showReport = function addonPrint_Report_showReport () {&#13;
        var data = presenter.getPagesData(),&#13;
            reportHtml = presenter.prepareReportHtml(data),&#13;
            reportWindow = window.open();&#13;
&#13;
        $(reportWindow.document).ready(function addonPrint_Report_onReportWindowReady () {&#13;
            try {&#13;
                $(reportWindow.document.body).html(reportHtml);&#13;
            } catch (e) { // workaround for IE&#13;
                reportWindow.document.body.innerHTML = reportHtml.prop('outerHTML');&#13;
            }&#13;
&#13;
            reportWindow = null;&#13;
            reportHtml = null;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.prepareReportHtml = function addonPrint_Report_prepareReportHtml (data) {&#13;
        var $reportWrapper = $('&lt;section&gt;&lt;/section&gt;').addClass('wrapper'),&#13;
            $reportDefaultStyles = $('&lt;style&gt;&lt;/style&gt;'),&#13;
            $reportStyles = $('&lt;style&gt;&lt;/style&gt;').text(presenter.configuration.styles),&#13;
            $reportActions = presenter.prepareReportActionsHtml(),&#13;
            $reportHeader = presenter.prepareReportHeaderHtml(),&#13;
            $reportTable = presenter.prepareReportTableHtml(data);&#13;
&#13;
        $reportDefaultStyles.text(&#13;
            '@media print and (color) { * { -webkit-print-color-adjust: exact; print-color-adjust: exact; } }' +&#13;
            'body { width: 210mm; margin: 0 auto; font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;' +&#13;
                'font-size: 14px; line-height: 20px; color: #333333; padding: 0; }' +&#13;
            'h1, h2 { line-height: 40px; margin: 0; }' +&#13;
            'h1 { font-size: 38.5px; }' +&#13;
            'h2 { font-size: 31.5px; }' +&#13;
            'table { width: 100%; max-width: 100%; border-collapse: collapse; border-spacing: 0; ' +&#13;
            'background-color: transparent; }' +&#13;
            'table th, table td { padding: 8px; line-height: 20px; text-align: left; vertical-align: top; }' +&#13;
            'table td { border-top: 1px solid #dddddd; }' +&#13;
            'table tbody &gt; tr:nth-child(odd) td { background: #f9f9f9; }' +&#13;
            '.percentage-score-label, .percentage-score { color: blue; }' +&#13;
            '.checks-label, .checks { color: green; }' +&#13;
            '.mistakes-label, .mistakes { color: brown; }' +&#13;
            '.errors-label, .errors { color: red; }' +&#13;
            '.page-score-label, .page-score { color: blue; font-weight: bold; }' +&#13;
            '.total td { border-top: 3px solid #dddddd; font-weight: bold; }' +&#13;
            '.actions { border: 1px solid #ccc; border-bottom-left-radius: 5px; border-bottom-right-radius: 5px; ' +&#13;
                'border-top-width: 0; margin-bottom: 10px; overflow: auto; background: #fff; }' +&#13;
            '.actions button { display: inline-block; padding: 6px 12px; margin: 5px; font-size: 14px;' +&#13;
                'font-weight: bold; line-height: 1.42857143; text-align: center; white-space: nowrap;' +&#13;
                'vertical-align: middle; background-image: none; border: 1px solid transparent; border-radius: 4px;' +&#13;
                'cursor: pointer; }' +&#13;
            '.actions button.close { background: #ff0000; color: #ffffff; float: left; }' +&#13;
            '.actions button.print { background: #0000ff; color: #ffffff; float: right; }' +&#13;
            '@media print { body { width: 100% } .actions { display: none; } }'&#13;
        );&#13;
&#13;
        $reportWrapper.append($reportDefaultStyles);&#13;
        $reportWrapper.append($reportStyles);&#13;
        $reportWrapper.append($reportActions);&#13;
        $reportWrapper.append($reportHeader);&#13;
        $reportWrapper.append($reportTable);&#13;
&#13;
        return $reportWrapper;&#13;
    };&#13;
&#13;
    presenter.prepareReportActionsHtml = function addonPrint_Report_prepareReportActionsHtml () {&#13;
        var $actions = $('&lt;div&gt;&lt;/div&gt;').addClass('actions');&#13;
&#13;
        $actions.append(&#13;
            $('&lt;button&gt;&lt;/button&gt;').&#13;
                addClass('close').&#13;
                text(presenter.configuration.labels.closeReport).&#13;
                attr('onclick', 'javascript:window.close()')&#13;
        ).&#13;
        append(&#13;
            $('&lt;button&gt;&lt;/button&gt;').&#13;
                addClass('print').&#13;
                text(presenter.configuration.labels.printReport).&#13;
                attr('onclick', 'javascript:window.print()')&#13;
        );&#13;
&#13;
        return $actions;&#13;
    };&#13;
&#13;
    presenter.prepareMonthFormat = function addonPrint_Report_prepareMonthFormat (month) {&#13;
        if(month.toString().length &lt; 2){&#13;
            return "0" + month;&#13;
        }&#13;
&#13;
        return month;&#13;
    };&#13;
&#13;
    presenter.prepareYearFormat = function addonPrint_Report_prepareYearFormat (year) {&#13;
        return year.toString().substring(2);&#13;
    };&#13;
&#13;
    presenter.prepareDate = function addonPrint_Report_prepareDate (format) {&#13;
        var date = new Date(),&#13;
            day = date.getDate(),&#13;
            month = presenter.prepareMonthFormat(date.getMonth()+1),&#13;
            year = presenter.prepareYearFormat(date.getFullYear());&#13;
&#13;
&#13;
        switch(format) {&#13;
            case "dd-mm-yy":&#13;
                return day + "-" + month + "-" + year;&#13;
                break;&#13;
            case "mm-dd-yy":&#13;
                return month + "-" + day + "-" + year;&#13;
                break;&#13;
            case "yy-mm-dd":&#13;
                return year + "-" + month + "-" + day;&#13;
                break;&#13;
            case "dd/mm/yy":&#13;
                return day + "/" + month + "/" + year;&#13;
                break;&#13;
            case "mm/dd/yy":&#13;
                return month + "/" + day + "/" + year;&#13;
                break;&#13;
            case "yy/mm/dd":&#13;
                return year + "/" + month + "/" + day;&#13;
                break;&#13;
            default:&#13;
                return day + "-" + month + "-" + year;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.prepareReportHeaderHtml = function addonPrint_Report_prepareReportHeaderHtml () {&#13;
        var $header = $('&lt;div&gt;&lt;/div&gt;').addClass('header');&#13;
&#13;
        if (presenter.configuration.report.title) {&#13;
            $header.append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').addClass('title').append(&#13;
                    $('&lt;h1&gt;&lt;/h1&gt;').text(presenter.configuration.labels.title)&#13;
                )&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.subtitle) {&#13;
            $header.append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').addClass('subtitle').append(&#13;
                    $('&lt;h2&gt;&lt;/h2&gt;').text(presenter.configuration.labels.subtitle)&#13;
                )&#13;
            );&#13;
        }&#13;
&#13;
        if(presenter.configuration.report.date) {&#13;
            $header.append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').addClass('date').append(&#13;
                    $('&lt;h2&gt;&lt;/h2&gt;').text(presenter.prepareDate(presenter.configuration.labels.date))&#13;
                )&#13;
            )&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.username) {&#13;
            $header.append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').addClass('user').append(&#13;
                        $('&lt;span&gt;&lt;/span&gt;').addClass('firstname').text(presenter.user.firstName || '')&#13;
                    ).&#13;
                    append(' ').&#13;
                    append(&#13;
                        $('&lt;span&gt;&lt;/span&gt;').addClass('lastname').text(presenter.user.lastName || '')&#13;
                    )&#13;
            );&#13;
        }&#13;
&#13;
        return $header;&#13;
    };&#13;
&#13;
    presenter.prepareReportTableHtml = function addonPrint_Report_prepareReportTableHtml (data) {&#13;
        var $report = $('&lt;div&gt;&lt;/div&gt;').addClass('report'),&#13;
            $table = $('&lt;table&gt;&lt;/table&gt;'),&#13;
            $header = presenter.prepareReportTableHeaderHtml(),&#13;
            $body = presenter.prepareReportTableBodyHtml(data.pages, data.total);&#13;
&#13;
        $table.append($header).append($body);&#13;
        $report.append($table);&#13;
&#13;
        return $report;&#13;
    };&#13;
&#13;
    presenter.prepareReportTableHeaderHtml = function addonPrint_Report_prepareReportTableHeaderHtml () {&#13;
        var $header = $('&lt;thead&gt;&lt;/thead&gt;'),&#13;
            $row = $('&lt;tr&gt;&lt;/tr&gt;');&#13;
&#13;
        $row.append(&#13;
            $('&lt;th&gt;&lt;/th&gt;').addClass('name-label')&#13;
        );&#13;
&#13;
        if (presenter.configuration.report.percentageScore) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('percentage-score-label').text(presenter.configuration.labels.percentageScore)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.checks) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('checks-label').text(presenter.configuration.labels.checks)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.mistakes) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('mistakes-label').text(presenter.configuration.labels.mistakes)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.errors) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('errors-label').text(presenter.configuration.labels.errors)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.pageScore) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('page-score-label').text(presenter.configuration.labels.pageScore)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.timePerPage) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('time-per-page-label').text(presenter.configuration.labels.timePerPage)&#13;
            );&#13;
        }&#13;
&#13;
        $header.append($row);&#13;
        return $header;&#13;
    };&#13;
&#13;
    presenter.prepareReportTableBodyHtml = function addonPrint_Report_prepareReportTableBodyHtml (pagesData, total) {&#13;
        var $body = $('&lt;tbody&gt;&lt;/tbody&gt;');&#13;
&#13;
        $.each(pagesData, function AddonPrint_Report_prepareReportTableBodyHtmlEach (_, page) {&#13;
            $body.append(&#13;
                presenter.prepareReportTableBodyRowHtml(page)&#13;
            );&#13;
        });&#13;
&#13;
        if (presenter.configuration.report.total) {&#13;
            total.name = presenter.configuration.labels.total;&#13;
&#13;
            $body.append(&#13;
                presenter.prepareReportTableBodyRowHtml(total).addClass('total')&#13;
            );&#13;
        }&#13;
&#13;
        return $body;&#13;
    };&#13;
&#13;
    presenter.prepareReportTableBodyRowHtml = function addonPrint_Report_prepareReportTableBodyRowHtml (pageData) {&#13;
        var $row = $('&lt;tr&gt;&lt;/tr&gt;');&#13;
&#13;
        $row.append(&#13;
            $('&lt;td&gt;&lt;/td&gt;').addClass('name').text(pageData.name)&#13;
        );&#13;
&#13;
        if (presenter.configuration.report.percentageScore) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('percentage-score').text(pageData.percentageScore + '%')&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.checks) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('checks').text(pageData.checks)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.mistakes) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('mistakes').text(pageData.mistakes)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.errors) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('errors').text(pageData.errors)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.pageScore) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('page-score').text(pageData.score + '/' + pageData.maxScore)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.timePerPage) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('time-per-page').text(&#13;
                    presenter.humanReadableTime(pageData.time,&#13;
                        {&#13;
                            days: presenter.configuration.labels.timePerPageDays,&#13;
                            hours: presenter.configuration.labels.timePerPageHours,&#13;
                            minutes: presenter.configuration.labels.timePerPageMinutes,&#13;
                            seconds: presenter.configuration.labels.timePerPageSeconds&#13;
                        })&#13;
                )&#13;
            );&#13;
        }&#13;
&#13;
        return $row;&#13;
    };&#13;
&#13;
    presenter.humanReadableTime = function addonPrint_Report_humanReadableTime (time, labels) {&#13;
        var seconds, minutes,hours, days, output = '';&#13;
&#13;
        seconds = parseInt( Math.floor( time / 1000 ) );&#13;
&#13;
        minutes = parseInt( Math.floor( seconds / 60 ) );&#13;
&#13;
        if (minutes &gt; 0) {&#13;
            seconds = seconds - (minutes * 60);&#13;
        }&#13;
&#13;
        hours = parseInt( Math.floor( minutes / 60 ) );&#13;
&#13;
        if (hours &gt; 0) {&#13;
            minutes = minutes - (hours * 60);&#13;
        }&#13;
&#13;
        days = parseInt( Math.floor( hours / 24 ) );&#13;
&#13;
        if (days &gt; 0) {&#13;
            hours = hours - (days * 24);&#13;
        }&#13;
&#13;
        output = seconds + labels.seconds;&#13;
&#13;
        if (minutes &gt; 0) {&#13;
            output = minutes + labels.minutes + ' ' + output;&#13;
        }&#13;
        if (hours &gt; 0) {&#13;
            output = hours + labels.hours + ' ' + output;&#13;
        }&#13;
        if (days &gt; 0) {&#13;
            output = days + labels.days + ' ' + output;&#13;
        }&#13;
&#13;
        return output;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function addonPrint_Report_executeCommand (name) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, [], presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility =  function addonPrint_Report_setVisibility (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function addonPrint_Report_setPlayerController (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.presentation = controller.getPresentation();&#13;
        presenter.pageCount = presenter.presentation.getPageCount();&#13;
        presenter.scoreService = controller.getScore();&#13;
        presenter.timeService = controller.getTimeService();&#13;
    };&#13;
&#13;
    presenter.createPreview = function addonPrint_Report_createPreview (view, model) {&#13;
        presenter.logic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function addonPrint_run (view, model){&#13;
        presenter.logic(view, model, false);&#13;
&#13;
        presenter.view = view;&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function addonPrint_Report_destroy () {&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.$wrapper.off();&#13;
        presenter.$exportButton.off();&#13;
        presenter.unbindPopupEvents();&#13;
&#13;
        presenter.user = null;&#13;
        presenter.configuration = null;&#13;
        presenter.originalViewStyles = null;&#13;
        presenter.originalViewClasses = null;&#13;
&#13;
        presenter.playerController = null;&#13;
        presenter.presentation = null;&#13;
        presenter.pageCount = null;&#13;
        presenter.scoreService = null;&#13;
        presenter.timeService = null;&#13;
&#13;
        presenter.$popup = null;&#13;
        presenter.$wrapper = null;&#13;
        presenter.$page = null;&#13;
        presenter.$view = null;&#13;
        presenter.$body = null;&#13;
        presenter.view = null;&#13;
        presenter.$exportButton = null;&#13;
&#13;
        presenter.destroy = null;&#13;
        presenter = null;&#13;
    };&#13;
&#13;
    presenter.show = function addonPrint_Report_show () {&#13;
        if (!presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(true);&#13;
            presenter.configuration.isVisible = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hide = function addonPrint_Report_hide () {&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(false);&#13;
            presenter.configuration.isVisible = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function addonPrint_Report_reset () {&#13;
        presenter.hidePopup();&#13;
        presenter.user.firstName = '';&#13;
        presenter.user.lastName = '';&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.getState = function addonPrint_Report_getState () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            user: presenter.user&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function addonPrint_Report_setState (state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        if (parsedState.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        if (parsedState.user) {&#13;
            presenter.user.firstName = parsedState.user.firstName || '';&#13;
            presenter.user.lastName = parsedState.user.lastName || '';&#13;
        } else {&#13;
            presenter.user.firstName = '';&#13;
            presenter.user.lastName = '';&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateModel = function addonPrint_Report_validateModel (model) {&#13;
        return {&#13;
            'report': {&#13;
                'title': ModelValidationUtils.validateBoolean(model.Title),&#13;
                'subtitle': ModelValidationUtils.validateBoolean(model.Subtitle),&#13;
                'username': ModelValidationUtils.validateBoolean(model.Username),&#13;
                'percentageScore': ModelValidationUtils.validateBoolean(model.PercentageScore),&#13;
                'checks': ModelValidationUtils.validateBoolean(model.Checks),&#13;
                'mistakes': ModelValidationUtils.validateBoolean(model.Mistakes),&#13;
                'errors': ModelValidationUtils.validateBoolean(model.Errors),&#13;
                'pageScore': ModelValidationUtils.validateBoolean(model.PageScore),&#13;
                'timePerPage': ModelValidationUtils.validateBoolean(model.TimePerPage),&#13;
                'total': ModelValidationUtils.validateBoolean(model.Total),&#13;
                'date': ModelValidationUtils.validateBoolean(model.Date),&#13;
                'showExportButton': ModelValidationUtils.validateBoolean(model.ShowExportButton)&#13;
            },&#13;
            'labels': {&#13;
                'title': model.TitleLabel,&#13;
                'subtitle': model.SubtitleLabel,&#13;
                'percentageScore': model.PercentageScoreLabel,&#13;
                'checks': model.ChecksLabel,&#13;
                'mistakes': model.MistakesLabel,&#13;
                'errors': model.ErrorsLabel,&#13;
                'pageScore': model.PageScoreLabel,&#13;
                'timePerPage': model.TimePerPageLabel,&#13;
                'total': model.TotalLabel,&#13;
                'timePerPageDays': model.TimePerPageDaysLabel || 'd',&#13;
                'timePerPageHours': model.TimePerPageHoursLabel || 'h',&#13;
                'timePerPageMinutes': model.TimePerPageMinutesLabel || 'm',&#13;
                'timePerPageSeconds': model.TimePerPageSecondsLabel || 's',&#13;
                'userFirstName': model.UsernameFirstLabel || 'First name',&#13;
                'userLastName': model.UsernameLastLabel || 'Last name',&#13;
                'userConfirm': model.UsernameConfirmLabel || 'Generate',&#13;
                'userCancel': model.UsernameCancelLabel || 'Cancel',&#13;
                'closeReport': model.CloseReportLabel || 'Close',&#13;
                'printReport': model.PrintReportLabel || 'Print',&#13;
                'exportCsvReport': model.ExportCsvLabel || 'Export report',&#13;
                'date': model.DateLabel&#13;
&#13;
            },&#13;
            'styles': model.Styles,&#13;
            'text': model.Text,&#13;
            'isVisible': ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            'isVisibleByDefault': ModelValidationUtils.validateBoolean(model['Is Visible'])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function addonPrint_Report_setShowErrorsMode () {};&#13;
&#13;
    presenter.setWorkMode = function addonPrint_Report_setWorkMode () {};&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Programmed_Drawing" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property name="Rows" nameLabel="Programmed_Drawing_property_rows" type="string"/>
        <property name="Columns" nameLabel="Programmed_Drawing_property_columns" type="string"/>
        <property name="Color" nameLabel="Programmed_Drawing_property_color" type="string"/>
        <property name="Initial design" nameLabel="Programmed_Drawing_property_initial_design" type="text"/>
	</model>
<css>.cellGridWrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.cellGrid {&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    border: none;&#13;
}&#13;
&#13;
.cell-element {&#13;
    float: left;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    color: black;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.cell-element-wrapper {&#13;
    float: left;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    border-style: solid;&#13;
    border-color: black;&#13;
    border-width: 1px;&#13;
    -webkit-box-sizing:border-box;&#13;
    -moz-box-sizing:border-box;&#13;
    box-sizing:border-box;&#13;
}&#13;
</css><view>&lt;div class="cellGridWrapper"&gt;&#13;
    &lt;div class="cellGrid"&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="cellGridWrapper"&gt;&#13;
    &lt;div class="cellGrid"&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonProgrammed_Drawing_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.lastEvent = null;&#13;
&#13;
&#13;
    var viewContainer;&#13;
    var gridContainerWrapper;&#13;
    var gridContainer;&#13;
&#13;
    function initGrid(model, preview) {&#13;
        var rows = presenter.configuration.rows;&#13;
        var columns = presenter.configuration.columns;&#13;
&#13;
        for(var row = 0; row &lt; rows; row++) {&#13;
            for(var column = 0; column &lt; columns; column++) {&#13;
                var wrapperElement = $(document.createElement('div'));&#13;
                wrapperElement.addClass('cell-element-wrapper');&#13;
&#13;
                var selectableElement = $(document.createElement('div'));&#13;
                selectableElement.addClass('cell-element');&#13;
                selectableElement.attr('coordinates', (column+1)+"-"+((rows-row)));&#13;
&#13;
                wrapperElement.append(selectableElement);&#13;
                gridContainer.append(wrapperElement);&#13;
            }&#13;
        }&#13;
&#13;
        var gridContainerWrapperDimensions = getElementDimensions(gridContainerWrapper);&#13;
        var gridContainerWrapperDistances = calculateInnerDistance(gridContainerWrapperDimensions);&#13;
&#13;
        var wrapperDimensions = getElementDimensions(gridContainerWrapper.find('.cell-element-wrapper:first')[0]);&#13;
        var wrapperDistances = calculateInnerDistance(wrapperDimensions);&#13;
&#13;
        var elementDimensions = getElementDimensions(gridContainerWrapper.find('.cell-element:first')[0]);&#13;
        var elementDistances = calculateInnerDistance(elementDimensions);&#13;
&#13;
        var wrapperWidth = parseInt((model.Width - gridContainerWrapperDistances.horizontal - (wrapperDistances.horizontal * columns)) / columns, 10);&#13;
        var wrapperHeight = parseInt((model.Height - gridContainerWrapperDistances.vertical - (wrapperDistances.vertical * rows)) / rows, 10);&#13;
&#13;
        var elementWidth = wrapperWidth - elementDistances.horizontal;&#13;
        var elementHeight = wrapperHeight - elementDistances.vertical;&#13;
&#13;
        var newContainerWrapperHeight = wrapperHeight * rows + wrapperDistances.vertical * rows;&#13;
        var newContainerWrapperWidth = wrapperWidth * columns + wrapperDistances.horizontal * columns;&#13;
&#13;
        var verticalGapHeight = model.Height - newContainerWrapperHeight;&#13;
        var horizontalGapHeight = model.Width - newContainerWrapperWidth;&#13;
&#13;
        gridContainerWrapper.css('height', model.Height + 'px');&#13;
        gridContainerWrapper.css('width', model.Width + 'px');&#13;
        gridContainer.css('height', model.Height + 'px');&#13;
        gridContainer.css('width', (parseInt(model.Width)+parseInt(elementWidth/2)) + 'px');&#13;
&#13;
        var vertical = verticalGapHeight / rows;&#13;
        var horizontal = horizontalGapHeight / columns;&#13;
&#13;
        gridContainer.find(".cell-element-wrapper").each(function() {&#13;
            var index = $(this).index();&#13;
            var selectedRow = parseInt(index / columns, 10);&#13;
            var selectedColumn = parseInt(index % columns, 10);&#13;
&#13;
            $(this).width(wrapperWidth + horizontal + 2);&#13;
            $(this).height(wrapperHeight + vertical + 2);&#13;
&#13;
            var selectableElement = $(this).find('.cell-element:first');&#13;
&#13;
            var lineHeight = selectedRow === rows -1 ? elementHeight + verticalGapHeight : elementHeight;&#13;
            selectableElement.css('line-height', lineHeight + "px");&#13;
        });&#13;
    }&#13;
&#13;
    function getElementDimensions(element) {&#13;
        element = $(element);&#13;
&#13;
        return {&#13;
            border:{&#13;
                top:parseInt(element.css('border-top-width'), 10),&#13;
                bottom:parseInt(element.css('border-bottom-width'), 10),&#13;
                left:parseInt(element.css('border-left-width'), 10),&#13;
                right:parseInt(element.css('border-right-width'), 10)&#13;
            },&#13;
            margin:{&#13;
                top:parseInt(element.css('margin-top'), 10),&#13;
                bottom:parseInt(element.css('margin-bottom'), 10),&#13;
                left:parseInt(element.css('margin-left'), 10),&#13;
                right:parseInt(element.css('margin-right'), 10)&#13;
            },&#13;
            padding:{&#13;
                top:parseInt(element.css('padding-top'), 10),&#13;
                bottom:parseInt(element.css('padding-bottom'), 10),&#13;
                left:parseInt(element.css('padding-left'), 10),&#13;
                right:parseInt(element.css('padding-right'), 10)&#13;
            }&#13;
        };&#13;
    }&#13;
&#13;
    function calculateInnerDistance(elementDimensions) {&#13;
        var vertical = elementDimensions.border.top + elementDimensions.border.bottom;&#13;
        vertical += elementDimensions.margin.top + elementDimensions.margin.bottom;&#13;
        vertical += elementDimensions.padding.top + elementDimensions.padding.top;&#13;
&#13;
        var horizontal = elementDimensions.border.left + elementDimensions.border.right;&#13;
        horizontal += elementDimensions.margin.left + elementDimensions.margin.right;&#13;
        horizontal += elementDimensions.padding.left + elementDimensions.padding.right;&#13;
&#13;
        return {&#13;
            vertical : vertical,&#13;
            horizontal : horizontal&#13;
        };&#13;
    }&#13;
&#13;
    presenter.validateInstructions = function (modelInstructions) {&#13;
        var instructions = modelInstructions.split("\n");&#13;
        for(var i=0; i &lt; instructions.length; i++) {&#13;
            var instruction = instructions[i].split(' ');&#13;
            presenter.colorSquare(instruction[0], instruction[1]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.colorSquareCommand = function (command) {&#13;
        presenter.colorSquare(command[0], command[1]);&#13;
    };&#13;
&#13;
    presenter.colorSquare = function (x, y){&#13;
        var coordinates = x+"-"+ y,&#13;
            element = presenter.$view.find('.cell-element[coordinates="'+ coordinates +'"]');&#13;
&#13;
        element.css('background-color', presenter.configuration.color);&#13;
        element.attr('colored', 'true');&#13;
    };&#13;
&#13;
    presenter.resetSquareCommand = function (command) {&#13;
        presenter.resetSquare(command[0], command[1]);&#13;
    };&#13;
&#13;
    presenter.resetSquare = function (x, y){&#13;
        var coordinates = x+"-"+ y,&#13;
            element = presenter.$view.find('.cell-element[coordinates="'+ coordinates +'"]');&#13;
&#13;
        element.css('background-color', 'transparent');&#13;
        element.attr('colored', 'false');&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        presenterLogic(view, model);&#13;
    };&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    function presenterLogic(view, model) {&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view = $(view);&#13;
        viewContainer = $(view);&#13;
        gridContainerWrapper = viewContainer.find(".cellGridWrapper:first");&#13;
        gridContainer = gridContainerWrapper.find(".cellGrid:first");&#13;
&#13;
        initGrid(model, true);&#13;
&#13;
        if(presenter.configuration.initialDesign){&#13;
            presenter.validateInstructions(presenter.configuration.initialDesign);&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        E01: "Columns and rows must be a positive integer"&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedIsVisible = ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            addonID = model['ID'],&#13;
            rows = ModelValidationUtils.validatePositiveInteger(model['Rows']),&#13;
            columns = ModelValidationUtils.validatePositiveInteger(model['Columns']);&#13;
&#13;
        if(!rows.isValid || !columns.isValid){&#13;
            return returnErrorObject('E01');&#13;
        }&#13;
&#13;
        var color = model['Color'];&#13;
        if(color == ''){&#13;
            color = 'black';&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'isVisible' : validatedIsVisible,&#13;
            'visibleByDefault' : validatedIsVisible,&#13;
            'addonID' : addonID,&#13;
            'rows' : rows.value,&#13;
            'columns' : columns.value,&#13;
            'initialDesign' : model['Initial design'],&#13;
            'color' : color&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorObject = function (errorCode) {&#13;
        return {isValid: false, isError: true, errorCode: errorCode};&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'colorSquare' : presenter.colorSquareCommand,&#13;
            'resetSquare' : presenter.resetSquareCommand,&#13;
            'reset' : presenter.reset&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.resetAll = function () {&#13;
        presenter.$view.find('.cell-element').each(function () {&#13;
            $(this).css('background-color', 'transparent');&#13;
            $(this).attr('colored', 'false');&#13;
        });&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        presenter.$view.find('.cell-element').each(function () {&#13;
            if($(this).attr('colored') == 'true'){&#13;
                var coordinates = $(this).attr('coordinates').split('-');&#13;
                presenter.resetSquare(coordinates[0], coordinates[1]);&#13;
            }&#13;
        });&#13;
&#13;
        if(presenter.configuration.initialDesign){&#13;
            presenter.validateInstructions(presenter.configuration.initialDesign);&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.visibleByDefault);&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        var coordinates = [];&#13;
        presenter.$view.find('.cell-element').each(function () {&#13;
            if($(this).attr('colored') == 'true'){&#13;
                coordinates.push($(this).attr('coordinates'));&#13;
            }&#13;
        });&#13;
&#13;
        var state = {&#13;
            'coordinates' : coordinates&#13;
        };&#13;
&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
        if (ModelValidationUtils.isStringEmpty(state)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsed = JSON.parse(state);&#13;
&#13;
        var coordinates = parsed.coordinates;&#13;
&#13;
        presenter.resetAll();&#13;
&#13;
        if(coordinates){&#13;
            for(var i = 0; i &lt; coordinates.length; i++){&#13;
                var coordinate = coordinates[i].split('-');&#13;
                presenter.colorSquare(coordinate[0], coordinate[1]);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
//    presenter.getErrorCount = function(){&#13;
//    };&#13;
//    presenter.getMaxScore = function(){&#13;
//    };&#13;
//    presenter.getScore = function(){&#13;
//    };&#13;
//    presenter.setShowErrorsMode = function(){&#13;
//    };&#13;
//    presenter.setWorkMode = function(){&#13;
//    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Puzzle" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Columns" nameLabel="Puzzle_property_columns" type="string"/>
		<property name="Rows" nameLabel="Puzzle_property_rows" type="string"/>
		<property name="Image" nameLabel="Puzzle_property_image" type="image"/>
	</model>
<css>.puzzle-container {&#13;
    border: 2px solid black;&#13;
    border-bottom-width: 1px;&#13;
    border-right-width: 1px;&#13;
    overflow: hidden;&#13;
    position: relative;&#13;
}&#13;
&#13;
.mark {&#13;
    position: absolute;&#13;
    visibility: hidden;&#13;
    z-index: 4;&#13;
    width: 35px;&#13;
    height: 34px;&#13;
}&#13;
&#13;
.mark.wrong {&#13;
    background-image: url('resources/puzzle-mark-wrong.png');&#13;
    visibility: visible;&#13;
}&#13;
&#13;
.mark.correct {&#13;
    background-image: url('resources/puzzle-mark-correct.png');&#13;
    visibility: visible;&#13;
}&#13;
&#13;
.puzzle {&#13;
    border: 1px solid black;&#13;
    border-top-width: 0;&#13;
    border-left-width: 0;&#13;
    z-index: 1;&#13;
    float: left;&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.selected {&#13;
    border-color: orange;&#13;
    z-index: 3;&#13;
}&#13;
</css><view>&lt;div class="puzzle-container"&gt;&#13;
    &lt;div&gt;&#13;
        &lt;img alt="Image" src="" style="visibility: hidden" /&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;img width="100%" height="100%"/&gt;&#13;
</preview><presenter>function AddonPuzzle_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    /* Global variables */&#13;
    var board = []; // Array that will hold the 2-dimentional representation of the board.&#13;
    var indexBoard = [];&#13;
    var savedBoard = [];&#13;
&#13;
    var intPuzzleWidth = 0;&#13;
    var intPuzzleHeight = 0;&#13;
&#13;
    var animation = false;&#13;
    var clickNumber = 0; //Check if this is first or second click&#13;
&#13;
    //Keep data from first click&#13;
    var PieceOld;&#13;
    var PiecePos;&#13;
    var PiecePos2;&#13;
&#13;
    var puzzleWidth = 0;&#13;
    var puzzleOuterWidth = 0;&#13;
    var puzzleHeight = 0;&#13;
    var puzzleOuterHeight = 0;&#13;
    var leftOffset = 0;&#13;
    var topOffset = 0;&#13;
&#13;
    var puzzle = null;&#13;
&#13;
    var Container;&#13;
    var jImg;&#13;
    var mark;&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.previousScore = 0;&#13;
    presenter.previousErrors = 0;&#13;
&#13;
    function getElementDimensions(element) {&#13;
        element = $(element);&#13;
&#13;
        return {&#13;
            border: {&#13;
                top: parseInt(element.css('border-top-width'), 10),&#13;
                bottom: parseInt(element.css('border-bottom-width'), 10),&#13;
                left: parseInt(element.css('border-left-width'), 10),&#13;
                right: parseInt(element.css('border-right-width'), 10)&#13;
            },&#13;
            margin: {&#13;
                top: parseInt(element.css('margin-top'), 10),&#13;
                bottom: parseInt(element.css('margin-bottom'), 10),&#13;
                left: parseInt(element.css('margin-left'), 10),&#13;
                right: parseInt(element.css('margin-right'), 10)&#13;
            },&#13;
            padding: {&#13;
                top: parseInt(element.css('padding-top'), 10),&#13;
                bottom: parseInt(element.css('padding-bottom'), 10),&#13;
                left: parseInt(element.css('padding-left'), 10),&#13;
                right: parseInt(element.css('padding-right'), 10)&#13;
            }&#13;
        };&#13;
    }&#13;
&#13;
    function calculateOuterDistance(elementDimensions) {&#13;
        var top = elementDimensions.border.top;&#13;
        top += elementDimensions.margin.top;&#13;
        top += elementDimensions.padding.top;&#13;
&#13;
        var bottom = elementDimensions.border.bottom;&#13;
        bottom += elementDimensions.margin.bottom;&#13;
        bottom += elementDimensions.padding.bottom;&#13;
&#13;
        var left = elementDimensions.border.left;&#13;
        left += elementDimensions.margin.left;&#13;
        left += elementDimensions.padding.left;&#13;
&#13;
        var right = elementDimensions.border.right;&#13;
        right += elementDimensions.margin.right;&#13;
        right += elementDimensions.padding.right;&#13;
&#13;
        return {&#13;
            vertical: top + bottom,&#13;
            horizontal: left + right,&#13;
            top: top,&#13;
            bottom: bottom,&#13;
            left: left,&#13;
            right: right,&#13;
            paddingLeft: elementDimensions.padding.left,&#13;
            paddingTop: elementDimensions.padding.top&#13;
        };&#13;
    }&#13;
&#13;
    function getOuterDistances() {&#13;
        var containerDimensions = getElementDimensions(Container);&#13;
        var containerDistances = calculateOuterDistance(containerDimensions);&#13;
&#13;
        var puzzle = $(document.createElement("div"));&#13;
        puzzle.addClass('puzzle');&#13;
        $(Container).append(puzzle);&#13;
        var puzzleDimensions = getElementDimensions(puzzle);&#13;
        var puzzleDistances = calculateOuterDistance(puzzleDimensions);&#13;
        $(puzzle).remove();&#13;
&#13;
        return {&#13;
            container: containerDistances,&#13;
            puzzle: puzzleDistances&#13;
        };&#13;
    }&#13;
&#13;
    function getMarkDimensions() {&#13;
        var tempMark = $(document.createElement('div'));&#13;
        $(tempMark).addClass('mark').addClass('correct');&#13;
        $(Container).append(tempMark);&#13;
&#13;
        var markWidth = $(tempMark).width();&#13;
        var markHeight = $(tempMark).height();&#13;
&#13;
        $(tempMark).remove();&#13;
&#13;
        return {&#13;
            width: markWidth,&#13;
            height: markHeight&#13;
        };&#13;
    }&#13;
&#13;
    function addBorderClasses() {&#13;
        var rows = presenter.configuration.rows,&#13;
            columns = presenter.configuration.columns,&#13;
            h, v;&#13;
&#13;
        for (h = 0; h &lt; columns; h++) {&#13;
            $(board[0][h]).addClass('top');&#13;
            $(board[rows - 1][h]).addClass('bottom');&#13;
        }&#13;
&#13;
        for (v = 0; v &lt; rows; v++) {&#13;
            $(board[v][0]).addClass('left');&#13;
            $(board[v][columns - 1]).addClass('right');&#13;
        }&#13;
    }&#13;
&#13;
    function InitPuzzle(width, height) {&#13;
        var outerDistances = getOuterDistances();&#13;
        var markDimensions = getMarkDimensions();&#13;
        var containerWidth = width - outerDistances.container.horizontal;&#13;
        var containerHeight = height - outerDistances.container.vertical;&#13;
        var rows = presenter.configuration.rows,&#13;
            columns = presenter.configuration.columns;&#13;
&#13;
        puzzleWidth = parseInt(containerWidth / columns - outerDistances.puzzle.horizontal, 10);&#13;
        puzzleOuterWidth = puzzleWidth + outerDistances.puzzle.horizontal;&#13;
        puzzleHeight = parseInt(containerHeight / rows - outerDistances.puzzle.vertical, 10);&#13;
        puzzleOuterHeight = puzzleHeight + outerDistances.puzzle.vertical;&#13;
&#13;
        topOffset = outerDistances.container.paddingTop;&#13;
        leftOffset = outerDistances.container.paddingLeft;&#13;
&#13;
        var markHorizontalOffset = (puzzleOuterWidth - markDimensions.width) / 2;&#13;
        var markVerticalOffset = (puzzleOuterHeight - markDimensions.height) / 2;&#13;
&#13;
        for (var row = 0; row &lt; rows; row++) {&#13;
            board[row] = [];&#13;
            indexBoard[row] = [];&#13;
&#13;
            for (var col = 0; col &lt; columns; col++) {&#13;
                mark = $(document.createElement('div'));&#13;
                mark.addClass('mark');&#13;
                mark.css({&#13;
                    top: ((puzzleHeight * row + markVerticalOffset) + "px"),&#13;
                    left: ((puzzleWidth * col + markHorizontalOffset) + "px")&#13;
                });&#13;
                mark.attr("position", row + "-" + col);&#13;
                indexBoard[row][col] = mark;&#13;
                Container.append(mark);&#13;
&#13;
                puzzle = $(document.createElement("div"));&#13;
                puzzle.addClass('puzzle');&#13;
                puzzle.css({&#13;
                    backgroundImage: "url( '" + jImg.attr("src") + "' )",&#13;
                    backgroundSize: width + "px " + height + "px",&#13;
                    backgroundRepeat: "no-repeat",&#13;
                    backgroundPosition: (&#13;
                        (col * -puzzleWidth) + "px " +&#13;
                            (row * -puzzleHeight) + "px"&#13;
                        ),&#13;
                    top: ((puzzleOuterHeight * row + topOffset) + "px"),&#13;
                    left: ((puzzleOuterWidth * col + leftOffset) + "px"),&#13;
                    width: puzzleWidth + 'px',&#13;
                    height: puzzleHeight + 'px'&#13;
                });&#13;
&#13;
                puzzle.attr("href", "javascript:void( 0 );").click(clickHandler);&#13;
                puzzle.attr("position", row + "-" + col);&#13;
                board[row][col] = puzzle;&#13;
                Container.append(puzzle);&#13;
            }&#13;
        }&#13;
&#13;
        Container.css({&#13;
            width: (puzzleOuterWidth * columns) + 'px',&#13;
            height: (puzzleOuterHeight * rows) + 'px'&#13;
        });&#13;
&#13;
        addBorderClasses();&#13;
        Shuffle();&#13;
    }&#13;
&#13;
    /**&#13;
     * Fisher-Yates Shuffle algorithm: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&#13;
     * Original algorithm is based on flatt, one-dimension array. For our purposes (working on two-dimension arrays)&#13;
     * firstly we have to flatten the structure.&#13;
     *&#13;
     * Additionally Knuth allows items to be shuffled multiple times - in our case each puzzle (array element) has to be&#13;
     * shuffled once, but the whole procedure should be repeated at least twice.&#13;
     */&#13;
&#13;
    presenter.getShuffleSequence = function (array) {&#13;
        var flatArray = [],&#13;
            shuffleSequence = [],&#13;
            row, column, counter, index;&#13;
&#13;
        for (row = 0; row &lt; array.length; row++) {&#13;
            for (column = 0; column &lt; array[row].length; column++) {&#13;
                flatArray.push({ row: row, column: column });&#13;
            }&#13;
        }&#13;
&#13;
        counter = flatArray.length - 1;&#13;
&#13;
        // While there are at least two elements in the array we generate next shuffle sequence. If array has only one&#13;
        // element we end the sequence (there is no sense in shuffling puzzle in place).&#13;
        while (counter &gt;= 2) {&#13;
            index = (Math.random() * counter) | 0;&#13;
&#13;
            shuffleSequence.push({&#13;
                row: { from: flatArray[counter].row, to: flatArray[index].row },&#13;
                column: { from: flatArray[counter].column, to: flatArray[index].column }&#13;
            });&#13;
&#13;
            flatArray.splice(index, 1);&#13;
            flatArray.splice(-1, 1);&#13;
&#13;
            counter -= 2;&#13;
        }&#13;
        return shuffleSequence;&#13;
    };&#13;
&#13;
    function Shuffle() {&#13;
        var i, iteration,&#13;
            shuffleSequence, shuffle,&#13;
            $firstPiece, $secondPiece;&#13;
&#13;
        animation = false; // Shuffling should be without animation&#13;
&#13;
&#13;
        for (iteration = 0; iteration &lt; 3; iteration++) {&#13;
            shuffleSequence = presenter.getShuffleSequence(board);&#13;
&#13;
            for (i = 0; i &lt; shuffleSequence.length; i++) {&#13;
                shuffle = shuffleSequence[i];&#13;
&#13;
                $firstPiece = board[shuffle.row.from][shuffle.column.from];&#13;
                $firstPiece.trigger({&#13;
                    type: "click",&#13;
                    triggered: true&#13;
                });&#13;
&#13;
&#13;
                $secondPiece = board[shuffle.row.to][shuffle.column.to];&#13;
                $secondPiece.trigger({&#13;
                    type: "click",&#13;
                    triggered: true&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        animation = true;&#13;
    }&#13;
&#13;
    function elementHasClasses(element) {&#13;
        element = $(element);&#13;
&#13;
        return {&#13;
            top: element.hasClass('top'),&#13;
            bottom: element.hasClass('bottom'),&#13;
            left: element.hasClass('left'),&#13;
            right: element.hasClass('right')&#13;
        };&#13;
    }&#13;
&#13;
    function removeBorderClasses(element) {&#13;
        $(element).removeClass('top').removeClass('bottom').removeClass('left').removeClass('right');&#13;
    }&#13;
&#13;
    function applyBorderClasses(element, classes) {&#13;
        for (var className in classes) {&#13;
            if (classes[className]) {&#13;
                $(element).addClass(className);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function replaceBorderClasses(firstElement, secondElement) {&#13;
        var firstElementClasses = elementHasClasses(firstElement);&#13;
        var secondElementClasses = elementHasClasses(secondElement);&#13;
&#13;
        removeBorderClasses(firstElement);&#13;
        removeBorderClasses(secondElement);&#13;
&#13;
        applyBorderClasses(firstElement, secondElementClasses);&#13;
        applyBorderClasses(secondElement, firstElementClasses);&#13;
    }&#13;
&#13;
    function isSamePiece(piece1, piece2) {&#13;
        var piece1ID = $(piece1).attr('position'),&#13;
            piece2ID = $(piece2).attr('position');&#13;
&#13;
        return piece1ID == piece2ID;&#13;
    }&#13;
&#13;
    function clickHandler(event) {&#13;
        event.stopPropagation();&#13;
&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var Piece = $(this);&#13;
        // Check to see if we are in the middle of an animation.&#13;
        if (clickNumber == 0) {&#13;
            clickNumber = 1;&#13;
            PieceOld = $(this);&#13;
            PieceOld.addClass('selected');&#13;
            PiecePos = {&#13;
                top: parseInt(Piece.css("top")),&#13;
                left: parseInt(Piece.css("left"))&#13;
            };&#13;
            PiecePos.row = Math.floor(((PiecePos.top - topOffset) / puzzleOuterHeight) + 0.5);&#13;
            PiecePos.col = Math.floor(((PiecePos.left - leftOffset) / puzzleOuterWidth) + 0.5);&#13;
        } else {&#13;
            clickNumber = 0;&#13;
            PiecePos2 = {&#13;
                top: parseInt(Piece.css("top")),&#13;
                left: parseInt(Piece.css("left"))&#13;
            };&#13;
            PiecePos2.row = Math.floor(((PiecePos2.top - topOffset) / puzzleOuterHeight) + 0.5);&#13;
            PiecePos2.col = Math.floor(((PiecePos2.left - leftOffset) / puzzleOuterWidth) + 0.5);&#13;
            PieceOld.removeClass('selected');&#13;
&#13;
            if (isSamePiece(PieceOld, Piece)) return;&#13;
            if (!event.triggered) presenter.configuration.shouldCalcScore = true;&#13;
&#13;
            board[PiecePos2.row][PiecePos2.col] = PieceOld;&#13;
            board[PiecePos.row][PiecePos.col] = Piece;&#13;
&#13;
            if (animation) {&#13;
                //Animate change of places&#13;
                board[PiecePos.row][PiecePos.col].animate({&#13;
                    left: ((puzzleOuterWidth * PiecePos.col + leftOffset) + "px"),&#13;
                    top: ((puzzleOuterHeight * PiecePos.row + topOffset) + "px")&#13;
                }, 200);&#13;
&#13;
                board[PiecePos2.row][PiecePos2.col].animate({&#13;
                    left: ((puzzleOuterWidth * PiecePos2.col + leftOffset) + "px"),&#13;
                    top: ((puzzleOuterHeight * PiecePos2.row + topOffset) + "px")&#13;
                }, 200);&#13;
            } else {&#13;
                board[PiecePos.row][PiecePos.col].css({&#13;
                    left: ((puzzleOuterWidth * PiecePos.col + leftOffset) + "px"),&#13;
                    top: ((puzzleOuterHeight * PiecePos.row + topOffset) + "px")&#13;
                });&#13;
                board[PiecePos2.row][PiecePos2.col].css({&#13;
                    left: ((puzzleOuterWidth * PiecePos2.col + leftOffset) + "px"),&#13;
                    top: ((puzzleOuterHeight * PiecePos2.row + topOffset) + "px")&#13;
                });&#13;
            }&#13;
&#13;
            replaceBorderClasses(board[PiecePos.row][PiecePos.col], board[PiecePos2.row][PiecePos2.col]);&#13;
&#13;
            if (!event.triggered &amp;&amp; presenter.isAllOK()) {&#13;
                sendAllOKEvent();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function setNormalMode() {&#13;
        var rows = presenter.configuration.rows,&#13;
            columns = presenter.configuration.columns,&#13;
            rowIndex, colIndex;&#13;
&#13;
        for (rowIndex = 0; rowIndex &lt; rows; rowIndex++) {&#13;
            for (colIndex = 0; colIndex &lt; columns; colIndex++) {&#13;
                indexBoard[rowIndex][colIndex].removeClass('wrong').removeClass('correct');&#13;
            }&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorMode = false;&#13;
    }&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        setNormalMode();&#13;
        Shuffle();&#13;
&#13;
        if (presenter.configuration.isVisibleByDefault) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.prepareBoardFromSavedState = function (savedBoard) {&#13;
        var rows = presenter.configuration.rows,&#13;
            columns = presenter.configuration.columns,&#13;
            index, rowIndex, colIndex,&#13;
            newBoard = [],&#13;
            puzzle, savedPuzzle;&#13;
&#13;
        animation = false;&#13;
&#13;
        for (rowIndex = 0; rowIndex &lt; rows; rowIndex++) {&#13;
            newBoard[rowIndex] = [];&#13;
        }&#13;
&#13;
        for (rowIndex = 0; rowIndex &lt; rows; rowIndex++) {&#13;
            for (colIndex = 0; colIndex &lt; columns; colIndex++) {&#13;
                puzzle = board[rowIndex][colIndex];&#13;
                for (index = 0; index &lt; savedBoard.length; index++) {&#13;
                    if (puzzle.attr("position") == savedBoard[index].position) {&#13;
                        savedPuzzle = savedBoard[index];&#13;
                        newBoard[savedPuzzle.row][savedPuzzle.col] = puzzle;&#13;
                        newBoard[savedPuzzle.row][savedPuzzle.col].css({&#13;
                            left: ((puzzleOuterWidth * savedPuzzle.col + leftOffset) + "px"),&#13;
                            top: ((puzzleOuterHeight * savedPuzzle.row + topOffset) + "px")&#13;
                        });&#13;
                        savedBoard.splice(index, 1);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        board = newBoard;&#13;
        animation = true;&#13;
    };&#13;
&#13;
    presenter.saveBoard = function () {&#13;
        var rows = presenter.configuration.rows,&#13;
            columns = presenter.configuration.columns,&#13;
            rowIndex, colIndex,&#13;
            tmpBoard = [];&#13;
&#13;
&#13;
        for (rowIndex = 0; rowIndex &lt; rows; rowIndex++) {&#13;
            for (colIndex = 0; colIndex &lt; columns; colIndex++) {&#13;
                var card = {};&#13;
                card.row = rowIndex;&#13;
                card.col = colIndex;&#13;
                card.position = board[rowIndex][colIndex].attr("position");&#13;
                tmpBoard.push(card);&#13;
            }&#13;
        }&#13;
        savedBoard = tmpBoard;&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if (!presenter.isFullyLoaded()) {&#13;
            return "";&#13;
        }&#13;
&#13;
        presenter.saveBoard();&#13;
&#13;
        return JSON.stringify({&#13;
            visible: presenter.configuration.isVisibleByDefault,&#13;
            board: savedBoard,&#13;
            shouldCalcScore: presenter.configuration.shouldCalcScore,&#13;
            score: presenter.getScore(),&#13;
            errors: presenter.getErrorCount()&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) return;&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        if (parsedState.score) {&#13;
            presenter.previousScore = parsedState.score;&#13;
        }&#13;
&#13;
        if (parsedState.errors) {&#13;
            presenter.previousErrors = parsedState.errors;&#13;
        }&#13;
&#13;
        $.when(presenter['imageLoaded']).then(function () {&#13;
            presenter.prepareBoardFromSavedState(parsedState.board);&#13;
            presenter.configuration.shouldCalcScore = parsedState.shouldCalcScore;&#13;
            if (!parsedState.visible) {&#13;
                presenter.hide();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        return 1;&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if (!presenter.isFullyLoaded()) {&#13;
            return presenter.previousScore;&#13;
        }&#13;
&#13;
        var rows = presenter.configuration.rows,&#13;
            columns = presenter.configuration.columns,&#13;
            row, col;&#13;
&#13;
        for (row = 0; row &lt; rows; row++) {&#13;
            for (col = 0; col &lt; columns; col++) {&#13;
                if (board[row][col].attr("position") != indexBoard[row][col].attr("position")) {&#13;
                    return 0;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return presenter.configuration.shouldCalcScore ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (!presenter.isFullyLoaded()) {&#13;
            return presenter.previousErrors;&#13;
        }&#13;
&#13;
        var rows = presenter.configuration.rows,&#13;
            columns = presenter.configuration.columns,&#13;
            errors = 0;&#13;
&#13;
        for (var row = 0; row &lt; rows; row++) {&#13;
            for (var col = 0; col &lt; columns; col++) {&#13;
                if (board[row][col].attr("position") != indexBoard[row][col].attr("position")) {&#13;
                    errors++;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return presenter.configuration.shouldCalcScore ? errors : 0;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        setNormalMode();&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        var rows = presenter.configuration.rows,&#13;
            columns = presenter.configuration.columns,&#13;
            row, col;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        for (row = 0; row &lt; rows; row++) {&#13;
            for (col = 0; col &lt; columns; col++) {&#13;
                var isEqual = board[row][col].attr("position") != indexBoard[row][col].attr("position");&#13;
                if (isEqual) { //wrong answer&#13;
                    indexBoard[row][col].addClass('wrong');&#13;
                } else {&#13;
                    indexBoard[row][col].addClass('correct');&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorMode = true;&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.isFullyLoaded = function () {&#13;
        return presenter['imageLoadedDeferred'].state() != "pending";&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        Container = $($(view).find('.puzzle-container:first')[0]);&#13;
        intPuzzleWidth = model.Width;&#13;
        intPuzzleHeight = model.Height;&#13;
        var width = model.Width;&#13;
        var height = model.Height;&#13;
        presenter.$view = $(view);&#13;
        eventBus = playerController.getEventBus();&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        jImg = Container.find("img:first");&#13;
        jImg.attr('src', model.Image);&#13;
        jImg.attr('height', height);&#13;
        jImg.attr('width', width);&#13;
        jImg.load(function () {&#13;
            InitPuzzle(width, height);&#13;
            presenter['imageLoadedDeferred'].resolve();&#13;
        });&#13;
        if (!presenter.configuration.isVisibleByDefault) {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        LoadedPromise(this, {&#13;
            'image' : true&#13;
        });&#13;
        return {&#13;
            isValid: true,&#13;
            isErrorMode: false,&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            shouldCalcScore: false,&#13;
            columns: presenter.validatePuzzleDimension(model.Columns),&#13;
            rows: presenter.validatePuzzleDimension(model.Rows),&#13;
            addonID: model.ID&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validatePuzzleDimension = function (dimension) {&#13;
        var validatedRange = ModelValidationUtils.validateIntegerInRange(dimension, 10, 1);&#13;
&#13;
        return validatedRange.isValid ? validatedRange.value : 4;&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        var element = view.getElementsByTagName('img')[0];&#13;
        element.setAttribute('src', model.Image);&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isVisibleByDefault) {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'getLoadedPromise': presenter.getLoadedPromise,&#13;
            'reset': presenter.reset&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    function sendAllOKEvent() {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SVG2" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="SVG file" nameLabel="SVG2_property_svg_file" type="image"/>
		<property name="Skip aspect ratio" nameLabel="SVG2_property_skip_aspect_ration" type="boolean"/>
	</model>
<css>.addon_SVG2 .errorContainer {&#13;
    border: 1px dotted red;&#13;
    display: none;&#13;
}&#13;
.addon_SVG2 .svgContainer {&#13;
    border: 1px dotted lightgray;&#13;
    overflow: hidden;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.addon_SVG2 .errorContainer .message{&#13;
    padding: 5px;&#13;
    color: red;&#13;
}&#13;
</css><view>&lt;div class="errorContainer"&gt;&#13;
    &lt;div class="message"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="svgContainer"&gt;SVG container&lt;/div&gt;&#13;
</view><preview>&lt;div class="errorContainer"&gt;&#13;
    &lt;div class="message"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="svgContainer"&gt;SVG container&lt;/div&gt;&#13;
</preview><presenter>function AddonSVG2_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    var svgContainer, errorContainer, aspect, containerWidth, containerHeight;&#13;
&#13;
    var errorMessages = {&#13;
        invalidFile: 'Invalid SVG file',&#13;
        svgSupportMissing: 'Your browser doesn\'t support SVG',&#13;
        xmlSerializerNotSupported: 'XmlSerializer not supported',&#13;
        missingFile: 'Please provide SVG file'&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        svgContainer = $(view).find('.svgContainer:first');&#13;
        errorContainer = $(view).find('.errorContainer');&#13;
        aspect = model['Skip aspect ratio'] == 'True';&#13;
        containerWidth = model['Width'];&#13;
        containerHeight = model['Height'];&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.isVisibleByDefault = presenter.isVisible;&#13;
&#13;
        if(this.hasSVGSupport()) {&#13;
            if(model['SVG file'] != '') {&#13;
                this.loadFile(model['SVG file']);&#13;
            } else {&#13;
                this.onError(errorMessages.missingFile);&#13;
            }&#13;
        } else {&#13;
            this.onError(errorMessages.svgSupportMissing);&#13;
        }&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.run(view, model);&#13;
    };&#13;
    //detection based on Modernizer library&#13;
    presenter.hasSVGSupport = function() {&#13;
        return !!document.createElementNS &amp;&amp; !!document.createElementNS('http://www.w3.org/2000/svg', "svg").createSVGRect;&#13;
    };&#13;
&#13;
    presenter.loadFile = function(file) {&#13;
        $.ajax({&#13;
            url: file,&#13;
            success: this.onLoadComplete,&#13;
            error: this.onLoadError,&#13;
            dataType: 'xml'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.onLoadComplete = function(data) {&#13;
        var el = $(data).find('svg');&#13;
        //validate response&#13;
        if(el.length === 0) {&#13;
            presenter.onError(errorMessages.invalidFile);&#13;
            return;&#13;
        }&#13;
&#13;
        var cw = el.attr('width') ? el.attr('width') : containerWidth;&#13;
        var ch = el.attr('height') ? el.attr('height') : containerHeight;&#13;
&#13;
        //fit size of svg&#13;
        cw = cw.replace("px", "");&#13;
        ch = ch.replace("px", "");&#13;
&#13;
        el.attr('viewBox', '0 0 ' + cw + ' ' + ch);&#13;
        el.attr('preserveAspectRatio', !aspect ? 'xMinYMin' : 'none');&#13;
        el.attr('width', '100%');&#13;
        el.attr('height', '100%');&#13;
&#13;
        svgContainer.html('');&#13;
        //convert xml to string&#13;
        var svgHtml = presenter.xmlToString(data);&#13;
        if(svgHtml === false) {&#13;
            presenter.onError(errorMessages.xmlSerializerNotSupported);&#13;
        } else {&#13;
            //add converted content&#13;
            svgContainer.append(svgHtml);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.xmlToString = function(xml) {&#13;
        var output = false;&#13;
        try {&#13;
            // Gecko-based browsers, Safari, Opera&#13;
            output = new XMLSerializer().serializeToString(xml);&#13;
        } catch(e) {&#13;
            try {&#13;
                // Internet Explorer&#13;
                output = xml.xml;&#13;
            } catch(e2) {&#13;
                //Xmlserializer not supported&#13;
                return false;&#13;
            }&#13;
        }&#13;
        return output;&#13;
    };&#13;
&#13;
    presenter.onLoadError = function() {&#13;
        presenter.onError(errorMessages.invalidFile);&#13;
    };&#13;
&#13;
    presenter.onError = function(msg) {&#13;
        svgContainer.hide();&#13;
        errorContainer.find('.message').html(msg);&#13;
        errorContainer.show();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.isVisibleByDefault ? presenter.show() : presenter.hide();&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var parsedState = JSON.parse(state);&#13;
        presenter.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SelectableAddonsBinder" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="Addons" nameLabel="SelectableAddonsBinder_property_addons" type="text"/>
    </model>
<css/><view/><preview/><presenter>function AddonSelectableAddonsBinder_create(){&#13;
    var presenter = function () {};&#13;
    presenter.configuration = {};&#13;
    function presenterLogic (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addons = (model.Addons).split('\n');&#13;
        if (isPreview) return;&#13;
        presenter.$view.css('visible', 'hidden');&#13;
    };&#13;
    presenter.getModule = function (moduleID) {&#13;
        return presenter.playerController.getModule(moduleID);&#13;
    };&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        var moduleID = eventData.source;&#13;
        var matchedModule = presenter.matchEvent(moduleID);&#13;
        if (!matchedModule || eventData.value != 1) return;&#13;
        for (var i = 0; i &lt; presenter.addons.length; i++) {&#13;
            if (presenter.addons[i] != moduleID)&#13;
                if(presenter.getModule(presenter.addons[i]) != null &amp;&amp; presenter.getModule(presenter.addons[i]).deselect != undefined)&#13;
                    presenter.getModule(presenter.addons[i]).deselect();&#13;
        }&#13;
    };&#13;
    presenter.matchEvent = function (moduleID) {&#13;
        for (var i = 0; i &lt; presenter.addons.length; i++) {&#13;
            if (presenter.addons[i] == moduleID) return true;&#13;
        }&#13;
        return false;&#13;
    };&#13;
    presenter.getModule = function (moduleID) {&#13;
        return presenter.playerController.getModule(moduleID);&#13;
    };&#13;
    presenter.run = function (view, model) {&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
    presenter.getState = function () {&#13;
    };&#13;
    presenter.setState = function (stringifiedState) {&#13;
    };&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Shape_Tracing" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="Shape image" nameLabel="Shape_Tracing_property_shape_image" type="image"/>
        <property name="Show Shape image" nameLabel="Shape_Tracing_property_show_shape_image" type="boolean"/>
        <property name="Hide Shape image on check" nameLabel="Shape_Tracing_property_hide_shape_image_on_check" type="boolean"/>
        <property name="Show Boundaries (editor)" nameLabel="Shape_Tracing_property_show_boundaries_editor" type="boolean"/>
        <property name="Background image" nameLabel="Shape_Tracing_property_background_image" type="image"/>
        <property name="Correct number of lines" nameLabel="Shape_Tracing_property_correct_number_of_lines" type="string"/>
        <property name="Points' coordinates" nameLabel="Shape_Tracing_property_points_coordinates" type="text"/>
        <property displayName="Mind points' order" name="isPointsOrder" nameLabel="Shape_Tracing_property_is_points_order" type="boolean"/>
        <property name="Color" nameLabel="Shape_Tracing_property_color" type="string"/>
        <property displayName="Thickness" name="Pen Thickness" nameLabel="Shape_Tracing_property_pen_thickness" type="string"/>
        <property name="Opacity" nameLabel="Shape_Tracing_property_opacity" type="string"/>
        <property name="Border" nameLabel="Shape_Tracing_property_border" type="string"/>
        <property name="Correct Answer Image" nameLabel="Shape_Tracing_property_correct_answer_image" type="image"/>
    </model>
<css>.addon_Shape_Tracing .outer {&#13;
    position: relative;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.addon_Shape_Tracing .outer .drawing,&#13;
.addon_Shape_Tracing .outer .drawing-main,&#13;
.addon_Shape_Tracing .outer .background,&#13;
.addon_Shape_Tracing .outer .shape {&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
.addon_Shape_Tracing .outer .correctImage {&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
&#13;
.addon_Shape_Tracing .outer .drawing,&#13;
.addon_Shape_Tracing .outer .drawing-main {&#13;
    cursor: crosshair;&#13;
}&#13;
&#13;
.shape-tracing-wrapper.outer {&#13;
    position: relative;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.shape-tracing-wrapper.outer .drawing,&#13;
.shape-tracing-wrapper.outer .drawing-main,&#13;
.shape-tracing-wrapper.outer .background,&#13;
.shape-tracing-wrapper.outer .shape {&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
&#13;
.shape-tracing-wrapper.outer .correctImage {&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
&#13;
.shape-tracing-wrapper.outer .drawing,&#13;
.shape-tracing-wrapper.outer .drawing-main {&#13;
    cursor: crosshair;&#13;
}&#13;
</css><view>&lt;div class="outer shape-tracing-wrapper"&gt;&#13;
    &lt;div class="shape"&gt;&lt;/div&gt;&#13;
    &lt;div class="background"&gt;&lt;/div&gt;&#13;
    &lt;div class="correctImage"&gt;&lt;/div&gt;&#13;
    &lt;canvas class="drawing-main"&gt;&lt;/canvas&gt;&#13;
    &lt;canvas class="drawing"&gt;&lt;/canvas&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="outer shape-tracing-wrapper"&gt;&#13;
    &lt;div class="shape"&gt;&lt;/div&gt;&#13;
    &lt;div class="background"&gt;&lt;/div&gt;&#13;
    &lt;div class="correctImage"&gt;&lt;/div&gt;&#13;
    &lt;canvas class="drawing-main"&gt;&lt;/canvas&gt;&#13;
    &lt;canvas class="drawing"&gt;&lt;/canvas&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonShape_Tracing_create() {&#13;
&#13;
    var NO_POINT = 0;&#13;
&#13;
    function returnErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    function returnCorrectObject(v) { return { isValid: true, value: v }; }&#13;
&#13;
    function getDistance(p1, p2) {&#13;
        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));&#13;
    }&#13;
&#13;
    Array.prototype.last = Array.prototype.last || function() {&#13;
        return this.length === 0 ? null : this[this.length - 1];&#13;
    };&#13;
&#13;
    Array.prototype.removeNeighbourDuplicates = Array.prototype.removeNeighbourDuplicates || function() {&#13;
        var result = [], last = null;&#13;
&#13;
        for (var i=0; i&lt;this.length; i++) {&#13;
            if (this[i] !== last) {&#13;
                result.push(this[i]);&#13;
                last = this[i];&#13;
            }&#13;
        }&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    // work-around for double line in android browser&#13;
    function setOverflowWorkAround(turnOn) {&#13;
&#13;
        if (!MobileUtils.isAndroidWebBrowser(window.navigator.userAgent)) { return false; }&#13;
&#13;
        var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
        if (["4.1.1", "4.1.2", "4.2.2", "4.3", "4.4.2"].indexOf(android_ver) !== -1) {&#13;
&#13;
            presenter.$view.parents("*").each(function() {&#13;
                var overflow = null;&#13;
                if (turnOn) {&#13;
                    $(this).attr("data-overflow", $(this).css("overflow"));&#13;
                    $(this).css("overflow", "visible");&#13;
                } else {&#13;
                    overflow = $(this).attr("data-overflow");&#13;
                    if (overflow !== "") {&#13;
                        $(this).css("overflow", overflow);&#13;
                    }&#13;
                    $(this).removeAttr("data-overflow");&#13;
                }&#13;
            });&#13;
&#13;
        }&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.data = {&#13;
        divID: "",&#13;
        width: 0,&#13;
        height: 0,&#13;
        zoom: 1,&#13;
&#13;
        startColor: "black",&#13;
        borderPositions: [],&#13;
        activePointsPositions: [],&#13;
        isPencilActive: true,&#13;
        isStarted: false,&#13;
        isAllPointsChecked: false,&#13;
        currentPointNumber: 1,&#13;
        numberOfLines: 0,&#13;
        numberOfDescentsFromShape: 0,&#13;
        isShowErrorOn: false,&#13;
        incorrect: false,&#13;
        isAllOk: false,&#13;
        drawingOpacity: 1,&#13;
&#13;
        pencilThickness: 0,&#13;
&#13;
        shapeImageLoaded: null,&#13;
        shapeImageLoadedDeferred: null&#13;
    };&#13;
&#13;
    var canvasData = {&#13;
        main: { canvas: null, context: null },&#13;
        temp: { canvas: null, context: null }&#13;
    };&#13;
&#13;
    var points = [];&#13;
&#13;
    presenter.cursorPosition = {&#13;
        pre_x: 0,&#13;
        pre_y: 0,&#13;
        x: 0,&#13;
        y: 0&#13;
    };&#13;
&#13;
    var LINE_END_SIGN = 'Up';&#13;
    var DOT_SIGN = 'Dot';&#13;
&#13;
    var eventBus;&#13;
    var isOutsideShape = false;&#13;
    var directionPoints = [];&#13;
&#13;
    presenter.pointsArray = [];&#13;
    presenter.pointsHistory = [];&#13;
&#13;
    // direction from p1 to p2&#13;
    function calculateDrawingDirection(p1, p2) {&#13;
        var deltaY = p1.y - p2.y;&#13;
        var deltaX = p1.x - p2.x;&#13;
        var angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;&#13;
&#13;
        /* ANGLES:&#13;
         *&#13;
         *          N (90Â°)&#13;
         *          â†�?&#13;
         * (0Â°) W â†�   â†’ E (180Â°, -180Â°)&#13;
         *          â†“&#13;
         *          S (-90Â°)&#13;
         */&#13;
&#13;
        if (angle &gt;= 112 &amp;&amp; angle &lt; 157) {&#13;
            return 'NE';&#13;
        } else if (angle &gt;= 67 &amp;&amp; angle &lt; 112) {&#13;
            return 'N';&#13;
        } else if (angle &gt;= 22 &amp;&amp; angle &lt; 67) {&#13;
            return 'NW';&#13;
        } else if (angle &gt;= -22 &amp;&amp; angle &lt; 22) {&#13;
            return 'W';&#13;
        } else if (angle &gt;= -67 &amp;&amp; angle &lt; -22) {&#13;
            return 'SW';&#13;
        } else if (angle &gt;= -112 &amp;&amp; angle &lt; -67) {&#13;
            return 'S';&#13;
        } else if (angle &gt;= -157 &amp;&amp; angle &lt; -112) {&#13;
            return 'SE';&#13;
        } else {&#13;
            return 'E';&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    function initPointsArray() {&#13;
        for (var i=0; i&lt;presenter.configuration.points.length; i++) {&#13;
            presenter.pointsArray.push(i + 1);&#13;
        }&#13;
    }&#13;
&#13;
    function initCanvasData() {&#13;
        canvasData.main.canvas = presenter.$view.find('.drawing-main')[0];&#13;
        canvasData.main.context = canvasData.main.canvas.getContext('2d');&#13;
        canvasData.temp.canvas = presenter.$view.find('.drawing')[0];&#13;
        canvasData.temp.context = canvasData.temp.canvas.getContext('2d');&#13;
    }&#13;
&#13;
    function resetCanvas() {&#13;
        turnOffEventListeners();&#13;
        $(canvasData.main.canvas).remove();&#13;
        $(canvasData.temp.canvas).remove();&#13;
&#13;
        var $main = $('&lt;canvas&gt;&lt;/canvas&gt;').addClass('drawing-main');&#13;
        var $temp = $('&lt;canvas&gt;&lt;/canvas&gt;').addClass('drawing');&#13;
&#13;
        presenter.$view.find('.shape-tracing-wrapper').append($main);&#13;
        presenter.$view.find('.shape-tracing-wrapper').append($temp);&#13;
&#13;
        initCanvasData();&#13;
        resizeCanvas(canvasData.main.canvas);&#13;
        resizeCanvas(canvasData.temp.canvas);&#13;
        turnOnEventListeners();&#13;
    }&#13;
&#13;
    function resetAddon(isPencilActive) {&#13;
        turnOffEventListeners();&#13;
        turnOnEventListeners();&#13;
&#13;
        canvasData.temp.context.clearRect(0, 0, presenter.data.width, presenter.data.height);&#13;
        canvasData.main.context.clearRect(0, 0, presenter.data.width, presenter.data.height);&#13;
&#13;
        presenter.data.isAllPointsChecked = presenter.configuration.points.length === 0;&#13;
        presenter.data.isPencilActive = isPencilActive;&#13;
        presenter.data.isStarted = false;&#13;
        presenter.data.currentPointNumber = 1;&#13;
        presenter.data.numberOfLines = 0;&#13;
        presenter.data.numberOfDescentsFromShape = 0;&#13;
        presenter.data.pencilThickness = presenter.configuration.penThickness;&#13;
        presenter.data.incorrect = false;&#13;
        presenter.data.isAllOk = false;&#13;
        directionPoints = [];&#13;
        presenter.pointsHistory = [];&#13;
        isOutsideShape = false;&#13;
        points = [];&#13;
&#13;
        initPointsArray();&#13;
&#13;
        presenter.configuration.color = presenter.data.startColor;&#13;
&#13;
        if (!presenter.configuration.isShowShapeImage &amp;&amp; presenter.configuration.isShowShapeImageOnCheck) {&#13;
            presenter.layer.hide();&#13;
        }&#13;
&#13;
        $(canvasData.temp.canvas).removeClass("correct wrong");&#13;
        presenter.setVisibility(presenter.visibleByDefault);&#13;
        presenter.configuration.isVisible = presenter.visibleByDefault;&#13;
&#13;
        resetCanvas();&#13;
&#13;
        setOverflowWorkAround(true);&#13;
        setOverflowWorkAround(false);&#13;
    }&#13;
&#13;
    function createEventObject(_item, _value, _score) {&#13;
        return {&#13;
            'source': presenter.configuration.ID,&#13;
            'item': '' + _item,&#13;
            'value': '' + _value,&#13;
            'score': '' + _score&#13;
        };&#13;
    }&#13;
&#13;
    function eventCreator() {&#13;
        function sendEventScore(isCorrect) {&#13;
            presenter.data.isAllOk = isCorrect;&#13;
            eventBus.sendEvent('ValueChanged', createEventObject('allOk', '', isCorrect ? '1' : '0'));&#13;
        }&#13;
&#13;
        function sendEventValue(isCorrect) {&#13;
            presenter.data.isAllOk = isCorrect;&#13;
            eventBus.sendEvent('ValueChanged', createEventObject('', isCorrect ? '1' : '0', ''));&#13;
        }&#13;
&#13;
        var pointsLength = presenter.configuration.points.length;&#13;
        var correctNumOfLines = presenter.configuration.numberOfLines;&#13;
        var descentsFromShape = presenter.data.numberOfDescentsFromShape;&#13;
        var isAllPointsChecked = presenter.data.isAllPointsChecked;&#13;
&#13;
        function isCorrectNumberOfLines() {&#13;
            var numOfDrawLines = presenter.data.numberOfLines;&#13;
            return numOfDrawLines &gt;= correctNumOfLines[0] &amp;&amp; correctNumOfLines[1] &lt;= numOfDrawLines;&#13;
        }&#13;
&#13;
        if (pointsLength === 0 &amp;&amp; correctNumOfLines.length === 0) {&#13;
            if (descentsFromShape === 0) {&#13;
                sendEventScore(true);&#13;
            } else {&#13;
                sendEventValue(false);&#13;
            }&#13;
        } else if (pointsLength !== 0 &amp;&amp; correctNumOfLines.length === 0) {&#13;
            if (descentsFromShape === 0 &amp;&amp; isAllPointsChecked) {&#13;
                sendEventScore(true);&#13;
            } else {&#13;
                sendEventValue(false);&#13;
            }&#13;
        } else if (pointsLength === 0 &amp;&amp; correctNumOfLines.length !== 0) {&#13;
            if (isCorrectNumberOfLines() &amp;&amp; descentsFromShape === 0) {&#13;
                sendEventScore(true);&#13;
            } else {&#13;
                sendEventValue(false);&#13;
            }&#13;
        } else {&#13;
            if (isAllPointsChecked &amp;&amp; !isCorrectNumberOfLines()) {&#13;
                // to remember that user was on all points in incorrect number of lines&#13;
                presenter.data.incorrect = true;&#13;
            }&#13;
&#13;
            if (isCorrectNumberOfLines() &amp;&amp; isAllPointsChecked &amp;&amp; descentsFromShape === 0 &amp;&amp; !presenter.data.incorrect) {&#13;
                sendEventScore(true);&#13;
            } else {&#13;
                sendEventValue(false);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.initActivePointsPositions = function() {&#13;
        // init 2D array filled with zeros&#13;
        for (var col=0; col&lt;presenter.data.height; col++) {&#13;
            var row = [];&#13;
            for (var ro=0; ro&lt;presenter.data.width; ro++) {&#13;
                row.push(0);&#13;
            }&#13;
            presenter.data.activePointsPositions.push(row);&#13;
        }&#13;
&#13;
        // mark o=points on array&#13;
        for (var pointNumber=0; pointNumber&lt;presenter.configuration.points.length; pointNumber++) {&#13;
            var x = presenter.configuration.points[pointNumber][0];&#13;
            var y = presenter.configuration.points[pointNumber][1];&#13;
            var r = presenter.configuration.points[pointNumber][2];&#13;
&#13;
            for (var i=y-r; i&lt;=y+r; i++) {&#13;
                for (var j=x-r; j&lt;=x+r; j++) {&#13;
                    if (i &gt;= 0 &amp;&amp; j &gt;= 0 &amp;&amp; j &lt; presenter.data.width &amp;&amp; i &lt; presenter.data.height) {&#13;
                        if (r * r &gt;= (x-j) * (x-j) + (y-i) * (y-i)) {&#13;
                            presenter.data.activePointsPositions[i][j] = pointNumber + 1;&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function calculateBorderCoordinates() {&#13;
        function isBoundaryColor(r, g, b, a) {&#13;
            return (r &lt; 250 &amp;&amp; g &lt; 250 &amp;&amp; b &lt; 250) &amp;&amp; a === 255;&#13;
//            return (r !== 255 || g !== 255 || b !== 255) &amp;&amp; a === 255;&#13;
        }&#13;
&#13;
        //var ctx = presenter.layer.getContext('2d');&#13;
        var ctx = presenter.layer.getCanvas().getContext();&#13;
        var pt = ctx.getImageData(0, 0, presenter.data.width, presenter.data.height);&#13;
        var data = pt.data;&#13;
        var row;&#13;
&#13;
        for (var y=0; y&lt;presenter.data.height; y++) {&#13;
            row = [];&#13;
            for (var x=0; x&lt;presenter.data.width; x++) {&#13;
                var index = 4 * ((presenter.data.width * y) + x);&#13;
                row.push(isBoundaryColor(data[index+0], data[index+1], data[index+2], data[index+3]));&#13;
            }&#13;
            presenter.data.borderPositions.push(row);&#13;
        }&#13;
    }&#13;
&#13;
    function showFoundBoundaryPoints() {&#13;
        var ctx = presenter.layerBG.getContext('2d');&#13;
        var imgData = ctx.getImageData(0, 0, presenter.data.width, presenter.data.height);&#13;
&#13;
        for (var i=0; i&lt;presenter.data.height; i++) {&#13;
            for (var j=0; j&lt;presenter.data.width; j++) {&#13;
                if (presenter.data.borderPositions[i][j]) {&#13;
                    var index = 4 * (i * presenter.data.width + j);&#13;
                    imgData.data[index + 0] = 255;&#13;
                    imgData.data[index + 1] = 0;&#13;
                    imgData.data[index + 2] = 0;&#13;
                    imgData.data[index + 3] = 255;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        ctx.putImageData(imgData, 0, 0, presenter.data.width, presenter.data.height);&#13;
    }&#13;
&#13;
    function colorNameToHex(color) {&#13;
        var colors = {"aliceblue":"#f0f8ff","antiquewhite":"#faebd7","aqua":"#00ffff","aquamarine":"#7fffd4","azure":"#f0ffff","beige":"#f5f5dc","bisque":"#ffe4c4","black":"#000000","blanchedalmond":"#ffebcd","blue":"#0000ff","blueviolet":"#8a2be2","brown":"#a52a2a","burlywood":"#deb887","cadetblue":"#5f9ea0","chartreuse":"#7fff00","chocolate":"#d2691e","coral":"#ff7f50","cornflowerblue":"#6495ed","cornsilk":"#fff8dc","crimson":"#dc143c","cyan":"#00ffff","darkblue":"#00008b","darkcyan":"#008b8b","darkgoldenrod":"#b8860b","darkgray":"#a9a9a9","darkgreen":"#006400","darkkhaki":"#bdb76b","darkmagenta":"#8b008b","darkolivegreen":"#556b2f","darkorange":"#ff8c00","darkorchid":"#9932cc","darkred":"#8b0000","darksalmon":"#e9967a","darkseagreen":"#8fbc8f","darkslateblue":"#483d8b","darkslategray":"#2f4f4f","darkturquoise":"#00ced1","darkviolet":"#9400d3","deeppink":"#ff1493","deepskyblue":"#00bfff","dimgray":"#696969","dodgerblue":"#1e90ff","firebrick":"#b22222","floralwhite":"#fffaf0","forestgreen":"#228b22","fuchsia":"#ff00ff","gainsboro":"#dcdcdc","ghostwhite":"#f8f8ff","gold":"#ffd700","goldenrod":"#daa520","gray":"#808080","green":"#008000","greenyellow":"#adff2f","honeydew":"#f0fff0","hotpink":"#ff69b4","indianred ":"#cd5c5c","indigo ":"#4b0082","ivory":"#fffff0","khaki":"#f0e68c","lavender":"#e6e6fa","lavenderblush":"#fff0f5","lawngreen":"#7cfc00","lemonchiffon":"#fffacd","lightblue":"#add8e6","lightcoral":"#f08080","lightcyan":"#e0ffff","lightgoldenrodyellow":"#fafad2","lightgrey":"#d3d3d3","lightgreen":"#90ee90","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightseagreen":"#20b2aa","lightskyblue":"#87cefa","lightslategray":"#778899","lightsteelblue":"#b0c4de","lightyellow":"#ffffe0","lime":"#00ff00","limegreen":"#32cd32","linen":"#faf0e6","magenta":"#ff00ff","maroon":"#800000","mediumaquamarine":"#66cdaa","mediumblue":"#0000cd","mediumorchid":"#ba55d3","mediumpurple":"#9370d8","mediumseagreen":"#3cb371","mediumslateblue":"#7b68ee","mediumspringgreen":"#00fa9a","mediumturquoise":"#48d1cc","mediumvioletred":"#c71585","midnightblue":"#191970","mintcream":"#f5fffa","mistyrose":"#ffe4e1","moccasin":"#ffe4b5","navajowhite":"#ffdead","navy":"#000080","oldlace":"#fdf5e6","olive":"#808000","olivedrab":"#6b8e23","orange":"#ffa500","orangered":"#ff4500","orchid":"#da70d6","palegoldenrod":"#eee8aa","palegreen":"#98fb98","paleturquoise":"#afeeee","palevioletred":"#d87093","papayawhip":"#ffefd5","peachpuff":"#ffdab9","peru":"#cd853f","pink":"#ffc0cb","plum":"#dda0dd","powderblue":"#b0e0e6","purple":"#800080","red":"#ff0000","rosybrown":"#bc8f8f","royalblue":"#4169e1","saddlebrown":"#8b4513","salmon":"#fa8072","sandybrown":"#f4a460","seagreen":"#2e8b57","seashell":"#fff5ee","sienna":"#a0522d","silver":"#c0c0c0","skyblue":"#87ceeb","slateblue":"#6a5acd","slategray":"#708090","snow":"#fffafa","springgreen":"#00ff7f","steelblue":"#4682b4","tan":"#d2b48c","teal":"#008080","thistle":"#d8bfd8","tomato":"#ff6347","turquoise":"#40e0d0","violet":"#ee82ee","wheat":"#f5deb3","white":"#ffffff","whitesmoke":"#f5f5f5","yellow":"#ffff00","yellowgreen":"#9acd32"};&#13;
        var parsedColor = Array.isArray(color) ? color[0] : color;&#13;
&#13;
        if (typeof colors[parsedColor.toLowerCase()] !== 'undefined') {&#13;
            return colors[parsedColor.toLowerCase()];&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    }&#13;
&#13;
    function drawActivePoints() {&#13;
        for (var i=0; i&lt;presenter.configuration.points.length; i++) {&#13;
            var point = new Kinetic.Circle({&#13;
                x: presenter.configuration.points[i][0],&#13;
                y: presenter.configuration.points[i][1],&#13;
                radius: presenter.configuration.points[i][2],&#13;
                fill: 'rgba(0,255,0,0.25)',&#13;
                stroke: 'green',&#13;
                strokeWidth: 2&#13;
            });&#13;
            presenter.layerBG.add(point);&#13;
        }&#13;
&#13;
        presenter.stageBG.add(presenter.layerBG);&#13;
    }&#13;
&#13;
    function drawBoxMouseData(box_width, box_height) {&#13;
        var position = -4;&#13;
        presenter.box = new Kinetic.Rect({&#13;
            x: position, y: position,&#13;
            stroke: '#555',&#13;
            fill: '#ddd',&#13;
            width: box_width,&#13;
            height: box_height,&#13;
            cornerRadius: 7,&#13;
            opacity: 0.6&#13;
        });&#13;
        presenter.text = new Kinetic.Text({&#13;
            x: position, y: position,&#13;
            text: prepearText(0, 0),&#13;
            fontSize: 15,&#13;
            fontFamily: 'Calibri',&#13;
            fill: '#555',&#13;
            width: box_width,&#13;
            padding: 4,&#13;
            align: 'center'&#13;
        });&#13;
&#13;
        presenter.layerBG.add(presenter.box);&#13;
        presenter.layerBG.add(presenter.text);&#13;
        presenter.stageBG.add(presenter.layerBG);&#13;
    }&#13;
&#13;
    function prepearText(x, y) {&#13;
        function addZerosToNumber(n) {&#13;
            switch (n.toString().length) {&#13;
                case 1: return "000" + n;&#13;
                case 2: return "00" + n;&#13;
                case 3: return "0" + n;&#13;
                default: return "" + n;&#13;
            }&#13;
        }&#13;
&#13;
        return "X:" + addZerosToNumber(x) + "\nY:" + addZerosToNumber(y);&#13;
    }&#13;
&#13;
    function cursorCoordinates() {&#13;
        drawBoxMouseData(52, 37);&#13;
&#13;
        presenter.data.shapeImageLoaded.then(function() {&#13;
            var moduleSelector = $('.moduleSelector[data-id="'+presenter.configuration.ID+'"]');&#13;
            moduleSelector.on('mousemove', function(e) {&#13;
                var x = e.offsetX, y = e.offsetY;&#13;
&#13;
                presenter.text.setText(prepearText(x, y));&#13;
                presenter.layerBG.draw();&#13;
            });&#13;
        });&#13;
&#13;
        presenter.$view.find(".drawing").on('mousemove', function(e) {&#13;
            e.stopPropagation();&#13;
&#13;
            var x = e.offsetX, y = e.offsetY;&#13;
&#13;
            presenter.text.setText(prepearText(x, y));&#13;
            presenter.layerBG.draw();&#13;
        });&#13;
    }&#13;
&#13;
    function drawBackGroundImage(isPreview) {&#13;
        presenter.stageBG = new Kinetic.Stage({&#13;
            container: presenter.data.divID + "_background",&#13;
            height: presenter.data.height,&#13;
            width: presenter.data.width&#13;
        });&#13;
&#13;
        presenter.layerBG = new Kinetic.Layer();&#13;
        if (presenter.configuration.backgroundImage !== '') {&#13;
            var backgroundImage = new Image();&#13;
            backgroundImage.onload = function() {&#13;
                var BGimg = new Kinetic.Image({&#13;
                    x: 0,&#13;
                    y: 0,&#13;
                    height: presenter.data.height,&#13;
                    width: presenter.data.width,&#13;
                    image: backgroundImage&#13;
                });&#13;
&#13;
                presenter.layerBG.add(BGimg);&#13;
                presenter.stageBG.add(presenter.layerBG);&#13;
&#13;
                if (isPreview) {&#13;
                    cursorCoordinates();&#13;
                    drawActivePoints();&#13;
                }&#13;
            };&#13;
            backgroundImage.src = presenter.configuration.backgroundImage;&#13;
        } else {&#13;
            if (isPreview) {&#13;
                cursorCoordinates();&#13;
                drawActivePoints();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function drawShapeImage(isPreview) {&#13;
        presenter.stage = new Kinetic.Stage({&#13;
            container: presenter.data.divID + "_shape",&#13;
            height: presenter.data.height,&#13;
            width: presenter.data.width&#13;
        });&#13;
        presenter.layer = new Kinetic.Layer();&#13;
        var image = new Image();&#13;
        image.onload = function() {&#13;
            var img = new Kinetic.Image({&#13;
                x: 0,&#13;
                y: 0,&#13;
                image: image,&#13;
                height: presenter.data.height,&#13;
                width: presenter.data.width&#13;
            });&#13;
&#13;
            presenter.layer.add(img);&#13;
            presenter.stage.add(presenter.layer);&#13;
&#13;
            calculateBorderCoordinates();&#13;
&#13;
            if (!presenter.configuration.isShowShapeImage) {&#13;
                presenter.layer.hide();&#13;
            }&#13;
&#13;
            if (isPreview) {&#13;
                if (presenter.configuration.isShowFoundBoundaries) {&#13;
                    showFoundBoundaryPoints();&#13;
                }&#13;
            }&#13;
            presenter.data.shapeImageLoadedDeferred.resolve();&#13;
        };&#13;
        image.src = presenter.configuration.shapeImage;&#13;
    }&#13;
&#13;
    function drawCorrectAnswerImage(isPreview) {&#13;
        presenter.stageCorrect = new Kinetic.Stage({&#13;
            container: presenter.data.divID + "_correctImage",&#13;
            height: presenter.data.height,&#13;
            width: presenter.data.width&#13;
        });&#13;
        presenter.correctAnswerlayer = new Kinetic.Layer();&#13;
        var correctImage = new Image();&#13;
        correctImage.onload = function() {&#13;
            var correctImg = new Kinetic.Image({&#13;
                x: 0, y: 0,&#13;
                image: correctImage,&#13;
                height: presenter.data.height,&#13;
                width: presenter.data.width&#13;
            });&#13;
&#13;
            presenter.correctAnswerlayer.add(correctImg);&#13;
            presenter.stageCorrect.add(presenter.correctAnswerlayer);&#13;
&#13;
            calculateBorderCoordinates();&#13;
        };&#13;
        correctImage.src = presenter.configuration.correctAnswerImage;&#13;
    }&#13;
&#13;
    function updateCursorPosition(e) {&#13;
        presenter.cursorPosition.pre_x = presenter.cursorPosition.x;&#13;
        presenter.cursorPosition.pre_y = presenter.cursorPosition.y;&#13;
&#13;
        var canvas = canvasData.temp.canvas;&#13;
        var rect = canvas.getBoundingClientRect();&#13;
&#13;
        if (e.clientX === undefined) {&#13;
            presenter.cursorPosition.x = parseInt((event.targetTouches[0].pageX - $(canvas).offset().left) / presenter.data.zoom, 10);&#13;
            presenter.cursorPosition.y = parseInt((event.targetTouches[0].pageY - $(canvas).offset().top) / presenter.data.zoom, 10);&#13;
        } else {&#13;
            presenter.cursorPosition.x = parseInt((e.clientX - rect.left) / presenter.data.zoom, 10);&#13;
            presenter.cursorPosition.y = parseInt((e.clientY - rect.top) / presenter.data.zoom, 10);&#13;
        }&#13;
&#13;
        directionPoints.push({ x: presenter.cursorPosition.x, y: presenter.cursorPosition.y });&#13;
    }&#13;
&#13;
    function upDateCheckPointsHistory(x, y) {&#13;
        var point = presenter.data.activePointsPositions[y][x];&#13;
        var lastPointInArray = presenter.pointsHistory.last();&#13;
&#13;
        if (point !== lastPointInArray) {&#13;
            presenter.pointsHistory.push(point);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isShapeCoveredInCircle = function(x, y, r) {&#13;
        r = parseInt(r, 10);&#13;
        var increase = r &lt; 4 ? r : 4;&#13;
&#13;
        for (var i=y-r; i&lt;=y+r; i += increase) {&#13;
            for (var j=x-r; j&lt;=x+r; j += increase) {&#13;
                if (i &gt; 0 &amp;&amp; j &gt; 0 &amp;&amp; j &lt; presenter.data.width &amp;&amp; i &lt; presenter.data.height) {&#13;
                    if (r * r &gt;= (x-j) * (x-j) + (y-i) * (y-i)) {&#13;
                        if (!presenter.data.borderPositions[i][j]) return false;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.isThisActivePointAndCheck = function(x, y) {&#13;
        // check if point is in array&#13;
        var result = presenter.pointsArray.indexOf(presenter.data.activePointsPositions[x][y]) !== -1;&#13;
&#13;
        // remove point from array&#13;
        presenter.pointsArray = presenter.pointsArray.filter(function(n) { return n !== presenter.data.activePointsPositions[x][y] });&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
    presenter.isPositionInDefinedPoint = function(x, y, r) {&#13;
        r = parseInt(r, 10);&#13;
&#13;
        for (var i=y-r; i&lt;=y+r; i += 3) {&#13;
            for (var j=x-r; j&lt;=x+r; j += 3) {&#13;
                if (i &gt; 0 &amp;&amp; j &gt; 0 &amp;&amp; j &lt; presenter.data.width &amp;&amp; i &lt; presenter.data.height) {&#13;
                    if (r * r &lt;= (x-j) * (x-j) + (y-i) * (y-i)) {&#13;
                        upDateCheckPointsHistory(x, y);&#13;
&#13;
                        // if points' order does matter&#13;
                        if (presenter.configuration.isCheckPointsOrder) {&#13;
                            if (presenter.data.activePointsPositions[i][j] === presenter.data.currentPointNumber) {&#13;
                                return true;&#13;
                            }&#13;
                        // if not then find any point&#13;
                        } else {&#13;
                            if (presenter.isThisActivePointAndCheck(i, j)) {&#13;
                                return true;&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    function checkCorrectness() {&#13;
        var x = parseInt(presenter.cursorPosition.x, 10);&#13;
        var y = parseInt(presenter.cursorPosition.y, 10);&#13;
        if (presenter.isShapeCoveredInCircle(x, y, presenter.data.pencilThickness / 2)) {&#13;
            isOutsideShape = false;&#13;
        } else {&#13;
            if (!isOutsideShape) {&#13;
                presenter.data.numberOfDescentsFromShape++;&#13;
                isOutsideShape = true;&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.isPositionInDefinedPoint(x, y, presenter.data.pencilThickness / 2)) {&#13;
            presenter.data.currentPointNumber++;&#13;
            if (presenter.data.currentPointNumber &gt; presenter.configuration.points.length) {&#13;
                presenter.data.isAllPointsChecked = true;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function draw(e, notPropagate) {&#13;
        if (notPropagate) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        }&#13;
&#13;
        updateCursorPosition(e);&#13;
&#13;
        var ctx = canvasData.temp.context;&#13;
        var can = canvasData.temp.canvas;&#13;
&#13;
        ctx.globalAlpha = presenter.data.drawingOpacity;&#13;
        ctx.lineWidth = presenter.data.pencilThickness;&#13;
        ctx.lineJoin = 'round';&#13;
        ctx.lineCap = 'round';&#13;
        ctx.strokeStyle = presenter.configuration.color;&#13;
        ctx.fillStyle = presenter.configuration.color;&#13;
&#13;
        points.push({ x: presenter.cursorPosition.x, y: presenter.cursorPosition.y });&#13;
&#13;
        if (points.length &lt; 3) {&#13;
            ctx.beginPath();&#13;
            ctx.arc(points[0].x, points[0].y, presenter.data.pencilThickness / 2, 0, Math.PI * 2, !0);&#13;
            ctx.fill();&#13;
            ctx.closePath();&#13;
        } else {&#13;
            ctx.clearRect(0, 0, can.width, can.height);&#13;
&#13;
            ctx.beginPath();&#13;
            ctx.moveTo(points[0].x, points[0].y);&#13;
&#13;
            for (var i=1; i&lt;points.length-2; i++) {&#13;
                var x = (points[i].x + points[i + 1].x) / 2;&#13;
                var y = (points[i].y + points[i + 1].y) / 2;&#13;
&#13;
                ctx.quadraticCurveTo(points[i].x, points[i].y, x, y);&#13;
            }&#13;
&#13;
            ctx.quadraticCurveTo(&#13;
                points[i].x, points[i].y,&#13;
                points[i + 1].x, points[i + 1].y&#13;
            );&#13;
            ctx.stroke();&#13;
        }&#13;
&#13;
        if (presenter.data.isPencilActive) {&#13;
            // active only on drawing, disable when eraser&#13;
            checkCorrectness();&#13;
        }&#13;
    }&#13;
&#13;
    function turnOnEventListeners() {&#13;
        var $canvas = $(canvasData.temp.canvas);&#13;
&#13;
        $canvas.on('click', function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        // TOUCH&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            connectTouchEvents($canvas);&#13;
        }&#13;
&#13;
        // MOUSE&#13;
        connectMouseEvents($canvas)&#13;
    }&#13;
&#13;
    function connectTouchEvents($canvas) {&#13;
        var isWorkaroundOn = false;&#13;
&#13;
        $canvas.on('touchstart', function(e) {&#13;
            presenter.data.numberOfLines++;&#13;
&#13;
            if (presenter.data.isPencilActive) {&#13;
                presenter.data.isStarted = true;&#13;
                setOverflowWorkAround(true);&#13;
                draw(e, false);&#13;
            } else {&#13;
                resetAddon(false);&#13;
            }&#13;
        });&#13;
&#13;
        $canvas.on('touchmove', function(e) {&#13;
            if (presenter.data.isPencilActive) {&#13;
                presenter.data.isStarted = true;&#13;
                if (!isWorkaroundOn) {&#13;
                    setOverflowWorkAround(true);&#13;
                }&#13;
                drawWithoutPropagation(e);&#13;
            } else {&#13;
                resetAddon(false);&#13;
            }&#13;
&#13;
        });&#13;
&#13;
        $canvas.on('touchend', function() {&#13;
            if (presenter.data.isPencilActive) {&#13;
                eventCreator();&#13;
            }&#13;
&#13;
            canvasData.main.context.drawImage(canvasData.temp.canvas, 0, 0);&#13;
            canvasData.temp.context.clearRect(0, 0, canvasData.temp.canvas.width, canvasData.temp.canvas.height);&#13;
&#13;
            points = [];&#13;
            directionPoints.push('Up');&#13;
&#13;
            setOverflowWorkAround(false);&#13;
            isWorkaroundOn = false;&#13;
        });&#13;
    }&#13;
    &#13;
    function drawWithoutPropagation (e) {&#13;
        draw(e, true);&#13;
    }&#13;
&#13;
    function connectMouseEvents($canvas) {&#13;
        var isDown = false;&#13;
&#13;
        $canvas.on('mousedown', function(e) {&#13;
            isDown = true;&#13;
            draw(e, false);&#13;
            $canvas.on('mousemove', drawWithoutPropagation);&#13;
&#13;
            if (presenter.data.isPencilActive) {&#13;
                presenter.data.isStarted = true;&#13;
                presenter.data.numberOfLines++;&#13;
            } else {&#13;
                resetAddon(false);&#13;
            }&#13;
        });&#13;
&#13;
        $canvas.on('mouseup mouseleave', function() {&#13;
            $canvas.off('mousemove', drawWithoutPropagation);&#13;
            if (isDown &amp;&amp; presenter.data.isPencilActive) {&#13;
                eventCreator();&#13;
                isDown = false;&#13;
            }&#13;
&#13;
            canvasData.main.context.drawImage(canvasData.temp.canvas, 0, 0);&#13;
            canvasData.temp.context.clearRect(0, 0, canvasData.temp.canvas.width, canvasData.temp.canvas.height);&#13;
&#13;
            points = [];&#13;
        });&#13;
&#13;
        $canvas.on('mouseup', function() {&#13;
            directionPoints.push('Up');&#13;
        });&#13;
    }&#13;
&#13;
    function turnOffEventListeners() {&#13;
        var $canvas = $(canvasData.temp.canvas);&#13;
        $canvas.off("touchstart touchend touchmove");&#13;
        $canvas.off("mousedown mouseup mouseleave mousemove");&#13;
    }&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        SI01: "Property Shape image cannot be empty",&#13;
&#13;
        P02: "Wrong amount of numbers in every line in Points' coordinates property",&#13;
        P03: "Points' coordinates are out of canvas range",&#13;
        P04: "Non numeric value in points' coordinates property",&#13;
&#13;
        C01: "Wrong value in property: Color",&#13;
&#13;
        T02: "Property Thickness cannot be less then 1 and more then 40",&#13;
&#13;
        O01: "Property Opacity has to be between 0 and 1",&#13;
&#13;
        B01: "Property Border hat to be between 0 and 5"&#13;
    };&#13;
&#13;
    function parseImage(img) {&#13;
        if (ModelValidationUtils.isStringWithPrefixEmpty(img, "/file/")) {&#13;
            return returnErrorObject("SI01");&#13;
        }&#13;
&#13;
        return returnCorrectObject(img);&#13;
    }&#13;
&#13;
    function parseBGImage(BGImage) {&#13;
        return returnCorrectObject(BGImage);&#13;
    }&#13;
&#13;
    function parseNumberOfLines(lines) {&#13;
        if (ModelValidationUtils.isStringEmpty(lines)) {&#13;
            return returnCorrectObject([]);&#13;
        }&#13;
&#13;
        lines = lines.split(';').map(function (num) { return parseInt(num, 10); });&#13;
        lines = lines.length === 1 ? lines.concat(lines) : lines;&#13;
&#13;
        return returnCorrectObject(lines);&#13;
    }&#13;
&#13;
    function parsePoints(points) {&#13;
        if (ModelValidationUtils.isStringEmpty(points)) {&#13;
            return returnCorrectObject([]);&#13;
        }&#13;
&#13;
        // e.g. "1;1;1\n2;2;2\n3;3;3" =&gt; [[1,1,1], [2,2,2], [3,3,3]]&#13;
        points = Helpers.splitLines(points).map(function(line) { return line.split(';').map(function(num){ return parseInt(num, 10) }) });&#13;
&#13;
        for (var i=0, len=points.length; i&lt;len; i++) {&#13;
            if (points[i].length !== 3) {&#13;
                return returnErrorObject("P02");&#13;
            }&#13;
&#13;
            if (points[i][0] &lt; 0 || points[i][1] &lt; 0 || points[i][0] &gt; presenter.data.width || points[i][1] &gt; presenter.data.height) {&#13;
                return returnErrorObject("P03");&#13;
            }&#13;
        }&#13;
&#13;
        return returnCorrectObject(points);&#13;
    }&#13;
&#13;
    function parseColor(color) {&#13;
        color = color.trim();&#13;
        if (ModelValidationUtils.isStringEmpty(color)) {&#13;
            return returnCorrectObject('#000000');&#13;
        }&#13;
&#13;
        if (color[0] === '#' &amp;&amp; !(color.length === 7 || color.length === 4)) {&#13;
            return returnErrorObject("C01");&#13;
        }&#13;
&#13;
        if (color[0] !== '#') {&#13;
            color = colorNameToHex(color);&#13;
            if (!color) return returnErrorObject("C01");&#13;
        }&#13;
&#13;
        return returnCorrectObject(color);&#13;
    }&#13;
&#13;
    function parseThickness(thickness) {&#13;
        if (ModelValidationUtils.isStringEmpty(thickness)) {&#13;
            return returnCorrectObject(10);&#13;
        }&#13;
&#13;
        thickness = parseInt(thickness, 10);&#13;
&#13;
        if (1 &gt; thickness || thickness &gt; 40) {&#13;
            return returnErrorObject("T02");&#13;
        }&#13;
&#13;
        return returnCorrectObject(thickness);&#13;
    }&#13;
&#13;
    function parseOpacity(opacity) {&#13;
        opacity = opacity || 1;&#13;
        opacity = parseFloat(opacity);&#13;
&#13;
        if (0 &gt; opacity || opacity &gt; 1) {&#13;
            return returnErrorObject("O01");&#13;
        }&#13;
&#13;
        return returnCorrectObject(opacity);&#13;
    }&#13;
&#13;
    function parseBorder(border) {&#13;
        border = border || 0;&#13;
        border = parseInt(border, 10);&#13;
&#13;
        if (0 &gt; border || border &gt; 5) {&#13;
            return returnErrorObject("B01");&#13;
        }&#13;
&#13;
        return returnCorrectObject(border);&#13;
    }&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedShapeImage = parseImage(model["Shape image"]);&#13;
        if (!validatedShapeImage.isValid) {&#13;
            return returnErrorObject(validatedShapeImage.errorCode);&#13;
        }&#13;
&#13;
        var validatedBGImage = parseBGImage(model["Background image"]);&#13;
        if (!validatedBGImage.isValid) {&#13;
            return returnErrorObject(validatedBGImage.errorCode);&#13;
        }&#13;
&#13;
        var validatedCorrectNumberOfLines = parseNumberOfLines(model["Correct number of lines"]);&#13;
        if (!validatedCorrectNumberOfLines.isValid) {&#13;
            return returnErrorObject(validatedCorrectNumberOfLines.errorCode);&#13;
        }&#13;
&#13;
        var validatedPoints = parsePoints(model["Points' coordinates"]);&#13;
        if (!validatedPoints.isValid) {&#13;
            return returnErrorObject(validatedPoints.errorCode);&#13;
        }&#13;
&#13;
        var validatedColor = parseColor(model["Color"]);&#13;
        if (!validatedColor.isValid) {&#13;
            return returnErrorObject(validatedColor.errorCode);&#13;
        }&#13;
&#13;
        presenter.data.startColor = validatedColor.value;&#13;
&#13;
        var validatedThickness_Pen = parseThickness(model["Pen Thickness"]);&#13;
        if (!validatedThickness_Pen.isValid) {&#13;
            return returnErrorObject(validatedThickness_Pen.errorCode);&#13;
        }&#13;
&#13;
        var validatedOpacity = parseOpacity(model["Opacity"]);&#13;
        if (!validatedOpacity.isValid) {&#13;
            return returnErrorObject(validatedOpacity.errorCode);&#13;
        }&#13;
&#13;
        var validatedBorder = parseBorder(model["Border"]);&#13;
        if (!validatedBorder.isValid) {&#13;
            return returnErrorObject(validatedBorder.errorCode);&#13;
        }&#13;
&#13;
        return {&#13;
            shapeImage: validatedShapeImage.value,&#13;
            isShowShapeImage: ModelValidationUtils.validateBoolean(model["Show Shape image"]),&#13;
            isShowShapeImageOnCheck: !ModelValidationUtils.validateBoolean(model["Hide Shape image on check"]),&#13;
            isShowFoundBoundaries: ModelValidationUtils.validateBoolean(model["Show Boundaries (editor)"]),&#13;
            backgroundImage: validatedBGImage.value,&#13;
            numberOfLines: validatedCorrectNumberOfLines.value,&#13;
            points: validatedPoints.value,&#13;
            isCheckPointsOrder: ModelValidationUtils.validateBoolean(model["isPointsOrder"]),&#13;
            color: validatedColor.value,&#13;
            penThickness: validatedThickness_Pen.value,&#13;
            opacity: validatedOpacity.value,&#13;
            border: validatedBorder.value,&#13;
            correctAnswerImage: model["Correct Answer Image"],&#13;
            numberOfPoints: validatedPoints.value.length,&#13;
&#13;
            ID: model.ID,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            isValid: true&#13;
        }&#13;
    };&#13;
&#13;
    function resizeCanvas(elem) {&#13;
        var container = $(elem).parent();&#13;
&#13;
        elem.width = container.width();&#13;
        elem.height = container.height();&#13;
    }&#13;
&#13;
    presenter.presenterLogic = function(view, model, isPreview) {&#13;
        presenter.data.shapeImageLoadedDeferred = new $.Deferred();&#13;
        presenter.data.shapeImageLoaded = presenter.data.shapeImageLoadedDeferred.promise();&#13;
&#13;
        presenter.$view = $(view);&#13;
&#13;
        Kinetic.pixelRatio = 1;&#13;
        var zoom = $('#_icplayer').css('zoom');&#13;
        presenter.data.zoom = zoom == "" || zoom == undefined || isNaN(zoom) ? 1 : zoom;&#13;
        presenter.data.width = parseInt(model["Width"], 10);&#13;
        presenter.data.height = parseInt(model["Height"], 10);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return false;&#13;
        }&#13;
&#13;
        initPointsArray();&#13;
&#13;
        presenter.data.isAllPointsChecked = presenter.configuration.points.length === 0;&#13;
        presenter.data.pencilThickness = presenter.configuration.penThickness;&#13;
&#13;
        presenter.initActivePointsPositions();&#13;
&#13;
        if (presenter.configuration.border !== 0) {&#13;
            presenter.$view.css('border', presenter.configuration.border + 'px solid black');&#13;
        }&#13;
&#13;
        presenter.data.divID = presenter.configuration.ID + (isPreview ? "_preview" : "_run");&#13;
&#13;
        presenter.$view.find("div.background").attr('id', presenter.data.divID + "_background");&#13;
        presenter.$view.find("div.shape").attr('id', presenter.data.divID + "_shape");&#13;
        presenter.$view.find("div.correctImage").attr('id', presenter.data.divID + "_correctImage");&#13;
&#13;
        presenter.$view.css('opacity', presenter.configuration.opacity);&#13;
&#13;
        initCanvasData();&#13;
&#13;
        resizeCanvas(canvasData.main.canvas);&#13;
        resizeCanvas(canvasData.temp.canvas);&#13;
&#13;
        drawBackGroundImage(isPreview);&#13;
        drawShapeImage(isPreview);&#13;
&#13;
        presenter.data.shapeImageLoaded.then(function() {&#13;
            if (presenter.configuration.correctAnswerImage &amp;&amp; !isPreview) {&#13;
                drawCorrectAnswerImage(isPreview);&#13;
            }&#13;
        });&#13;
&#13;
        if (!isPreview) {&#13;
            turnOnEventListeners();&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.visibleByDefault = presenter.configuration.isVisible;&#13;
&#13;
        presenter.$view.find('div.correctImage').css('display', 'none');&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.setThickness = function(thickness) {&#13;
        presenter.data.pencilThickness = parseThickness(thickness).value;&#13;
    };&#13;
&#13;
    presenter.setColor = function(color) {&#13;
        presenter.data.isPencilActive = true;&#13;
        presenter.configuration.color = parseColor(color).value;&#13;
    };&#13;
&#13;
    presenter.setEraserOn = function() {&#13;
        presenter.data.isPencilActive = false;&#13;
    };&#13;
&#13;
    presenter.setEraserOff = function() {&#13;
        presenter.data.isPencilActive = true;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.setOpacity = function(opacity) {&#13;
        presenter.data.drawingOpacity = parseOpacity(opacity[0]).value;&#13;
    };&#13;
&#13;
    presenter.descentsFromShape = function() {&#13;
        return presenter.data.numberOfDescentsFromShape;&#13;
    };&#13;
&#13;
    presenter.numberOfLines = function() {&#13;
        return presenter.data.numberOfLines;&#13;
    };&#13;
&#13;
    presenter.pointsMissed = function() {&#13;
        var points = presenter.pointsHistory.filter(function(p) { return p !== NO_POINT });&#13;
        var result = [];&#13;
&#13;
        for (var i=1; i&lt;presenter.configuration.numberOfPoints+1; i++) {&#13;
            if (points.indexOf(i) === -1) {&#13;
                result.push(i);&#13;
            }&#13;
        }&#13;
&#13;
        return result.length;&#13;
    };&#13;
&#13;
    function parseLinesToDots(points, distance) {&#13;
        function getLineFromIndex(points, index) {&#13;
            var result = [];&#13;
&#13;
            for (var i=index; i&lt;points.length; i++) {&#13;
                if (points[i] === LINE_END_SIGN) {&#13;
                    return result;&#13;
                } else {&#13;
                    result.push(points[i]);&#13;
                }&#13;
            }&#13;
&#13;
            return result;&#13;
        }&#13;
&#13;
        var result = [], i = 0;&#13;
&#13;
        while (i &lt; points.length) {&#13;
            var line = getLineFromIndex(points, i);&#13;
&#13;
            if (line.length === 1 || getDistance(line[0], line.last()) &lt; distance) {&#13;
                result.push(DOT_SIGN);&#13;
            } else {&#13;
                result = result.concat(line);&#13;
            }&#13;
&#13;
            result.push(LINE_END_SIGN);&#13;
&#13;
            i += line.length + 1;&#13;
        }&#13;
&#13;
        return result;&#13;
    }&#13;
&#13;
    presenter.getDirections = function() {&#13;
        function hasUndefinedValue() {&#13;
            for (var i=0; i&lt;arguments.length; i++) {&#13;
                if (arguments[i] === undefined) {&#13;
                    return true;&#13;
                }&#13;
            }&#13;
&#13;
            return false;&#13;
        }&#13;
&#13;
        if (directionPoints.length === 0) {&#13;
            return [];&#13;
        }&#13;
&#13;
        var MIN_DISTANCE = 8;&#13;
        directionPoints = parseLinesToDots(directionPoints.removeNeighbourDuplicates(), MIN_DISTANCE);&#13;
&#13;
        var result = [], i = 0,&#13;
            p1 = directionPoints[0],&#13;
            p2 = directionPoints[1];&#13;
&#13;
        while (i &lt; directionPoints.length-1) {&#13;
            while (p1 === LINE_END_SIGN || p1 === DOT_SIGN) {&#13;
                result.push(p1);&#13;
                i++;&#13;
                p1 = directionPoints[i];&#13;
                p2 = directionPoints[i + 1];&#13;
            }&#13;
&#13;
            if (hasUndefinedValue(p1, p2)) {&#13;
                break;&#13;
            }&#13;
&#13;
            if (getDistance(p1, p2) &gt; MIN_DISTANCE) {&#13;
                result.push(calculateDrawingDirection(p1, p2));&#13;
                p1 = directionPoints[i + 1];&#13;
            }&#13;
&#13;
            p2 = directionPoints[i + 2];&#13;
&#13;
            while (p2 === LINE_END_SIGN || p2 === DOT_SIGN) {&#13;
                result.push(p2);&#13;
                i++;&#13;
                p1 = directionPoints[i];&#13;
                p2 = directionPoints[i + 1];&#13;
            }&#13;
&#13;
            i++;&#13;
        }&#13;
&#13;
        return result.removeNeighbourDuplicates();&#13;
    };&#13;
&#13;
    function getDrawnUniqueValues() {&#13;
        var uniqueValues = [];&#13;
        var points = presenter.pointsHistory.filter(function(p) { return p !== NO_POINT });&#13;
&#13;
        for (var i = 0; i &lt; points.length; i++) {&#13;
            if (uniqueValues.indexOf(points[i]) === -1) {&#13;
                uniqueValues.push(points[i]);&#13;
            }&#13;
        }&#13;
&#13;
        return uniqueValues;&#13;
    }&#13;
&#13;
    presenter.isOrderCorrect = function(skipPoints) {&#13;
        skipPoints = skipPoints === 'true' || skipPoints === true;&#13;
&#13;
        var i, previous = -1;&#13;
        var drawnPoints = getDrawnUniqueValues();&#13;
        if (skipPoints) {&#13;
            for (i = 0; i &lt; drawnPoints.length; i++) {&#13;
                if (previous &gt; drawnPoints[i]) {&#13;
                    return false;&#13;
                }&#13;
                previous = drawnPoints[i];&#13;
            }&#13;
        } else {&#13;
            for (i = 0; i &lt; drawnPoints.length; i++) {&#13;
                if (drawnPoints[i] !== i + 1) {&#13;
                    return false;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.isOrderCorrectCommand = function(params) {&#13;
        return presenter.isOrderCorrect(params[0]);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (!presenter.configuration.isValid) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            "reset": presenter.reset,&#13;
            "show": presenter.show,&#13;
            "hide": presenter.hide,&#13;
            "setEraserOn": presenter.setEraserOn,&#13;
            "setEraserOff": presenter.setEraserOff,&#13;
            "setThickness": presenter.setThickness,&#13;
            "showAnswers": presenter.showAnswers,&#13;
            "hideAnswers": presenter.hideAnswers,&#13;
            "setColor": presenter.setColor,&#13;
            "setOpacity": presenter.setOpacity,&#13;
            "isOrderCorrect": presenter.isOrderCorrectCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    function countScore() {&#13;
        var correctLinesNum = presenter.configuration.numberOfLines;&#13;
        var linesNum = presenter.data.numberOfLines;&#13;
        var numOfDesc = presenter.data.numberOfDescentsFromShape;&#13;
&#13;
        if (correctLinesNum.length === 0) {&#13;
            if (numOfDesc === 0 &amp;&amp; presenter.data.isAllPointsChecked) {&#13;
                return 1;&#13;
            } else {&#13;
                return 0;&#13;
            }&#13;
        } else {&#13;
            if (correctLinesNum[0] &lt;= linesNum &amp;&amp; linesNum &lt;= correctLinesNum[1] &amp;&amp; numOfDesc === 0 &amp;&amp; presenter.data.isAllPointsChecked) {&#13;
                return 1;&#13;
            } else {&#13;
                return 0;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        turnOffEventListeners();&#13;
&#13;
        if (presenter.data.isStarted) {&#13;
            $(canvasData.temp.canvas).addClass(countScore() === 1 ? "correct" : "wrong");&#13;
            if (!presenter.configuration.isShowShapeImage &amp;&amp; presenter.configuration.isShowShapeImageOnCheck) {&#13;
                presenter.layer.show();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        turnOffEventListeners();&#13;
        turnOnEventListeners();&#13;
&#13;
        if (!presenter.configuration.isShowShapeImage) {&#13;
            presenter.layer.hide();&#13;
        }&#13;
&#13;
        $(canvasData.temp.canvas).removeClass("correct wrong");&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        resetAddon(true);&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (!presenter.data.isStarted) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return countScore() === 0 ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        return 1;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (!presenter.data.isStarted) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return countScore();&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            imgData: canvasData.main.canvas.toDataURL("image/png"),&#13;
            isPencilActive: presenter.data.isPencilActive,&#13;
            color: presenter.configuration.color,&#13;
            currentPointNumber: presenter.data.currentPointNumber,&#13;
            numberOfLines: presenter.data.numberOfLines,&#13;
            numberOfDescentsFromShape: presenter.data.numberOfDescentsFromShape,&#13;
            isAllPointsChecked: presenter.data.isAllPointsChecked,&#13;
            isAllOk: presenter.data.isAllOk,&#13;
            pointsArray: presenter.pointsArray,&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            directionPoints: directionPoints&#13;
        });&#13;
    };&#13;
&#13;
    presenter.upgradeStateForVisibility = function(state) {&#13;
        if (state.isVisible === undefined) {&#13;
            state.isVisible = true;&#13;
        }&#13;
&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.upgradeStateForOpacity = function(state) {&#13;
        if (state.opacity === undefined) {&#13;
            state.opacity = 0.9;&#13;
        }&#13;
&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.upgradeStateForDirectionPoints = function(state) {&#13;
        if (state.directionPoints === undefined) {&#13;
            state.directionPoints = [];&#13;
        }&#13;
&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.upgradeState = function (parsedState) {&#13;
        parsedState = presenter.upgradeStateForVisibility(parsedState);&#13;
        parsedState = presenter.upgradeStateForOpacity(parsedState);&#13;
        parsedState = presenter.upgradeStateForDirectionPoints(parsedState);&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = presenter.upgradeState(JSON.parse(state));&#13;
&#13;
        presenter.data.isStarted = true; // state is non empty =&gt; exercise is started&#13;
        presenter.data.currentPointNumber = parsedState.currentPointNumber;&#13;
        presenter.data.numberOfLines = parsedState.numberOfLines;&#13;
        presenter.data.numberOfDescentsFromShape = parsedState.numberOfDescentsFromShape;&#13;
        presenter.data.isAllPointsChecked = parsedState.isAllPointsChecked;&#13;
        presenter.data.isAllOk = parsedState.isAllOk || false;&#13;
        presenter.pointsArray = parsedState.pointsArray;&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        directionPoints = parsedState.directionPoints;&#13;
&#13;
        var savedImg = new Image();&#13;
        savedImg.onload = function() {&#13;
            canvasData.main.context.drawImage(savedImg, 0, 0);&#13;
&#13;
            presenter.configuration.color = JSON.parse(state).color;&#13;
            if (!JSON.parse(state).isPencilActive) {&#13;
                presenter.setEraserOn();&#13;
            }&#13;
&#13;
            setOverflowWorkAround(true);&#13;
            setOverflowWorkAround(false);&#13;
        };&#13;
        savedImg.src = JSON.parse(state).imgData;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.isAllOk = function() {&#13;
        return presenter.data.isAllOk;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function() {&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.setWorkMode();&#13;
        turnOffEventListeners();&#13;
&#13;
        if (presenter.configuration.correctAnswerImage) {&#13;
            presenter.layer.hide();&#13;
            presenter.$view.find('.correctImage').css('display', 'block');&#13;
        } else {&#13;
            presenter.layer.show();&#13;
        }&#13;
&#13;
        presenter.$view.find('.background').addClass('shape-tracing-show-answers');&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function() {&#13;
        presenter.$view.find('.background').removeClass('shape-tracing-show-answers');&#13;
&#13;
        if (presenter.correctAnswerlayer) {&#13;
            presenter.$view.find('.correctImage').css('display', 'none');&#13;
        }&#13;
        if (presenter.configuration.isShowShapeImage) {&#13;
            presenter.layer.show();&#13;
        } else {&#13;
            presenter.layer.hide();&#13;
        }&#13;
        turnOffEventListeners();&#13;
        turnOnEventListeners();&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Show_Answers" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property isLocalized="true" name="Text" nameLabel="Show_Answers_property_text" type="string"/>
        <property isLocalized="true" name="Text selected" nameLabel="Show_Answers_property_text_selected" type="string"/>
        <property name="Increment check counter" nameLabel="Show_Answers_property_increment_check_counter" type="boolean"/>
    </model>
<css>.show-answers-wrapper,&#13;
.show-answers-wrapper .show-answers-container,&#13;
.show-answers-wrapper .show-answers-container .show-answers-button {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.show-answers-wrapper .show-answers-container .show-answers-button {&#13;
    background: url('resources/show-answers-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="show-answers-wrapper"&gt;&#13;
    &lt;div class="show-answers-container"&gt;&#13;
        &lt;div class="show-answers-button"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="show-answers-wrapper"&gt;&#13;
    &lt;div class="show-answers-container"&gt;&#13;
        &lt;div class="show-answers-button"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonShow_Answers_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.EVENTS = {&#13;
        SHOW_ANSWERS: 'ShowAnswers',&#13;
        HIDE_ANSWERS: 'HideAnswers'&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode) {&#13;
        if (keycode === 13) {&#13;
            presenter.$button.click();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(eventName) {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent(eventName, eventData);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.sanitizeModel = function(model) {&#13;
        return {&#13;
            'text' : model.Text,&#13;
            'textSelected' : model['Text selected'],&#13;
            'isVisible' : ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            'addonID' : model.ID,&#13;
            'isSelected': false,&#13;
            'enableCheckCounter': ModelValidationUtils.validateBoolean(model["Increment check counter"])&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleClickAction = function () {&#13;
        presenter.$button.on('click', function (eventData) {&#13;
            eventData.stopPropagation();&#13;
&#13;
            var text, eventName;&#13;
&#13;
            presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
&#13;
            if (presenter.configuration.isSelected) {&#13;
                text = presenter.configuration.textSelected;&#13;
                eventName = presenter.EVENTS.SHOW_ANSWERS;&#13;
                presenter.$wrapper.addClass('selected');&#13;
                if(presenter.configuration.enableCheckCounter){&#13;
                    presenter.playerController.getCommands().incrementCheckCounter();&#13;
                }&#13;
            } else {&#13;
                text = presenter.configuration.text;&#13;
                eventName = presenter.EVENTS.HIDE_ANSWERS;&#13;
                presenter.$wrapper.removeClass('selected');&#13;
            }&#13;
&#13;
            presenter.$button.text(text);&#13;
            presenter.sendEvent(eventName);&#13;
        });&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.configuration = presenter.sanitizeModel(model);&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        presenter.$button = presenter.$view.find('.show-answers-button');&#13;
        presenter.$button.text(presenter.configuration.text);&#13;
        presenter.$wrapper = presenter.$view.find('.show-answers-wrapper');&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.handleClickAction();&#13;
            presenter.eventBus.addEventListener('ShowAnswers', presenter);&#13;
            presenter.eventBus.addEventListener('HideAnswers', presenter);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.view = view;&#13;
        presenterLogic(view, model, false);&#13;
&#13;
        presenter.view.addEventListener("DOMNodeRemoved", presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function (event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.view.removeEventListener("DOMNodeRemoved", presenter.destroy);&#13;
        presenter.$button.off();&#13;
&#13;
        presenter.$button = null;&#13;
        presenter.$wrapper = null;&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.configuration.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.reset();&#13;
        }&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.$button.text(presenter.configuration.textSelected);&#13;
            presenter.$wrapper.addClass('selected');&#13;
            presenter.configuration.isSelected = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            "show": presenter.show,&#13;
            "hide": presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            'isVisible' : presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        presenter.setVisibility(JSON.parse(state).isVisible);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.$button.text(presenter.configuration.text);&#13;
        presenter.$wrapper.removeClass('selected');&#13;
        presenter.configuration.isSelected = false;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.reset();&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.reset();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Single_State_Button" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Title" nameLabel="Single_State_Button_property_title" type="string"/>
		<property name="Image" nameLabel="Single_State_Button_property_image" type="image"/>
		<property name="onClick" nameLabel="Single_State_Button_property_on_click" type="event"/>
		<property name="Disable" nameLabel="Single_State_Button_property_disable" type="boolean"/>
	</model>
<css>.singlestate-button-wrapper {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.singlestate-button-element {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    background: url('resources/ssb-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.singlestate-button-title,&#13;
.singlestate-button-image {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class="singlestate-button-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="singlestate-button-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonSingle_State_Button_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.DISPLAY_CONTENT_TYPE = {&#13;
        NONE: 0,&#13;
        TITLE: 1,&#13;
        IMAGE: 2,&#13;
        BOTH: 3&#13;
    };&#13;
&#13;
    presenter.executeUserEventCode = function() {&#13;
        if (presenter.playerController == null) return;&#13;
        if (presenter.configuration.onClickEvent.isEmpty) return;&#13;
&#13;
        presenter.playerController.getCommands().executeEventCode(presenter.configuration.onClickEvent.value);&#13;
    };&#13;
&#13;
    presenter.clickHandler = function (event) {&#13;
        event.stopPropagation();&#13;
&#13;
        if (presenter.configuration.isDisabled) return;&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        presenter.executeUserEventCode();&#13;
        presenter.triggerButtonClickedEvent();&#13;
    };&#13;
&#13;
    function handleMouseActions() {&#13;
        var $element = presenter.$view.find('div[class*=singlestate-button-element]:first');&#13;
        $element.click(presenter.clickHandler);&#13;
    }&#13;
&#13;
    function setElementsDimensions(model, wrapper, element) {&#13;
        var viewDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var viewDistances = DOMOperationsUtils.calculateOuterDistances(viewDimensions);&#13;
        presenter.$view.css({&#13;
            width:(model.Width - viewDistances.horizontal) + 'px',&#13;
            height:(model.Height - viewDistances.vertical) + 'px'&#13;
        });&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, wrapper);&#13;
        DOMOperationsUtils.setReducedSize(wrapper, element);&#13;
    }&#13;
&#13;
    function createImageElement(element) {&#13;
        var $imageElement = $(document.createElement('img'));&#13;
        $imageElement.addClass('singlestate-button-image');&#13;
        $imageElement.attr('src', presenter.configuration.image);&#13;
        $(element).append($imageElement);&#13;
    }&#13;
&#13;
    function createTitleElement(element) {&#13;
        var $titleElement = $(document.createElement('span'));&#13;
        $titleElement.addClass('singlestate-button-title');&#13;
        $titleElement.html(presenter.configuration.title);&#13;
        $(element).append($titleElement);&#13;
    }&#13;
&#13;
    function createElements(wrapper) {&#13;
        var $element = $(document.createElement('div'));&#13;
        $element.addClass('singlestate-button-element');&#13;
&#13;
        switch (presenter.configuration.displayContent) {&#13;
            case presenter.DISPLAY_CONTENT_TYPE.TITLE:&#13;
                createTitleElement($element);&#13;
&#13;
                break;&#13;
            case presenter.DISPLAY_CONTENT_TYPE.IMAGE:&#13;
                createImageElement($element);&#13;
&#13;
                break;&#13;
            case presenter.DISPLAY_CONTENT_TYPE.BOTH:&#13;
                createImageElement($element);&#13;
                createTitleElement($element);&#13;
&#13;
                break;&#13;
        }&#13;
&#13;
        wrapper.append($element);&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        presenter.addonID = model.ID;&#13;
        presenter.$view = $(view);&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
&#13;
        var $wrapper = $(presenter.$view.find('.singlestate-button-wrapper:first')[0]);&#13;
        var $element = createElements($wrapper);&#13;
&#13;
        setElementsDimensions(upgradedModel, $wrapper, $element);&#13;
        presenter.toggleDisable(presenter.configuration.isDisabledByDefault);&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
&#13;
        if (!preview) {&#13;
            handleMouseActions();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
&#13;
        var eventBus = presenter.playerController.getEventBus();&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function(model) {&#13;
        return presenter.upgradeDisable(model);&#13;
    };&#13;
&#13;
    presenter.upgradeDisable = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel.Disable) {&#13;
            upgradedModel.Disable = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.validateString = function (imageSrc) {&#13;
        var isEmpty = ModelValidationUtils.isStringEmpty(imageSrc);&#13;
&#13;
        return {&#13;
            isEmpty: isEmpty,&#13;
            value: isEmpty ? "" : imageSrc&#13;
        };&#13;
    };&#13;
&#13;
    presenter.determineDisplayContent = function(title, image) {&#13;
        var displayContent = presenter.DISPLAY_CONTENT_TYPE.NONE;&#13;
&#13;
        if (!title.isEmpty &amp;&amp; image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.TITLE;&#13;
        } else if (title.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.IMAGE;&#13;
        } else if (!title.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.BOTH;&#13;
        }&#13;
&#13;
        return displayContent;&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var title = presenter.validateString(model.Title);&#13;
        var image = presenter.validateString(model.Image);&#13;
        var onClickEvent = presenter.validateString(model.onClick);&#13;
        var isDisabled = ModelValidationUtils.validateBoolean(model.Disable);&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
&#13;
        return {&#13;
            displayContent: presenter.determineDisplayContent(title, image),&#13;
            title: title.value,&#13;
            image: image.value,&#13;
            onClickEvent: onClickEvent,&#13;
            isDisabled: isDisabled,&#13;
            isDisabledByDefault: isDisabled,&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            isErrorMode: false&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'enable': presenter.enable,&#13;
            'disable': presenter.disable&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.createEventData = function() {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : '',&#13;
            value : '1',&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerButtonClickedEvent = function() {&#13;
        if (presenter.playerController == null) return;&#13;
&#13;
        presenter.playerController.getEventBus().sendEvent('ValueChanged', this.createEventData());&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        this.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        this.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.configuration.isErrorMode = false;&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        if (presenter.configuration.isVisible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hide();&#13;
        }&#13;
        presenter.toggleDisable(this.configuration.isDisabledByDefault);&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        this.toggleDisable(false);&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        this.toggleDisable(true);&#13;
    };&#13;
&#13;
    presenter.toggleDisable = function(disable) {&#13;
        var element = presenter.$view.find('div[class*=singlestate-button-element]:first');&#13;
        if(disable) {&#13;
            element.addClass("disable");&#13;
        } else {&#13;
            element.removeClass("disable");&#13;
        }&#13;
        presenter.configuration.isDisabled = disable;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            isDisabled: presenter.configuration.isDisabled&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
        presenter.configuration.isDisabled = state.isDisabled;&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.toggleDisable(presenter.configuration.isDisabled);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.configuration.isErrorMode = true;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.configuration.isErrorMode = false;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.configuration.isErrorMode = true;&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.configuration.isErrorMode = false;&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Slider" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="ImageElement" nameLabel="Slider_property_image_element" type="image"/>
		<property name="Orientation" nameLabel="Slider_property_orientation" type="{Landscape, Portrait}"/>
		<property name="Stepwise" nameLabel="Slider_property_stepwise" type="boolean"/>
		<property name="StepsCount" nameLabel="Slider_property_steps_count" type="string"/>
		<property name="InitialStep" nameLabel="Slider_property_initial_step" type="string"/>
		<property name="onStepChange" nameLabel="Slider_property_on_step_change" type="event"/>
		<property name="Block in error checking mode" nameLabel="Slider_property_block_in_error_checking_mode" type="boolean"/>
        <property name="Continuous events" nameLabel="Slider_property_continuous_events" type="boolean"/>
        <property name="Continuous events steps" nameLabel="Slider_property_continuous_events_steps" type="{Stick, Smooth}"/>
	</model>
<css>.slider-wrapper {&#13;
    border: 0 solid black;&#13;
}&#13;
.slider-element-image-mouse-hover,&#13;
.slider-element-image-mouse-click,&#13;
.slider-element-image {&#13;
    position: relative;&#13;
    top: 0;&#13;
    left: 0;&#13;
    bottom: 0;&#13;
    right: 0;&#13;
    border: 0 solid black;&#13;
    -ms-touch-action: none;&#13;
}&#13;
</css><view>&lt;div class="slider-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="slider-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonSlider_create () {&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.$view = null;&#13;
    presenter.savedState = null;&#13;
    presenter.counter = 0;&#13;
&#13;
    var playerController, onStepChangeEvent;&#13;
&#13;
    presenter.ORIENTATION = {&#13;
        LANDSCAPE : 0, // Horizontal&#13;
        PORTRAIT : 1 // Vertical&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'ES_01' : "Element source was not given!",&#13;
        'SC_01' : "Steps count incorrect!",&#13;
        'SC_02' : "Steps count cannot be less than 2!",&#13;
        'IS_01' : "Initial step incorrect! It must be a positive number between 1 and steps count!"&#13;
    };&#13;
&#13;
    presenter.addonID = '';&#13;
&#13;
    presenter.mouseData = {&#13;
        isMouseDown : false,&#13;
        oldPosition : {&#13;
            x : 0,&#13;
            y : 0&#13;
        },&#13;
        isMouseDragged : false&#13;
    };&#13;
&#13;
    var imageElementData = {&#13;
        width : 0,&#13;
        height : 0,&#13;
        maxLeft : 0,&#13;
        maxTop : 0&#13;
    };&#13;
&#13;
    var CLASSES_NAMES = {&#13;
        WRAPPER : {&#13;
            STANDARD_CLASS : 'slider-wrapper',&#13;
            SELECTOR : '.slider-wrapper:first'&#13;
        },&#13;
        ELEMENT_IMAGE : {&#13;
            STANDARD_CLASS : 'slider-element-image',&#13;
            MOUSE_HOVER : 'slider-element-image-mouse-hover',&#13;
            MOUSE_CLICK : 'slider-element-image-mouse-click',&#13;
            SELECTOR : 'div[class*="slider-element-image"]:first'&#13;
        }&#13;
    };&#13;
&#13;
    /**&#13;
     * Trigger a callback when the selected images are loaded:&#13;
     * @param {String} selector&#13;
     * @param {Function} callback&#13;
     */&#13;
    var onImgLoaded = function($element, callback){&#13;
        if ($element[0].complete) {&#13;
            callback($element[0]);&#13;
        }&#13;
        else {&#13;
            $element.on('load', function(){&#13;
                callback($element[0]);&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    function loadImageElement(isPreview) {&#13;
        var addonContainer = presenter.$addonContainer;&#13;
        var imageElement = document.createElement('img');&#13;
        $(imageElement).attr('src', presenter.configuration.imageSrc + "?" + new Date().getTime()); // fix for IE 10 cached images http://css-tricks.com/snippets/jquery/fixing-load-in-ie-for-cached-images/&#13;
        addonContainer.html(imageElement);&#13;
&#13;
        onImgLoaded($(imageElement), function(image) {&#13;
            var width = image.width;&#13;
            var height = image.height;&#13;
            imageElementData.width = width;&#13;
            imageElementData.height = height;&#13;
            imageElementData.maxLeft = $(addonContainer).width() - width;&#13;
            imageElementData.maxTop = $(addonContainer).height() - height;&#13;
&#13;
            var imageContainer = document.createElement('div');&#13;
&#13;
            $(imageContainer).addClass(CLASSES_NAMES.ELEMENT_IMAGE.STANDARD_CLASS);&#13;
            $(imageContainer).css({&#13;
                backgroundImage: "url('" + presenter.configuration.imageSrc + "')",&#13;
                backgroundSize : '100% 100%',&#13;
                width: imageElementData.width + 'px',&#13;
                height: imageElementData.height + 'px'&#13;
            });&#13;
            addonContainer.html(imageContainer);&#13;
&#13;
            var containerLength = presenter.configuration.orientation === presenter.ORIENTATION.LANDSCAPE ? $(addonContainer).width() : $(addonContainer).height();&#13;
&#13;
            var elementLength = presenter.configuration.orientation === presenter.ORIENTATION.LANDSCAPE ? $(imageContainer).width() : $(imageContainer).height();&#13;
            if(!presenter.configuration.stepwise) {&#13;
                presenter.configuration.stepsCount = containerLength - elementLength + 1;&#13;
            }&#13;
            var stepZoneLength = (containerLength - elementLength) / (presenter.configuration.stepsCount - 1);&#13;
&#13;
&#13;
&#13;
            presenter.configuration.snapPoints.push(elementLength / 2);&#13;
            for (var i = 0; i &lt; presenter.configuration.stepsCount - 2; i++) {&#13;
                var snapPoint = elementLength / 2 + (i + 1) * stepZoneLength;&#13;
                presenter.configuration.snapPoints.push(parseInt(snapPoint, 10));&#13;
            }&#13;
            presenter.configuration.snapPoints.push(containerLength - elementLength / 2);&#13;
&#13;
            presenter.moveToStep(imageContainer, presenter.configuration.initialStep, presenter.configuration);&#13;
&#13;
            if (!isPreview) {&#13;
                handleMouseDrag(addonContainer);&#13;
            } else {&#13;
                drawBurret();&#13;
            }&#13;
&#13;
            presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
&#13;
            presenter.imageElement = imageContainer;&#13;
&#13;
            presenter.imageLoadedDeferred.resolve();&#13;
        });&#13;
    }&#13;
&#13;
    presenter.moveToStep = function(element, step, configuration) {&#13;
        var elementContainer = presenter.$addonContainer;&#13;
        var containerLength = configuration.orientation === presenter.ORIENTATION.LANDSCAPE ? $(elementContainer).width() : $(elementContainer).height();&#13;
        var elementLength = configuration.orientation === presenter.ORIENTATION.LANDSCAPE ? $(element).width() : $(element).height();&#13;
        var zoneLength = containerLength - elementLength;&#13;
        var singleStepZoneLength = (containerLength - elementLength) / (configuration.stepsCount - 1);&#13;
        var distance = singleStepZoneLength * (step - 1);&#13;
&#13;
        if (distance &lt; 0 || step === 1) {&#13;
            distance = 0;&#13;
        }&#13;
&#13;
        if (distance &gt; zoneLength || step === configuration.stepsCount) {&#13;
            distance = zoneLength;&#13;
        }&#13;
&#13;
        $(element).css({&#13;
            top : configuration.orientation === presenter.ORIENTATION.PORTRAIT ? distance : 0,&#13;
            left : configuration.orientation === presenter.ORIENTATION.LANDSCAPE ? distance : 0&#13;
        });&#13;
&#13;
        var tempElement = document.createElement('p');&#13;
        elementContainer.append(tempElement);&#13;
        $(elementContainer).find('p:first').remove();&#13;
&#13;
    };&#13;
&#13;
    function mouseDownCallback (eventData) {&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.shouldBlockInErrorMode) return;&#13;
&#13;
        presenter.mouseData.isMouseDown = true;&#13;
        presenter.mouseData.oldPosition.x = eventData.pageX;&#13;
        presenter.mouseData.oldPosition.y = eventData.pageY;&#13;
    }&#13;
&#13;
    function touchStartCallback (event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
        &#13;
        var touch = event.touches[0] || touchPoints[0];&#13;
        mouseDownCallback(touch);&#13;
    }&#13;
&#13;
    presenter.mouseUpEventDispatcher = function (event) {&#13;
        if (presenter.mouseData.isMouseDown) {&#13;
            presenter.mouseUpHandler(event);&#13;
        } else {&#13;
            return;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.mouseUpHandler = function (event) {&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.shouldBlockInErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        $(presenter.imageElement).removeClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_CLICK);&#13;
&#13;
        var addonContainer = presenter.$view.find(CLASSES_NAMES.WRAPPER.SELECTOR);&#13;
        var imageElement = $(addonContainer.find(CLASSES_NAMES.ELEMENT_IMAGE.SELECTOR))[0];&#13;
&#13;
        presenter.mouseData.isMouseDown = false;&#13;
        if (presenter.configuration.newStep !== presenter.configuration.currentStep) {&#13;
            presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = presenter.configuration.newStep;&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
&#13;
            presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
&#13;
        if (presenter.configuration.stepwise) {&#13;
            presenter.moveToStep(imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
        }&#13;
    };&#13;
&#13;
    function touchEndCallback (event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        presenter.mouseUpEventDispatcher();&#13;
    }&#13;
&#13;
    function mouseClickCallback (eventData) {&#13;
&#13;
        eventData.stopPropagation();&#13;
&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.shouldBlockInErrorMode) return;&#13;
&#13;
        var addonContainer = presenter.$view.find(CLASSES_NAMES.WRAPPER.SELECTOR);&#13;
        var imageElement = $(addonContainer.find(CLASSES_NAMES.ELEMENT_IMAGE.SELECTOR))[0];&#13;
&#13;
        $(presenter.imageElement).addClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_CLICK);&#13;
        $(presenter.imageElement).removeClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_HOVER);&#13;
&#13;
        if (presenter.mouseData.isMouseDragged) {&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
            return;&#13;
        }&#13;
&#13;
        var mousePositions = getMousePositions(eventData);&#13;
        presenter.configuration.newStep = presenter.whichStepZone(mousePositions, presenter.configuration);&#13;
&#13;
        if (presenter.configuration.newStep !== presenter.configuration.currentStep) {&#13;
            presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = presenter.configuration.newStep;&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
&#13;
            presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
&#13;
        presenter.moveToStep(imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
    }&#13;
&#13;
    function mouseMoveCallback (eventData) {&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.shouldBlockInErrorMode) return;&#13;
        var addonContainer = presenter.$addonContainer;&#13;
        var imageElement = presenter.imageElement;&#13;
&#13;
        if (presenter.mouseData.isMouseDown) {&#13;
            presenter.mouseData.isMouseDragged = true;&#13;
            var mousePositions = getMousePositions(eventData);&#13;
            var relativeDistance;&#13;
&#13;
&#13;
            if(presenter.continuousEvents &amp;&amp; presenter.continuousEventsSteps == "Smooth"){&#13;
                presenter.configuration.newStep = presenter.whichStepZoneSmooth(mousePositions, presenter.configuration);&#13;
            }else{&#13;
                presenter.configuration.newStep = presenter.whichStepZone(mousePositions, presenter.configuration);&#13;
            }&#13;
&#13;
            if ( presenter.configuration.orientation == presenter.ORIENTATION.LANDSCAPE ) {&#13;
                relativeDistance = presenter.calculateRelativeDistanceX(imageElement, addonContainer, eventData, presenter.mouseData, imageElementData);&#13;
                presenter.mouseData.oldPosition.x = eventData.pageX;&#13;
&#13;
                mousePositions.x = mousePositions.x &gt; 0 ? mousePositions.x : 0;&#13;
                mousePositions.x = mousePositions.x &lt; imageElementData.maxLeft ? mousePositions.x : imageElementData.maxLeft;&#13;
&#13;
                if(!presenter.continuousEvents || (presenter.continuousEvents &amp;&amp; presenter.continuousEventsSteps == "Smooth")){&#13;
                    $(imageElement).css({&#13;
                        left: (mousePositions.x + relativeDistance.horizontal) + 'px'&#13;
                    });&#13;
                }&#13;
&#13;
                if (presenter.configuration.newStep !== presenter.configuration.currentStep &amp;&amp; presenter.continuousEvents) {&#13;
                    presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
                    presenter.configuration.currentStep = presenter.configuration.newStep;&#13;
                    presenter.triggerOnStepChangeUserEvent();&#13;
&#13;
                    presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
&#13;
                    if(presenter.continuousEventsSteps == "Stick" || presenter.continuousEventsSteps == undefined || presenter.continuousEventsSteps == ""){&#13;
                        presenter.moveToStep(imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
                    }&#13;
                }&#13;
&#13;
            } else {&#13;
                relativeDistance = presenter.calculateRelativeDistanceY(imageElement, addonContainer, eventData, presenter.mouseData, imageElementData);&#13;
&#13;
                mousePositions.y = mousePositions.y &gt; 0 ? mousePositions.y : 0;&#13;
                mousePositions.y = mousePositions.y &lt; imageElementData.maxTop ? mousePositions.y : imageElementData.maxTop;&#13;
&#13;
                presenter.mouseData.oldPosition.y = eventData.pageY;&#13;
&#13;
                if(!presenter.continuousEvents || (presenter.continuousEvents &amp;&amp; presenter.continuousEventsSteps == "Smooth")){&#13;
                    $(imageElement).css({&#13;
                        top: (mousePositions.y + relativeDistance.vertical) + 'px'&#13;
                    });&#13;
                }&#13;
&#13;
                if (presenter.configuration.newStep !== presenter.configuration.currentStep &amp;&amp; presenter.continuousEvents) {&#13;
                    presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
                    presenter.configuration.currentStep = presenter.configuration.newStep;&#13;
                    presenter.triggerOnStepChangeUserEvent();&#13;
&#13;
                    presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
&#13;
                    if(presenter.continuousEventsSteps == "Stick" || presenter.continuousEventsSteps == undefined || presenter.continuousEventsSteps == ""){&#13;
                        presenter.moveToStep(imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            //presenter.configuration.newStep = presenter.whichStepZone(mousePositions, presenter.configuration);&#13;
        }&#13;
        eventData.preventDefault();&#13;
    }&#13;
&#13;
    function touchMoveCallback (event) {&#13;
        event.stopPropagation();&#13;
&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        var touch = event.touches[0] || touchPoints[0];&#13;
        mouseMoveCallback(touch);&#13;
    }&#13;
&#13;
    function handleMouseDrag(addonContainer) {&#13;
        var icplayer = $('#_icplayer');&#13;
        presenter.isWindowsMobile = false;&#13;
&#13;
        if (window.navigator.msPointerEnabled &amp;&amp; MobileUtils.isMobileUserAgent(window.navigator.userAgent)) {&#13;
            presenter.isWindowsMobile = true;&#13;
        }&#13;
&#13;
        var imageElement = $(addonContainer.find(CLASSES_NAMES.ELEMENT_IMAGE.SELECTOR))[0];&#13;
&#13;
        $(imageElement).hover(&#13;
            function() {&#13;
                $(this).toggleClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_HOVER, !presenter.mouseData.isMouseDown);&#13;
            },&#13;
            function() {&#13;
                $(this).toggleClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_HOVER, presenter.mouseData.isMouseDown);&#13;
            }&#13;
        );&#13;
&#13;
        if (presenter.isWindowsMobile) {&#13;
            imageElement.addEventListener('MSPointerDown', touchStartCallback, false);&#13;
            imageElement.addEventListener('MSPointerMove', touchMoveCallback, false);&#13;
        } else {&#13;
            imageElement.ontouchstart = touchStartCallback;&#13;
            imageElement.ontouchmove = touchMoveCallback;&#13;
        }&#13;
&#13;
        $(imageElement).mousedown(mouseDownCallback);&#13;
        icplayer.mousemove(mouseMoveCallback);&#13;
        icplayer.mouseup(presenter.mouseUpEventDispatcher);&#13;
        imageElement.ontouchend = touchEndCallback;&#13;
&#13;
        $(addonContainer).click(mouseClickCallback);&#13;
&#13;
&#13;
        $(imageElement).hover(function() {&#13;
            $(presenter.imageElement).addClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_HOVER);&#13;
        }, function() {&#13;
            $(presenter.imageElement).removeClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_HOVER);&#13;
        });&#13;
    }&#13;
&#13;
    function getMousePositions(eventData) {&#13;
        var popupTop = 0,&#13;
            popupLeft = 0;&#13;
&#13;
        var $popup = presenter.$view.parent('.ic_popup_page').offset();&#13;
        if ($popup !== null) {&#13;
            var popupTop = $popup.top;&#13;
            var popupLeft = $popup.left;&#13;
        }&#13;
&#13;
        setAddonPosition();&#13;
&#13;
        return {&#13;
            x:(eventData.pageX - presenter.configuration.offset.left) - popupLeft,&#13;
            y:(eventData.pageY - presenter.configuration.offset.top) - popupTop&#13;
        };&#13;
    }&#13;
&#13;
    function setAddonPosition() {&#13;
        presenter.configuration.offset = {};&#13;
        presenter.configuration.offset.left = presenter.$addonContainer.offset().left;&#13;
        presenter.configuration.offset.top = presenter.$addonContainer.offset().top;&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        presenter.imageLoadedDeferred = new jQuery.Deferred();&#13;
        presenter.imageLoaded = presenter.imageLoadedDeferred.promise();&#13;
&#13;
        presenter.addonID = model.ID;&#13;
        presenter.$view = $(view);&#13;
        onStepChangeEvent = model.onStepChange;&#13;
        presenter.continuousEvents = ModelValidationUtils.validateBoolean(model["Continuous events"]);&#13;
        presenter.continuousEventsSteps = model["Continuous events steps"];&#13;
&#13;
        presenter.$addonContainer = presenter.$view.find(CLASSES_NAMES.WRAPPER.SELECTOR);&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, presenter.$addonContainer);&#13;
&#13;
        presenter.configuration = presenter.convertModel(model);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        setAddonPosition();&#13;
&#13;
        presenter.configuration.currentStep = presenter.configuration.initialStep;&#13;
        presenter.configuration.newStep = presenter.configuration.initialStep;&#13;
        presenter.configuration.snapPoints = [];&#13;
&#13;
        loadImageElement(preview);&#13;
&#13;
        presenter.$view.disableSelection();&#13;
    }&#13;
&#13;
    function drawBurret() {&#13;
        if (!presenter.configuration.stepwise) return;&#13;
&#13;
        var element = presenter.$view.find('.slider-element-image:first')[0];&#13;
        var xPosition = $(presenter.$view).width() / 2;&#13;
        var yPosition = $(presenter.$view).height() / 2;&#13;
        var verticalLineLength = $(presenter.$view).height() / 4;&#13;
        var horizontalLineLength = $(presenter.$view).width() / 4;&#13;
&#13;
        var canvas = document.createElement('canvas');&#13;
        $(canvas).css({&#13;
            position : 'absolute',&#13;
            top : 0,&#13;
            left : 0&#13;
        });&#13;
        $(canvas).attr('width', $(presenter.$view).width());&#13;
        $(canvas).attr('height', $(presenter.$view).height());&#13;
        $(presenter.$view).append(canvas);&#13;
&#13;
        if (presenter.configuration.orientation === presenter.ORIENTATION.LANDSCAPE) {&#13;
            $(canvas).drawLine({&#13;
                strokeStyle:"#000",&#13;
                strokeWidth:2,&#13;
                strokeCap:"round",&#13;
                x1:presenter.configuration.snapPoints[0], y1:yPosition,&#13;
                x2:presenter.configuration.snapPoints[presenter.configuration.stepsCount - 1], y2:yPosition&#13;
            });&#13;
        } else {&#13;
            $(canvas).drawLine({&#13;
                strokeStyle:"#000",&#13;
                strokeWidth:2,&#13;
                strokeCap:"round",&#13;
                x1:xPosition, y1:presenter.configuration.snapPoints[0],&#13;
                x2:xPosition, y2:presenter.configuration.snapPoints[presenter.configuration.stepsCount - 1]&#13;
            });&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.stepsCount; i++) {&#13;
            if (presenter.configuration.orientation === presenter.ORIENTATION.LANDSCAPE) {&#13;
                $(canvas).drawLine({&#13;
                    strokeStyle:"#000",&#13;
                    strokeWidth:2,&#13;
                    strokeCap:"round",&#13;
                    x1:presenter.configuration.snapPoints[i], y1:yPosition - verticalLineLength / 2,&#13;
                    x2:presenter.configuration.snapPoints[i], y2:yPosition + verticalLineLength / 2&#13;
                });&#13;
            } else {&#13;
                $(canvas).drawLine({&#13;
                    strokeStyle:"#000",&#13;
                    strokeWidth:2,&#13;
                    strokeCap:"round",&#13;
                    x1:xPosition - horizontalLineLength / 2, y1:presenter.configuration.snapPoints[i],&#13;
                    x2:xPosition + horizontalLineLength / 2, y2:presenter.configuration.snapPoints[i]&#13;
                });&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.triggerOnStepChangeUserEvent = function () {&#13;
        if (!onStepChangeEvent) return;&#13;
&#13;
        playerController.getCommands().executeEventCode(onStepChangeEvent);&#13;
    };&#13;
&#13;
    presenter.getContainerAndImageElements = function () {&#13;
        var addonContainer = presenter.$view.find(CLASSES_NAMES.WRAPPER.SELECTOR);&#13;
        var imageElement = addonContainer.find(CLASSES_NAMES.ELEMENT_IMAGE.SELECTOR)[0];&#13;
&#13;
        return {&#13;
            addonContainer: addonContainer,&#13;
            imageElement: imageElement&#13;
        };&#13;
    };&#13;
&#13;
    presenter.moveToInitialStepCommand = function (params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 0);&#13;
&#13;
        if(presenter.configuration.currentStep !== presenter.configuration.initialStep) {&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = presenter.configuration.initialStep;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToInitialStep = function (triggerEvent) {&#13;
        presenter.moveToInitialStepCommand([triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.moveToCommand = function (params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var step = parseInt(params[0], 10);&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 1);&#13;
&#13;
        if (!isNaN(step) &amp;&amp; step &gt;= 1 &amp;&amp; step &lt;= presenter.configuration.stepsCount) {&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = step;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveTo = function (step, triggerEvent) {&#13;
        presenter.moveToCommand([step, triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.moveToLastCommand = function(params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 0);&#13;
&#13;
        if (presenter.configuration.currentStep !== presenter.configuration.stepsCount) {&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = presenter.configuration.stepsCount;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToLast = function(triggerEvent) {&#13;
        presenter.moveToLastCommand([triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.moveToFirstCommand = function (params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 0);&#13;
&#13;
        if (presenter.configuration.currentStep !== 1) {&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = 1;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFirst = function (triggerEvent) {&#13;
        presenter.moveToFirstCommand([triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.nextStepCommand = function (params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 0);&#13;
&#13;
        if (presenter.configuration.currentStep + 1 &lt;= presenter.configuration.stepsCount) {&#13;
            if (triggerEvent)&#13;
                presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep++;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent)&#13;
                presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.nextStep = function (triggerEvent) {&#13;
        presenter.nextStepCommand([triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.previousStepCommand = function (params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 0);&#13;
&#13;
        if (presenter.configuration.currentStep - 1 &gt;= 1) {&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep--;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.previousStep = function (triggerEvent) {&#13;
        presenter.previousStepCommand([triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.getCurrentStep = function () {&#13;
        return presenter.configuration.currentStep.toString();&#13;
    };&#13;
&#13;
    presenter.parseAdditionalTriggerEventParam = function (params, numberOfDefaultParams) {&#13;
        if (!params[numberOfDefaultParams]) return true;&#13;
&#13;
        return params[numberOfDefaultParams].toLowerCase() != 'false';&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.shouldBlockInErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'moveTo': presenter.moveToCommand,&#13;
            "moveToLast": presenter.moveToLastCommand,&#13;
            'moveToFirst': presenter.moveToFirst,&#13;
            'moveToInitialStep' : presenter.moveToInitialStepCommand,&#13;
            'nextStep': presenter.nextStep,&#13;
            'previousStep': presenter.previousStep,&#13;
            'getCurrentStep': presenter.getCurrentStep,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.convertStepsCount = function (stepsCount) {&#13;
        var convertedStepsCount = ModelValidationUtils.validatePositiveInteger(stepsCount);&#13;
&#13;
        if (!convertedStepsCount.isValid) {&#13;
            return { isError: true, errorCode: 'SC_01' };&#13;
        }&#13;
&#13;
        if (convertedStepsCount.value &lt; 2) {&#13;
            return { isError: true, errorCode: 'SC_02' };&#13;
        }&#13;
&#13;
        return { isError: false, stepsCount: convertedStepsCount.value };&#13;
    };&#13;
&#13;
&#13;
    presenter.convertModel = function(model) {&#13;
        var orientation = model.Orientation === 'Portrait' ? presenter.ORIENTATION.PORTRAIT : presenter.ORIENTATION.LANDSCAPE;&#13;
        var stepwise = ModelValidationUtils.validateBoolean(model.Stepwise);&#13;
        var stepsCount = 0;&#13;
        var initialStep = 1;&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(model.ImageElement)) {&#13;
            return { isError : true, errorCode : 'ES_01' };&#13;
        }&#13;
&#13;
        if (stepwise) {&#13;
            var convertedStepsCount = presenter.convertStepsCount(model.StepsCount);&#13;
            if (convertedStepsCount.isError) {&#13;
                return { isError: true, errorCode: convertedStepsCount.errorCode };&#13;
            }&#13;
&#13;
            stepsCount = convertedStepsCount.stepsCount;&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(model.InitialStep)) {&#13;
                initialStep = 1;&#13;
            } else {&#13;
                var convertedInitialStep = ModelValidationUtils.validateIntegerInRange(model.InitialStep, stepsCount, 1);&#13;
                if (!convertedInitialStep.isValid) {&#13;
                    return { isError: true, errorCode: 'IS_01' };&#13;
                }&#13;
&#13;
                initialStep = convertedInitialStep.value;&#13;
            }&#13;
        }&#13;
&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            imageSrc : model.ImageElement,&#13;
            orientation : orientation,&#13;
            stepwise : stepwise,&#13;
            stepsCount : stepsCount,&#13;
            initialStep : initialStep,&#13;
            isVisibleByDefault: isVisible,&#13;
            isVisible: isVisible,&#13;
            isError : false,&#13;
            isErrorMode: false,&#13;
            shouldBlockInErrorMode: ModelValidationUtils.validateBoolean(model["Block in error checking mode"])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.closestSmooth = 0;&#13;
    presenter.whichStepZoneSmooth = function (mousePositions, globalData) {&#13;
        var imageCenter = globalData.orientation === presenter.ORIENTATION.LANDSCAPE ? parseInt($(presenter.imageElement).css('left'), 10) +&#13;
                ($(presenter.imageElement).width()/2) : parseInt($(presenter.imageElement).css('top'), 10) + ($(presenter.imageElement).height()/2),&#13;
            margin = parseInt((globalData.snapPoints[1] - globalData.snapPoints[0]) / 5, 10);&#13;
&#13;
        for (var j = 0; j &lt; globalData.snapPoints.length; j++) {&#13;
            var pointBefore = parseInt(globalData.snapPoints[j] - margin, 10);&#13;
            var pointAfter = parseInt(globalData.snapPoints[j] + margin, 10);&#13;
            if(imageCenter &gt; pointBefore &amp;&amp; imageCenter &lt; pointAfter){&#13;
                if(presenter.closestSmooth != j){&#13;
                    presenter.closestSmooth = j;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return presenter.closestSmooth + 1;&#13;
    };&#13;
&#13;
    presenter.whichStepZone = function(mousePositions, globalData) {&#13;
        var snapPointDistance = [];&#13;
&#13;
        var mousePosition = globalData.orientation === presenter.ORIENTATION.LANDSCAPE ? mousePositions.x : mousePositions.y;&#13;
&#13;
        for (var i = 0; i &lt; globalData.snapPoints.length; i++) {&#13;
            snapPointDistance.push({&#13;
                distance : Math.abs(mousePosition - globalData.snapPoints[i]),&#13;
                snapPoint : i&#13;
            });&#13;
        }&#13;
&#13;
        var closest = 0;&#13;
        for (var j = 1; j &lt; globalData.snapPoints.length; j++) {&#13;
            if (snapPointDistance[closest].distance &gt; snapPointDistance[j].distance) {&#13;
                closest = j;&#13;
            }&#13;
        }&#13;
&#13;
        return closest + 1;&#13;
    };&#13;
&#13;
    presenter.calculateRelativeDistanceX = function(imageElement, container, eventData, pastEventData, imageElementData) {&#13;
        var left = parseInt($(imageElement).css('left'), 10);&#13;
        var horizontal = Math.round(eventData.pageX - pastEventData.oldPosition.x);&#13;
&#13;
        var isIE = /*@cc_on!@*/false || !!document.documentMode;&#13;
&#13;
        if(isIE){&#13;
            if(horizontal &gt; 8 &amp;&amp; window.screen.deviceXDPI&gt;96){&#13;
                horizontal = horizontal/1.5;&#13;
            }&#13;
        }&#13;
&#13;
        if (left + horizontal &lt; 0 || left + horizontal &gt; imageElementData.maxLeft) {&#13;
            horizontal = 0;&#13;
        }&#13;
&#13;
        return { left: left, horizontal: horizontal };&#13;
    };&#13;
&#13;
    presenter.calculateRelativeDistanceY = function(imageElement, container, eventData, pastEventData, imageElementData) {&#13;
        var top = parseInt($(imageElement).css('top'), 10);&#13;
        var vertical = eventData.pageY - pastEventData.oldPosition.y;&#13;
&#13;
        if (top + vertical &lt; 0 || top + vertical &gt; imageElementData.maxTop) {&#13;
            vertical = 0;&#13;
        }&#13;
&#13;
        return { top: top, vertical: vertical };&#13;
    };&#13;
&#13;
    presenter.createEventData = function (step, moveIn) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : "" + step,&#13;
            value : moveIn ? "1" : "0",&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerStepChangeEvent = function(step, moveIn) {&#13;
        var eventData = this.createEventData(step, moveIn);&#13;
        if (playerController != null) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addDisabledClass = function () {&#13;
        presenter.getContainerAndImageElements().addonContainer.addClass('disabled');&#13;
    };&#13;
&#13;
    presenter.removeDisabledClass = function () {&#13;
        presenter.getContainerAndImageElements().addonContainer.removeClass('disabled');&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.configuration.isErrorMode = false;&#13;
        presenter.removeDisabledClass();&#13;
        var elements = this.getContainerAndImageElements();&#13;
        presenter.configuration.currentStep = presenter.configuration.initialStep;&#13;
        presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        var state = {&#13;
            'currentStep' : presenter.configuration.currentStep,&#13;
            'isVisible' : presenter.configuration.isVisible&#13;
        };&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        presenter.configuration.currentStep = state['currentStep'];&#13;
        presenter.configuration.isVisible = state['isVisible'];&#13;
&#13;
        $.when(presenter.imageLoaded).then(presenter.loadImagesCallback);&#13;
    };&#13;
&#13;
    presenter.loadImagesCallback = function() {&#13;
        var elements = presenter.getContainerAndImageElements();&#13;
&#13;
        presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        presenter.configuration.isErrorMode = true;&#13;
&#13;
        if (presenter.configuration.shouldBlockInErrorMode) {&#13;
            presenter.addDisabledClass();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.configuration.isErrorMode = false;&#13;
        presenter.removeDisabledClass();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Slideshow" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Audio" nameLabel="Slideshow_property_audio" type="list">
			<property name="MP3" nameLabel="Slideshow_property_mp3" type="audio"/>
			<property name="OGG" nameLabel="Slideshow_property_ogg" type="audio"/>
		</property>
		<property name="Slides" nameLabel="Slideshow_property_slides" type="list">
			<property name="Image" nameLabel="Slideshow_property_image" type="image"/>
			<property name="Start" nameLabel="Slideshow_property_start" type="string"/>
		</property>
		<property name="Texts" nameLabel="Slideshow_property_texts" type="list">
			<property isLocalized="true" name="Text" nameLabel="Slideshow_property_text" type="string"/>
			<property name="Top" nameLabel="Slideshow_property_top" type="string"/>
			<property name="Left" nameLabel="Slideshow_property_left" type="string"/>
			<property name="Start" nameLabel="Slideshow_property_start" type="string"/>
			<property name="End" nameLabel="Slideshow_property_end" type="string"/>
		</property>
		<property name="Slide animation" nameLabel="Slideshow_property_slide_animation" type="boolean"/>
		<property name="Text animation" nameLabel="Slideshow_property_text_animation" type="boolean"/>
		<property name="Hide progressbar" nameLabel="Slideshow_property_hide_progressbar" type="boolean"/>
		<property name="Show slide" nameLabel="Slideshow_property_show_slide" type="string"/>
		<property name="Group next and previous buttons" nameLabel="Slideshow_property_group_next_and_previous_buttons" type="boolean"/>
		<property name="Narration" nameLabel="Slideshow_property_narration" type="narration"/>
	</model>
<css>.slideshow-container {&#13;
    border: 1px solid black;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    position: relative;&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.slideshow-container-slide {&#13;
    border: 0 solid black;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    display: none;&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    background-size: 100% 100%;&#13;
}&#13;
&#13;
.slideshow-container-text {&#13;
    border: 0 solid black;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    opacity: 0;&#13;
    position: absolute;&#13;
    z-index: 100;&#13;
    color: white;&#13;
}&#13;
&#13;
.slideshow-controls-container {&#13;
    height: 50px;&#13;
    border: 1px solid black;&#13;
    margin: 0;&#13;
    padding-left: 5px;&#13;
    padding-right: 5px;&#13;
}&#13;
&#13;
.slideshow-controls-timer,&#13;
.slideshow-controls-play,&#13;
.slideshow-controls-play-mouse-hover,&#13;
.slideshow-controls-play-pause,&#13;
.slideshow-controls-play-pause-mouse-hover,&#13;
.slideshow-controls-stop,&#13;
.slideshow-controls-stop-mouse-hover,&#13;
.slideshow-controls-progressbar,&#13;
.slideshow-controls-previous,&#13;
.slideshow-controls-previous-mouse-hover,&#13;
.slideshow-controls-previous-inactive,&#13;
.slideshow-controls-previous-inactive-mouse-hover,&#13;
.slideshow-controls-next,&#13;
.slideshow-controls-next-mouse-hover,&#13;
.slideshow-controls-next-inactive,&#13;
.slideshow-controls-next-inactive-mouse-hover {&#13;
    height: 40px;&#13;
    line-height: 40px;&#13;
    border: 0 solid black;&#13;
    margin:5px;&#13;
    float: left;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.slideshow-controls-next-inactive,&#13;
.slideshow-controls-next-inactive-mouse-hover,&#13;
.slideshow-controls-previous-inactive,&#13;
.slideshow-controls-previous-inactive-mouse-hover {&#13;
    cursor: default;&#13;
    color: #C8C4C4;&#13;
}&#13;
&#13;
.slideshow-controls-timer {&#13;
    cursor: default;&#13;
}&#13;
&#13;
.slideshow-controls-timer-time,&#13;
.slideshow-controls-timer-duration,&#13;
.slideshow-controls-timer-separator {&#13;
    display: inline-block;&#13;
    float:left;&#13;
    max-height: 40px;&#13;
}&#13;
&#13;
.slideshow-controls-timer-separator {&#13;
    margin:0 5px;&#13;
}&#13;
&#13;
.slideshow-controls-progressbar {&#13;
    width: auto;&#13;
    cursor: default;&#13;
    position: relative;&#13;
}&#13;
&#13;
.slideshow-controls-progressbar-slider {&#13;
    z-index: 100;&#13;
    width: 10px;&#13;
    height: 10px;&#13;
    border-radius: 4px;&#13;
    -webkit-border-radius: 4px;&#13;
    -moz-border-radius: 4px;&#13;
    margin-top: 14px;&#13;
    border: 2px solid black;&#13;
    background-color: white;&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
}&#13;
&#13;
.slideshow-controls-progressbar-line {&#13;
    height: 2px;&#13;
    border: 1px solid black;&#13;
    background-color: black;&#13;
    margin-left: 1px;&#13;
    margin-right: 1px;&#13;
    margin-top: 19px;&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
}&#13;
&#13;
.slideshow-loading-image,&#13;
.slideshow-loading-text {&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    display: none;&#13;
    z-index: 100;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.slideshow-loading-image {&#13;
    border: 0 solid black;&#13;
    width: 80px;&#13;
    height: 80px;&#13;
}&#13;
&#13;
.slideshow-loading-text {&#13;
    width: 250px;&#13;
    height: 40px;&#13;
    line-height: 40px;&#13;
    text-align: center;&#13;
    border-bottom: 0 solid black;&#13;
    border-left: 1px solid black;&#13;
    border-right: 1px solid black;&#13;
    border-top: 1px solid black;&#13;
    background-color: white;&#13;
    border-radius: 5px 5px 0 0;&#13;
}&#13;
</css><view>&lt;div class="slideshow-container"&gt;&lt;/div&gt;&#13;
&lt;div class="slideshow-controls-container"&gt;&#13;
    &lt;div class="slideshow-controls-play"&gt;Play&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-stop"&gt;Stop&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-timer"&gt;&#13;
        &lt;span class="slideshow-controls-timer-time"&gt;00:00&lt;/span&gt;&#13;
        &lt;span class="slideshow-controls-timer-separator"&gt;/&lt;/span&gt;&#13;
        &lt;span class="slideshow-controls-timer-duration"&gt;--:--&lt;/span&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-progressbar"&gt;&#13;
        &lt;div class="slideshow-controls-progressbar-line"&gt;&lt;/div&gt;&#13;
        &lt;div class="slideshow-controls-progressbar-slider"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-previous"&gt;Previous&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-next"&gt;Next&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="slideshow-loading-image"/&gt;&#13;
&lt;div class="slideshow-loading-text"&gt;Loading...&lt;/div&gt;&#13;
</view><preview>&lt;div class="slideshow-container"&gt;&lt;/div&gt;&#13;
&lt;div class="slideshow-controls-container"&gt;&#13;
    &lt;div class="slideshow-controls-play"&gt;Play&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-stop"&gt;Stop&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-timer"&gt;&#13;
        &lt;span class="slideshow-controls-timer-time"&gt;00:00&lt;/span&gt;&#13;
        &lt;span class="slideshow-controls-timer-separator"&gt;/&lt;/span&gt;&#13;
        &lt;span class="slideshow-controls-timer-duration"&gt;12:34&lt;/span&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-progressbar"&gt;&#13;
        &lt;div class="slideshow-controls-progressbar-line"&gt;&lt;/div&gt;&#13;
        &lt;div class="slideshow-controls-progressbar-slider"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-previous"&gt;Previous&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-next"&gt;Next&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="/media/images/loading.gif" alt="Loading..." class="slideshow-loading-image"/&gt;&#13;
&lt;div class="slideshow-loading-text"&gt;Loading...&lt;/div&gt;&#13;
</preview><presenter>function AddonSlideshow_create() {&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.isPlaying = false;&#13;
&#13;
    var DOMElements = {};&#13;
    presenter.configuration = {};&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'A_01': "At least one audio format file must be uploaded!",&#13;
        'A_02': "Your browser does not support HTML5 audio or none of Addon media types!",&#13;
        'A_03': "No audio media was loaded!",&#13;
        'S_01': "Each slide must have Image property set properly!",&#13;
        'S_02': "Slide start time in not in proper format ('MM:SS')!",&#13;
        'S_03': "Slide start times should be consecutive!",&#13;
        'T_01': "Text value cannot be empty!",&#13;
        'T_02': "Text start time in not in proper format ('MM:SS')!",&#13;
        'T_03': "Text end time in not in proper format ('MM:SS')!",&#13;
        'T_04': "Text end time must be higher than start time!",&#13;
        'T_05': "Top position value is invalid!",&#13;
        'T_06': "Left position value is invalid!",&#13;
        'T_07': "If more than one text is set, each one of them have to be set properly!"&#13;
    };&#13;
&#13;
    presenter.TIME_LINE_TASK = {&#13;
        TYPE:{&#13;
            SLIDE:0,&#13;
            TEXT:1&#13;
        },&#13;
        TASK:{&#13;
            SHOW:2,&#13;
            HIDE:3&#13;
        }&#13;
    };&#13;
&#13;
    presenter.AUDIO_STATE = {&#13;
        PLAY: 0,&#13;
        PAUSE: 1,&#13;
        STOP: 2,&#13;
        NONE: 3,&#13;
        STOP_FROM_NAVIGATION: 4&#13;
    };&#13;
&#13;
    presenter.checkBackgroundImageOfButtonElements = function(buttons) {&#13;
        var pattern = /url(.)/;&#13;
        $.each(buttons, function() {&#13;
            var background = $(this).css("background-image");&#13;
            var isBackgroundSet = pattern.test(background);&#13;
            if(isBackgroundSet) {&#13;
                $(this).html("");&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    function setElementsDimensions(width, height) {&#13;
        var container = DOMElements.viewContainer.find('.slideshow-container:first')[0];&#13;
        var containerDimensions = DOMOperationsUtils.getOuterDimensions(container);&#13;
        var containerDistances = DOMOperationsUtils.calculateOuterDistances(containerDimensions);&#13;
&#13;
        var controlsContainer = DOMElements.viewContainer.find('.slideshow-controls-container:first')[0];&#13;
        var controlsContainerDimensions = DOMOperationsUtils.getOuterDimensions(controlsContainer);&#13;
        var controlsContainerDistances = DOMOperationsUtils.calculateOuterDistances(controlsContainerDimensions);&#13;
&#13;
        presenter.configuration.slideDimensions = {&#13;
            width:width - containerDistances.horizontal,&#13;
            height:height - $(controlsContainer).height() - containerDistances.vertical - controlsContainerDistances.vertical&#13;
        };&#13;
&#13;
        $(controlsContainer).css({&#13;
            width:width - controlsContainerDistances.horizontal&#13;
        });&#13;
&#13;
        $(container).css({&#13;
            width:presenter.configuration.slideDimensions.width,&#13;
            height:presenter.configuration.slideDimensions.height&#13;
        });&#13;
    }&#13;
&#13;
    function adjustProgressBar() {&#13;
        var progressbar = $(DOMElements.controls.progressbar);&#13;
&#13;
        if (presenter.configuration.hideProgressbar) {&#13;
            $(progressbar).hide();&#13;
&#13;
            return;&#13;
        }&#13;
&#13;
        var progressbarDimensions = DOMOperationsUtils.getOuterDimensions(progressbar);&#13;
        var progressbarDistances = DOMOperationsUtils.calculateOuterDistances(progressbarDimensions);&#13;
&#13;
        var line = $(DOMElements.controls.line);&#13;
        var lineDimensions = DOMOperationsUtils.getOuterDimensions(line);&#13;
        var lineDistances = DOMOperationsUtils.calculateOuterDistances(lineDimensions);&#13;
&#13;
        var controlsSpareWidth = $(DOMElements.controls.container).width();&#13;
        controlsSpareWidth -= $(DOMElements.controls.timer).outerWidth(true);&#13;
        controlsSpareWidth -= getControlButtonsDOMElements().play.outerWidth(true);&#13;
        controlsSpareWidth -= getControlButtonsDOMElements().stop.outerWidth(true);&#13;
        if (presenter.configuration.groupNextAndPrevious) {&#13;
            controlsSpareWidth -= $(getControlButtonsDOMElements().previous).parent().outerWidth(true);&#13;
        } else {&#13;
            controlsSpareWidth -= getControlButtonsDOMElements().previous.outerWidth(true);&#13;
            controlsSpareWidth -= getControlButtonsDOMElements().next.outerWidth(true);&#13;
        }&#13;
        controlsSpareWidth -= progressbarDistances.horizontal;&#13;
&#13;
        var sliderOuterWidth = $(DOMElements.controls.slider).outerWidth(true);&#13;
        presenter.configuration.sliderSlideAreaLength = controlsSpareWidth - sliderOuterWidth;&#13;
&#13;
        $(progressbar).css('width', controlsSpareWidth + 'px');&#13;
        $(line).css({&#13;
            width:(controlsSpareWidth - lineDistances.horizontal) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function updateProgressBar(time) {&#13;
        if (time === undefined) {&#13;
            time = presenter.configuration.buzzAudio.getTime();&#13;
        }&#13;
        var percentage = time / presenter.configuration.buzzAudio.getDuration();&#13;
        $(DOMElements.controls.slider).css('left', (percentage * presenter.configuration.sliderSlideAreaLength) + 'px');&#13;
    }&#13;
&#13;
    function loadAudio(isPreview) {&#13;
        if (!buzz.isSupported()) return { isError:true, errorCode:"A_01" };&#13;
&#13;
        if (!buzz.isMP3Supported() &amp;&amp; !buzz.isOGGSupported()) {&#13;
            return { isError:true, errorCode:"A_02" };&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            showLoadingScreen("Loading audio file...");&#13;
        }&#13;
&#13;
        buzz.defaults.autoplay = false;&#13;
        buzz.defaults.loop = false;&#13;
&#13;
        if (buzz.isOGGSupported()) {&#13;
            presenter.configuration.buzzAudio = new buzz.sound([&#13;
                presenter.configuration.audio.OGG&#13;
            ]);&#13;
        }&#13;
&#13;
        if (buzz.isMP3Supported()) {&#13;
            presenter.configuration.buzzAudio = new buzz.sound([&#13;
                presenter.configuration.audio.MP3&#13;
            ]);&#13;
        }&#13;
&#13;
        if (presenter.configuration.audio.MP3 === "" || presenter.configuration.audio.OGG === "")&#13;
            return { isError: true, errorCode: "A_03" };&#13;
&#13;
        presenter.configuration.buzzAudio.bind("error", function () {&#13;
            var errorMessage = "Error occurred while loading/playing audio.";&#13;
&#13;
            if (this.getErrorMessage()) {&#13;
                errorMessage += " Reason: " + this.getErrorMessage();&#13;
            }&#13;
&#13;
            DOMElements.viewContainer.html(errorMessage + " Please try again.");&#13;
        });&#13;
&#13;
        presenter.configuration.buzzAudio.bind("loadedmetadata", function () {&#13;
            var duration = buzz.toTimer(presenter.configuration.buzzAudio.getDuration(), false);&#13;
            presenter.configuration.audioDurationSet = presenter.configuration.buzzAudio.getDuration() !== '--';&#13;
            $(DOMElements.controls.duration).text(duration);&#13;
            presenter.configuration.audioLoadComplete = true;&#13;
        });&#13;
&#13;
        presenter.configuration.currentTime = 0;&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.NONE;&#13;
&#13;
        return {&#13;
            isError:false&#13;
        };&#13;
    }&#13;
&#13;
    function executeTasks(time, withoutAnimation) {&#13;
        var isTextAnimation = presenter.configuration.textAnimation &amp;&amp; !withoutAnimation;&#13;
        var isSlideAnimation = presenter.configuration.slideAnimation &amp;&amp; !withoutAnimation;&#13;
&#13;
        if (presenter.configuration.timeLine[time]) {&#13;
            for (var i = 0; i &lt; presenter.configuration.timeLine[time].length; i++) {&#13;
                var type = presenter.configuration.timeLine[time][i].type;&#13;
                var index = presenter.configuration.timeLine[time][i].index;&#13;
&#13;
                switch (type) {&#13;
                    case presenter.TIME_LINE_TASK.TYPE.SLIDE:&#13;
                        var showIndex = time !== 0 ? index : 0;&#13;
&#13;
                        for (var j = 0; j &lt; presenter.configuration.slides.domReferences.length; j++) {&#13;
                            var $slideElement = $(presenter.configuration.slides.domReferences[j]);&#13;
                            if (j === showIndex) {&#13;
                                if (isSlideAnimation) {&#13;
                                    $slideElement.show("fade", {}, 2000);&#13;
                                } else {&#13;
                                    $slideElement.show();&#13;
                                }&#13;
                            } else {&#13;
                                if (isSlideAnimation) {&#13;
                                    $slideElement.hide("fade", {}, 2000);&#13;
                                } else {&#13;
                                    $slideElement.hide();&#13;
                                }&#13;
                            }&#13;
                        }&#13;
                        setButtonActive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
                        setButtonActive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
&#13;
                        if (showIndex === 0) { // first&#13;
                            setButtonInactive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
                        } else if (showIndex === presenter.configuration.slides.count-1) { // last&#13;
                            setButtonInactive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
                        }&#13;
&#13;
                        break;&#13;
                    case presenter.TIME_LINE_TASK.TYPE.TEXT:&#13;
                        var show = presenter.configuration.timeLine[time][i].task === presenter.TIME_LINE_TASK.TASK.SHOW,&#13;
                            $textElement = $(presenter.configuration.texts.domReferences[index]);&#13;
                        if (show) {&#13;
                            if (isTextAnimation) {&#13;
                                $textElement.css({'opacity': '1'}).effect('slide', {}, 500);&#13;
                            } else {&#13;
                                $textElement.css('opacity', '1');&#13;
                            }&#13;
                        } else {&#13;
                            if (isTextAnimation) {&#13;
                                $textElement.animate({'opacity': '0'}, {}, 500);&#13;
                            } else {&#13;
                                $textElement.css('opacity', '0');&#13;
                            }&#13;
                        }&#13;
&#13;
                        break;&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.pauseAudioResource = function () {&#13;
        presenter.isPlaying = false;&#13;
        if (presenter.configuration.audio.wasPlayed) {&#13;
            presenter.configuration.buzzAudio.pause();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playAudioResource = function () {&#13;
        presenter.isPlaying = true;&#13;
        presenter.configuration.audio.wasPlayed = true;&#13;
        presenter.configuration.buzzAudio.play();&#13;
    };&#13;
&#13;
    function timeUpdateCallback() {&#13;
        if (presenter.configuration.audioState !== presenter.AUDIO_STATE.STOP) {&#13;
            updateProgressBar();&#13;
        }&#13;
&#13;
        var parsedTime = parseInt(buzz.fromTimer(presenter.configuration.buzzAudio.getTime()), 10);&#13;
        var timeChanged = false;&#13;
&#13;
        if (presenter.configuration.currentTime !== parsedTime) {&#13;
            timeChanged = true;&#13;
            var time = buzz.toTimer(presenter.configuration.buzzAudio.getTime(), false);&#13;
            presenter.configuration.currentTime = parsedTime;&#13;
            $(DOMElements.controls.currentTime).text(time);&#13;
        }&#13;
&#13;
        if (presenter.configuration.buzzAudio.getTime() + 0.3 &gt; presenter.configuration.buzzAudio.getDuration()) {&#13;
            $(DOMElements.controls.currentTime).text('00:00');&#13;
            changeButtonToPlay();&#13;
            updateProgressBar(0);&#13;
            presenter.configuration.currentTime = 0;&#13;
            presenter.pauseAudioResource();&#13;
            presenter.configuration.audioState = presenter.AUDIO_STATE.STOP;&#13;
            hideAllTexts();&#13;
            // This action will trigger time update callback, but it's the only way to assure that pressing play after end/stop will trigger playing audio&#13;
            executeTasks(0, true);&#13;
            return;&#13;
        }&#13;
&#13;
        if (!timeChanged) {&#13;
            return; // We want to execute tasks with an accuracy of full seconds only&#13;
        }&#13;
&#13;
        executeTasks(presenter.configuration.currentTime, false);&#13;
    }&#13;
&#13;
    function getContainerPadding() {&#13;
        var topOffset = parseInt(DOMElements.container.css('paddingTop'), 10);&#13;
        var bottomOffset = parseInt(DOMElements.container.css('paddingBottom'), 10);&#13;
        var leftOffset = parseInt(DOMElements.container.css('paddingLeft'), 10);&#13;
        var rightOffset = parseInt(DOMElements.container.css('paddingRight'), 10);&#13;
&#13;
        return { topOffset:topOffset, bottomOffset:bottomOffset, leftOffset:leftOffset, rightOffset:rightOffset };&#13;
    }&#13;
&#13;
    function loadSlides(width, height, isPreview) {&#13;
        showLoadingScreen("Loading slides...");&#13;
        var containerPadding = getContainerPadding();&#13;
&#13;
        var images = [];&#13;
        for (var i = 0; i &lt; presenter.configuration.slides.count; i++) {&#13;
            images.push(presenter.configuration.slides.content[i].image);&#13;
        }&#13;
&#13;
        $.imgpreload(images, {&#13;
            each:function () {&#13;
                var index = -1;&#13;
&#13;
                for (var j = 0; j &lt; presenter.configuration.slides.count; j++) {&#13;
                    if (presenter.configuration.slides.content[j].image === $(this).attr('src')) {&#13;
                        index = j;&#13;
                        break;&#13;
                    }&#13;
                }&#13;
&#13;
                var slide = document.createElement('div');&#13;
&#13;
                $(slide).addClass('slideshow-container-slide');&#13;
                $(slide).css({&#13;
                    width: width + 'px',&#13;
                    height: height + 'px',&#13;
                    backgroundImage: 'url(' + $(this).attr('src') + ')',&#13;
                    top: containerPadding.topOffset + 'px',&#13;
                    left: containerPadding.leftOffset + 'px'&#13;
                });&#13;
&#13;
                if (!presenter.configuration.slides.domReferences || !$.isArray(presenter.configuration.slides.domReferences)) {&#13;
                    presenter.configuration.slides.domReferences = [];&#13;
                }&#13;
&#13;
                presenter.configuration.slides.domReferences[index] = slide;&#13;
            },&#13;
            all:function () {&#13;
                $(DOMElements.container).html();&#13;
&#13;
                for (var i = 0; i &lt; presenter.configuration.slides.count; i++) {&#13;
                    $(DOMElements.container).append(presenter.configuration.slides.domReferences[i]);&#13;
                }&#13;
&#13;
                presenter.configuration.isDomReferenceArrayComplete = true;&#13;
                $(presenter.configuration.slides.domReferences[0]).show();&#13;
&#13;
                setButtonInactive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
                if (presenter.configuration.slides.count === 1) {&#13;
                    setButtonInactive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
                }&#13;
&#13;
                if (!isPreview) {&#13;
                    handleMouseActions();&#13;
                    handleMouseHovering();&#13;
                    presenter.configuration.buzzAudio.bind("timeupdate", timeUpdateCallback);&#13;
                }&#13;
                var slideNumber = isPreview ? presenter.configuration.showSlide - 1 : 0;&#13;
                presenter.goToSlide(slideNumber, true);&#13;
                hideLoadingScreen();&#13;
&#13;
                if (presenter.configuration.savedState) {&#13;
                    $(DOMElements.viewContainer).trigger("onLoadSlidesEnd", [presenter.configuration.savedState]);&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
    }&#13;
&#13;
    function loadTexts() {&#13;
        showLoadingScreen("Loading text labels...");&#13;
&#13;
        if (!presenter.configuration.texts.domReferences || !$.isArray(presenter.configuration.texts.domReferences)) {&#13;
            presenter.configuration.texts.domReferences = [];&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.texts.count; i++) {&#13;
            var text = presenter.configuration.texts.content[i];&#13;
            var textElement = document.createElement('span');&#13;
            $(textElement).addClass('slideshow-container-text');&#13;
            $(textElement).html(text.text);&#13;
            $(textElement).css({&#13;
                top:text.top + 'px',&#13;
                left:text.left + 'px'&#13;
            });&#13;
            presenter.configuration.texts.domReferences[i] = textElement;&#13;
            $(DOMElements.container).append(textElement);&#13;
        }&#13;
    }&#13;
&#13;
    function hideAllTexts() {&#13;
        for (var i = 0; i &lt; presenter.configuration.texts.domReferences.length; i++) {&#13;
            $(presenter.configuration.texts.domReferences[i]).css('opacity', '0');&#13;
        }&#13;
    }&#13;
&#13;
    function stopAllAnimations() {&#13;
        for (var i = 0; i &lt; presenter.configuration.texts.domReferences.length; i++) {&#13;
            $(presenter.configuration.texts.domReferences[i]).stop(true, true);&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.slides.domReferences.length; i++) {&#13;
            $(presenter.configuration.slides.domReferences[i]).stop(true, true);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.stopPresentation = function() {&#13;
        $(DOMElements.controls.currentTime).text('00:00');&#13;
        updateProgressBar(0);&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.STOP;&#13;
        presenter.pauseAudioResource();&#13;
        stopAllAnimations();&#13;
        hideAllTexts();&#13;
        executeTasks(0, true);&#13;
        changeButtonToPlay();&#13;
    };&#13;
&#13;
    // Returns currently displayed index. If none slide is visible then this function returns -1&#13;
    presenter.getCurrentSlideIndex = function () {&#13;
        stopAllAnimations();&#13;
        for (var i = 0; i &lt; presenter.configuration.slides.domReferences.length; i++) {&#13;
            if ($(presenter.configuration.slides.domReferences[i]).is(":visible")) {&#13;
                return i;&#13;
            }&#13;
        }&#13;
&#13;
        return -1;&#13;
    };&#13;
&#13;
    presenter.setTimeFromSlideIndex = function (slideIndex) {&#13;
        var slide = presenter.configuration.slides.content[slideIndex];&#13;
        var time = slide.start;&#13;
        presenter.configuration.buzzAudio.setTime(time);&#13;
    };&#13;
&#13;
    function goToNextSlide(withoutAnimation) {&#13;
        var currentSlideIndex = presenter.getCurrentSlideIndex();&#13;
&#13;
        if (currentSlideIndex &lt; presenter.configuration.slides.count - 1) {&#13;
            var index = currentSlideIndex + 1;&#13;
            presenter.goToSlide(index, withoutAnimation);&#13;
            presenter.setTimeFromSlideIndex(index);&#13;
        }&#13;
    }&#13;
&#13;
    function goToPreviousSlide(withoutAnimation) {&#13;
        var currentSlideIndex = presenter.getCurrentSlideIndex();&#13;
&#13;
        if (currentSlideIndex &gt; 0) {&#13;
            var index = currentSlideIndex - 1;&#13;
            presenter.goToSlide(index, withoutAnimation);&#13;
            presenter.setTimeFromSlideIndex(index);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.goToSlide = function (index, withoutAnimation) {&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.STOP_FROM_NAVIGATION;&#13;
        hideAllTexts();&#13;
        var slide = presenter.configuration.slides.content[index];&#13;
        var time = slide.start;&#13;
        executeTasks(time, withoutAnimation);&#13;
        $(DOMElements.controls.currentTime).text(buzz.toTimer(time, false));&#13;
&#13;
        var activeTexts = presenter.findActiveTexts(presenter.configuration.timeLine, time);&#13;
        for (var i = 0; i &lt; activeTexts.length; i++) {&#13;
            var textIndex = activeTexts[i];&#13;
            $(presenter.configuration.texts.domReferences[textIndex]).css('opacity', '1');&#13;
        }&#13;
&#13;
        updateProgressBar(time);&#13;
        presenter.configuration.currentTime = time;&#13;
        presenter.time = time;&#13;
&#13;
        if (index &gt; 0) {&#13;
            setButtonActive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
        } else {&#13;
            setButtonInactive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
        }&#13;
&#13;
        if (index &lt; presenter.configuration.slides.count - 1) {&#13;
            setButtonActive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
        } else {&#13;
            setButtonInactive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.switchSlideShowStopToPlay = function () {&#13;
        updateProgressBar(0);&#13;
        presenter.configuration.currentTime = 0;&#13;
        if (presenter.configuration.audio.wasPlayed) {&#13;
            presenter.configuration.buzzAudio.set('currentTime', 0.1);&#13;
        }&#13;
        presenter.playAudioResource();&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.PLAY;&#13;
        changeButtonToPause();&#13;
    };&#13;
&#13;
     presenter.switchSlideShowPlayToPause = function () {&#13;
        presenter.pauseAudioResource();&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.PAUSE;&#13;
        changeButtonToPlay();&#13;
    };&#13;
&#13;
    presenter.switchSlideShowPauseToPlay = function () {&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.PLAY;&#13;
        presenter.playAudioResource();&#13;
        changeButtonToPause();&#13;
    };&#13;
&#13;
    presenter.switchSlideShowToPlay = function () {&#13;
        if (presenter.isPlaying) {&#13;
            presenter.pauseAudioResource();&#13;
            presenter.configuration.audioState = presenter.AUDIO_STATE.PAUSE;&#13;
            changeButtonToPlay();&#13;
        } else {&#13;
            presenter.playAudioAction();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playAudioAction = function () {&#13;
            presenter.configuration.buzzAudio.setTime(presenter.time);&#13;
            updateProgressBar(presenter.time);&#13;
            presenter.configuration.currentTime = presenter.time;&#13;
            presenter.playAudioResource();&#13;
            changeButtonToPause();&#13;
    };&#13;
&#13;
    function playButtonClickHandler(event) {&#13;
        event.stopPropagation();&#13;
&#13;
        switch (presenter.configuration.audioState) {&#13;
            case presenter.AUDIO_STATE.PLAY:&#13;
                presenter.switchSlideShowPlayToPause();&#13;
                break;&#13;
            case presenter.AUDIO_STATE.NONE:&#13;
            case presenter.AUDIO_STATE.PAUSE:&#13;
                presenter.switchSlideShowPauseToPlay();&#13;
                break;&#13;
            case presenter.AUDIO_STATE.STOP:&#13;
                presenter.switchSlideShowStopToPlay();&#13;
                break;&#13;
            case presenter.AUDIO_STATE.STOP_FROM_NAVIGATION:&#13;
                presenter.switchSlideShowToPlay();&#13;
                break;&#13;
        }&#13;
    }&#13;
&#13;
    function stopButtonClickHandler(e) {&#13;
        e.stopPropagation();&#13;
        presenter.stopPresentation();&#13;
    }&#13;
&#13;
    function previousButtonClickHandler(e) {&#13;
&#13;
        e.stopPropagation();&#13;
&#13;
        var isActive = $(this).hasClass('slideshow-controls-previous') || $(this).hasClass('slideshow-controls-previous-mouse-hover');&#13;
        if (isActive) {&#13;
            goToPreviousSlide(false);&#13;
            presenter.configuration.audioState = presenter.AUDIO_STATE.STOP_FROM_NAVIGATION;&#13;
        }&#13;
    }&#13;
&#13;
    function nextButtonClickHandler(e) {&#13;
        e.stopPropagation();&#13;
        var isActive = $(this).hasClass('slideshow-controls-next') || $(this).hasClass('slideshow-controls-next-mouse-hover');&#13;
        if (isActive) {&#13;
            goToNextSlide(false);&#13;
            presenter.configuration.audioState = presenter.AUDIO_STATE.STOP_FROM_NAVIGATION;&#13;
        }&#13;
    }&#13;
&#13;
    function getCurrentIndex(element) {&#13;
        return $(element).index() - presenter.configuration.texts.count;&#13;
    }&#13;
&#13;
    function mouseDownCallback(eventData) {&#13;
        //if (presenter.AUDIO_STATE.PLAY === presenter.configuration.audioState) return;&#13;
&#13;
        var currentIndex = getCurrentIndex(eventData.target), $slide;&#13;
        var containerPadding = getContainerPadding();&#13;
        presenter.configuration.mouseData.isMouseDown = true;&#13;
        presenter.configuration.mouseData.oldPosition.x = eventData.pageX;&#13;
        presenter.configuration.mouseData.oldPosition.y = eventData.pageY;&#13;
        presenter.configuration.mouseData.$imageElement = $(eventData.target);&#13;
&#13;
        // Previous slide&#13;
        $slide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex - 1) + ')');&#13;
        $slide.css({&#13;
            left: (-1 * presenter.configuration.slideDimensions.width + containerPadding.leftOffset) + 'px',&#13;
            top: containerPadding.topOffset + 'px',&#13;
            display: 'block'&#13;
        });&#13;
&#13;
        // Next slide&#13;
        $slide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex + 1) + ')');&#13;
        $slide.css({&#13;
            left:(presenter.configuration.slideDimensions.width + containerPadding.leftOffset) + 'px',&#13;
            top: containerPadding.topOffset + 'px',&#13;
            display:'block'&#13;
        });&#13;
&#13;
    }&#13;
&#13;
    function touchStartCallback(event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        var touch = event.touches[0] || event.changedTouches[0];&#13;
        mouseDownCallback(touch);&#13;
    }&#13;
&#13;
    function cleanMouseData() {&#13;
        presenter.configuration.mouseData = {&#13;
            isMouseDown:false,&#13;
            oldPosition:{&#13;
                x:0,&#13;
                y:0&#13;
            },&#13;
            isMouseDragged:false&#13;
        };&#13;
    }&#13;
&#13;
    function restoreTextsPositions() {&#13;
        for (var i = 0; i &lt; presenter.configuration.texts.count; i++) {&#13;
            var text = presenter.configuration.texts.content[i];&#13;
            var textElement = presenter.configuration.texts.domReferences[i];&#13;
            $(textElement).css({&#13;
                top: text.top + 'px',&#13;
                left: text.left + 'px'&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    function mouseUpCallback () {&#13;
        //if (presenter.AUDIO_STATE.PLAY === presenter.configuration.audioState) return;&#13;
&#13;
        presenter.configuration.mouseData.isMouseDown = false;&#13;
        var leftOffset = getContainerPadding().leftOffset,&#13;
            width = presenter.configuration.slideDimensions.width,&#13;
            left = parseInt(presenter.configuration.mouseData.$imageElement.css('left'), 10),&#13;
            isMoreThan30Percent = Math.abs(left - leftOffset) &gt; (width / 10) * 3,&#13;
            animationTime = (Math.abs(left - leftOffset) / width) * 750,&#13;
            currentIndex = getCurrentIndex(presenter.configuration.mouseData.$imageElement), $previousSlide, $nextSlide;&#13;
&#13;
        $previousSlide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex - 1) + ')');&#13;
        $nextSlide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex + 1) + ')');&#13;
&#13;
        function restoreCurrentView () {&#13;
            presenter.configuration.mouseData.$imageElement.animate({&#13;
                'left': leftOffset + 'px'&#13;
            }, animationTime, "linear", function () {&#13;
                cleanMouseData();&#13;
            });&#13;
&#13;
            $previousSlide.animate(&#13;
                { 'left': (-1 * presenter.configuration.slideDimensions.width + leftOffset) + 'px' },&#13;
                animationTime, "linear",&#13;
                function () { $previousSlide.hide(); $(this).css('left', leftOffset); }&#13;
            );&#13;
            $nextSlide.animate(&#13;
                { 'left': (presenter.configuration.slideDimensions.width + leftOffset) + 'px' },&#13;
                animationTime, "linear",&#13;
                function () { $nextSlide.hide(); $(this).css('left', leftOffset); }&#13;
            );&#13;
&#13;
        }&#13;
&#13;
        if (isMoreThan30Percent) {&#13;
            if (left &lt; 0) {&#13;
                if (currentIndex + 1 &gt;= presenter.configuration.slides.count) {&#13;
                    restoreCurrentView();&#13;
                } else {&#13;
                    presenter.configuration.mouseData.$imageElement.animate({&#13;
                        'left': (-1 * width + leftOffset) + 'px'&#13;
                    }, animationTime, "linear", function () {&#13;
                        presenter.configuration.mouseData.$imageElement.hide();&#13;
                        presenter.configuration.mouseData.$imageElement.css('left', leftOffset + 'px');&#13;
                        presenter.goToSlide(currentIndex + 1, true);&#13;
                        presenter.setTimeFromSlideIndex(currentIndex + 1);&#13;
                        cleanMouseData();&#13;
                    });&#13;
&#13;
                    $nextSlide.animate({&#13;
                        'left': leftOffset + 'px'&#13;
                    }, animationTime, "linear", function () {&#13;
                        $previousSlide.hide();&#13;
                        $previousSlide.css('left', leftOffset + 'px');&#13;
                    });&#13;
                }&#13;
            } else {&#13;
                if (currentIndex - 1 &lt; 0) {&#13;
                    presenter.configuration.mouseData.$imageElement.animate({&#13;
                        'left': leftOffset + 'px'&#13;
                    }, animationTime, "linear", function () {&#13;
                        cleanMouseData();&#13;
                    });&#13;
                    $previousSlide.animate(&#13;
                        { 'left': (-1 * presenter.configuration.slideDimensions.width + leftOffset) + 'px' },&#13;
                        animationTime, "linear",&#13;
                        function () { $previousSlide.hide(); }&#13;
                    );&#13;
                    $nextSlide.animate(&#13;
                        { 'left': (presenter.configuration.slideDimensions.width + leftOffset) + 'px' },&#13;
                        animationTime, "linear",&#13;
                        function () { $nextSlide.hide(); }&#13;
                    );&#13;
                } else {&#13;
                    presenter.configuration.mouseData.$imageElement.animate({&#13;
                        'left': (width + leftOffset) + 'px'&#13;
                    }, animationTime, "linear", function () {&#13;
                        presenter.configuration.mouseData.$imageElement.hide();&#13;
                        presenter.configuration.mouseData.$imageElement.css('left', leftOffset + 'px');&#13;
                        presenter.goToSlide(currentIndex - 1, true);&#13;
                        presenter.setTimeFromSlideIndex(currentIndex - 1);&#13;
                        cleanMouseData();&#13;
                    });&#13;
&#13;
                    $previousSlide.animate({&#13;
                        'left': leftOffset + 'px'&#13;
                    }, animationTime, "linear", function () {&#13;
                        $nextSlide.hide();&#13;
                        $nextSlide.css('left', leftOffset + 'px');&#13;
                    });&#13;
                }&#13;
            }&#13;
        } else {&#13;
            restoreCurrentView();&#13;
        }&#13;
        restoreTextsPositions();&#13;
    }&#13;
&#13;
    function touchEndCallback (event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        mouseUpCallback();&#13;
    }&#13;
&#13;
    function mouseMoveCallback (eventData) {&#13;
        //if (presenter.AUDIO_STATE.PLAY === presenter.configuration.audioState) return;&#13;
        if (presenter.configuration.mouseData.isMouseDown !== true) return;&#13;
&#13;
        var imageElement = $(eventData.target);&#13;
        presenter.configuration.mouseData.isMouseDragged = true;&#13;
        var left = parseInt($(imageElement).css('left'), 10);&#13;
        var distance = eventData.pageX - presenter.configuration.mouseData.oldPosition.x;&#13;
        var currentIndex = getCurrentIndex(presenter.configuration.mouseData.$imageElement), $slide;&#13;
&#13;
        presenter.configuration.mouseData.oldPosition.x = eventData.pageX;&#13;
&#13;
        // Current slide&#13;
        $(imageElement).css('left', (left + distance) + 'px');&#13;
&#13;
        // Previous slide&#13;
        $slide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex - 1) + ')');&#13;
        $slide.css('left', (parseInt($slide.css('left'), 10) + distance) + 'px');&#13;
&#13;
        // Next slide&#13;
        $slide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex + 1) + ')');&#13;
        $slide.css('left', (parseInt($slide.css('left'), 10) + distance) + 'px');&#13;
&#13;
        DOMElements.container.find('.slideshow-container-text:visible').each(function () {&#13;
            var thisLeft = parseInt($(this).css('left'), 10);&#13;
            $(this).css('left', (thisLeft + distance) + 'px');&#13;
        });&#13;
    }&#13;
&#13;
    function touchMoveCallback (event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        var touch = event.touches[0] || event.changedTouches[0];&#13;
        mouseMoveCallback(touch);&#13;
    }&#13;
&#13;
    function mouseClickCallback() {&#13;
        //if (presenter.AUDIO_STATE.PLAY === presenter.configuration.audioState) return;&#13;
&#13;
        if (presenter.configuration.mouseData.isMouseDragged) {&#13;
            presenter.configuration.mouseData.isMouseDragged = false;&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    function handleMouseActions() {&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            getControlButtonsDOMElements().play.on('touchend', playButtonClickHandler);&#13;
            getControlButtonsDOMElements().stop.on('touchend', stopButtonClickHandler);&#13;
            getControlButtonsDOMElements().previous.on('touchend', previousButtonClickHandler);&#13;
            getControlButtonsDOMElements().next.on('touchend', nextButtonClickHandler);&#13;
        } else {&#13;
            getControlButtonsDOMElements().play.click(playButtonClickHandler);&#13;
            getControlButtonsDOMElements().stop.click(stopButtonClickHandler);&#13;
            getControlButtonsDOMElements().previous.click(previousButtonClickHandler);&#13;
            getControlButtonsDOMElements().next.click(nextButtonClickHandler);&#13;
        }&#13;
&#13;
        DOMElements.container.find('.slideshow-container-slide').each(function() {&#13;
            if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
                this.ontouchstart = touchStartCallback;&#13;
                this.ontouchend = touchEndCallback;&#13;
                this.ontouchmove = touchMoveCallback;&#13;
            } else {&#13;
                $(this).mousedown(mouseDownCallback);&#13;
                $(this).mouseup(mouseUpCallback);&#13;
                $(this).mousemove(mouseMoveCallback);&#13;
            }&#13;
        });&#13;
&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            $(DOMElements.container.find('.slideshow-container-slide')).on('touchend', mouseClickCallback);&#13;
        } else {&#13;
            $(DOMElements.container.find('.slideshow-container-slide')).click(mouseClickCallback);&#13;
        }&#13;
    }&#13;
&#13;
    function changeButtonToPlay() {&#13;
        var button = getControlButtonsDOMElements().play;&#13;
        var buttonClassName = $(button).attr('class');&#13;
        var isHover = buttonClassName.indexOf('-mouse-hover', buttonClassName.length - '-mouse-hover'.length) !== -1;&#13;
&#13;
        $(button).attr('class', isHover ? 'slideshow-controls-play-mouse-hover' : 'slideshow-controls-play');&#13;
        $(button).text('Play');&#13;
        presenter.checkBackgroundImageOfButtonElements([button]);&#13;
        if (presenter.configuration.slides.count &lt; 2) {&#13;
            setButtonInactive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
            setButtonInactive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
        } else {&#13;
            var currentSlideIndex = presenter.getCurrentSlideIndex();&#13;
&#13;
            if (currentSlideIndex &lt; presenter.configuration.slides.count - 1) {&#13;
                setButtonActive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
            } else {&#13;
                setButtonInactive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
            }&#13;
&#13;
            if (currentSlideIndex &gt; 0) {&#13;
                setButtonActive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
            } else {&#13;
                setButtonInactive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function changeButtonToPause() {&#13;
        var button = getControlButtonsDOMElements().play;&#13;
        var buttonClassName = $(button).attr('class');&#13;
        var isHover = buttonClassName.indexOf('-mouse-hover', buttonClassName.length - '-mouse-hover'.length) !== -1;&#13;
&#13;
        $(button).attr('class', isHover ? 'slideshow-controls-play-pause-mouse-hover' : 'slideshow-controls-play-pause');&#13;
        $(button).text('Pause');&#13;
        presenter.checkBackgroundImageOfButtonElements([button]);&#13;
    }&#13;
&#13;
    presenter.NAVIGATION_BUTTON = {&#13;
        PREVIOUS:0,&#13;
        NEXT:1&#13;
    };&#13;
&#13;
    function setButtonActive(whichButton) {&#13;
        var button = whichButton === presenter.NAVIGATION_BUTTON.PREVIOUS ? getControlButtonsDOMElements().previous : getControlButtonsDOMElements().next;&#13;
        var buttonClassName = $(button).attr('class');&#13;
        var isHover = buttonClassName.indexOf('-mouse-hover', buttonClassName.length - '-mouse-hover'.length) !== -1;&#13;
&#13;
        if (whichButton === presenter.NAVIGATION_BUTTON.PREVIOUS) {&#13;
            $(button).attr('class', isHover ? 'slideshow-controls-previous-mouse-hover' : 'slideshow-controls-previous');&#13;
        } else {&#13;
            $(button).attr('class', isHover ? 'slideshow-controls-next-mouse-hover' : 'slideshow-controls-next');&#13;
        }&#13;
    }&#13;
&#13;
    function setButtonInactive(whichButton) {&#13;
        var button = whichButton === presenter.NAVIGATION_BUTTON.PREVIOUS ? getControlButtonsDOMElements().previous : getControlButtonsDOMElements().next;&#13;
        var buttonClassName = $(button).attr('class');&#13;
        var isHover = buttonClassName.indexOf('-mouse-hover', buttonClassName.length - '-mouse-hover'.length) !== -1;&#13;
&#13;
        if (whichButton === presenter.NAVIGATION_BUTTON.PREVIOUS) {&#13;
            $(button).attr('class', isHover ? 'slideshow-controls-previous-inactive-mouse-hover' : 'slideshow-controls-previous-inactive');&#13;
        } else {&#13;
            $(button).attr('class', isHover ? 'slideshow-controls-next-inactive-mouse-hover' : 'slideshow-controls-next-inactive');&#13;
        }&#13;
    }&#13;
&#13;
    function handleMouseHovering() {&#13;
        getControlButtonsDOMElements().stop.hover(&#13;
            function () { // Hover in&#13;
                $(this).attr('class', 'slideshow-controls-stop-mouse-hover');&#13;
            },&#13;
            function () { // Hover out&#13;
                $(this).attr('class', 'slideshow-controls-stop');&#13;
            }&#13;
        );&#13;
&#13;
        getControlButtonsDOMElements().play.hover(&#13;
            function () { // Hover in&#13;
                var isPlayButton = $(this).hasClass('slideshow-controls-play') || $(this).hasClass('slideshow-controls-play-mouse-hover');&#13;
&#13;
                $(this).attr('class', isPlayButton ? 'slideshow-controls-play-mouse-hover' : 'slideshow-controls-play-pause-mouse-hover');&#13;
            },&#13;
            function () { // Hover out&#13;
                var isPlayButton = $(this).hasClass('slideshow-controls-play') || $(this).hasClass('slideshow-controls-play-mouse-hover');&#13;
&#13;
                $(this).attr('class', isPlayButton ? 'slideshow-controls-play' : 'slideshow-controls-play-pause');&#13;
            }&#13;
        );&#13;
&#13;
        getControlButtonsDOMElements().previous.hover(&#13;
            function () { // Hover in&#13;
                var isInactive = $(this).hasClass('slideshow-controls-previous-inactive') || $(this).hasClass('slideshow-controls-previous-inactive-mouse-hover');&#13;
&#13;
                $(this).attr('class', isInactive ? 'slideshow-controls-previous-inactive-mouse-hover' : 'slideshow-controls-previous-mouse-hover');&#13;
            }, function () { // Hover out&#13;
                var isInactive = $(this).hasClass('slideshow-controls-previous-inactive') || $(this).hasClass('slideshow-controls-previous-inactive-mouse-hover');&#13;
&#13;
                $(this).attr('class', isInactive ? 'slideshow-controls-previous-inactive' : 'slideshow-controls-previous');&#13;
            }&#13;
        );&#13;
&#13;
        getControlButtonsDOMElements().next.hover(&#13;
            function () { // Hover in&#13;
                var isInactive = $(this).hasClass('slideshow-controls-next-inactive') || $(this).hasClass('slideshow-controls-next-inactive-mouse-hover');&#13;
&#13;
                $(this).attr('class', isInactive ? 'slideshow-controls-next-inactive-mouse-hover' : 'slideshow-controls-next-mouse-hover');&#13;
            }, function () { // Hover out&#13;
                var isInactive = $(this).hasClass('slideshow-controls-next-inactive') || $(this).hasClass('slideshow-controls-next-inactive-mouse-hover');&#13;
&#13;
                $(this).attr('class', isInactive ? 'slideshow-controls-next-inactive' : 'slideshow-controls-next');&#13;
            }&#13;
        );&#13;
    }&#13;
&#13;
    // Finds active texts in time line for given time and returns an array of theirs indexes.&#13;
    // Active texts in some time is a task that has been displayed before given time and weren't hidden.&#13;
    presenter.findActiveTexts = function (timeLine, time) {&#13;
        var activeTasks = [];&#13;
        var i, j, type, index, show, indexOfElement;&#13;
&#13;
        for (i = 0; i &lt; time; i++) {&#13;
            if (timeLine[i]) {&#13;
                for (j = 0; j &lt; timeLine[i].length; j++) {&#13;
                    type = timeLine[i][j].type;&#13;
                    index = timeLine[i][j].index;&#13;
&#13;
                    if (type === presenter.TIME_LINE_TASK.TYPE.TEXT) {&#13;
                        show = timeLine[i][j].task === presenter.TIME_LINE_TASK.TASK.SHOW;&#13;
&#13;
                        if (show) {&#13;
                            activeTasks.push(index);&#13;
                        } else {&#13;
                            indexOfElement = activeTasks.indexOf(index);&#13;
                            if (indexOfElement !== -1) {&#13;
                                activeTasks.splice(indexOfElement, 1);&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        // Removing tasks that end on given time&#13;
        if (timeLine[time]) {&#13;
            for (j = 0; j &lt; timeLine[time].length; j++) {&#13;
                type = timeLine[time][j].type;&#13;
                index = timeLine[time][j].index;&#13;
&#13;
                if (type === presenter.TIME_LINE_TASK.TYPE.TEXT) {&#13;
                    show = timeLine[time][j].task === presenter.TIME_LINE_TASK.TASK.SHOW;&#13;
&#13;
                    if (!show) {&#13;
                        indexOfElement = activeTasks.indexOf(index);&#13;
                        if (indexOfElement !== -1) {&#13;
                            activeTasks.splice(indexOfElement, 1);&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return activeTasks;&#13;
    };&#13;
&#13;
    presenter.buildTimeLine = function (slides, texts) {&#13;
        var timeLine = [];&#13;
        var i;&#13;
&#13;
        // Slides&#13;
        for (i = 0; i &lt; slides.length; i++) {&#13;
            var time = slides[i].start;&#13;
&#13;
            if (!timeLine[time]) {&#13;
                timeLine[time] = [];&#13;
            }&#13;
&#13;
            timeLine[time].push({&#13;
                type:presenter.TIME_LINE_TASK.TYPE.SLIDE,&#13;
                task:presenter.TIME_LINE_TASK.TASK.SHOW,&#13;
                index:i&#13;
            });&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; texts.length; i++) {&#13;
            var startTime = texts[i].start;&#13;
&#13;
            if (!timeLine[startTime]) {&#13;
                timeLine[startTime] = [];&#13;
            }&#13;
&#13;
            timeLine[startTime].push({&#13;
                type:presenter.TIME_LINE_TASK.TYPE.TEXT,&#13;
                task:presenter.TIME_LINE_TASK.TASK.SHOW,&#13;
                index:i&#13;
            });&#13;
&#13;
            var endTime = texts[i].end;&#13;
&#13;
            if (!timeLine[endTime]) {&#13;
                timeLine[endTime] = [];&#13;
            }&#13;
&#13;
            timeLine[endTime].push({&#13;
                type:presenter.TIME_LINE_TASK.TYPE.TEXT,&#13;
                task:presenter.TIME_LINE_TASK.TASK.HIDE,&#13;
                index:i&#13;
            });&#13;
        }&#13;
&#13;
        return timeLine;&#13;
    };&#13;
&#13;
    function setDOMElementsHrefsAndSelectors(view) {&#13;
        DOMElements.viewContainer = $(view);&#13;
        DOMElements.container = $(DOMElements.viewContainer.find('.slideshow-container:first')[0]);&#13;
        DOMElements.loading = {&#13;
            image:$(DOMElements.viewContainer.find('.slideshow-loading-image:first')[0]),&#13;
            text:$(DOMElements.viewContainer.find('.slideshow-loading-text:first')[0])&#13;
        };&#13;
&#13;
        DOMElements.controls = {&#13;
            play:'[class*="slideshow-controls-play"]',&#13;
            pause:'[class*="slideshow-controls-pause"]',&#13;
            stop:'[class*="slideshow-controls-stop"]',&#13;
            next:'[class*=slideshow-controls-next]',&#13;
            previous:'[class*=slideshow-controls-previous]'&#13;
        };&#13;
&#13;
        DOMElements.controls.container = $(DOMElements.viewContainer.find('.slideshow-controls-container:first')[0]);&#13;
        DOMElements.controls.timer = $(DOMElements.viewContainer.find('.slideshow-controls-timer:first')[0]);&#13;
        DOMElements.controls.currentTime = $(DOMElements.viewContainer.find('.slideshow-controls-timer-time:first')[0]);&#13;
        DOMElements.controls.duration = $(DOMElements.viewContainer.find('.slideshow-controls-timer-duration:first')[0]);&#13;
        DOMElements.controls.progressbar = $(DOMElements.viewContainer.find('.slideshow-controls-progressbar:first')[0]);&#13;
        DOMElements.controls.slider = $(DOMElements.viewContainer.find('.slideshow-controls-progressbar-slider:first')[0]);&#13;
        DOMElements.controls.line = $(DOMElements.viewContainer.find('.slideshow-controls-progressbar-line:first')[0]);&#13;
    }&#13;
&#13;
    function getControlButtonsDOMElements() {&#13;
        return {&#13;
            play:$(DOMElements.viewContainer.find(DOMElements.controls.play)[0]),&#13;
            pause:$(DOMElements.viewContainer.find(DOMElements.controls.pause)[0]),&#13;
            stop:$(DOMElements.viewContainer.find(DOMElements.controls.stop)[0]),&#13;
            next:$(DOMElements.viewContainer.find(DOMElements.controls.next)[0]),&#13;
            previous:$(DOMElements.viewContainer.find(DOMElements.controls.previous)[0])&#13;
        };&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        setDOMElementsHrefsAndSelectors(view);&#13;
&#13;
        if (!preview) {&#13;
            var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
            if (loadingSrc) {&#13;
            	$(DOMElements.loading.image).attr('src', loadingSrc);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.configuration = presenter.validateModel(model, preview);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
        &#13;
        if (!preview) {&#13;
        	if (presenter.configuration.groupNextAndPrevious) {&#13;
	            var $container = $(DOMElements.controls.container);&#13;
	            var $next = $(getControlButtonsDOMElements().next);&#13;
	            var $previous = $(getControlButtonsDOMElements().previous);&#13;
	            presenter.groupNavigationElements($container, $next, $previous);&#13;
	        }&#13;
	&#13;
	        setElementsDimensions(model.Width, model.Height);&#13;
	        adjustProgressBar();&#13;
	&#13;
	        var loadingResult = loadAudio(preview);&#13;
	        if (loadingResult.isError) {&#13;
	            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, loadingResult.errorCode);&#13;
	            return;&#13;
	        }&#13;
	&#13;
	        prepareLoadingScreen(presenter.configuration.slideDimensions.width, presenter.configuration.slideDimensions.height);&#13;
	        // Manual load is necessary for Apple iPad/iPhone&#13;
	        presenter.configuration.buzzAudio.load();&#13;
	        presenter.configuration.timeLine = presenter.buildTimeLine(presenter.configuration.slides.content, presenter.configuration.texts.content);&#13;
	        loadTexts();&#13;
	&#13;
	        var buttons = getControlButtonsDOMElements();&#13;
	        presenter.checkBackgroundImageOfButtonElements(buttons);&#13;
	        &#13;
	        loadSlides(presenter.configuration.slideDimensions.width, presenter.configuration.slideDimensions.height, preview);&#13;
	        &#13;
	        presenter.configuration.mouseData = {&#13;
	            isMouseDown : false,&#13;
	            oldPosition : {&#13;
	                x : 0,&#13;
	                y : 0&#13;
	            },&#13;
	            isMouseDragged : false&#13;
	        };&#13;
&#13;
            view.addEventListener('DOMNodeRemoved',function(ev) {&#13;
                if (ev.target === this) {&#13;
                    presenter.stopPresentation();&#13;
                }&#13;
            });&#13;
        } else {&#13;
        	if (presenter.configuration.groupNextAndPrevious) {&#13;
	            var $container = $(DOMElements.controls.container);&#13;
	            var $next = $(getControlButtonsDOMElements().next);&#13;
	            var $previous = $(getControlButtonsDOMElements().previous);&#13;
	            presenter.groupNavigationElements($container, $next, $previous);&#13;
	        }&#13;
	&#13;
	        setElementsDimensions(model.Width, model.Height);&#13;
	        adjustProgressBar();&#13;
	        &#13;
	        prepareLoadingScreen(presenter.configuration.slideDimensions.width, presenter.configuration.slideDimensions.height);&#13;
	        // Manual load is necessary for Apple iPad/iPhone&#13;
	        presenter.configuration.timeLine = presenter.buildTimeLine(presenter.configuration.slides.content, presenter.configuration.texts.content);&#13;
	        loadTexts();&#13;
	&#13;
	        var buttons = getControlButtonsDOMElements();&#13;
	        presenter.checkBackgroundImageOfButtonElements(buttons);&#13;
	        &#13;
	        loadSlides(presenter.configuration.slideDimensions.width, presenter.configuration.slideDimensions.height, preview);&#13;
	        &#13;
	        presenter.configuration.mouseData = {&#13;
	            isMouseDown : false,&#13;
	            oldPosition : {&#13;
	                x : 0,&#13;
	                y : 0&#13;
	            },&#13;
	            isMouseDragged : false&#13;
	        };&#13;
&#13;
        	presenter.setVisibility(presenter.configuration.isVisible);&#13;
            hideLoadingScreen();&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    function prepareLoadingScreen(slidesContainerWidth, slidesContainerHeight) {&#13;
        $(DOMElements.loading.image).css({&#13;
            top:((slidesContainerHeight - $(DOMElements.loading.image).height()) / 2) + 'px',&#13;
            left:((slidesContainerWidth - $(DOMElements.loading.image).width()) / 2) + 'px'&#13;
        });&#13;
&#13;
        var textWidth = $(DOMElements.loading.text).width();&#13;
        var textHeight = $(DOMElements.loading.text).height();&#13;
&#13;
        $(DOMElements.loading.text).css({&#13;
            top:(slidesContainerHeight - textHeight) + 'px',&#13;
            left:((slidesContainerWidth - textWidth) / 2) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function showLoadingScreen(text) {&#13;
        $(DOMElements.loading.image).show();&#13;
        $(DOMElements.loading.text).text(text);&#13;
        $(DOMElements.loading.text).show();&#13;
        presenter.configuration.isLoadingScreenVisible = true;&#13;
    }&#13;
&#13;
    function hideLoadingScreen() {&#13;
        $(DOMElements.loading.image).hide();&#13;
        $(DOMElements.loading.text).hide();&#13;
        presenter.configuration.isLoadingScreenVisible = false;&#13;
    }&#13;
&#13;
    presenter.groupNavigationElements = function($container, $next, $previous) {&#13;
        var $groupElement = $(document.createElement('div'));&#13;
&#13;
        $groupElement.addClass('slideshow-controls-navigation');&#13;
        $groupElement.append($previous);&#13;
        $groupElement.append($next);&#13;
&#13;
        $container.append($groupElement);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        this.configuration.isVisible = this.configuration.isVisibleByDefault;&#13;
        this.setVisibility(this.configuration.isVisible);&#13;
        presenter.stopPresentation();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'play': presenter.play,&#13;
            'pause': presenter.pause,&#13;
            'stop': presenter.stop,&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous,&#13;
            'moveTo': presenter.moveToCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.moveTo = function (number) {&#13;
        presenter.moveToCommand([number + ""]);&#13;
    };&#13;
&#13;
    presenter.validateMoveToParams = function (params) {&#13;
        if (params.length &gt; 1 ) {&#13;
            return {isValid: false};&#13;
        }&#13;
&#13;
        var number = Number(params[0]) - 1;&#13;
&#13;
        if (isNaN(number)) {&#13;
            return {isValid: false};&#13;
        }&#13;
&#13;
        if (number &gt; (presenter.configuration.slides.count - 1)) {&#13;
            return {isValid: false};&#13;
        }&#13;
&#13;
        if (number &lt; 0) {&#13;
            return {isValid: false};&#13;
        }&#13;
&#13;
        return {isValid: true, number: number};&#13;
    };&#13;
&#13;
    presenter.moveToCommand = function (params) {&#13;
        var validatedParams = presenter.validateMoveToParams(params);&#13;
&#13;
        if (validatedParams.isValid) {&#13;
            var previousAudioState = presenter.configuration.audioState;&#13;
            var wasPlayed = presenter.configuration.audio.wasPlayed;&#13;
&#13;
            presenter.goToSlide(validatedParams.number, false);&#13;
            presenter.setTimeFromSlideIndex(validatedParams.number);&#13;
&#13;
            presenter.onSlideChangeAudioStateSetting(previousAudioState, wasPlayed);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onSlideChangeAudioStateSetting = function (previousAudioState, wasPlayed) {&#13;
        if (previousAudioState != presenter.AUDIO_STATE.PLAY) {&#13;
            presenter.configuration.audioState = presenter.AUDIO_STATE.PAUSE;&#13;
            presenter.configuration.audio.wasPlayed = wasPlayed;&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.PLAY;&#13;
        presenter.configuration.audio.wasPlayed = wasPlayed;&#13;
    };&#13;
&#13;
    presenter.next = function () {&#13;
        var previousAudioState = presenter.configuration.audioState;&#13;
        var wasPlayed = presenter.configuration.audio.wasPlayed;&#13;
&#13;
        goToNextSlide(false);&#13;
&#13;
        presenter.onSlideChangeAudioStateSetting(previousAudioState, wasPlayed);&#13;
    };&#13;
&#13;
    presenter.previous = function () {&#13;
        var previousAudioState = presenter.configuration.audioState;&#13;
        var wasPlayed = presenter.configuration.audio.wasPlayed;&#13;
&#13;
        goToPreviousSlide(false);&#13;
&#13;
        presenter.onSlideChangeAudioStateSetting(previousAudioState, wasPlayed);&#13;
    };&#13;
&#13;
    presenter.play = function () {&#13;
&#13;
        switch (presenter.configuration.audioState) {&#13;
            case presenter.AUDIO_STATE.STOP:&#13;
                presenter.switchSlideShowStopToPlay();&#13;
                break;&#13;
            case presenter.AUDIO_STATE.PAUSE:&#13;
                presenter.switchSlideShowPauseToPlay();&#13;
                break;&#13;
            case presenter.AUDIO_STATE.STOP_FROM_NAVIGATION:&#13;
                if(!presenter.isPlaying) {&#13;
                    presenter.playAudioAction();&#13;
                }&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.pause = function () {&#13;
        if(presenter.configuration.audioState == presenter.AUDIO_STATE.PLAY || presenter.isPlaying) {&#13;
            presenter.switchSlideShowPlayToPause();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stop = function () {&#13;
        if(presenter.configuration.audioState != presenter.AUDIO_STATE.STOP) {&#13;
            presenter.stopPresentation();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        $(DOMElements.viewContainer).css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if (presenter.configuration.audioState == presenter.AUDIO_STATE.PLAY) {&#13;
            presenter.playAudioResource();&#13;
        }&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if (presenter.configuration.audioState == presenter.AUDIO_STATE.PLAY) {&#13;
            presenter.pauseAudioResource();&#13;
        }&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if (presenter.configuration.isDomReferenceArrayComplete) {&#13;
            presenter.pauseAudioResource();&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var isVisible = JSON.parse(state).isVisible;&#13;
&#13;
        presenter.setVisibility(isVisible);&#13;
        presenter.configuration.isVisible = isVisible;&#13;
    };&#13;
&#13;
    presenter.validateAudio = function (audioArray) {&#13;
        var audio = {&#13;
            MP3:audioArray.MP3 !== "" ? audioArray.MP3 : null,&#13;
            OGG:audioArray.OGG !== "" ? audioArray.OGG : null,&#13;
            wasPlayed: false&#13;
        };&#13;
&#13;
        if (audio.MP3 === null &amp;&amp; audio.OGG === null) {&#13;
            return { isError:true, errorCode:"A_01" };&#13;
        }&#13;
&#13;
        return { isError:false, audio:audio };&#13;
    };&#13;
&#13;
    presenter.validateAnimation = function (slideAnimation, textAnimation) {&#13;
        return {&#13;
            textAnimation:textAnimation === 'True',&#13;
            slideAnimation:slideAnimation === 'True'&#13;
        };&#13;
    };&#13;
&#13;
    function returnErrorObject() {&#13;
        return { isError: true }&#13;
    }&#13;
&#13;
    // This function validates and converts timer in MM:SS format to number of seconds&#13;
    presenter.sanitizeTimer = function (timer) {&#13;
        if (!timer || timer.length === 0) {&#13;
            return returnErrorObject();&#13;
        }&#13;
&#13;
        var buzzedTimer = buzz.fromTimer(timer);&#13;
        if (typeof buzzedTimer === "string") {&#13;
            if (buzzedTimer.split(':', 1).length !== 2) {&#13;
                return returnErrorObject();&#13;
            }&#13;
&#13;
            buzzedTimer = parseInt(buzzedTimer, 10);&#13;
            if (isNaN(buzzedTimer) || buzzedTimer &lt; 0) {&#13;
                return returnErrorObject();&#13;
            }&#13;
        }&#13;
&#13;
        if (buzzedTimer &lt; 0) {&#13;
            return returnErrorObject();&#13;
        }&#13;
&#13;
        return {&#13;
            isError:false,&#13;
            sinitizedTimer:buzzedTimer&#13;
        };&#13;
    };&#13;
&#13;
    // If validation error occurs then one of the following error codes are returned&#13;
    // S_01 - empty image&#13;
    // S_02 - problem with start time&#13;
    // S_03 - times imposed&#13;
    presenter.validateSlides = function (slidesArray) {&#13;
        var slides = {&#13;
            count:0,&#13;
            content:[]&#13;
        };&#13;
&#13;
        for (var i = 0; i &lt; slidesArray.length; i++) {&#13;
            if (!slidesArray[i].Image || slidesArray[i].Image === "") {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"S_01"&#13;
                };&#13;
            }&#13;
&#13;
            var startTime = slidesArray[i].Start;&#13;
            var sanitizedTime = presenter.sanitizeTimer(startTime);&#13;
&#13;
            if (sanitizedTime.isError) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"S_02"&#13;
                };&#13;
            }&#13;
&#13;
            if (i === 0 &amp;&amp; sanitizedTime.sinitizedTimer !== 0) {&#13;
                sanitizedTime.sinitizedTimer = 0;&#13;
            }&#13;
&#13;
            var slide = {&#13;
                image:slidesArray[i].Image,&#13;
                start:sanitizedTime.sinitizedTimer&#13;
            };&#13;
&#13;
            slides.content.push(slide);&#13;
            slides.count++;&#13;
        }&#13;
&#13;
        var previousTime = slides.content[0].start;&#13;
        for (var s = 1; s &lt; slides.count; s++) {&#13;
            var nextTime = slides.content[s].start;&#13;
            if (nextTime &lt; previousTime) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"S_03"&#13;
                };&#13;
            }&#13;
            previousTime = nextTime;&#13;
        }&#13;
&#13;
        return {&#13;
            isError:false,&#13;
            slides:slides&#13;
        };&#13;
    };&#13;
&#13;
    // This function validates and converts number from string representation to integer value&#13;
    presenter.sanitizePosition = function (position) {&#13;
        if (!position) {&#13;
            return {&#13;
                isError:true&#13;
            };&#13;
        }&#13;
&#13;
        var parsedPosition = parseInt(position, 10);&#13;
        if (isNaN(parsedPosition)) {&#13;
            return {&#13;
                isError:true&#13;
            };&#13;
        }&#13;
&#13;
        if (parsedPosition &lt; 0) {&#13;
            return {&#13;
                isError:true&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isError:false,&#13;
            position:parseInt(position, 10)&#13;
        };&#13;
    };&#13;
&#13;
    // If validation error occurs then one of the following error codes are returned&#13;
    // T_01 - empty image&#13;
    // T_02 - problem with start time&#13;
    // T_03 - problem with end time&#13;
    // T_04 - times imposed&#13;
    // T_05 - top value invalid&#13;
    // T_06 - left value invalid&#13;
    // T_07 - empty text and texts count &gt; 0&#13;
    presenter.validateTexts = function (textsArray) {&#13;
        var texts = {&#13;
            count:0,&#13;
            content:[]&#13;
        };&#13;
&#13;
        for (var i = 0; i &lt; textsArray.length; i++) {&#13;
            var startTime = textsArray[i].Start;&#13;
            var endTime = textsArray[i].End;&#13;
            var topPosition = textsArray[i].Top;&#13;
            var leftPosition = textsArray[i].Left;&#13;
&#13;
            if (textsArray[i].Text == "" &amp;&amp; startTime == "" &amp;&amp; endTime == "" &amp;&amp; topPosition == "" &amp;&amp; leftPosition == "") {&#13;
                if (textsArray.length == 1) {&#13;
                    texts.content = [];&#13;
                    texts.count = 0;&#13;
                    break;&#13;
                } else {&#13;
                    return {&#13;
                        isError:true,&#13;
                        errorCode:"T_07"&#13;
                    };&#13;
                }&#13;
            }&#13;
&#13;
            if (!textsArray[i].Text || textsArray[i].Text === "") {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_01"&#13;
                };&#13;
            }&#13;
&#13;
            var sanitizedStartTime = presenter.sanitizeTimer(startTime);&#13;
            if (sanitizedStartTime.isError) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_02"&#13;
                };&#13;
            }&#13;
&#13;
            var sanitizedEndTime = presenter.sanitizeTimer(endTime);&#13;
            if (sanitizedEndTime.isError) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_03"&#13;
                };&#13;
            }&#13;
&#13;
            if (sanitizedStartTime.sinitizedTimer &gt; sanitizedEndTime.sinitizedTimer) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_04"&#13;
                };&#13;
            }&#13;
&#13;
            var sanitizedTopPosition = presenter.sanitizePosition(topPosition);&#13;
            if (sanitizedTopPosition.isError) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_05"&#13;
                };&#13;
            }&#13;
&#13;
            var sanitizedLeftPosition = presenter.sanitizePosition(leftPosition);&#13;
            if (sanitizedLeftPosition.isError) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_06"&#13;
                };&#13;
            }&#13;
&#13;
            var text = {&#13;
                text:textsArray[i].Text,&#13;
                start:sanitizedStartTime.sinitizedTimer,&#13;
                end:sanitizedEndTime.sinitizedTimer,&#13;
                top:sanitizedTopPosition.position,&#13;
                left:sanitizedLeftPosition.position&#13;
            };&#13;
&#13;
            texts.content.push(text);&#13;
            texts.count++;&#13;
        }&#13;
&#13;
        return {&#13;
            isError:false,&#13;
            texts:texts&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * Validates string representation of integer. Only positive integer values are allowed. If both (value and default) are&#13;
     * undefined then isError property is set to true.&#13;
     *&#13;
     */&#13;
    presenter.validatePositiveInteger = function (value, defaultValue) {&#13;
        var isValueDefined = value != undefined &amp;&amp; value !== "";&#13;
        var isDefaultDefined = defaultValue != undefined &amp;&amp; !isNaN(defaultValue);&#13;
&#13;
        if (!isValueDefined &amp;&amp; !isDefaultDefined) {&#13;
            return {&#13;
                isError: true&#13;
            };&#13;
        }&#13;
&#13;
        if (!isValueDefined &amp;&amp; isDefaultDefined) {&#13;
            return {&#13;
                isError: false,&#13;
                value: defaultValue&#13;
            };&#13;
        }&#13;
&#13;
        var parsedSize = parseInt(value, 10);&#13;
        if (isNaN(parsedSize) || parsedSize &lt; 1) {&#13;
            return {&#13;
                isError: true&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            value: parsedSize&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model, isPreview) {&#13;
		var animationValidationResult = presenter.validateAnimation(model["Slide animation"], model["Text animation"]);&#13;
&#13;
		var audioValidationResult = presenter.validateAudio(model.Audio[0]);&#13;
		if (audioValidationResult.isError) {&#13;
			return {&#13;
				isError : true,&#13;
				errorCode : audioValidationResult.errorCode&#13;
			};&#13;
		}&#13;
&#13;
        var slidesValidationResult = presenter.validateSlides(model.Slides);&#13;
        if (slidesValidationResult.isError) {&#13;
            return {&#13;
                isError:true,&#13;
                errorCode:slidesValidationResult.errorCode&#13;
            };&#13;
        }&#13;
&#13;
        var textsValidationResult = presenter.validateTexts(model.Texts);&#13;
        if (textsValidationResult.isError) {&#13;
            return {&#13;
                isError:true,&#13;
                errorCode:textsValidationResult.errorCode&#13;
            };&#13;
        }&#13;
&#13;
        var showSlide = 1;&#13;
        var validatedShowSlide = presenter.validatePositiveInteger(model["Show slide"], 1);&#13;
        if (!validatedShowSlide.isError &amp;&amp; validatedShowSlide.value &lt;= slidesValidationResult.slides.count) {&#13;
            showSlide = validatedShowSlide.value;&#13;
        }&#13;
&#13;
        var isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            audio: audioValidationResult.audio,&#13;
            textAnimation: animationValidationResult.textAnimation,&#13;
            slideAnimation: animationValidationResult.slideAnimation,&#13;
            slides: slidesValidationResult.slides,&#13;
            texts: textsValidationResult.texts,&#13;
            hideProgressbar: ModelValidationUtils.validateBoolean(model["Hide progressbar"]),&#13;
            groupNextAndPrevious: ModelValidationUtils.validateBoolean(model["Group next and previous buttons"]),&#13;
            showSlide: showSlide,&#13;
            isVisibleByDefault: isVisibleByDefault,&#13;
            isVisible: isVisibleByDefault&#13;
        };&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Standard_Shapes" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Shape" nameLabel="Standard_Shapes_property_shape" type="{Line, Square, Rectangle, Circle, Ellipse}"/>
		<property name="Rotation angle" nameLabel="Standard_Shapes_property_rotation_angle" type="string"/>
		<property name="Stroke width" nameLabel="Standard_Shapes_property_stroke_width" type="string"/>
		<property name="Stroke color" nameLabel="Standard_Shapes_property_stroke_color" type="string"/>
		<property name="Corners rounding" nameLabel="Standard_Shapes_property_corners_rounding" type="boolean"/>
		<property name="Line ending" nameLabel="Standard_Shapes_property_line_ending" type="{None, Circles, Arrows, None - Arrow, None - Circle, Circle - Arrow}"/>
		<property name="Stroke opacity" nameLabel="Standard_Shapes_property_stroke_opacity" type="string"/>
		<property name="Fill color" nameLabel="Standard_Shapes_property_fill_color" type="string"/>
	</model>
<css>.standardshapes-wrapper {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    overflow: hidden;&#13;
}&#13;
</css><view>&lt;div class="standardshapes-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="standardshapes-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonStandard_Shapes_create(){&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.SHAPES = {&#13;
        LINE: 'Line',&#13;
        SQUARE: 'Square',&#13;
        RECTANGLE: 'Rectangle',&#13;
        CIRCLE: 'Circle',&#13;
        ELLIPSE: 'Ellipse'&#13;
    };&#13;
&#13;
    presenter.LINE_ENDING = {&#13;
        NONE: 'None',&#13;
        CIRCLES: 'Circles',&#13;
        ARROWS: 'Arrows',&#13;
        NONE_AND_ARROW: 'None - Arrow',&#13;
        NONE_AND_CIRCLE: 'None - Circle',&#13;
        CIRCLE_AND_ARROW: 'Circle - Arrow'&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'R01': "Rotation angle must be between 0 and 360 degrees!",&#13;
        'R02': "Rotation angle is not a number!",&#13;
        'ST1': "Stroke width must be a positive number",&#13;
        'ST2': "Stroke width is not a number!",&#13;
        'ST3': "Stroke color must be in RGB format (hexadecimal) and start with #",&#13;
        'ST4': "Stroke opacity must be a positive number between 0 and 1",&#13;
        'ST5': "Stroke opacity is not a number!",&#13;
        'F01': "Stroke color must be in RGB format (hexadecimal) and start with #",&#13;
        'RU1': "Addon dimensions are too small to draw line with endings (or stroke is too thick)!",&#13;
        'RU2': "Addon dimensions are too small to draw line with circle ending!",&#13;
        'RU3': "Addon dimensions are too small to draw line with circle-arrow ending!"&#13;
    };&#13;
&#13;
    function rotatePoint(x, y, angle) {&#13;
        return {&#13;
            x: x * Math.cos(angle) - y * Math.sin(angle),&#13;
            y: x * Math.sin(angle) + y * Math.cos(angle)&#13;
        };&#13;
    }&#13;
&#13;
    // Angle is counted in radians&#13;
    function rotatePoints(points, angle) {&#13;
        var rotatedPoints = [];&#13;
&#13;
        for (var i = 0; i &lt; points.length; i++) {&#13;
            var x = points[i].x;&#13;
            var y = points[i].y;&#13;
&#13;
            rotatedPoints.push(rotatePoint(x, y, angle));&#13;
        }&#13;
&#13;
        return rotatedPoints;&#13;
    }&#13;
&#13;
    function convertToRadians(degrees) {&#13;
        return degrees * Math.PI / 180;&#13;
    }&#13;
&#13;
    function translatePoint(x, y, xOffset, yOffset) {&#13;
        return {&#13;
            x: x + xOffset,&#13;
            y: y + yOffset&#13;
        };&#13;
    }&#13;
&#13;
    function translatePoints(points, xOffset, yOffset) {&#13;
        var translatedPoints = [];&#13;
&#13;
        for (var i = 0; i &lt; points.length; i++) {&#13;
            var x = points[i].x;&#13;
            var y = points[i].y;&#13;
&#13;
            translatedPoints.push(translatePoint(x, y, xOffset, yOffset));&#13;
        }&#13;
&#13;
        return translatedPoints;&#13;
    }&#13;
&#13;
    function calculateScale(points, width, height) {&#13;
        var farLeftX = 0;&#13;
        var farRightX = 0;&#13;
        var bottomY = 0;&#13;
        var topY = 0;&#13;
&#13;
        for (var i = 0; i &lt; points.length; i++) {&#13;
            if (points[i].x &lt; farLeftX) {&#13;
                farLeftX = points[i].x;&#13;
            }&#13;
            if (points[i].y &lt; bottomY) {&#13;
                bottomY = points[i].y;&#13;
            }&#13;
&#13;
            if (points[i].x &gt; farRightX) {&#13;
                farRightX = points[i].x;&#13;
            }&#13;
            if (points[i].y &gt; topY) {&#13;
                topY = points[i].y;&#13;
            }&#13;
        }&#13;
&#13;
        var widthAfterRotation = Math.abs(farLeftX) + Math.abs(farRightX);&#13;
        var heightAfterRotation = Math.abs(bottomY) + Math.abs(topY);&#13;
&#13;
        return Math.min(width / widthAfterRotation, height / heightAfterRotation);&#13;
    }&#13;
&#13;
    function getScale(width, height, angle) {&#13;
        var points = [];&#13;
        points[0] = {x:0, y:0};&#13;
        points[1] = {x:width, y:0};&#13;
        points[2] = {x:width, y:height};&#13;
        points[3] = {x:0, y:height};&#13;
&#13;
        var xOffset = -1 * width / 2;&#13;
        var yOffset = -1 * height / 2;&#13;
&#13;
        var translatedPoints = translatePoints(points, xOffset, yOffset);&#13;
        var rotatedPoints = rotatePoints(translatedPoints, convertToRadians(angle));&#13;
&#13;
        return calculateScale(rotatedPoints, width, height);&#13;
    }&#13;
&#13;
    function drawShape(model, wrapper, width, height, angle) {&#13;
        var scale = getScale(width, height, angle);&#13;
        var length = Math.min(width, height);&#13;
        // Ugly fix for SVG elements that are smaller than 20px to position it's elements properly&#13;
        var paper = new Raphael(wrapper, width &lt; 20 ? 20 : width, height &lt; 20 ? 20 : height);&#13;
&#13;
        switch (model.Shape) {&#13;
            case presenter.SHAPES.SQUARE:&#13;
                presenter.drawRectangle(paper, length, length, angle, scale);&#13;
                break;&#13;
            case presenter.SHAPES.RECTANGLE:&#13;
                presenter.drawRectangle(paper, width, height, angle, scale);&#13;
                break;&#13;
            case presenter.SHAPES.CIRCLE:&#13;
                presenter.drawEllipse(paper, length, length, angle, 1);&#13;
                break;&#13;
            case presenter.SHAPES.ELLIPSE:&#13;
                presenter.drawEllipse(paper, width, height, angle, scale);&#13;
                break;&#13;
            default:&#13;
                presenter.drawLine(paper, width, height, angle, scale);&#13;
        }&#13;
    }&#13;
&#13;
    function presenterLogic(view, model) {&#13;
        presenter.$view = $(view);&#13;
        var containerDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var containerDistances = DOMOperationsUtils.calculateOuterDistances(containerDimensions);&#13;
&#13;
        presenter.$view.css({&#13;
            width : (presenter.$view.width() - containerDistances.horizontal) + 'px',&#13;
            height : (presenter.$view.height() - containerDistances.vertical) + 'px'&#13;
        });&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        var canvasWrapper = presenter.$view.find('.standardshapes-wrapper:first')[0];&#13;
        var wrapperDimensions = DOMOperationsUtils.getOuterDimensions(canvasWrapper);&#13;
        var wrapperDistances = DOMOperationsUtils.calculateOuterDistances(wrapperDimensions);&#13;
&#13;
        var canvasWrapperWidth = presenter.$view.width() - wrapperDistances.horizontal;&#13;
        var canvasWrapperHeight = presenter.$view.height() - wrapperDistances.vertical;&#13;
        $(canvasWrapper).css({&#13;
            width : (canvasWrapperWidth &lt; 1 ? model.Width : canvasWrapperWidth) + 'px',&#13;
            height : (canvasWrapperHeight &lt; 1 ? model.Height : canvasWrapperHeight) + 'px'&#13;
        });&#13;
&#13;
        var angle = parseInt(presenter.configuration.rotation);&#13;
        drawShape(model, canvasWrapper, canvasWrapperWidth, canvasWrapperHeight, angle);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    }&#13;
&#13;
    presenter.applyStyles = function(element) {&#13;
        element.attr({&#13;
            'stroke-width': presenter.configuration.strokeWidth,&#13;
            'stroke': presenter.configuration.strokeColor,&#13;
            'stroke-opacity': presenter.configuration.strokeOpacity,&#13;
            'fill': presenter.configuration.fillColor,&#13;
            'fill-rule': 'evenodd'&#13;
        });&#13;
&#13;
        if (presenter.configuration.cornersRoundings) {&#13;
            element.attr('stroke-linejoin', 'round');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.applyLineStyles = function(element) {&#13;
        presenter.applyStyles(element);&#13;
        element.attr('fill', presenter.configuration.strokeColor);&#13;
    };&#13;
&#13;
    presenter.drawRectangle = function (paper, width, height, angle, scale) {&#13;
        var rectangle = paper.rect(presenter.configuration.strokeWidth / 2, presenter.configuration.strokeWidth / 2, width - presenter.configuration.strokeWidth, height - presenter.configuration.strokeWidth);&#13;
        presenter.applyStyles(rectangle);&#13;
        rectangle.transform("r" + angle + "s" + scale);&#13;
    };&#13;
&#13;
    presenter.drawEllipse = function (paper, width, height, angle, scale) {&#13;
        var rectangle = paper.ellipse(width / 2, height / 2, (width - presenter.configuration.strokeWidth) / 2, (height - presenter.configuration.strokeWidth) / 2);&#13;
        presenter.applyStyles(rectangle);&#13;
        rectangle.transform("r" + angle + "s" + scale);&#13;
    };&#13;
&#13;
    function transformShape(paper, element, scale, angle, width, height) {&#13;
        var roundedScale = Math.round(scale * 100) / 100; // Rounding scale to two decimal places&#13;
        var cx = parseInt(width / 2, 10);&#13;
        var cy = parseInt(height / 2, 10);&#13;
&#13;
        element.transform("r" + angle + "," + cx + "," + cy);&#13;
        element.transform("...s" + roundedScale + "," + roundedScale + "," + cx + "," + cy);&#13;
    }&#13;
&#13;
    function calculateLinePoints(width, height) {&#13;
        return [&#13;
            { x: 0, y: 0 },&#13;
            { x: width, y: 0 },&#13;
            { x: width, y: height },&#13;
            { x: 0, y: height}&#13;
        ];&#13;
    }&#13;
&#13;
    function calculateArrowPoints(lineEnding, width, height, arrowHeight) {&#13;
        var points = [];&#13;
&#13;
        switch(lineEnding) {&#13;
            case presenter.LINE_ENDING.ARROWS:&#13;
                points.push({&#13;
                    x: presenter.configuration.strokeWidth,&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                points.push({&#13;
                    x: parseInt(arrowHeight, 10),&#13;
                    y: presenter.configuration.strokeWidth&#13;
                });&#13;
                points.push({&#13;
                    x: parseInt(arrowHeight, 10),&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                points.push({&#13;
                    x: width - parseInt(arrowHeight, 10),&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                points.push({&#13;
                    x: width - parseInt(arrowHeight, 10),&#13;
                    y: presenter.configuration.strokeWidth&#13;
                });&#13;
                points.push({&#13;
                    x: width - presenter.configuration.strokeWidth,&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                points.push({&#13;
                    x: width - parseInt(arrowHeight, 10),&#13;
                    y: height - presenter.configuration.strokeWidth&#13;
                });&#13;
                points.push({&#13;
                    x: width - parseInt(arrowHeight, 10),&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                points.push({&#13;
                    x: parseInt(arrowHeight, 10),&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                points.push({&#13;
                    x: parseInt(arrowHeight, 10),&#13;
                    y: height - presenter.configuration.strokeWidth&#13;
                });&#13;
                break;&#13;
            case presenter.LINE_ENDING.NONE_AND_ARROW:&#13;
                points.push({&#13;
                    x: 0,&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                points.push({&#13;
                    x: width - parseInt(arrowHeight, 10),&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                points.push({&#13;
                    x: width - parseInt(arrowHeight, 10),&#13;
                    y: presenter.configuration.strokeWidth + 2&#13;
                });&#13;
                points.push({&#13;
                    x: width - presenter.configuration.strokeWidth,&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                points.push({&#13;
                    x: width - parseInt(arrowHeight, 10),&#13;
                    y: height - presenter.configuration.strokeWidth - 2&#13;
                });&#13;
                points.push({&#13;
                    x: width - parseInt(arrowHeight, 10),&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                points.push({&#13;
                    x: 0,&#13;
                    y: parseInt(height / 2, 10)&#13;
                });&#13;
                break;&#13;
        }&#13;
&#13;
        return points;&#13;
    }&#13;
&#13;
    function calculateCirclePoints(lineEnding, width, height, horizontalAxis) {&#13;
        var points = {};&#13;
&#13;
        switch(lineEnding) {&#13;
            case presenter.LINE_ENDING.CIRCLES:&#13;
                points.pointA = {&#13;
                    x: 2 * horizontalAxis + (presenter.configuration.strokeWidth / 2) + 1.5,&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
                points.pointB = {&#13;
                    x: width - 2 * horizontalAxis - (presenter.configuration.strokeWidth / 2) - 1.5,&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
                points.pointC = {&#13;
                    x: width - 2 * horizontalAxis - (presenter.configuration.strokeWidth / 2) - 1.5,&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
                points.pointD = {&#13;
                    x: 2 * horizontalAxis + (presenter.configuration.strokeWidth / 2) + 1.5,&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
                break;&#13;
            case presenter.LINE_ENDING.NONE_AND_CIRCLE:&#13;
                points.pointA = {&#13;
                    x: 0,&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
                points.pointB = {&#13;
                    x: width - 2 * horizontalAxis - (presenter.configuration.strokeWidth / 2) - 1.5,&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
                points.pointC = {&#13;
                    x: width - 2 * horizontalAxis - (presenter.configuration.strokeWidth / 2) - 1.5,&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
                points.pointD = {&#13;
                    x: 0,&#13;
                    y: parseInt(height / 2, 10)&#13;
                };&#13;
        }&#13;
&#13;
        return points;&#13;
    }&#13;
&#13;
    function calculateCircleAndArrowPoints(width, height, arrowHeight) {&#13;
        var points = {};&#13;
&#13;
        points.pointA = {&#13;
            x: parseInt(height + presenter.configuration.strokeWidth / 2, 10),&#13;
            y: parseInt(height / 2 + 1, 10)&#13;
        };&#13;
        points.pointB = {&#13;
            x: width - parseInt(arrowHeight, 10),&#13;
            y: parseInt(height / 2 + 1, 10)&#13;
        };&#13;
        points.pointC = {&#13;
            x: width - parseInt(arrowHeight, 10),&#13;
            y: presenter.configuration.strokeWidth&#13;
        };&#13;
        points.pointD = {&#13;
            x: width - presenter.configuration.strokeWidth,&#13;
            y: parseInt(height / 2, 10)&#13;
        };&#13;
        points.pointE = {&#13;
            x: width - parseInt(arrowHeight, 10),&#13;
            y: parseInt(height - presenter.configuration.strokeWidth, 10)&#13;
        };&#13;
        points.pointF = {&#13;
            x: width - parseInt(arrowHeight, 10),&#13;
            y: parseInt(height / 2 + 1, 10)&#13;
        };&#13;
        points.pointG = {&#13;
            x: parseInt(height + presenter.configuration.strokeWidth / 2, 10),&#13;
            y: parseInt(height / 2 + 1, 10)&#13;
        };&#13;
&#13;
        return points;&#13;
    }&#13;
&#13;
    function drawLineFromPoints(points) {&#13;
        var pathString = "M" + points[0].x + "," + points[0].y;&#13;
        for (var i = 1; i &lt; points.length; i++) {&#13;
            pathString += "L" + points[i].x + "," + points[i].y;&#13;
        }&#13;
        pathString += "L" + points[0].x + "," + points[0].y + "Z";&#13;
&#13;
        return pathString;&#13;
    }&#13;
&#13;
    presenter.drawLine = function (paper, width, height, angle, scale) {&#13;
        var base = height - 2 * presenter.configuration.strokeWidth;&#13;
        var arrowHeight = parseInt(base * Math.sqrt(3) / 2, 10);&#13;
        var spareSpace = width - 2 * arrowHeight - 2 * presenter.configuration.strokeWidth;&#13;
&#13;
        if (presenter.configuration.lineEnding !== presenter.LINE_ENDING.NONE) {&#13;
            if (4 * presenter.configuration.strokeWidth + 2 &gt; height) {&#13;
                DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.ERROR_CODES, 'RU1');&#13;
                return;&#13;
            }&#13;
        }&#13;
&#13;
        if (arrowHeight * 2 + presenter.configuration.strokeWidth &lt;= height) {&#13;
            arrowHeight--;&#13;
        } else if (spareSpace &lt; 2 * presenter.configuration.strokeWidth) {&#13;
            arrowHeight = parseInt(width / 2 - 4 * presenter.configuration.strokeWidth, 10);&#13;
        }&#13;
&#13;
        var radius = parseInt(height / 2, 10);&#13;
        var horizontalAxis = radius - (presenter.configuration.strokeWidth + 1) * 0.5;&#13;
        var verticalAxis = horizontalAxis + 0.5;&#13;
&#13;
        var points = [];&#13;
        var pathString;&#13;
&#13;
        switch(presenter.configuration.lineEnding) {&#13;
            case presenter.LINE_ENDING.NONE:&#13;
                points = calculateLinePoints(width, height);&#13;
                pathString = drawLineFromPoints(points);&#13;
&#13;
                break;&#13;
            case presenter.LINE_ENDING.ARROWS:&#13;
                points = calculateArrowPoints(presenter.LINE_ENDING.ARROWS, width, height, arrowHeight);&#13;
                pathString = drawLineFromPoints(points);&#13;
&#13;
                break;&#13;
            case presenter.LINE_ENDING.NONE_AND_ARROW:&#13;
                points = calculateArrowPoints(presenter.LINE_ENDING.NONE_AND_ARROW, width, height, arrowHeight);&#13;
                pathString = drawLineFromPoints(points);&#13;
&#13;
                break;&#13;
            case presenter.LINE_ENDING.CIRCLES:&#13;
                if (4 * radius &gt; width - 1) {&#13;
                    DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.ERROR_CODES, 'RU1');&#13;
                    return;&#13;
                }&#13;
&#13;
                points = calculateCirclePoints(presenter.LINE_ENDING.CIRCLES, width, height, horizontalAxis);&#13;
&#13;
                pathString = "M" + points.pointA.x + "," + points.pointA.y + "L" + points.pointB.x + "," + points.pointB.y;&#13;
                pathString += "A" + horizontalAxis + " " + verticalAxis + " 90 1 0 " + points.pointC.x + " " + (points.pointC.y - 1);&#13;
                pathString += "L" + points.pointC.x + "," + points.pointC.y;&#13;
                pathString += "L" + points.pointD.x + "," + points.pointD.y;&#13;
                pathString += "A" + horizontalAxis + " " + verticalAxis + " 90 1 1 " + points.pointA.x + " " + (points.pointA.y - 1);&#13;
                pathString += "L" + points.pointA.x + "," + points.pointA.y;&#13;
                pathString += "Z";&#13;
&#13;
                break;&#13;
            case presenter.LINE_ENDING.NONE_AND_CIRCLE:&#13;
                if (2 * radius &gt; width - 1) {&#13;
                    DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.ERROR_CODES, 'RU2');&#13;
                    return;&#13;
                }&#13;
&#13;
                points = calculateCirclePoints(presenter.LINE_ENDING.NONE_AND_CIRCLE, width, height, horizontalAxis);&#13;
&#13;
                pathString = "M" + points.pointA.x + "," + points.pointA.y + "L" + points.pointB.x + "," + points.pointB.y;&#13;
                pathString += "A" + horizontalAxis + " " + verticalAxis + " 90 1 0 " + points.pointC.x + " " + (points.pointC.y - 1);&#13;
                pathString += "L" + points.pointC.x + "," + points.pointC.y;&#13;
                pathString += "L" + points.pointD.x + "," + points.pointD.y;&#13;
                pathString += "Z";&#13;
                break;&#13;
            case presenter.LINE_ENDING.CIRCLE_AND_ARROW:&#13;
                if (2 * radius + arrowHeight &gt; width - 1) {&#13;
                    DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.ERROR_CODES, 'RU3');&#13;
                    return;&#13;
                }&#13;
&#13;
                points = calculateCircleAndArrowPoints(width, height, arrowHeight);&#13;
&#13;
                pathString = "M" + points.pointA.x + "," + points.pointA.y + "L" + points.pointB.x + "," + points.pointB.y;&#13;
                pathString += "L" + points.pointC.x + "," + points.pointC.y;&#13;
                pathString += "L" + points.pointD.x + "," + points.pointD.y;&#13;
                pathString += "L" + points.pointE.x + "," + points.pointE.y;&#13;
                pathString += "L" + points.pointF.x + "," + points.pointF.y;&#13;
                pathString += "L" + points.pointG.x + "," + points.pointG.y;&#13;
                pathString += "A" + horizontalAxis + " " + verticalAxis + " 90 1 1 " + points.pointA.x + " " + (points.pointA.y - 1);&#13;
                pathString += "L" + points.pointA.x + "," + points.pointA.y;&#13;
                pathString += "Z";&#13;
                break;&#13;
        }&#13;
&#13;
        var path = paper.path(pathString);&#13;
        presenter.applyLineStyles(path);&#13;
        transformShape(paper, path, scale, angle, width, height);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var shape = model.Shape ? model.Shape : presenter.SHAPES.LINE;&#13;
&#13;
        var rotation = model["Rotation angle"];&#13;
        if (!rotation) {&#13;
            rotation = 0;&#13;
        } else {&#13;
            rotation = parseFloat(rotation);&#13;
            if (isNaN(rotation)) {&#13;
                return { isError: true, errorCode: 'R02' };&#13;
            }&#13;
&#13;
            if (rotation &lt; 0 || rotation &gt; 360) {&#13;
                return { isError: true, errorCode: 'R01' };&#13;
            }&#13;
        }&#13;
&#13;
        var strokeWidth = model["Stroke width"];&#13;
        if (!strokeWidth) {&#13;
            strokeWidth = 1;&#13;
        } else {&#13;
            strokeWidth = parseFloat(strokeWidth);&#13;
            if (isNaN(strokeWidth)) {&#13;
                return { isError: true, errorCode: 'ST2' };&#13;
            }&#13;
&#13;
            if (strokeWidth &lt;= 0) {&#13;
                return { isError: true, errorCode: 'ST1' };&#13;
            }&#13;
        }&#13;
&#13;
        var strokeColor = model["Stroke color"];&#13;
        var regExp = new RegExp("#[0-9a-fA-F]+");&#13;
        var colorMatch;&#13;
&#13;
        if (!strokeColor) {&#13;
            strokeColor = "#000";&#13;
        } else {&#13;
            if (strokeColor.length &lt; 4 || strokeColor.length &gt; 7) {&#13;
                return { isError: true, errorCode: 'ST3' };&#13;
            }&#13;
&#13;
            colorMatch = strokeColor.match(regExp);&#13;
            if (!colorMatch || colorMatch === null || colorMatch.length &lt; 1) {&#13;
                return { isError: true, errorCode: 'ST3' };&#13;
            }&#13;
            if (colorMatch[0].length &lt; strokeColor.length) {&#13;
                return { isError: true, errorCode: 'ST3' };&#13;
            }&#13;
        }&#13;
&#13;
        var fillColor = model["Fill color"];&#13;
        if (!fillColor) {&#13;
            fillColor = "#FFF";&#13;
        } else {&#13;
            if (fillColor.length &lt; 4 || fillColor.length &gt; 7) {&#13;
                return { isError: true, errorCode: 'F01' };&#13;
            }&#13;
&#13;
            colorMatch = fillColor.match(regExp);&#13;
            if (!colorMatch || colorMatch === null || colorMatch.length &lt; 1) {&#13;
                return { isError: true, errorCode: 'F01' };&#13;
            }&#13;
            if (colorMatch[0].length &lt; fillColor.length) {&#13;
                return { isError: true, errorCode: 'F01' };&#13;
            }&#13;
        }&#13;
&#13;
        var cornersRoundings = model["Corners rounding"];&#13;
        if (!cornersRoundings) {&#13;
            cornersRoundings = false;&#13;
        } else {&#13;
            cornersRoundings = cornersRoundings === 'True';&#13;
        }&#13;
&#13;
        var strokeOpacity = model["Stroke opacity"];&#13;
        if (!strokeOpacity) {&#13;
            strokeOpacity = 1;&#13;
        } else {&#13;
            strokeOpacity = parseFloat(strokeOpacity);&#13;
            if (isNaN(strokeOpacity)) {&#13;
                return { isError: true, errorCode: 'ST5' };&#13;
            }&#13;
&#13;
            if (strokeOpacity &lt; 0 || strokeOpacity &gt; 1) {&#13;
                return { isError: true, errorCode: 'ST4' };&#13;
            }&#13;
        }&#13;
&#13;
        var lineEnding = model["Line ending"];&#13;
        if (!lineEnding) {&#13;
            lineEnding = presenter.LINE_ENDING.NONE;&#13;
        }&#13;
&#13;
        var isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            shape: shape,&#13;
            rotation: rotation,&#13;
            strokeWidth: strokeWidth,&#13;
            strokeColor: strokeColor,&#13;
            fillColor: fillColor,&#13;
            cornersRoundings: cornersRoundings,&#13;
            strokeOpacity: strokeOpacity,&#13;
            lineEnding: lineEnding,&#13;
            isVisibleByDefault: isVisibleByDefault,&#13;
            isVisible: isVisibleByDefault&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var isVisible = JSON.parse(state).isVisible;&#13;
&#13;
        presenter.configuration.isVisible = isVisible;&#13;
        presenter.setVisibility(isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Submit" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property isLocalized="true" name="Text" nameLabel="Submit_property_text" type="string"/>
        <property displayName="Text Selected" isLocalized="true" name="TextSelected" nameLabel="Submit_property_text_selected" type="string"/>
	</model>
<css>.submit-wrapper,&#13;
.submit-wrapper .submit-container,&#13;
.submit-wrapper .submit-container .submit-button {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.submit-wrapper .submit-container .submit-button {&#13;
    background: url('resources/submit-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="submit-wrapper"&gt;&#13;
    &lt;div class="submit-container"&gt;&#13;
        &lt;div class="submit-button"&gt;&#13;
&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="submit-wrapper"&gt;&#13;
    &lt;div class="submit-container"&gt;&#13;
        &lt;div class="submit-button"&gt;&#13;
&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonSubmit_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
&#13;
        presenter.runEndedDeferred = new $.Deferred();&#13;
        presenter.runEnded = presenter.runEndedDeferred.promise();&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function (additionalEventData) {&#13;
        var eventData = { 'source': presenter.configuration.addonID };&#13;
        for (var key in additionalEventData) {&#13;
            eventData[key] = additionalEventData[key];&#13;
        }&#13;
        return eventData;&#13;
    };&#13;
&#13;
    function getEventObject(item, value, score) {&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': item != undefined ? item : "",&#13;
            'value': value != undefined ? value : "",&#13;
            'score': score != undefined ? score : ""&#13;
        };&#13;
    }&#13;
&#13;
    presenter.sendEvent = function(eventName, eventData) {&#13;
        var eventObject = getEventObject(eventData.item, eventData.value, eventData.score);&#13;
&#13;
        presenter.eventBus.sendEvent(eventName, eventObject);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model, isPreview) {&#13;
        var buttonText = model['Text'],&#13;
            buttonTextSelected = model['TextSelected'],&#13;
            isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
&#13;
        return {&#13;
            'buttonText' : buttonText,&#13;
            'buttonTextSelected' : buttonTextSelected,&#13;
            'addonID' : model['ID'],&#13;
            'isVisible' : isVisible,&#13;
            'isVisibleByDefault': isVisible&#13;
        }&#13;
    };&#13;
&#13;
    function getAllOfTheModulesThatImplementIsAttempted() {&#13;
        var pageIndex = presenter.playerController.getCurrentPageIndex(),&#13;
            ids = presenter.playerController.getPresentation().getPage(pageIndex).getModulesAsJS(),&#13;
            modules = [];&#13;
&#13;
        for(var i = 0; i &lt; ids.length; i++){&#13;
            var currentModule = presenter.playerController.getModule(ids[i]);&#13;
&#13;
            if (currentModule &amp;&amp; currentModule.isAttempted !== undefined) {&#13;
                modules.push(currentModule);&#13;
            }&#13;
        }&#13;
        return modules;&#13;
    }&#13;
&#13;
    function areAllModulesAttempted() {&#13;
        var areAllAttempted = true;&#13;
&#13;
        $.each(presenter.modulesOnPage, function() {&#13;
            if (!this.isAttempted()) {&#13;
                areAllAttempted = false;&#13;
                return false; // break;&#13;
            }&#13;
        });&#13;
&#13;
        return areAllAttempted;&#13;
    }&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model, isPreview);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.submitButton = presenter.$view.find('.submit-button');&#13;
        presenter.submitButton.html(presenter.configuration.buttonText);&#13;
        presenter.submitWrapper = presenter.$view.find('.submit-wrapper');&#13;
&#13;
        presenter.pageLoaded.then(function() {&#13;
&#13;
            presenter.modulesOnPage = getAllOfTheModulesThatImplementIsAttempted();&#13;
&#13;
            presenter.submitButton.click(function(e) {&#13;
                e.stopPropagation();&#13;
&#13;
                var isSelected = $(presenter.submitWrapper).hasClass('selected');&#13;
&#13;
                if (isSelected) {&#13;
                    presenter.submitWrapper.removeClass('selected');&#13;
                    presenter.submitButton.html(presenter.configuration.buttonText);&#13;
&#13;
                    presenter.playerController.getCommands().uncheckAnswers();&#13;
                    presenter.sendEvent('State', presenter.createEventData({ 'value' : 0 }));&#13;
&#13;
                } else if (areAllModulesAttempted()) {&#13;
                    presenter.submitWrapper.addClass('selected');&#13;
                    presenter.submitButton.html(presenter.configuration.buttonTextSelected);&#13;
&#13;
                    presenter.playerController.getCommands().checkAnswers();&#13;
                    presenter.sendEvent('Submitted', presenter.createEventData());&#13;
                    presenter.sendEvent('State', presenter.createEventData({ 'value' : 1 }));&#13;
                } else {&#13;
                    presenter.sendEvent('NotAllAttempted', presenter.createEventData());&#13;
                }&#13;
&#13;
            });&#13;
&#13;
            presenter.runEndedDeferred.resolve();&#13;
        });&#13;
    }&#13;
&#13;
    presenter.run = function(view, model){&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function(){&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        presenter.submitWrapper.removeClass('selected');&#13;
        presenter.submitButton.html(presenter.configuration.buttonText);&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(rawState){&#13;
        var state = JSON.parse(rawState);&#13;
&#13;
        presenter.setVisibility(state.isVisible);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        presenter.configuration.isVisible = isVisible;&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Sudoku" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Rows Values" isLocalized="true" name="Values" nameLabel="Sudoku_property_values" type="text"/>
        <property name="isDisable" nameLabel="Sudoku_property_is_disabled" type="boolean"/>
        <property name="isActivity" nameLabel="Sudoku_property_is_activity" type="boolean"/>
    </model>
<css>.board input.cell {&#13;
            font-size: 15pt;&#13;
            text-align: center;&#13;
        }&#13;
.board input.wrong {&#13;
            background-color: #ff2a2a; &#13;
        }&#13;
.board input.correct {&#13;
            background-color: #99FF55; &#13;
        }  &#13;
.board input.filled {&#13;
            background-color: white; &#13;
        } &#13;
&#13;
        .c {&#13;
            border: 1px black solid;&#13;
            -webkit-border-radius: 0px;&#13;
            -khtml-border-radius: 0px;&#13;
            -moz-border-radius: 0px;&#13;
            width: 2.2em !important;&#13;
            height: 2.2em !important;&#13;
            padding: 0px;&#13;
        }&#13;
&#13;
        .v {&#13;
            border-right: 0;&#13;
        }&#13;
&#13;
        .h {&#13;
            border-bottom: 0;&#13;
        }&#13;
        .filled{&#13;
            color: blue;&#13;
            }&#13;
        .sudoku-counter{&#13;
            color:red;&#13;
        background-color: #f2f2f2;        &#13;
            }&#13;
</css><view>&lt;p class="sudoku-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id = "sudoku-wrapper" class= "sudoku-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;p class="sudoku-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id = "sudoku-wrapper" class= "sudoku-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonSudoku_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.isActivity = false;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    presenter.isActivity = false;&#13;
    presenter.initialView = [];&#13;
    presenter.initialViewNumbers = 0;&#13;
    presenter.currentViewNumbers = 0;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    presenter.cells = [];&#13;
    presenter.currentAnswer = [];&#13;
    presenter.eventBus = '';&#13;
    presenter.isShowAnswerMode = false;&#13;
&#13;
    function displayText() {&#13;
        var textToDisplay = presenter.model['Text to be displayed'],&#13;
            isTextColored = presenter.model['Color text'] === 'True',&#13;
            $textContainer = presenter.$view.find('.some-text-container');&#13;
&#13;
        $textContainer.text(textToDisplay);&#13;
        if (isTextColored) {&#13;
            $textContainer.css('color', 'red');&#13;
        }&#13;
    }&#13;
&#13;
&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawSudoku = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.modelID = model.ID;&#13;
        presenter.Height = parseInt(model.Height,10);&#13;
        presenter.Width = parseInt(model.Width,10);&#13;
        presenter.number = Math.floor((Math.random()*100)+1);&#13;
&#13;
&#13;
        var fig = '&lt;table&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
&#13;
        fig += '&lt;td valign="top"&gt;';&#13;
        fig += '&lt;form class="board" autocomplete="off"&gt;';&#13;
        fig += '&lt;table cellspacing="0" cellpadding="0" border="0"&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c11'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c12'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c13'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c14'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c15'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c16'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c17'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c18'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c19'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c21'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c22'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c23'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c24'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c25'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c26'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c27'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c28'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c29'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c31'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c32'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c33'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c34'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c35'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c36'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c37'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c38'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c39'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c41'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c42'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c43'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c44'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c45'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c46'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c47'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c48'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c49'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c51'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c52'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c53'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c54'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c55'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c56'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c57'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c58'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c59'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c61'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c62'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c63'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c64'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c65'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c66'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c67'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c68'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c69'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c71'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c72'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c73'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c74'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c75'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c76'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c77'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c78'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c79'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c81'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c82'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c83'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c84'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c85'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c86'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c87'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c88'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c89'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c91'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c92'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c93'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c94'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c95'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c96'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c97'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c98'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c99'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;/table&gt;';&#13;
        fig += '&lt;/form&gt;';&#13;
        fig += '&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;/table&gt;';&#13;
&#13;
        return fig;&#13;
    };&#13;
&#13;
    presenter.checkRowsValues = function(value, view){&#13;
        var regExp = new RegExp('\n');&#13;
        $counter = $(view).find('.sudoku-counter');&#13;
        var step = 1;&#13;
        var enters = 0;&#13;
        for(i = 0; i&lt; value.length; i++){&#13;
            if(value[i] != ' ') {&#13;
                if((parseInt(value[i],10) &lt; 1 || isNaN(value[i],10)) &amp;&amp; !value[i].match(regExp) &amp;&amp; value[i] != '_'){&#13;
                    $counter.text('Row '+(enters + 1)+' has incorrect value.');&#13;
                    return false;&#13;
                }&#13;
                if(step &gt; 10){&#13;
                    $counter.text('Row '+(enters + 1)+' has more than 9 values.');&#13;
                    return false;&#13;
                }&#13;
                if(enters &gt; 8){&#13;
                    $counter.text('There are more than 9 rows.');&#13;
                    return false;&#13;
                }&#13;
                if(value[i].match(regExp)) {&#13;
                    enters++;&#13;
                    step = 1;&#13;
                } else{&#13;
                    step++;&#13;
                }&#13;
            }&#13;
&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
&#13;
    presenter.validate = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        $counter = $(view).find('.sudoku-counter');&#13;
&#13;
        if(!presenter.checkRowsValues(model.Values, view)){&#13;
            return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.init = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.modelID = model.ID;&#13;
        presenter.isActivity = model.isActivity == "True" ? true : false;&#13;
        presenter.isDisable = model.isDisable == "True" ? true : false;&#13;
        presenter.wasDisable = model.isDisable == "True" ? true : false;&#13;
        presenter.wasVisible = model["Is Visible"] == 'True';&#13;
        presenter.isVisible = model["Is Visible"] == 'True';&#13;
        presenter.Values = model.Values;&#13;
&#13;
&#13;
        var myDiv =  $(view).find('.sudoku-wrapper')[0];&#13;
&#13;
        var figureSudoku = presenter.drawSudoku(view, model);&#13;
        $(myDiv).append(figureSudoku);&#13;
&#13;
        if(presenter.isDisable){&#13;
            presenter.disable();&#13;
        }&#13;
&#13;
        presenter.cells = [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]];&#13;
        presenter.currentAnswer = [['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','','']];&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                presenter.cells[j-1][i-1] = presenter.$view.find('"#c'+j+i+ presenter.modelID + presenter.number + '"');&#13;
            }&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
        presenter.drawInitial(model.Values);&#13;
&#13;
&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.Values = model.Values;&#13;
        var score = '';&#13;
        var test = false;&#13;
&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
&#13;
        if(presenter.validate(view,model)){&#13;
            presenter.init(view, model);&#13;
&#13;
            if(model.isActivity == "True"){&#13;
                presenter.correctAnswer = presenter.checkSudoku(view);&#13;
            }&#13;
&#13;
            presenter.$view.find("input.active").change(function() {&#13;
&#13;
                if(parseInt(this.value,10) &lt; 1 || isNaN(this.value,10) || this.value == ' '){&#13;
                    test = true;&#13;
                    presenter.cells[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)].attr("value", '');&#13;
&#13;
                    if(presenter.currentAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] != ''){&#13;
                        presenter.currentViewNumbers--;&#13;
                        presenter.currentAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] = '';&#13;
                    }&#13;
&#13;
                } else{&#13;
&#13;
                    test = false;&#13;
&#13;
                }&#13;
&#13;
                if(!test) {&#13;
&#13;
                    var id = this.id.slice(2,3) + "-" + this.id.slice(1,2);&#13;
&#13;
                    if(presenter.isActivity){&#13;
                        score = this.value == presenter.correctAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] ? 1 : 0;&#13;
                    } else {&#13;
                        score = '';&#13;
&#13;
                    }&#13;
                    presenter.triggerFrameChangeEvent(this.value, id, score);&#13;
&#13;
                    if(presenter.isActivity){&#13;
                        if(this.value != ''){&#13;
                            if(presenter.currentAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] == ''){&#13;
                                presenter.currentAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] = this.value;&#13;
                                presenter.currentViewNumbers++;&#13;
                            } else{&#13;
                                presenter.currentAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] = this.value;&#13;
                            }&#13;
                        } else{&#13;
                            presenter.currentViewNumbers--;&#13;
                        }&#13;
                    }&#13;
                }&#13;
&#13;
                if(presenter.currentViewNumbers == 81){&#13;
                    presenter.isAllOkEvent();&#13;
                }&#13;
            });&#13;
&#13;
&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        if(presenter.validate(view,model)){&#13;
            presenter.init(view, model);&#13;
&#13;
            if(model.isActivity == "True"){&#13;
                presenter.checkSudoku(view);&#13;
            }&#13;
        }&#13;
&#13;
    };&#13;
    presenter.isAllOkEvent = function(){&#13;
        if(presenter.isAllOk()){&#13;
            presenter.triggerFrameChangeEvent("allOk", "", "");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOkChecker = function(){&#13;
        var correct = 0;&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                if(presenter.currentAnswer[j-1][i-1] == presenter.correctAnswer[j-1][i-1])&#13;
                {&#13;
                    correct++;&#13;
                } else{&#13;
                    return correct;&#13;
                }&#13;
            }&#13;
        }&#13;
        return correct;&#13;
    };&#13;
&#13;
    presenter.isAllOk = function(){&#13;
        var check = presenter.isAllOkChecker();&#13;
        if(check == 81){&#13;
            return true;&#13;
        } else{&#13;
            return false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAttempted = function(){&#13;
        presenter.hideAnswers();&#13;
        if(presenter.isActivity){&#13;
            return presenter.initialViewNumbers == presenter.currentViewNumbers ? false: true;&#13;
        } else{&#13;
            return true;&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.checkSudoku = function(view) {&#13;
        function dlx_cover(c)&#13;
        {&#13;
            c.right.left = c.left;&#13;
            c.left.right = c.right;&#13;
            for (var i = c.down; i != c; i = i.down) {&#13;
                for (var j = i.right; j != i; j = j.right) {&#13;
                    j.down.up = j.up;&#13;
                    j.up.down = j.down;&#13;
                    j.column.size--;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        function dlx_uncover(c)&#13;
        {&#13;
            for (var i = c.up; i != c; i = i.up) {&#13;
                for (var j = i.left; j != i; j = j.left) {&#13;
                    j.column.size++;&#13;
                    j.down.up = j;&#13;
                    j.up.down = j;&#13;
                }&#13;
            }&#13;
            c.right.left = c;&#13;
            c.left.right = c;&#13;
        }&#13;
&#13;
        function dlx_search(head, solution, k, solutions, maxsolutions)&#13;
        {&#13;
            if (head.right == head) {&#13;
                solutions.push(solution.slice(0));&#13;
                if (solutions.length &gt;= maxsolutions) {&#13;
                    return solutions;&#13;
                }&#13;
                return null;&#13;
            }&#13;
            var c = null;&#13;
            var s = 99999;&#13;
            for (var j = head.right; j != head; j = j.right) {&#13;
                if (j.size == 0) {&#13;
                    return null;&#13;
                }&#13;
                if (j.size &lt; s) {&#13;
                    s = j.size;&#13;
                    c = j;&#13;
                }&#13;
            }&#13;
&#13;
            dlx_cover(c);&#13;
            for (var r = c.down; r != c; r = r.down) {&#13;
                solution[k] = r.row;&#13;
                for (var j = r.right; j != r; j = j.right) {&#13;
                    dlx_cover(j.column);&#13;
                }&#13;
                var s = dlx_search(head, solution, k+1, solutions, maxsolutions);&#13;
                if (s != null) {&#13;
                    return s;&#13;
                }&#13;
                for (var j = r.left; j != r; j = j.left) {&#13;
                    dlx_uncover(j.column);&#13;
                }&#13;
            }&#13;
            dlx_uncover(c);&#13;
            return null;&#13;
        }&#13;
&#13;
        function dlx_solve(matrix, skip, maxsolutions)&#13;
        {&#13;
            var columns = new Array(matrix[0].length);&#13;
            for (var i = 0; i &lt; columns.length; i++) {&#13;
                columns[i] = new Object;&#13;
            }&#13;
            for (var i = 0; i &lt; columns.length; i++) {&#13;
                columns[i].index = i;&#13;
                columns[i].up = columns[i];&#13;
                columns[i].down = columns[i];&#13;
                if (i &gt;= skip) {&#13;
                    if (i-1 &gt;= skip) {&#13;
                        columns[i].left = columns[i-1];&#13;
                    }&#13;
                    if (i+1 &lt; columns.length) {&#13;
                        columns[i].right = columns[i+1];&#13;
                    }&#13;
                } else {&#13;
                    columns[i].left = columns[i];&#13;
                    columns[i].right = columns[i];&#13;
                }&#13;
                columns[i].size = 0;&#13;
            }&#13;
            for (var i = 0; i &lt; matrix.length; i++) {&#13;
                var last = null;&#13;
                for (var j = 0; j &lt; matrix[i].length; j++) {&#13;
                    if (matrix[i][j]) {&#13;
                        var node = new Object;&#13;
                        node.row = i;&#13;
                        node.column = columns[j];&#13;
                        node.up = columns[j].up;&#13;
                        node.down = columns[j];&#13;
                        if (last) {&#13;
                            node.left = last;&#13;
                            node.right = last.right;&#13;
                            last.right.left = node;&#13;
                            last.right = node;&#13;
                        } else {&#13;
                            node.left = node;&#13;
                            node.right = node;&#13;
                        }&#13;
                        columns[j].up.down = node;&#13;
                        columns[j].up = node;&#13;
                        columns[j].size++;&#13;
                        last = node;&#13;
                    }&#13;
                }&#13;
            }&#13;
            var head = new Object;&#13;
            head.right = columns[skip];&#13;
            head.left = columns[columns.length-1];&#13;
            columns[skip].left = head;&#13;
            columns[columns.length-1].right = head;&#13;
            solutions = [];&#13;
            dlx_search(head, [], 0, solutions, maxsolutions);&#13;
            return solutions;&#13;
        }&#13;
&#13;
        function solve_sudoku(grid)&#13;
        {&#13;
            var mat = [];&#13;
            var rinfo = [];&#13;
            for (var i = 0; i &lt; 9; i++) {&#13;
                for (var j = 0; j &lt; 9; j++) {&#13;
                    var g = grid[i][j] - 1;&#13;
                    if (g &gt;= 0) {&#13;
                        var row = new Array(324);&#13;
                        row[i*9+j] = 1;&#13;
                        row[9*9+i*9+g] = 1;&#13;
                        row[9*9*2+j*9+g] = 1;&#13;
                        row[9*9*3+(Math.floor(i/3)*3+Math.floor(j/3))*9+g] = 1;&#13;
                        mat.push(row);&#13;
                        rinfo.push({'row': i, 'col': j, 'n': g+1});&#13;
                    } else {&#13;
                        for (var n = 0; n &lt; 9; n++) {&#13;
                            var row = new Array(324);&#13;
                            row[i*9+j] = 1;&#13;
                            row[9*9+i*9+n] = 1;&#13;
                            row[9*9*2+j*9+n] = 1;&#13;
                            row[9*9*3+(Math.floor(i/3)*3+Math.floor(j/3))*9+n] = 1;&#13;
                            mat.push(row);&#13;
                            rinfo.push({'row': i, 'col': j, 'n': n+1});&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
            var solutions = dlx_solve(mat, 0, 2);&#13;
            if (solutions.length &gt; 0) {&#13;
                var r = solutions[0];&#13;
                for (var i = 0; i &lt; r.length; i++) {&#13;
                    grid[rinfo[r[i]]['row']][rinfo[r[i]]['col']] = rinfo[r[i]]['n'];&#13;
                }&#13;
                return solutions.length;&#13;
            }&#13;
            return 0;&#13;
        }&#13;
&#13;
&#13;
        $counter = $(view).find('.sudoku-counter');&#13;
        $counter.text('');&#13;
        var g = [];&#13;
        for (var i = 1; i &lt;= 9; i++) {&#13;
            var r = [];&#13;
            for (var j = 1; j &lt;= 9; j++) {&#13;
                r.push(presenter.cells[i-1][j-1].attr("value"));&#13;
            }&#13;
            g.push(r);&#13;
&#13;
        }&#13;
        var r = solve_sudoku(g);&#13;
        if (r &gt; 0) {&#13;
            if (r &gt; 1) {&#13;
                $counter = $(view).find('.sudoku-counter');&#13;
                $counter.text('There is more than one solution.');&#13;
                presenter.isDisable = true;&#13;
                return false;&#13;
            }&#13;
        } else {&#13;
            $counter = $(view).find('.sudoku-counter');&#13;
            $counter.text('There is no solution.');&#13;
            presenter.isDisable = true;&#13;
            return false;&#13;
        }&#13;
&#13;
        presenter.isActivity = true;&#13;
        return g;&#13;
    };&#13;
&#13;
    presenter.clearSudoku = function() {&#13;
&#13;
        for (var i = 1; i &lt;= 9; i++) {&#13;
            for (var j = 1; j &lt;= 9; j++) {&#13;
                presenter.cells[i-1][j-1].attr("value", '');&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        presenter.currentAnswer = [['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','','']];&#13;
        presenter.drawInitial(presenter.Values);&#13;
    };&#13;
&#13;
    presenter.drawInitial = function (value){&#13;
        presenter.initialViewNumbers = 0;&#13;
        presenter.currentViewNumbers = 0;&#13;
&#13;
        var regExp = new RegExp('\n');&#13;
        var j= 1;&#13;
        var step = 1;&#13;
        for(i = 0; i&lt; value.length; i++){&#13;
            if(value[i] != ' ') {&#13;
                if(value[i].match(regExp)) {&#13;
                    j++;&#13;
                    step = 1;&#13;
                } else{&#13;
                    $element = presenter.cells[j-1][step-1];&#13;
                    if(value[i] == '_'){&#13;
                        $($element).attr("value", '');&#13;
                    } else{&#13;
                        $($element).attr("value", value[i]);&#13;
                        $($element).attr( "readonly", "readonly" );&#13;
                        $($element).addClass("filled");&#13;
                        $($element).removeClass("active");&#13;
                        presenter.initialViewNumbers++;&#13;
                        presenter.currentViewNumbers++;&#13;
                        presenter.currentAnswer[j-1][step-1] = value[i];&#13;
                    }&#13;
                    step++;&#13;
                }&#13;
            }&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.disable = function(){&#13;
        presenter.hideAnswers();&#13;
        presenter.isDisable = true;&#13;
        presenter.$view.find('input.active').attr( "readonly", "readonly" );&#13;
        presenter.$view.find('input.cell').addClass('disable');&#13;
&#13;
    };&#13;
&#13;
    presenter.enable = function(){&#13;
        presenter.hideAnswers();&#13;
        presenter.isDisable = false;&#13;
        presenter.$view.find('input.active').removeAttr("readonly");&#13;
        presenter.$view.find('input.cell').removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.hideAnswers();&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.hideAnswers();&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.checkMyCurrentAnswer = function(){&#13;
&#13;
        var test = 0;&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                $element = presenter.cells[j-1][i-1];&#13;
                if($($element).attr("value") != ''){&#13;
                    if(presenter.correctAnswer[j-1][i-1] != $($element).attr("value")){&#13;
                        $($element).addClass("wrong");&#13;
                        $($element).removeClass("correct");&#13;
&#13;
                    } else{&#13;
                        $($element).removeClass("wrong");&#13;
                        $($element).addClass("correct");&#13;
                    }&#13;
                } else{&#13;
                    $($element).removeClass("wrong");&#13;
                    $($element).removeClass("correct");&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
&#13;
    };&#13;
&#13;
&#13;
    presenter.getState = function () {&#13;
        presenter.isErrorCheckingMode = false;&#13;
        var isVisible = presenter.isVisible;&#13;
        var wasVisible = presenter.wasVisible;&#13;
        var initialViewNumbers = presenter.initialViewNumbers;&#13;
        var wasDisable = presenter.wasDisable;&#13;
        var isDisable = presenter.isDisable;&#13;
        var Values = presenter.Values;&#13;
        var currentViewNumbers = presenter.currentViewNumbers;&#13;
&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                $element = presenter.cells[j-1][i-1];&#13;
                $($element).removeClass("wrong");&#13;
                $($element).removeClass("correct");&#13;
            }&#13;
        }&#13;
&#13;
        var current = presenter.currentAnswer;&#13;
&#13;
        return JSON.stringify({&#13;
            initialViewNumbers: initialViewNumbers,&#13;
            isVisible: isVisible,&#13;
            wasVisible: wasVisible,&#13;
            wasDisable: wasDisable,&#13;
            isDisable: isDisable,&#13;
            Values: Values,&#13;
            current: current,&#13;
            currentViewNumbers: currentViewNumbers&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var parsedState = JSON.parse(state);&#13;
        presenter.initialViewNumbers = parsedState.initialViewNumbers;&#13;
        presenter.isVisible = parsedState.isVisible;&#13;
        presenter.wasVisible = parsedState.wasVisible;&#13;
        presenter.Values = parsedState.Values;&#13;
        presenter.wasDisable = parsedState.wasDisable;&#13;
        presenter.isDisable = parsedState.isDisable;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
        presenter.currentAnswer = parsedState.current;&#13;
        presenter.currentViewNumbers = parsedState.currentViewNumbers;&#13;
&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                $(presenter.cells[j-1][i-1]).attr("value", presenter.currentAnswer[j-1][i-1]);&#13;
            }&#13;
        }&#13;
&#13;
        if(presenter.isDisable){&#13;
            presenter.$view.find("input.active").attr( "readonly", "readonly" );&#13;
            presenter.$view.find("input.cell").addClass('disable');&#13;
        } else {&#13;
            presenter.$view.find("input.active").removeAttr("readonly");&#13;
            presenter.$view.find("input.cell").removeClass('disable');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.hideAnswers();&#13;
        presenter.setWorkMode();&#13;
        presenter.isErrorCheckingMode = false;&#13;
        presenter.isShowAnswerMode = false;&#13;
        presenter.clearSudoku();&#13;
&#13;
        presenter.drawInitial(presenter.Values);&#13;
&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                $element = presenter.cells[j-1][i-1];&#13;
                $($element).removeClass("wrong");&#13;
                $($element).removeClass("correct");&#13;
            }&#13;
        }&#13;
        presenter.isVisible = presenter.wasVisible;&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
        presenter.isDisable = presenter.wasDisable;&#13;
        presenter.isDisable === true ?  presenter.disable() : presenter.enable();&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
&#13;
        if(presenter.isActivity === true) {&#13;
            var maxScore = 81 - presenter.initialViewNumbers;&#13;
            return maxScore;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.getScore = function () {&#13;
&#13;
        presenter.hideAnswers();&#13;
&#13;
        if(presenter.isActivity === true) {&#13;
            var correct = 0;&#13;
            for(j=1;j&lt;=9;j++){&#13;
                for(i=1;i&lt;=9;i++){&#13;
                    $element = presenter.cells[j-1][i-1];&#13;
                    if($($element).attr("value") != ''){&#13;
                        if(presenter.correctAnswer[j-1][i-1] == $($element).attr("value")){&#13;
                            correct++;&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
            var score = correct - presenter.initialViewNumbers;&#13;
            return score;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
&#13;
        presenter.hideAnswers();&#13;
&#13;
        if(presenter.isActivity === true) {&#13;
            var errors = 0;&#13;
            for(j=1;j&lt;=9;j++){&#13;
                for(i=1;i&lt;=9;i++){&#13;
                    $element = presenter.cells[j-1][i-1];&#13;
                    if($($element).attr("value") != ''){&#13;
                        if(presenter.correctAnswer[j-1][i-1] != $($element).attr("value")){&#13;
                            errors++;&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
            return errors;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
&#13;
&#13;
    presenter.neutralOption = function(){&#13;
        return presenter.getCurrentTime() == presenter.InitialTime ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
&#13;
        presenter.isErrorCheckingMode = true;&#13;
&#13;
&#13;
        presenter.hideAnswers();&#13;
&#13;
        if(presenter.isActivity === true) {&#13;
&#13;
            presenter.$view.find("input.active").attr( "readonly", "readonly" );&#13;
            presenter.$view.find("input.active").addClass("check");&#13;
            presenter.checkMyCurrentAnswer();&#13;
&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
&#13;
        presenter.isErrorCheckingMode = false;&#13;
        presenter.$view.find("input.active").removeClass("check");&#13;
&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                $element = presenter.cells[j-1][i-1];&#13;
                $($element).removeClass("wrong");&#13;
                $($element).removeClass("correct");&#13;
            }&#13;
        }&#13;
        if(!presenter.isDisable){&#13;
            presenter.$view.find("input.active").removeAttr("readonly");&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function(value, id, score) {&#13;
        return {&#13;
            source : presenter.modelID,&#13;
            item : "" + id,&#13;
            value : '' + value,&#13;
            score : '' + score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(value, id, score) {&#13;
        var eventData = presenter.createEventData(value, id, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
&#13;
        presenter.setWorkMode();&#13;
&#13;
        if(presenter.isActivity === true) {&#13;
            presenter.isShowAnswerMode = true;&#13;
            presenter.isErrorCheckingMode = true;&#13;
&#13;
            presenter.$view.find("input.active").attr( "readonly", "readonly" );&#13;
            presenter.$view.find("input.active").addClass("showAnswers");&#13;
&#13;
            for(j=1;j&lt;=9;j++){&#13;
                for(i=1;i&lt;=9;i++){&#13;
                    $(presenter.cells[j-1][i-1]).attr("value", presenter.correctAnswer[j-1][i-1]);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
&#13;
        if(presenter.isActivity === true &amp;&amp; presenter.isShowAnswerMode == true) {&#13;
            presenter.isErrorCheckingMode = false;&#13;
            presenter.$view.find("input.active").removeClass("showAnswers");&#13;
            presenter.$view.find("input.active").removeAttr("readonly");&#13;
&#13;
            for(j=1;j&lt;=9;j++){&#13;
                for(i=1;i&lt;=9;i++){&#13;
                    $(presenter.cells[j-1][i-1]).attr("value", presenter.currentAnswer[j-1][i-1]);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SwiffyAnimation" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Animations" nameLabel="SwiffyAnimation_property_animations" type="list">
			<property displayName="Swiffy File" name="swiffyobject" nameLabel="SwiffyAnimation_property_swiffy_object" type="file"/>
			<property displayName="Auto Play" name="autoPlay" nameLabel="SwiffyAnimation_property_auto_play" type="boolean"/>
			<property displayName="Disable Transparent Background" name="disableTransparentBackground" nameLabel="SwiffyAnimation_property_disable_transparent_background" type="boolean"/>
            <property displayName="Do Not Preload" name="doNotPreload" nameLabel="SwiffyAnimation_property_do_not_preload" type="boolean"/>
		</property>
		<property displayName="Initial Animation" name="initialAnimation" nameLabel="SwiffyAnimation_property_initial_animation" type="string"/>
	</model>
<css>.swiffycontainer {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
}&#13;
&#13;
.swiffyAnimation {&#13;
	position: absolute;&#13;
}&#13;
&#13;
.swiffy-loading-image {&#13;
	position: absolute;&#13;
	width: 30px;&#13;
	height: 30px;&#13;
	border: 0;&#13;
	outline: 0;&#13;
}&#13;
</css><view>&lt;div class="swiffyContainer"&gt;&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="swiffy-loading-image" /&gt;&#13;
</view><preview>&lt;div class="swiffyContainer"&gt;&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="swiffy-loading-image" style="display: none;" /&gt;&#13;
</preview><presenter>function AddonSwiffyAnimation_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.run = function(view, model){&#13;
        //console.log("--------------- run 1.2 ---------------");&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.Animations = model.Animations;&#13;
        presenter.swiffyContainer = $(view).find('.swiffyContainer')[0];&#13;
        presenter.stage = [];&#13;
        presenter.swiffyObject = [];&#13;
        presenter.swiffyItem = [];&#13;
        presenter.animsLoaded = [];&#13;
        presenter.animsRunning = [];&#13;
&#13;
        presenter.isVisible = model["Is Visible"] == 'True';&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        presenter.animationLoadedDeferred = [];&#13;
        presenter.animationLoaded = [];&#13;
&#13;
        //show loading icon&#13;
        var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
        presenter.loadingIconImg = $(view).find('.swiffy-loading-image')[0];&#13;
        $(presenter.loadingIconImg).css({&#13;
            left: (presenter.model.Width/2)-15 + 'px',&#13;
            top: (presenter.model.Height/2)-15 + 'px'&#13;
        });&#13;
        $(presenter.loadingIconImg).attr('src',loadingSrc);&#13;
&#13;
        //determine presenter.currentAnimationItem&#13;
        if(model.initialAnimation === ""){&#13;
            model.initialAnimation = 1;&#13;
        } else {&#13;
            //incorrect model.initialAnimation number -&gt; error&#13;
            if( model.initialAnimation &lt; 1 || model.initialAnimation &gt; presenter.Animations.length || model.initialAnimation%1 !== 0 ){&#13;
                presenter.errorHandler("Error: Incorrect Initial Animation number.");&#13;
                $(presenter.loadingIconImg).css('display','none');&#13;
                return;&#13;
            }&#13;
            model.initialAnimation = parseInt(model.initialAnimation, 10);&#13;
        }&#13;
        presenter.currentAnimationItem = model.initialAnimation;&#13;
&#13;
        //loop through Animations&#13;
        $(presenter.Animations).each(function(i, animation){&#13;
            //initiate deferred for every animation&#13;
            presenter.animationLoadedDeferred[i+1] = new $.Deferred();&#13;
            presenter.animationLoaded[i+1] = presenter.animationLoadedDeferred[i+1].promise();&#13;
&#13;
            //empty Swiffy Object file -&gt; error&#13;
            if(animation.swiffyobject === ''){&#13;
                presenter.errorHandler("Error: Swiffy Object in Item "+(i+1)+" is missing.");&#13;
                $(presenter.loadingIconImg).css('display','none');&#13;
                return;&#13;
            }&#13;
&#13;
            var visibility = "hidden";&#13;
            if(presenter.currentAnimationItem - 1 == i){&#13;
                visibility = "visible";&#13;
            }&#13;
&#13;
            $(presenter.swiffyContainer).append('&lt;div class="swiffyItem_'+i+' swiffyItem" style="position: absolute; width: 100%; height: 100%;"&gt;&lt;/div&gt;');&#13;
&#13;
            presenter.swiffyItem[i] = $(view).find('.swiffyItem_'+i)[0];&#13;
            $(presenter.swiffyItem[i]).css('visibility', visibility);&#13;
&#13;
            //console.log("i: "+i+", animation.autoPlay: "+animation.autoPlay)&#13;
            if(animation.autoPlay === 'True'){&#13;
                presenter.animsRunning[i] = true;&#13;
            }else{&#13;
                presenter.animsRunning[i] = false;&#13;
            }&#13;
            //console.log("presenter.animsRunning["+i+"]: "+presenter.animsRunning[i])&#13;
&#13;
            if(animation.doNotPreload !== 'True'){&#13;
                //console.log('animation '+i+' has do not preload disabled, loading');&#13;
                presenter.animsLoaded[i] = true;&#13;
&#13;
                $.getScript(animation.swiffyobject, function(){&#13;
                    presenter.swiffyObject[i] = swiffyobject;&#13;
                    presenter.stage[i] = new swiffy.Stage(presenter.swiffyItem[i],presenter.swiffyObject[i]);&#13;
&#13;
                    if(animation.disableTransparentBackground === 'False'){&#13;
                        presenter.stage[i].setBackground(null);&#13;
                    }&#13;
&#13;
                    if(presenter.animsRunning[i] === true){&#13;
                        presenter.stage[i].start();&#13;
                    }&#13;
&#13;
                    presenter.animationLoadedDeferred[i+1].resolve();&#13;
&#13;
                });//end getScript&#13;
            }&#13;
&#13;
            //Last item, checking if all are loaded&#13;
            if(presenter.Animations.length == i+1){&#13;
                presenter.checkIfAllAnimationsAreLoaded();&#13;
            }&#13;
&#13;
        });//end loop&#13;
&#13;
        //stop propagation&#13;
        $(view).find('.swiffyContainer').click(function(e) {&#13;
            e.stopImmediatePropagation();&#13;
            e.stopPropagation();&#13;
        });&#13;
        //console.log('run');&#13;
    };&#13;
&#13;
    presenter.checkIfAllAnimationsAreLoaded = function(){&#13;
        //console.log("checkIfAllAnimationsAreLoaded()");&#13;
        presenter.loaded = false;&#13;
&#13;
        var count = 0;&#13;
        var last = 1;&#13;
        //loop through Animations&#13;
        $(presenter.Animations).each(function(i, animation){&#13;
            if(presenter.animsLoaded[i]){&#13;
                count++;&#13;
                last = i+1;&#13;
            }&#13;
        });&#13;
&#13;
        if(count &gt; 0){&#13;
            presenter.animationLoaded[last].then(function() {&#13;
                //console.log("animationLoaded["+last+"]");&#13;
                if(presenter.animsLoaded.length == last){&#13;
                    presenter.loaded = true;&#13;
                    //hide loading icon&#13;
                    $(presenter.loadingIconImg).css('display','none');&#13;
                }&#13;
            });&#13;
        }else{&#13;
            $(presenter.loadingIconImg).css('display','none');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        //presenter.run(view,model);&#13;
        presenter.$view = $(view);&#13;
&#13;
        //ERROR CHECKING&#13;
        //incorrect model.initialAnimation number -&gt; error&#13;
        if(model.initialAnimation === ""){&#13;
            model.initialAnimation = 1;&#13;
        } else {&#13;
            if( model.initialAnimation &lt; 1 || model.initialAnimation &gt; model.Animations.length || model.initialAnimation%1 !== 0 ){&#13;
                presenter.errorHandler("Error: Incorrect Initial Animation number.");&#13;
                return;&#13;
            }&#13;
            model.initialAnimation = parseInt(model.initialAnimation, 10);&#13;
        }&#13;
        //empty Swiffy Object file -&gt; error&#13;
        $(model.Animations).each(function(i, animation){&#13;
            if(animation.swiffyobject === ''){&#13;
                presenter.errorHandler("Error: Swiffy Object in Item "+(i+1)+" is missing.");&#13;
                return;&#13;
            }&#13;
        });&#13;
        var message = "Preview unavailable in editor. Please use Preview button.";&#13;
        presenter.$view.prepend('&lt;div style="color: #444444; font-size: 12px; font-family: Arial;"&gt;'+message+'&lt;/div&gt;');&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'loadAnimation': presenter.loadAnimation,&#13;
            'start': presenter.start,&#13;
            'replay': presenter.replay,&#13;
            'setVars': presenter.setVars,&#13;
            'switchAnimation': presenter.switchAnimation&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params[0], presenter);&#13;
    };&#13;
&#13;
    presenter.loadAnimation = function(item){&#13;
        var i = typeof item !== 'undefined' ? i = item - 1 : i = presenter.currentAnimationItem - 1;&#13;
        var animation = presenter.Animations[i];&#13;
&#13;
        //console.log("i: "+i+", canvas: "+presenter.$view.find('.swiffyItem_'+i+' canvas')[0])&#13;
        //console.log("presenter.animsRunning[i]: "+presenter.animsRunning[i]);&#13;
&#13;
        if(typeof presenter.$view.find('.swiffyItem_'+i+' canvas')[0] === 'undefined'){&#13;
            //console.log('---warunki speĹ‚nione, Ĺ‚adujÄ™ '+i+' ---');&#13;
&#13;
            $(presenter.loadingIconImg).css('display','block');&#13;
            presenter.animsLoaded[i] = true;&#13;
&#13;
            $.getScript(animation.swiffyobject, function(){&#13;
                presenter.swiffyObject[i] = swiffyobject;&#13;
                presenter.stage[i] = new swiffy.Stage(presenter.swiffyItem[i],presenter.swiffyObject[i]);&#13;
&#13;
                if(animation.disableTransparentBackground === 'False'){&#13;
                    presenter.stage[i].setBackground(null);&#13;
                }&#13;
&#13;
                if(presenter.animsRunning[i] === true){&#13;
                    presenter.stage[i].start();&#13;
                }&#13;
&#13;
                presenter.animationLoadedDeferred[i+1].resolve();&#13;
&#13;
                if(presenter.currentAnimationItem - 1 == i){&#13;
                    $(presenter.loadingIconImg).css('display','none');&#13;
                }&#13;
&#13;
                //stop propagation&#13;
                presenter.$view.find('.swiffyContainer').click(function(e){&#13;
                    e.stopImmediatePropagation();&#13;
                    e.stopPropagation();&#13;
                });&#13;
            });//end getScript&#13;
        }&#13;
    };&#13;
&#13;
    presenter.start = function(item){&#13;
        //console.log('start '+i);&#13;
        var i = typeof item !== 'undefined' ? i = item - 1 : i = presenter.currentAnimationItem - 1;&#13;
        if(presenter.animsRunning[i] === false &amp;&amp; typeof presenter.stage[i] !== 'undefined'){&#13;
            presenter.stage[i].start();&#13;
        }&#13;
        if(presenter.animsLoaded[i] == true){&#13;
            presenter.animsRunning[i] = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVars = function(commands){&#13;
        //console.log('setFlashVars');&#13;
        presenter.animationLoaded[presenter.currentAnimationItem].then(function() {&#13;
            commands = commands.split(",");&#13;
            var i = presenter.currentAnimationItem-1;&#13;
            presenter.stage[i].setFlashVars(commands[0]+'='+commands[1]);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.errorHandler = function(message){&#13;
        presenter.$view.prepend('&lt;div style="color: red; font-size: 12px; font-family: Arial;"&gt;'+message+'&lt;/div&gt;');&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.isVisible = isVisible;&#13;
        presenter.$view.css("display", isVisible ? "block" : "none");&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
&#13;
    };&#13;
&#13;
    presenter.replay = function(item){&#13;
        var itemToDestroy = typeof item !== 'undefined' ? itemToDestroy = item - 1 : itemToDestroy = presenter.currentAnimationItem - 1;&#13;
        if(presenter.animsRunning[itemToDestroy] === true &amp;&amp; typeof presenter.stage[itemToDestroy] !== 'undefined'){&#13;
            var currentSwiffyObject = presenter.swiffyObject[itemToDestroy];&#13;
            presenter.swiffyItem = presenter.$view.find('.swiffyItem_'+itemToDestroy)[0];&#13;
            presenter.stage[itemToDestroy].destroy();&#13;
            presenter.stage[itemToDestroy] = new swiffy.Stage(presenter.swiffyItem,currentSwiffyObject, { });&#13;
            if(presenter.Animations[itemToDestroy].disableTransparentBackground === 'False'){&#13;
                presenter.stage[itemToDestroy].setBackground(null);&#13;
            }&#13;
            presenter.stage[itemToDestroy].start();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.switchAnimation = function(item){&#13;
        presenter.currentAnimationItem = item;&#13;
        $(presenter.Animations).each(function(i,v){&#13;
            if(item == (i+1)){&#13;
                $(presenter.$view.find('.swiffyItem_'+i)[0]).css("visibility", "visible");&#13;
            }else{&#13;
                $(presenter.$view.find('.swiffyItem_'+i)[0]).css("visibility", "hidden");&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        if(presenter.loaded === true){&#13;
            presenter.loaded = false;&#13;
            $(presenter.swiffyContainer).html("");&#13;
            $(presenter.Animations).each(function(i, animation){&#13;
                if(presenter.animsRunning[i] === true &amp;&amp; typeof presenter.stage[i] !== 'undefined'){&#13;
                    presenter.stage[i].destroy();&#13;
                }&#13;
            });&#13;
            $(presenter.loadingIconImg).css('display','block');&#13;
            presenter.run(presenter.view,presenter.model);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        //console.log("---getState!");&#13;
        if(presenter.loaded === true){&#13;
            presenter.loaded = false;&#13;
            $(presenter.swiffyContainer).html("");&#13;
            $(presenter.Animations).each(function(i, animation){&#13;
                if(presenter.animsRunning[i] === true &amp;&amp; typeof presenter.stage[i] !== 'undefined'){&#13;
                    presenter.stage[i].destroy();&#13;
                }&#13;
            });&#13;
            $(presenter.loadingIconImg).css('display','block');&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            'currentAnimationItem' : presenter.currentAnimationItem,&#13;
            'animsRunning' : presenter.animsRunning,&#13;
            'animsLoaded' : presenter.animsLoaded,&#13;
            'isVisible' : presenter.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
        //console.log("---setState!");&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.currentAnimationItem = parsedState.currentAnimationItem;&#13;
        presenter.switchAnimation(presenter.currentAnimationItem);&#13;
&#13;
        presenter.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        presenter.animsRunning = parsedState.animsRunning;&#13;
        presenter.animsLoaded = parsedState.animsLoaded;&#13;
&#13;
        $(presenter.animsLoaded).each(function(i, loaded){&#13;
&#13;
            if(loaded &amp;&amp; presenter.Animations[i].doNotPreload === 'True'){&#13;
                var item = parseInt(i+1,10);&#13;
                presenter.loadAnimation(item);&#13;
            }&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Table" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Rows" nameLabel="Table_property_rows" type="string"/>
		<property name="Columns" nameLabel="Table_property_columns" type="string"/>
		<property name="Table cells" nameLabel="Table_property_table_cells" type="list">
			<property name="Row" nameLabel="Table_property_row" type="string"/>
			<property name="Column" nameLabel="Table_property_column" type="string"/>
			<property isLocalized="true" name="Content" nameLabel="Table_property_content" type="html"/>
            <property name="CSS Class" nameLabel="Table_property_css_class" type="string"/>
            <property name="CSS Style" nameLabel="Table_property_css_style" type="string"/>
		</property>
		<property name="Columns width" nameLabel="Table_property_columns_width" type="list">
			<property name="Width" nameLabel="Table_property_width" type="string"/>
		</property>
		<property name="Rows height" nameLabel="Table_property_rows_height" type="list">
			<property name="Height" nameLabel="Table_property_height" type="string"/>
		</property>
		<property name="Is not an activity" nameLabel="Table_property_is_not_an_activity" type="boolean"/>
		<property name="Is disabled" nameLabel="Table_property_is_disabled" type="boolean"/>
		<property name="Case sensitive" nameLabel="Table_property_case_sensitive" type="boolean"/>
		<property name="Ignore punctuation" nameLabel="Table_property_ignore_punctuation" type="boolean"/>
		<property name="Gap width" nameLabel="Table_property_gap_width" type="string"/>
        <property name="Gap Type" nameLabel="Table_property_gap_type" type="{editable, draggable, math}"/>
	</model>
<css>.table-addon-wrapper {&#13;
    border: 0;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    direction: ltr;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    direction: ltr;&#13;
}&#13;
&#13;
.table-addon-wrapper table {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    border-collapse: collapse;&#13;
    vertical-align: middle;&#13;
}&#13;
&#13;
.table-addon-wrapper table td {&#13;
    padding-left: 10px;&#13;
    padding-right: 10px;&#13;
    text-align: center;&#13;
    vertical-align: middle;&#13;
}&#13;
&#13;
.table-addon-wrapper table tr td {&#13;
    border: 1px solid black;&#13;
}&#13;
&#13;
.table-addon-wrapper .gapFilled{&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.table-addon-wrapper .draggable-gap{&#13;
    height: 20px;&#13;
    width: 40px;&#13;
}&#13;
</css><view>&lt;div class="table-addon-wrapper"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="table-addon-wrapper"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonTable_create() {&#13;
&#13;
    /*&#13;
        INTEGRATION WITH MATH MODULE:&#13;
            Table supports integration with Math module. Table which is not activity, will show answers provided by&#13;
            Math module. Requires implementation of methods and variables listed below.&#13;
&#13;
            Attributes:&#13;
                @param isConnectedWith {boolean}  required by Math module, to detect if table is connected with Math&#13;
&#13;
            Methods:&#13;
                presenter.setGapAnswer (gapIndex, answer, answersLength) - method used by Math to set gap answer at&#13;
                    show answers when table is not activity. Gap index based by DOM occurence order. 1-n based&#13;
&#13;
                presenter.setUserValue (gapIndex, value) - method used by Math module to restore user answer at hide answers&#13;
&#13;
                presenter.getValue (gapIndex) - method used by Math module to get user value in gap by index&#13;
&#13;
                presenter.isActivity - method used by Math module to determine if addon is activity&#13;
     */&#13;
&#13;
&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    var isConnectedWithMath = false;&#13;
    presenter.ERROR_CODES = {&#13;
        'RW_01': 'Number of rows must be a positive integer!',&#13;
        'CL_01': 'Number of columns must be a positive integer!',&#13;
        'CO_01': 'Row number must be a positive integer!',&#13;
        'CO_02': 'Column number must be a positive integer',&#13;
        'CO_03': 'Row number must be a number from 1 to rows count!',&#13;
        'CO_04': 'Column number must be a number from 1 to columns count',&#13;
        'CO_05': 'Each table cell can be defined only once!',&#13;
        'CO_06': 'Empty table cell definition must contain only one empty element!',&#13;
        'CR_00': 'Column and row numbers must be sequential within one table cell',&#13;
        'CW_01': "Number of items in 'Columns width' property cannot be higher than number of columns!",&#13;
        'RH_01': "Number of items in 'Rows height' property cannot be higher than number of rows!",&#13;
        'GW_01': "Gap width incorrect!"&#13;
    };&#13;
&#13;
    presenter.replaceGapID = function (gap, parsedText) {&#13;
        var gapID = presenter.configuration.addonID + gap.id;&#13;
        var patt = new RegExp("id='" + gap.id + "'");&#13;
        var rep = "id='" + gapID + "'";&#13;
        return  parsedText.replace(patt, rep);&#13;
    };&#13;
&#13;
    function getParsedHTMLView () {&#13;
        return presenter.textParser.parseGaps(presenter.$view.html(),&#13;
            { isCaseSensitive: presenter.configuration.isCaseSensitive }&#13;
        );&#13;
    }&#13;
&#13;
    presenter.parseGaps = function () {&#13;
        if (presenter.configuration.gapType == "draggable") {&#13;
            return presenter.parseGapsWrapper(presenter.DraggableDroppableGap);&#13;
        } else {&#13;
            return presenter.parseGapsWrapper(presenter.EditableInputGap);&#13;
        }&#13;
    };&#13;
&#13;
    function changeInlineGapsIDs (inlineGaps, parsedText) {&#13;
        inlineGaps.forEach(function (gap) {&#13;
            parsedText = presenter.replaceGapID(gap, parsedText);&#13;
            var gapID = presenter.configuration.addonID + gap.id;&#13;
&#13;
            presenter.gapsContainer.addGap(new presenter.SelectGap(gapID, [gap.answer], gap.value));&#13;
        });&#13;
&#13;
        return parsedText;&#13;
    }&#13;
&#13;
    function changeSimpleGapsIDs (simpleGaps, parsedText, objectType) {&#13;
        simpleGaps.forEach(function (gap) {&#13;
            parsedText = presenter.replaceGapID(gap, parsedText);&#13;
            var gapID = presenter.configuration.addonID + gap.id;&#13;
&#13;
            presenter.gapsContainer.addGap(new objectType(gapID, gap.answers, 1));&#13;
        });&#13;
&#13;
        return parsedText;&#13;
    }&#13;
&#13;
    presenter.parseGapsWrapper = function (objectType) {&#13;
        var textParserResult = getParsedHTMLView();&#13;
&#13;
        var parsedText = textParserResult.parsedText;&#13;
&#13;
        parsedText = changeSimpleGapsIDs(textParserResult.gaps, parsedText, objectType);&#13;
        parsedText = changeInlineGapsIDs(textParserResult.inLineGaps, parsedText, objectType);&#13;
&#13;
        presenter.$view.html(parsedText);&#13;
    };&#13;
&#13;
    presenter.setGapsClassAndWidth = function () {&#13;
        presenter.$view.find('.ic_inlineChoice').addClass('ic_gap');&#13;
        presenter.$view.find('.ic_inlineChoice').css('width', presenter.configuration.gapWidth.value+"px");&#13;
    };&#13;
&#13;
    presenter.initializeGaps = function (isPreview) {&#13;
        if (!isPreview) {&#13;
            presenter.parseGaps();&#13;
        }&#13;
&#13;
        if(presenter.configuration.gapType == 'math'){&#13;
            presenter.gapsContainer.gaps = [];&#13;
            $(presenter.$view).find('input').each(function () {&#13;
                $(this).replaceWith("\\gap{" +&#13;
                    $(this).attr('id') +&#13;
                    "|" +&#13;
                    1 +&#13;
                    "|" +&#13;
                    presenter.configuration.gapWidth.value +&#13;
                    "|" +&#13;
                    "{{value:" + $(this).attr('id') + "}}" +&#13;
                    "}");&#13;
            });&#13;
        }&#13;
&#13;
        presenter.gapsContainer.replaceDOMViewWithGap();&#13;
        presenter.setGapsClassAndWidth();&#13;
    };&#13;
&#13;
    function deleteCommands () {&#13;
        delete presenter.getScore;&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.getState;&#13;
        delete presenter.setState;&#13;
        delete presenter.getGapTextCommand;&#13;
        delete presenter.getGapTextCommand;&#13;
        delete presenter.markGapAsEmptyCommand;&#13;
        delete presenter.markGapAsCorrectCommand;&#13;
        delete presenter.markGapAsWrongCommand;&#13;
        delete presenter.enableGapCommand;&#13;
        delete presenter.enableAllGaps;&#13;
        delete presenter.disableGapCommand;&#13;
        delete presenter.disableAllGaps;&#13;
    }&#13;
&#13;
    function replaceInputsInPreview () {&#13;
        if (presenter.configuration.gapType == "draggable") {&#13;
            var inputs = presenter.$wrapper.find("input");&#13;
&#13;
            for (var i = 0; i &lt; inputs.length; i++) {&#13;
                $(inputs[i]).replaceWith(presenter.DraggableDroppableGap.prototype.createView());&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.logic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.$wrapper = presenter.$view.find('.table-addon-wrapper');&#13;
        presenter.configuration = presenter.validateModel(presenter.upgradeModel(model));&#13;
&#13;
        if(presenter.configuration.gapType == "math"){&#13;
            var mathJaxDeferred = new jQuery.Deferred();&#13;
            presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;&#13;
            presenter.mathJaxProcessEnded = mathJaxDeferred.promise();&#13;
&#13;
            MathJax.Hub.Register.MessageHook("End Process", function (message) {&#13;
                if ($(message[1]).hasClass('ic_page')) {&#13;
                    presenter.mathJaxProcessEndedDeferred.resolve();&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        if(presenter.configuration.gapType == "math"){&#13;
            presenter.mainLogic(isPreview);&#13;
            presenter.mathJaxProcessEnded.then(function() {&#13;
                MathJax.CallBack.Queue().Push(function () {&#13;
                    MathJax.Hub.Typeset(presenter.$view.find(".table-addon-wrapper")[0]);&#13;
                    if(!isPreview){&#13;
                        var checkSelector = setInterval(function () {&#13;
                            if ($(presenter.$view).find('input').length &gt; 0) {&#13;
                                presenter.gapsContainer.gaps = [];&#13;
                                $(presenter.$view).find('input').each(function (_, index) {&#13;
                                    for(var i = 0; i &lt; presenter.gapsAnswers.length; i++){&#13;
                                        if(presenter.gapsAnswers[i].id == $(this).attr('id')){&#13;
                                            var correctAnswers = presenter.gapsAnswers[i].answers;&#13;
                                        }&#13;
                                    }&#13;
                                    presenter.gapsContainer.addGap(new presenter.EditableInputGap($(this).attr('id'), correctAnswers, 1));&#13;
                                });&#13;
                                clearInterval(checkSelector);&#13;
                                presenter.eventBus.sendEvent('ValueChanged', []);&#13;
                            }&#13;
                        }, 100);&#13;
                    }&#13;
                });&#13;
            });&#13;
        }else{&#13;
            presenter.mainLogic(isPreview);&#13;
        }&#13;
&#13;
        if(isPreview) {&#13;
            presenter.setEditorGapWidth();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setEditorGapWidth = function () {&#13;
        presenter.$view.find('input').css("width", presenter.configuration.gapWidth.value+"px");&#13;
        presenter.$view.find('span').css("width", presenter.configuration.gapWidth.value+"px");&#13;
    };&#13;
&#13;
    presenter.mainLogic = function (isPreview) {&#13;
        presenter.gapsContainer = new presenter.GapsContainerObject();&#13;
&#13;
        var $table = presenter.generateTable(presenter.configuration.contents, isPreview);&#13;
        presenter.setColumnWidth($table, presenter.configuration.columnsWidths);&#13;
        presenter.setRowHeight($table, presenter.configuration.rowsHeight);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        presenter.initializeGaps(isPreview);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.parseDefinitionLinks();&#13;
        } else {&#13;
            replaceInputsInPreview();&#13;
        }&#13;
&#13;
        presenter.gapsContainer.replaceGapsDOMWithView();&#13;
        presenter.lastDraggedItem = {};&#13;
&#13;
        if (presenter.configuration.isDisabledByDefault) {&#13;
            presenter.gapsContainer.lockAllGaps();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.textParser = new TextParserProxy(controller.getTextParser());&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        presenter.eventBus.addEventListener('ItemSelected', this);&#13;
    };&#13;
&#13;
    presenter.getSelectedItem = function () {&#13;
        var item = presenter.lastDraggedItem;&#13;
&#13;
        presenter.lastDraggedItem = {};&#13;
&#13;
        return item;&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.logic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.logic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.gapsContainer.reset();&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if(isConnectedWithMath){&#13;
            presenter.gapsContainer.unlockAllGaps();&#13;
        }&#13;
&#13;
        var spans;&#13;
        var gaps = presenter.gapsContainer.getGapsState();&#13;
&#13;
        if (presenter.configuration.gapType === "draggable") {&#13;
            spans = presenter.gapsContainer.getState();&#13;
        } else {&#13;
            spans = null;&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            gaps: gaps,&#13;
            spans: spans&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (rawState) {&#13;
        var state = JSON.parse(rawState);&#13;
&#13;
        presenter.setVisibility(state.isVisible);&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
&#13;
        if(presenter.configuration.gapType == 'math'){&#13;
            var checkSelector = setInterval(function () {&#13;
                if ($(presenter.$view).find('.mathGap').length == presenter.gapsAnswers.length) {&#13;
                    try{&#13;
                    presenter.gapsContainer.setGapsState(state.gaps);&#13;
                    presenter.gapsContainer.setSpansState(state.spans);&#13;
                    clearInterval(checkSelector);&#13;
                    }catch(e){}&#13;
                }&#13;
            }, 100);&#13;
        }else{&#13;
            presenter.gapsContainer.setGapsState(state.gaps);&#13;
            presenter.gapsContainer.setSpansState(state.spans);&#13;
        }&#13;
    };&#13;
&#13;
    /**&#13;
     * Generate table row (tr) element. Each cell has col_C and row_R classes where R is row number&#13;
     * (counted from 1 to rows count) and C is column number (from 1 to columns count).&#13;
     *&#13;
     * @param row row number counted from 0&#13;
     * @param content row content array&#13;
     * @param isPreview&#13;
     *&#13;
     * @return {jQuery} jQuery reference to new table row element&#13;
     */&#13;
    presenter.generateRow = function (row, content, isPreview) {&#13;
        var $rowElement = $(document.createElement('tr')), i, length;&#13;
&#13;
        for (i = 0, length = content.length; i &lt; length; i++) {&#13;
            if (!content[i]) continue;&#13;
&#13;
            var $element = $(document.createElement('td'));&#13;
&#13;
            $element.addClass('row_' + (row + 1));&#13;
            $element.addClass('col_' + (i + 1));&#13;
            $element.html(content[i].content);&#13;
            $element.attr({&#13;
                colspan: content[i].colSpan,&#13;
                rowspan: content[i].rowSpan&#13;
            });&#13;
            if (content[i].class) {&#13;
                $element.addClass(content[i].class)&#13;
            }&#13;
            if (content[i].style) {&#13;
                $element.attr({style:content[i].style})&#13;
            }&#13;
&#13;
            $rowElement.append($element);&#13;
        }&#13;
&#13;
        return $rowElement;&#13;
    };&#13;
&#13;
    presenter.parseDefinitionLinks = function () {&#13;
        $.each(presenter.$view.find('td'), function (index, element) {&#13;
            $(element).html(presenter.textParser.parse($(element).html()));&#13;
        });&#13;
&#13;
        presenter.textParser.connectLinks(presenter.$view);&#13;
    };&#13;
&#13;
    /**&#13;
     * Generate table element with content based on provided array.&#13;
     *&#13;
     * @param content array with table cells contents&#13;
     * @param isPreview&#13;
     *&#13;
     * @return {jQuery} jQuery reference to new table element&#13;
     */&#13;
    presenter.generateTable = function (content, isPreview) {&#13;
        var $table = $(document.createElement('table'));&#13;
&#13;
        for (var i = 0, length = content.length; i &lt; length; i++) {&#13;
            var $row = presenter.generateRow(i, content[i], isPreview);&#13;
&#13;
            $table.append($row);&#13;
        }&#13;
&#13;
        presenter.$wrapper.html($table);&#13;
&#13;
        return $table;&#13;
    };&#13;
&#13;
    presenter.setColumnWidth = function ($table, columnWidth) {&#13;
        var firstRow = $table.find('.row_1'), i;&#13;
&#13;
        for (i = 0; i &lt; columnWidth.length; i++) {&#13;
            $(firstRow[i]).css('width', columnWidth[i]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setRowHeight = function ($table, rowHeight) {&#13;
        var i;&#13;
        for (i = 0; i &lt; rowHeight.length; i++) {&#13;
            $table.find('.row_' + (i + 1)).each(function () {&#13;
                $(this).css('height', rowHeight[i]);&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    /**&#13;
     * Validate content list and convert it into multidimensional {Array}. Not specified contents equals empty elements.&#13;
     *&#13;
     * @param content list of content definition (consist Row, Column and Content fields)&#13;
     * @param rowsCount number of rows&#13;
     * @param columnsCount number of columns&#13;
     *&#13;
     * @return {Object} validation result&#13;
     * @return {Boolean} isValid&#13;
     * @return {String} error code if any occurs&#13;
     * @return {Array} contents array of contents. Dimensions based on Rows and Columns properties&#13;
     */&#13;
    presenter.validateContent = function (content, rowsCount, columnsCount) {&#13;
        var validatedContent = [], controlArray = [], c, r;&#13;
&#13;
        for (r = 0; r &lt; rowsCount; r++) {&#13;
            validatedContent[r] = [];&#13;
            controlArray[r] = [];&#13;
&#13;
            for (c = 0; c &lt; columnsCount; c++) {&#13;
                validatedContent[r][c] = { content: "", rowSpan: 1, colSpan: 1 };&#13;
                controlArray[r][c] = false;&#13;
            }&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isArrayElementEmpty(content[0])) {&#13;
            if (content.length === 1) {&#13;
                return { isValid: true, content: validatedContent };&#13;
            } else {&#13;
                return { isValid: false, errorCode: 'CO_06' };&#13;
            }&#13;
        }&#13;
&#13;
        for (var i = 0, length = content.length; i &lt; length; i++) {&#13;
            var rows = presenter.validateSequence(content[i].Row, rowsCount, true);&#13;
            if (!rows.isValid)  return { isValid: false, errorCode: rows.errorCode };&#13;
&#13;
            var columns = presenter.validateSequence(content[i].Column, columnsCount, false);&#13;
            if (!columns.isValid)  return { isValid: false, errorCode: columns.errorCode };&#13;
&#13;
            for (r = 0; r &lt; rows.values.length; r++) {&#13;
                for (c = 0; c &lt; columns.values.length; c++) {&#13;
                    var row = rows.values[r] - 1;&#13;
                    var column = columns.values[c] - 1;&#13;
&#13;
                    if (controlArray[row][column]) return { isValid: false, errorCode: 'CO_05' };&#13;
                    controlArray[row][column] = true;&#13;
&#13;
                    if (r === 0 &amp;&amp; c == 0) {&#13;
                        validatedContent[row][column] = {&#13;
                            content: content[i].Content,&#13;
                            rowSpan: rows.values.length,&#13;
                            colSpan: columns.values.length,&#13;
                            class : content[i].hasOwnProperty("CSS Class") ? content[i]["CSS Class"] : "",&#13;
                            style: content[i].hasOwnProperty("CSS Style") ? content[i]["CSS Style"] : ""&#13;
                        };&#13;
                    } else {&#13;
                        validatedContent[row][column] = undefined;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return { isValid: true, content: validatedContent };&#13;
    };&#13;
&#13;
    presenter.validateSingleNumber = function (column, columnsCount, isRowValidated) {&#13;
        var validatedColumn = ModelValidationUtils.validatePositiveInteger(column);&#13;
&#13;
        if (!validatedColumn.isValid) return { isValid: false, errorCode: isRowValidated ? 'CO_01' : 'CO_02'};&#13;
        if (validatedColumn.value &gt; columnsCount) return { isValid: false, errorCode: isRowValidated ? 'CO_03' : 'CO_04' };&#13;
&#13;
        return {isValid: true, value: validatedColumn.value };&#13;
    };&#13;
&#13;
    presenter.validateSequence = function (columns, columnsCount, isRowValidated) {&#13;
        var values = [], validatedColumn, splittedColumns, i;&#13;
&#13;
        splittedColumns = columns.indexOf(',') === -1 ? [columns] : columns.split(',');&#13;
&#13;
        for (i = 0; i &lt; splittedColumns.length; i++) {&#13;
            validatedColumn = presenter.validateSingleNumber(splittedColumns[i], columnsCount, isRowValidated);&#13;
&#13;
            if (!validatedColumn.isValid) return { isValid: false, errorCode: validatedColumn.errorCode };&#13;
&#13;
            values.push(validatedColumn.value);&#13;
        }&#13;
&#13;
        if (values.length &gt; 1) {&#13;
            for (i = 1; i &lt; values.length; i++) {&#13;
                if (values[i - 1] + 1 !== values[i]) {&#13;
                    return { isValid: false, errorCode: 'CR_00' };&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return { values: values, isValid: true };&#13;
    };&#13;
&#13;
    presenter.convertDimensionsArray = function (columnWidth, columnsCount, propertyName) {&#13;
        if (columnWidth.length &gt; columnsCount) return { isValid: false };&#13;
&#13;
        var widths = [], value, i;&#13;
        for (i = 0; i &lt; columnWidth.length; i++) {&#13;
            if (ModelValidationUtils.isStringEmpty(columnWidth[i][propertyName])) {&#13;
                value = 'auto';&#13;
            } else {&#13;
                value = columnWidth[i][propertyName];&#13;
            }&#13;
&#13;
            widths.push(value);&#13;
        }&#13;
&#13;
        if (columnWidth.length &lt; columnsCount) {&#13;
            for (i = columnWidth.length; i &lt; columnsCount; i++) {&#13;
                widths.push('auto');&#13;
            }&#13;
        }&#13;
&#13;
        return { isValid: true, dimensions: widths };&#13;
    };&#13;
&#13;
    /**&#13;
     * Validate user input configuration.&#13;
     *&#13;
     * @param model {Array} of properties injected into Addon&#13;
     *&#13;
     * @return {Object} validation result&#13;
     * @return {Boolean} isValid&#13;
     * @return {String} error code if any occurs&#13;
     * @return {Object} contents array of contents. Dimensions based on Rows and Columns properties&#13;
     */&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedRows = ModelValidationUtils.validatePositiveInteger(model.Rows);&#13;
        if (!validatedRows.isValid) {&#13;
            return { isValid: false, errorCode: 'RW_01' };&#13;
        }&#13;
&#13;
        var validatedColumns = ModelValidationUtils.validatePositiveInteger(model.Columns);&#13;
        if (!validatedColumns.isValid) {&#13;
            return { isValid: false, errorCode: 'CL_01' };&#13;
        }&#13;
&#13;
        var validatedContents = presenter.validateContent(model["Table cells"], validatedRows.value, validatedColumns.value);&#13;
        if (!validatedContents.isValid) {&#13;
            return { isValid: false, errorCode: validatedContents.errorCode };&#13;
        }&#13;
&#13;
        var convertedColumnWidth = presenter.convertDimensionsArray(model["Columns width"], validatedColumns.value, 'Width');&#13;
        if (!convertedColumnWidth.isValid) {&#13;
            return { isValid: false, errorCode: 'CW_01' };&#13;
        }&#13;
&#13;
        var convertedRowWidths = presenter.convertDimensionsArray(model["Rows height"], validatedRows.value, 'Height');&#13;
        if (!convertedRowWidths.isValid) {&#13;
            return { isValid: false, errorCode: 'RH_01' };&#13;
        }&#13;
&#13;
        var gapWidth = { isSet: false, value: undefined };&#13;
        if (!ModelValidationUtils.isStringEmpty(model["Gap width"])) {&#13;
            var validatedGapWidth = ModelValidationUtils.validatePositiveInteger(model["Gap width"]);&#13;
            if (!validatedGapWidth.isValid) {&#13;
                return { isValid: false, errorCode: 'GW_01' };&#13;
            } else {&#13;
                gapWidth = { isSet: true, value: validatedGapWidth.value };&#13;
            }&#13;
        }&#13;
&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            addonID: model.ID,&#13;
            isValid: true,&#13;
            contents: validatedContents.content,&#13;
            columnsWidths: convertedColumnWidth.dimensions,&#13;
            rowsHeight: convertedRowWidths.dimensions,&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            isActivity: !ModelValidationUtils.validateBoolean(model["Is not an activity"]),&#13;
            isNotActivity: ModelValidationUtils.validateBoolean(model["Is not an activity"]),&#13;
            isDisabledByDefault: ModelValidationUtils.validateBoolean(model["Is disabled"]),&#13;
            isPunctuationIgnored: ModelValidationUtils.validateBoolean(model["Ignore punctuation"]),&#13;
            isCaseSensitive: ModelValidationUtils.validateBoolean(model["Case sensitive"]),&#13;
            gapWidth: gapWidth,&#13;
            gapType: model["Gap Type"]&#13;
        };&#13;
    };&#13;
&#13;
    presenter.addColumnsWidth = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!model["Columns width"]) {&#13;
            upgradedModel["Columns width"] = [&#13;
                { Width: "" }&#13;
            ];&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.addRowHeights = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!model["Rows height"]) {&#13;
            upgradedModel["Rows height"] = [&#13;
                { Height: "" }&#13;
            ];&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var modelWithColumnsWidth = presenter.addColumnsWidth(model);&#13;
&#13;
        return presenter.addRowHeights(modelWithColumnsWidth);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.getGapText = function (gapIndex) {&#13;
        return executeFunctionOnGap(gapIndex, "getGapValueByIndex");&#13;
    };&#13;
&#13;
    presenter.getGapValue = function (gapIndex) {&#13;
        return presenter.getGapText(gapIndex);&#13;
    };&#13;
&#13;
    presenter.getGapTextCommand = function (params) {&#13;
        return presenter.getGapText(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    function executeFunctionOnGap(gapIndex, functionToCall) {&#13;
        var validatedGapIndex = presenter.validateGapIndex(gapIndex);&#13;
&#13;
        if (validatedGapIndex.isValid) {&#13;
            return presenter.gapsContainer[functionToCall](validatedGapIndex.index);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.validateGapIndex = function (gapIndex) {&#13;
        if (isNaN(gapIndex) || gapIndex &lt; 1 || gapIndex &gt; presenter.gapsContainer.getLength()) {&#13;
            return {isValid: false};&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            index: parseInt(gapIndex, 10) - 1&#13;
        };&#13;
    };&#13;
&#13;
&#13;
    presenter.markGapAsCorrect = function (gapIndex) {&#13;
        executeFunctionOnGap(gapIndex, "markGapByIndexAsCorrect");&#13;
    };&#13;
&#13;
    presenter.markGapAsCorrectCommand = function (params) {&#13;
        presenter.markGapAsCorrect(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    presenter.markGapAsWrong = function (gapIndex) {&#13;
        executeFunctionOnGap(gapIndex, "markGapByIndexAsWrong");&#13;
    };&#13;
&#13;
    presenter.markGapAsWrongCommand = function (params) {&#13;
        presenter.markGapAsWrong(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    presenter.markGapAsEmpty = function (gapIndex) {&#13;
        executeFunctionOnGap(gapIndex, "markGapByIndexAsEmpty");&#13;
    };&#13;
&#13;
    presenter.markGapAsEmptyCommand = function (params) {&#13;
        presenter.markGapAsEmpty(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    presenter.enableGap = function (gapIndex) {&#13;
        executeFunctionOnGap(gapIndex, "unlockGapByIndex");&#13;
    };&#13;
&#13;
    presenter.enableGapCommand = function (params) {&#13;
        presenter.enableGap(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    presenter.enableAllGaps = function () {&#13;
        presenter.gapsContainer.unlockAllGaps();&#13;
    };&#13;
&#13;
    presenter.disableGap = function (gapIndex) {&#13;
        executeFunctionOnGap(gapIndex, "lockGapByIndex");&#13;
    };&#13;
&#13;
    presenter.disableGapCommand = function (params) {&#13;
        presenter.disableGap(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    presenter.disableAllGaps = function () {&#13;
        presenter.gapsContainer.lockAllGaps();&#13;
    };&#13;
&#13;
    presenter.getView = function() {&#13;
        return presenter.$view;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function() {&#13;
        var score = presenter.getScore();&#13;
        return score == presenter.getMaxScore() &amp;&amp; score != 0;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'getGapText': presenter.getGapTextCommand,&#13;
            'getGapValue': presenter.getGapTextCommand,&#13;
            'markGapAsEmpty': presenter.markGapAsEmptyCommand,&#13;
            'markGapAsCorrect': presenter.markGapAsCorrectCommand,&#13;
            'markGapAsWrong': presenter.markGapAsWrongCommand,&#13;
            'enableGap': presenter.enableGapCommand,&#13;
            'enableAllGaps': presenter.enableAllGaps,&#13;
            'disableGap': presenter.disableGapCommand,&#13;
            'disableAllGaps': presenter.disableAllGaps,&#13;
            'getView' : presenter.getView,&#13;
            'isAllOK' : presenter.isAllOK&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.sendAllOKEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if (presenter.configuration.isNotActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.gapsContainer == undefined) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return presenter.gapsContainer.getMaxScore();&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if (presenter.configuration.isNotActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.gapsContainer == undefined) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return presenter.gapsContainer.getScore();&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (presenter.configuration.isNotActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.gapsContainer == undefined) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return presenter.gapsContainer.getErrorCount();&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.gapsContainer.check(true);&#13;
&#13;
        if (isConnectedWithMath) {&#13;
            presenter.gapsContainer.unlockAllGaps();&#13;
            presenter.gapsContainer.lockAllNotEmptyGaps();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.gapsContainer.check(false);&#13;
&#13;
        presenter.gapsContainer.removeAllGapsClasses();&#13;
&#13;
        if (isConnectedWithMath) {&#13;
            presenter.gapsContainer.unlockAllGaps();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function (item, value, score) {&#13;
        return {&#13;
            source: presenter.configuration.addonID,&#13;
            item: "" + item,&#13;
            value: "" + value,&#13;
            score: "" + score&#13;
        };&#13;
    };&#13;
    &#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "ItemSelected") {&#13;
            presenter.lastDraggedItem = eventData;&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.gapsContainer.showAnswers();&#13;
            presenter.isShowAnswersActive = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.configuration.isActivity || isConnectedWithMath) {&#13;
            presenter.gapsContainer.hideAnswers();&#13;
            if(isConnectedWithMath){&#13;
                presenter.gapsContainer.unlockAllGaps();&#13;
            }&#13;
            presenter.isShowAnswersActive = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getCSSConfiguration = function () {&#13;
        return {&#13;
            correct: "ic_gap-correct",&#13;
            wrong: "ic_gap-wrong",&#13;
            showAnswers: "ic_gap-show-answers",&#13;
            block: "ic_gap-empty"&#13;
        };&#13;
    };&#13;
&#13;
    presenter.GapUtils = function (configuration) {&#13;
        DraggableDroppableObject.call(this, configuration, presenter.getCSSConfiguration());&#13;
&#13;
        this.gapScore = configuration.gapScore;&#13;
        this.gapType = presenter.GapUtils.GAP_TYPE.NORMAL;&#13;
        this.isDisabled = false;&#13;
        this.isEnabled = true;&#13;
        this.mathShowAnswersValue = "";&#13;
        this.mathCSSClass = "math-answer";&#13;
        this.valueChangeObserver = new presenter.ValueChangeObserver();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype = Object.create(DraggableDroppableObject.prototype);&#13;
    presenter.GapUtils.parent = DraggableDroppableObject.prototype;&#13;
&#13;
    presenter.GapUtils.GAP_TYPE = {&#13;
        NORMAL: 0,&#13;
        SELECT: 1&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.getParsedCorrectAnswers = function () {&#13;
        return this.showAnswersValue.map(function (value) {&#13;
            return this.parseValue(value);&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.getParsedValue = function () {&#13;
        return this.parseValue(this.getValue());&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.isCorrect = function () {&#13;
        var correctAnswers = this.getParsedCorrectAnswers();&#13;
        var value = this.getParsedValue();&#13;
&#13;
        return (correctAnswers.indexOf(value) !== -1);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.parseValue = function (value) {&#13;
        if(presenter.configuration.gapType == 'math') {&#13;
            return value;&#13;
        }&#13;
&#13;
        if (!presenter.configuration.isCaseSensitive) {&#13;
            value = value.toLowerCase();&#13;
        }&#13;
&#13;
        if (presenter.configuration.isPunctuationIgnored) {&#13;
            value = value.replace(/\W/g, '');&#13;
        }&#13;
&#13;
        return value;&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.isValueEmpty = function () {&#13;
        return this.getValue().trim() == "";&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnCorrect = function () {&#13;
        if (presenter.configuration.isNotActivity) {&#13;
            return true;&#13;
        }&#13;
&#13;
        DraggableDroppableObject.prototype.setCssOnCorrect.call(this);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnUnCorrect = function () {&#13;
        this.removeAllClasses();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onBlock = function () {&#13;
        if (!this.isDisabled) {&#13;
            this.lock();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onUnblock = function () {&#13;
        if (this.isDisabled &amp;&amp; this.isEnabled) {&#13;
            this.unlock();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onCorrect = function () {&#13;
        this.onBlock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onUnCorrect = function () {&#13;
        this.onUnblock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onWrong = function () {&#13;
        this.onBlock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onUnWrong = function () {&#13;
        this.onUnblock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnWrong = function () {&#13;
        if (presenter.configuration.isNotActivity) {&#13;
            return true;&#13;
        }&#13;
&#13;
        if (this.isValueEmpty()) {&#13;
            this.addCssClass('ic_gap-empty');&#13;
            return;&#13;
        }&#13;
&#13;
        DraggableDroppableObject.prototype.setCssOnWrong.call(this);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnUnWrong = function () {&#13;
        this.removeAllClasses();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnShowAnswers = function () {&#13;
        if (presenter.configuration.isActivity || isConnectedWithMath) {&#13;
            DraggableDroppableObject.prototype.setCssOnShowAnswers.call(this);&#13;
        }&#13;
&#13;
        if (isConnectedWithMath) {&#13;
            this.addCssClass(this.mathCSSClass);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnHideAnswers = function () {&#13;
        if (presenter.configuration.isActivity || isConnectedWithMath) {&#13;
            DraggableDroppableObject.prototype.setCssOnHideAnswers.call(this);&#13;
    	}&#13;
&#13;
        if (isConnectedWithMath) {&#13;
            this.removeCssClass(this.mathCSSClass);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onShowAnswers = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            this.onBlock();&#13;
            this.setViewValue(this.showAnswersValue[0]);&#13;
        }&#13;
&#13;
        if (isConnectedWithMath) {&#13;
            this.onBlock();&#13;
            this.setViewValue(this.mathShowAnswersValue);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onHideAnswers = function () {&#13;
        if (presenter.configuration.isActivity || isConnectedWithMath) {&#13;
            this.setViewValue(this.value);&#13;
            this.onUnblock();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setGapWidth = function () {&#13;
        if (presenter.configuration.gapWidth.isSet) {&#13;
            this.$view.width(presenter.configuration.gapWidth.value + 'px');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.removeAllClasses = function () {&#13;
        this.removeCssClass('ic_gap-correct');&#13;
        this.removeCssClass('ic_gap-wrong');&#13;
        this.removeCssClass('ic_gap-empty');&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.getScore = function () {&#13;
        return this.isCorrect() ? this.gapScore : 0;&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.getErrorCount = function () {&#13;
        if (this.getValue().trim() == "") {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return this.isCorrect() ? 0 : 1;&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.notify = function () {&#13;
        this.valueChangeObserver.notify(this.getValueChangeEventData());&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.getValueChangeEventData = function () {&#13;
        return {&#13;
            objectID: this.getObjectID(),&#13;
            isCorrect: this.isCorrect(),&#13;
            value: this.getValue()&#13;
        };&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setIsEnabled = function (isEnabled) {&#13;
        if (this.isDisabled &amp;&amp; isEnabled) {&#13;
            this.unlock();&#13;
        }&#13;
&#13;
        if (!this.isDisabled &amp;&amp; !isEnabled) {&#13;
            this.lock();&#13;
        }&#13;
&#13;
        this.isEnabled = isEnabled;&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setMathShowAnswersValue = function (value) {&#13;
        this.mathShowAnswersValue = value;&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.getGapState = function () {&#13;
        return {&#13;
            value: this.getValue(),&#13;
            isEnabled: this.isEnabled&#13;
        };&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.getState = function () {&#13;
        return {&#13;
            value: this.getValue(),&#13;
            item: this.getSource(),&#13;
            droppedElement: this.getDroppedElement()&#13;
        };&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setState = function (value, source, isEnabled, droppedElement) {&#13;
        DraggableDroppableObject.prototype.setState.call(this, value, source, droppedElement);&#13;
&#13;
        if (isEnabled !== undefined) {&#13;
            this.setIsEnabled(isEnabled);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onReset = function () {&#13;
        DraggableDroppableObject.prototype.onReset.call(this);&#13;
&#13;
        if (presenter.configuration.isDisabledByDefault) {&#13;
            this.setIsEnabled(false);&#13;
        } else {&#13;
            this.setIsEnabled(true);&#13;
        }&#13;
&#13;
        this.removeAllClasses();&#13;
        this.removeCssClass("gapFilled");&#13;
    };&#13;
&#13;
&#13;
    presenter.SelectGap = function (htmlID, correctAnswer, gapScore) {&#13;
        var configuration = {&#13;
            addonID: presenter.configuration.addonID,&#13;
            objectID: htmlID,&#13;
            eventBus: presenter.eventBus,&#13;
            getSelectedItem: presenter.getSelectedItem,&#13;
&#13;
            showAnswersValue: correctAnswer,&#13;
&#13;
            connectEvents: presenter.SelectGap.prototype.connectEvents,&#13;
            setViewValue: presenter.SelectGap.prototype.setViewValue,&#13;
&#13;
            gapScore: gapScore&#13;
        };&#13;
&#13;
        presenter.GapUtils.call(this, configuration);&#13;
&#13;
        this.gapType = presenter.GapUtils.GAP_TYPE.SELECT;&#13;
        this.setGapWidth();&#13;
    };&#13;
&#13;
    presenter.SelectGap.prototype = Object.create(presenter.GapUtils.prototype);&#13;
    presenter.SelectGap.constructor = presenter.SelectGap;&#13;
&#13;
    presenter.SelectGap.prototype.connectEvents = function () {&#13;
        this.$view.on("input", this.onEdit.bind(this));&#13;
        this.$view.off('change').bind('change', this.onEdit.bind(this));&#13;
    };&#13;
&#13;
    presenter.SelectGap.prototype.onEdit = function (event) {&#13;
        this.notifyEdit();&#13;
        this.value = this.$view.find(":selected").text();&#13;
        this.notify();&#13;
    };&#13;
&#13;
    presenter.SelectGap.prototype.setViewValue = function (value) {&#13;
        this.$view.val(value);&#13;
    };&#13;
&#13;
    presenter.SelectGap.prototype.lock = function () {&#13;
        this.isDisabled = true;&#13;
        this.$view.attr('disabled','disabled');&#13;
    };&#13;
&#13;
    presenter.SelectGap.prototype.unlock = function () {&#13;
        this.isDisabled = false;&#13;
        this.$view.removeAttr('disabled');&#13;
    };&#13;
&#13;
    presenter.gapsAnswers = [];&#13;
&#13;
    function addGapAnswers(htmlID, correctAnswer) {&#13;
        var isInTable = false;&#13;
        for (var i = 0; i &lt; presenter.gapsAnswers.length; i++){&#13;
            if(presenter.gapsAnswers[i].id == htmlID){&#13;
                isInTable = true;&#13;
            }&#13;
        }&#13;
&#13;
        if(!isInTable){&#13;
            presenter.gapsAnswers.push({id: htmlID, answers: correctAnswer});&#13;
        }&#13;
    }&#13;
&#13;
    presenter.EditableInputGap = function (htmlID, correctAnswer, gapScore) {&#13;
        addGapAnswers(htmlID, correctAnswer);&#13;
        var configuration = {&#13;
            addonID: presenter.configuration.addonID,&#13;
            objectID: htmlID,&#13;
            eventBus: presenter.eventBus,&#13;
            getSelectedItem: presenter.getSelectedItem,&#13;
&#13;
            showAnswersValue: correctAnswer,&#13;
&#13;
            createView: presenter.EditableInputGap.prototype.createView,&#13;
            connectEvents: this.connectEvents,&#13;
            setViewValue: presenter.EditableInputGap.prototype.setViewValue,&#13;
&#13;
            gapScore: gapScore&#13;
        };&#13;
&#13;
        presenter.GapUtils.call(this, configuration);&#13;
        this.setGapWidth();&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype = Object.create(presenter.GapUtils.prototype);&#13;
    presenter.EditableInputGap.constructor = presenter.EditableInputGap;&#13;
&#13;
    presenter.EditableInputGap.prototype.connectEvents = function () {&#13;
        this.$view.on("input", this.onEdit.bind(this));&#13;
        this.$view.on("blur", this.blurHandler.bind(this));&#13;
        this.$view.off('change').bind('change', this.onEdit.bind(this));&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.createView = function () {&#13;
        if(presenter.configuration.gapType == 'math'){&#13;
            return $(presenter.$view).find("input[id='"+this.objectID+"']");&#13;
        }else{&#13;
            var $inputGap = $('&lt;input type="text" value="" id="' + this.objectID + '" /&gt;');&#13;
            $inputGap.css({&#13;
                width: presenter.configuration.gapWidth + "px"&#13;
            });&#13;
&#13;
            $inputGap.addClass("ic_gap");&#13;
&#13;
            return $inputGap;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.onEdit = function (event) {&#13;
        this.notifyEdit();&#13;
        this.value = this.getViewValue();&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.blurHandler = function (event) {&#13;
        this.notify();&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.getViewValue = function () {&#13;
        return this.$view.val();&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.lock = function () {&#13;
        this.isDisabled = true;&#13;
        this.$view.attr('disabled','disabled');&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.unlock = function () {&#13;
        this.isDisabled = false;&#13;
        this.$view.removeAttr('disabled');&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.getValue = function () {&#13;
        return this.value;&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.setViewValue = function (value) {&#13;
        return this.$view.val(value);&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap = function (htmlID, correctAnswers, gapScore) {&#13;
        var configuration = {&#13;
            addonID: presenter.configuration.addonID,&#13;
            objectID: htmlID,&#13;
            eventBus: presenter.eventBus,&#13;
            getSelectedItem: presenter.getSelectedItem,&#13;
            createView: presenter.DraggableDroppableGap.prototype.createView,&#13;
&#13;
            showAnswersValue: correctAnswers,&#13;
            fillGap: presenter.DraggableDroppableGap.prototype.fillGap,&#13;
            makeGapEmpty: presenter.DraggableDroppableGap.prototype.makeGapEmpty,&#13;
&#13;
            gapScore: gapScore&#13;
        };&#13;
&#13;
        presenter.GapUtils.call(this, configuration);&#13;
        this.setGapWidth();&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype = Object.create(presenter.GapUtils.prototype);&#13;
    presenter.DraggableDroppableGap.parent = presenter.GapUtils.prototype;&#13;
    presenter.DraggableDroppableGap.constructor = presenter.DraggableDroppableGap;&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.createView = function () {&#13;
        var $view = DraggableDroppableObject.prototype.createView.call(this);&#13;
&#13;
        $view.css({&#13;
            width: presenter.configuration.gapWidth + "px",&#13;
            display: 'inline-block'&#13;
        });&#13;
&#13;
        $view.addClass("draggable-gap");&#13;
        $view.addClass("ic_gap");&#13;
&#13;
        return $view;&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.lock = function () {&#13;
        this.isDisabled = true;&#13;
        DraggableDroppableObject.prototype.lock.call(this);&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.unlock = function () {&#13;
        this.isDisabled = false;&#13;
        DraggableDroppableObject.prototype.unlock.call(this);&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.fillGap = function (selectedItem) {&#13;
        DraggableDroppableObject.prototype.fillGap.call(this, selectedItem);&#13;
        this.addCssClass("gapFilled");&#13;
        this.notify();&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.makeGapEmpty = function () {&#13;
        DraggableDroppableObject.prototype.makeGapEmpty.call(this);&#13;
        this.removeCssClass("gapFilled");&#13;
        this.notify();&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject = function () {&#13;
        this.gaps = [];&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.addGap = function (gap) {&#13;
        this.gaps.push(gap);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.replaceDOMViewWithGap = function () {&#13;
        this.gaps.filter(function (gap) {&#13;
            return gap.gapType == presenter.GapUtils.GAP_TYPE.NORMAL;&#13;
        }).forEach(function (gap) {&#13;
            var gapID = "#" + gap.getObjectID();&#13;
            presenter.$view.find(gapID).replaceWith(gap.getView());&#13;
        });&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.replaceGapsDOMWithView = function () {&#13;
        this.gaps.forEach(function (gap) {&#13;
            gap.$view = presenter.$view.find("#" + gap.getObjectID());&#13;
            gap.connectEvents();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.removeAllGapsClasses = function () {&#13;
        this.gaps.forEach(function (gap) {&#13;
            gap.removeAllClasses();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.check = function (isSetShow) {&#13;
        this.gaps.forEach(function (gap) {&#13;
            gap.check(isSetShow);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.showAnswers = function () {&#13;
        this.gaps.forEach(function (gap) {&#13;
            gap.showAnswers();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.showAnswersMath = function () {&#13;
        this.gaps.forEach(function (gap) {&#13;
            if(gap.mathShowAnswersValue != ""){&#13;
                gap.showAnswers();&#13;
            }else{&#13;
                gap.lock();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.hideAnswers = function () {&#13;
        this.gaps.forEach(function (gap) {&#13;
            gap.hideAnswers();&#13;
            gap.removeAllClasses();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.reset = function () {&#13;
        this.gaps.forEach(function (gap) {&#13;
            gap.reset();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getErrorCount = function () {&#13;
        return this.gaps.reduce(function (errorCount, gap) {&#13;
            return errorCount += gap.getErrorCount();&#13;
        }, 0);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getScore = function () {&#13;
        return this.gaps.reduce(function (score, gap) {&#13;
            return score += gap.getScore();&#13;
        }, 0);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getMaxScore = function () {&#13;
        return this.gaps.reduce(function (maxScore, gap) {&#13;
            return maxScore += gap.gapScore;&#13;
        }, 0);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.markGapByIndexWithClass = function (index, cssClass) {&#13;
        this.gaps[index].removeAllClasses();&#13;
        this.gaps[index].addCssClass(cssClass);&#13;
        this.gaps[index].notifyEdit();&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.markGapByIndexAsCorrect = function (index) {&#13;
        this.markGapByIndexWithClass(index, this.gaps[index].correctCSS);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.markGapByIndexAsWrong = function (index) {&#13;
        this.markGapByIndexWithClass(index, this.gaps[index].wrongCSS);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.markGapByIndexAsEmpty = function (index) {&#13;
        this.markGapByIndexWithClass(index, 'ic_gap-empty');&#13;
    };&#13;
    &#13;
    presenter.GapsContainerObject.prototype.getLength = function () {&#13;
        return this.gaps.length;&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getGapValueByIndex = function (index) {&#13;
        return this.gaps[index].getValue();&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.setLockGapByIndex = function (index, lock) {&#13;
        this.gaps[index].setIsEnabled(lock);&#13;
        this.gaps[index].notifyEdit();&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.lockGapByIndex = function (index) {&#13;
        this.setLockGapByIndex(index, false);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.unlockGapByIndex = function (index) {&#13;
        this.setLockGapByIndex(index, true);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.unlockAllGaps = function () {&#13;
        this.gaps.map(function (gap, index) {&#13;
            this.unlockGapByIndex(index);&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.lockAllGaps = function () {&#13;
        this.gaps.map(function (gap, index) {&#13;
            this.lockGapByIndex(index);&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.lockAllNotEmptyGaps = function () {&#13;
        this.gaps.map(function (gap, index) {&#13;
            if(!gap.isValueEmpty()){&#13;
                this.lockGapByIndex(index);&#13;
            }&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getGapIndexByObjectID = function (objectID) {&#13;
        for (var index = 0; index &lt; this.gaps.length; index++) {&#13;
            if (this.gaps[index].getObjectID() === objectID) {&#13;
                return (index + 1);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getGapsState = function () {&#13;
        return this.gaps.map(function (gap) {&#13;
            return gap.getGapState();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getState = function () {&#13;
        return this.gaps.map(function (gap) {&#13;
            return gap.getState();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.setGapsState = function (state) {&#13;
        state.map(function (stateData, index) {&#13;
            this.gaps[index].setState(stateData.value, "", stateData.isEnabled);&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.setSpansState = function (state, undefinedAttr) {&#13;
        if ((state !== undefinedAttr) &amp;&amp; (state !== null)) {&#13;
            state.map(function (stateData, index) {&#13;
                this.gaps[index].setState(stateData.value, stateData.item, undefined, stateData.droppedElement);&#13;
&#13;
                if (stateData.value == "") {&#13;
                    this.gaps[index].destroyDraggableProperty();&#13;
                }else{&#13;
                    this.gaps[index].addCssClass("gapFilled");&#13;
                }&#13;
&#13;
            }, this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.setMathShowAnswersValueByGapIndex = function (index, value) {&#13;
        this.gaps[index].setMathShowAnswersValue(value);&#13;
    };&#13;
&#13;
    presenter.ValueChangeObserver = function () {};&#13;
&#13;
    presenter.ValueChangeObserver.prototype.notify = function (data) {&#13;
        presenter.eventBus.sendEvent('ValueChanged', this.getEventData(data));&#13;
&#13;
        if (presenter.isAllOK()) presenter.sendAllOKEvent();&#13;
    };&#13;
&#13;
    presenter.ValueChangeObserver.prototype.getEventData = function (data) {&#13;
        return {&#13;
            score: data.isCorrect ? "1" : "0",&#13;
            value: data.value,&#13;
            source: presenter.configuration.addonID,&#13;
            item: presenter.gapsContainer.getGapIndexByObjectID(data.objectID)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.isActivity = function () {&#13;
        return presenter.configuration.isActivity;&#13;
    };&#13;
&#13;
    presenter.setMathShowAnswersCounter = function (counter) {&#13;
        presenter.configuration.mathShowAnswersCounter = counter;&#13;
    };&#13;
&#13;
    presenter.tickMathCounter = function () {&#13;
        if (presenter.configuration.mathShowAnswersCounter) {&#13;
            presenter.configuration.mathShowAnswersCounter = presenter.configuration.mathShowAnswersCounter - 1;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.shouldTriggerMathShowAnswers = function () {&#13;
        return presenter.configuration.mathShowAnswersCounter == 0;&#13;
    };&#13;
&#13;
    //showAnswers from Math&#13;
    presenter.setGapAnswer = function (gapIndex, answer, counter) {&#13;
        if (presenter.configuration.mathShowAnswersCounter === undefined) {&#13;
            presenter.setMathShowAnswersCounter(counter);&#13;
        }&#13;
&#13;
        presenter.gapsContainer.setMathShowAnswersValueByGapIndex((gapIndex - 1), answer);&#13;
&#13;
        presenter.tickMathCounter();&#13;
&#13;
        if (presenter.shouldTriggerMathShowAnswers()) {&#13;
            presenter.gapsContainer.removeAllGapsClasses();&#13;
            presenter.gapsContainer.showAnswersMath();&#13;
            presenter.setMathShowAnswersCounter(counter);&#13;
        }&#13;
    };&#13;
&#13;
    //hideAnswers from Math&#13;
    //hideAnswers is called anyway so just void function&#13;
    presenter.setUserValue = function () {};&#13;
&#13;
    presenter.markConnectionWithMath = function() {&#13;
        isConnectedWithMath = true;&#13;
        presenter.isConnectedWithMath = true;&#13;
    };&#13;
&#13;
    presenter.getValue = function (index) {&#13;
        return presenter.gapsContainer.getGapValueByIndex((index-1))&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Table_Of_Contents" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Header" nameLabel="Table_Of_Contents_property_header" type="string"/>
        <property displayName="Don't show pages" name="DontShowPages" nameLabel="Table_Of_Contents_property_dont_show_pages" type="string"/>
        <property displayName="Display Type" name="displayType" nameLabel="Table_Of_Contents_property_display_type" type="{default, list, comboList}"/>
	</model>
<css>.table-of-contents {&#13;
    border: 0;&#13;
    padding: 1px;&#13;
    color: #7C818E;&#13;
    direction: inherit;&#13;
}&#13;
&#13;
.table-of-contents-title {&#13;
    height: 25px;&#13;
    font-weight: bold;&#13;
    color: #7F7F7F;&#13;
    font-family: Verdana, Tahoma, "DejaVu Sans", sans-serif;&#13;
    margin: 1px;&#13;
    display: table-cell;&#13;
    vertical-align: middle;&#13;
}&#13;
&#13;
.table-of-contents-pagination {&#13;
    height: 30px;&#13;
    vertical-align: middle;&#13;
    text-decoration: none;&#13;
    position: absolute;&#13;
    bottom: 0;&#13;
}&#13;
&#13;
.table-of-contents-pagination a,&#13;
.table-of-contents-pagination a:hover {&#13;
    text-decoration: none;&#13;
    margin-left: 5px;&#13;
    margin-right: 5px;&#13;
}&#13;
&#13;
.table-of-contents-pagination .selected {&#13;
    text-decoration: underline;&#13;
}&#13;
&#13;
.table-of-contents-list {&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.table-of-contents-list ul {&#13;
    padding-left: 5px;&#13;
}&#13;
&#13;
.table-of-contents-list ul li a {&#13;
    text-decoration: none;&#13;
}&#13;
</css><view>&lt;div class="table-of-contents"&gt;&#13;
    &lt;div class="table-of-contents-title"&gt;&#13;
        Table of Contents&#13;
    &lt;/div&gt;&#13;
    &lt;div class="table-of-contents-list"&gt;&#13;
        &lt;ol&gt;&#13;
        &lt;/ol&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="table-of-contents-pagination"&gt;&#13;
        &lt;a href="#"&gt;1&lt;/a&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="table-of-contents"&gt;&#13;
    &lt;div class="table-of-contents-title"&gt;&#13;
        Table of Contents&#13;
    &lt;/div&gt;&#13;
    &lt;div class="table-of-contents-list"&gt;&#13;
        &lt;ol&gt;&#13;
        &lt;/ol&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="table-of-contents-pagination"&gt;&#13;
        &lt;a href="#"&gt;1&lt;/a&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonTable_Of_Contents_create(){&#13;
    var presenter = function() {};&#13;
    var presentationController;&#13;
&#13;
    var elementsHeights = {};&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        E01: "Values in property 'Don't show' pages must be numeric",&#13;
        E02: "Values in property 'Don't show' pages must be greater than 0",&#13;
        E03: "Values in property 'Don't show' pages must be unique"&#13;
    };&#13;
&#13;
    function getErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    function getCorrectObject(v) { return { isValid: true, value: v }; }&#13;
&#13;
    function setElementsDimensions(addonWidth, addonHeight) {&#13;
        var wrapper = presenter.$view.find('.table-of-contents:first')[0];&#13;
        var wrapperDimensions = DOMOperationsUtils.getOuterDimensions(wrapper);&#13;
        var wrapperDistances = DOMOperationsUtils.calculateOuterDistances(wrapperDimensions);&#13;
        $(wrapper).css({&#13;
            width: addonWidth - wrapperDistances.horizontal,&#13;
            height: addonHeight - wrapperDistances.vertical&#13;
        });&#13;
&#13;
        elementsHeights.wrapper = $(wrapper).height();&#13;
&#13;
        var title = presenter.$view.find('.table-of-contents-title')[0];&#13;
        var titleDimensions = DOMOperationsUtils.getOuterDimensions(title);&#13;
        var titleDistances = DOMOperationsUtils.calculateOuterDistances(titleDimensions);&#13;
        $(title).css({&#13;
            width: $(wrapper).width() - titleDistances.horizontal&#13;
        });&#13;
&#13;
        elementsHeights.title = $(title).height() + titleDistances.vertical;&#13;
&#13;
        var pagination = presenter.$view.find('.table-of-contents-pagination')[0];&#13;
        var paginationDimensions = DOMOperationsUtils.getOuterDimensions(pagination);&#13;
        var paginationDistances = DOMOperationsUtils.calculateOuterDistances(paginationDimensions);&#13;
        $(pagination).css({&#13;
            width: $(wrapper).width() - paginationDistances.horizontal&#13;
        });&#13;
&#13;
        elementsHeights.pagination = $(pagination).height() + paginationDistances.vertical;&#13;
&#13;
        var list = presenter.$view.find('.table-of-contents-list')[0];&#13;
        var listDimensions = DOMOperationsUtils.getOuterDimensions(list);&#13;
        var listDistances = DOMOperationsUtils.calculateOuterDistances(listDimensions);&#13;
        $(list).css({&#13;
            height: $(wrapper).height - elementsHeights.title - elementsHeights.pagination - listDistances.vertical,&#13;
            width: $(wrapper).width - listDistances.horizontal&#13;
        });&#13;
&#13;
        elementsHeights.list = $(list).height() + listDistances.vertical;&#13;
    }&#13;
&#13;
&#13;
    function generateElement (text) {&#13;
        var $element = $(document.createElement('li')),&#13;
            $link = $(document.createElement('a'));&#13;
&#13;
        $link.text(text);&#13;
        $link.attr('href', '#');&#13;
        $element.html($link);&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function generateListElements () {&#13;
        var $list = presenter.$view.find('.table-of-contents .table-of-contents-list ol');&#13;
&#13;
        for (var i = 0; i &lt; presenter.pages.length; i++) {&#13;
            $list.append(generateElement(presenter.pages[i].name));&#13;
        }&#13;
&#13;
        return $list.outerHeight();&#13;
    }&#13;
&#13;
    function generateComboElement (text, isPreview) {&#13;
        var element;&#13;
&#13;
        if(!isPreview){&#13;
            var presentation = presentationController.getPresentation();&#13;
            var currentPageName = presentation.getPage(presentationController.getCurrentPageIndex()).getName();&#13;
&#13;
            if(text == currentPageName){&#13;
                element = $('&lt;option selected&gt;&lt;/option&gt;');&#13;
            }else{&#13;
                element = $('&lt;option&gt;&lt;/option&gt;');&#13;
            }&#13;
        }else{&#13;
            element = $('&lt;option&gt;&lt;/option&gt;');&#13;
        }&#13;
        element.text(text);&#13;
&#13;
        return element;&#13;
    }&#13;
&#13;
    function generateComboList (isPreview) {&#13;
        var selectionList = $('&lt;select class="comboList"&gt;&lt;/select&gt;');&#13;
        presenter.$view.find('.table-of-contents').append(selectionList);&#13;
        var comboList = presenter.$view.find('.comboList');&#13;
        $(comboList).css("width", "100%");&#13;
&#13;
        for (var i = 0; i &lt; presenter.pages.length; i++) {&#13;
            comboList.append(generateComboElement(presenter.pages[i].name, isPreview));&#13;
        }&#13;
    }&#13;
&#13;
    presenter.pageStartIndex = function(page) {&#13;
        var index = 0;&#13;
        for (var i = 0; i &lt; page; i++) {&#13;
            index += presenter.pagination.pages[i].length;&#13;
        }&#13;
        return index+1;&#13;
    }&#13;
&#13;
    function displayPage(page) {&#13;
        var $list = presenter.$view.find('.table-of-contents .table-of-contents-list ol'),&#13;
            pages = presenter.pagination.pages[page], i,&#13;
            startIndex = presenter.pageStartIndex(page),&#13;
            $pageList = presenter.$view.find('.table-of-contents-pagination');&#13;
&#13;
        $list.find('li').hide();&#13;
        $list.attr('start', '' + startIndex);&#13;
        for (i = 0; i &lt; pages.length; i++) {&#13;
            $list.find('li:eq(' + pages[i] + ')').show();&#13;
        }&#13;
&#13;
        $pageList.children().removeClass('selected');&#13;
        $pageList.find('a').each(function(){&#13;
            if ($(this).text()==(page+1)) {&#13;
                $(this).addClass('selected');&#13;
            }&#13;
        });&#13;
   }&#13;
&#13;
    function isSpaceSufficient($list, spareHeight) {&#13;
        return $list.find('li:first').outerHeight() &lt; spareHeight;&#13;
    }&#13;
&#13;
    function paginateList(spareHeight, isPreview) {&#13;
        var $list = presenter.$view.find('.table-of-contents .table-of-contents-list ol');&#13;
        var $pagination = presenter.$view.find('.table-of-contents .table-of-contents-pagination');&#13;
&#13;
        if (!isSpaceSufficient($list, spareHeight)) return false;&#13;
&#13;
        var currentPageHeight = 0, page, i;&#13;
        presenter.pagination = {&#13;
            pages: [[]],&#13;
            size: 0&#13;
        };&#13;
&#13;
        $list.find('li').each(function (index, value) {&#13;
            var outerHeight = $(value).outerHeight();&#13;
&#13;
            if (currentPageHeight + outerHeight &gt; spareHeight) {&#13;
                presenter.pagination.size++;&#13;
                currentPageHeight = 0;&#13;
                presenter.pagination.pages[presenter.pagination.size] = [];&#13;
            }&#13;
&#13;
            currentPageHeight += outerHeight;&#13;
            presenter.pagination.pages[presenter.pagination.size].push(index);&#13;
        });&#13;
&#13;
        for (i = 1; i &lt;= presenter.pagination.size; i++) {&#13;
            var $element = $(document.createElement('a'));&#13;
            $element.text(i + 1);&#13;
            $element.attr('href', '#');&#13;
            $pagination.append($element);&#13;
        }&#13;
&#13;
        displayPage(0);&#13;
        if (!isPreview) handlePaginationMouseActions();&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    function handleMouseClickActions() {&#13;
        var commander = presentationController.getCommands(),&#13;
            presentation = presentationController.getPresentation(),&#13;
            $list = presenter.$view.find('.table-of-contents-list ol'),&#13;
            currentPageIndex = presentation.getPage(presentationController.getCurrentPageIndex()).getId(),&#13;
            pageName;&#13;
&#13;
        if(presenter.configuration.displayType == 'comboList'){&#13;
            presenter.$view.find('.comboList').change(function(event){&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
                pageName = $(this).val();&#13;
                for(var p in presenter.pages) {&#13;
                    var page = presenter.pages[p];&#13;
&#13;
                    if (currentPageIndex !== page.index &amp;&amp; pageName === page.name) {&#13;
                        commander.gotoPageIndex(page.numberOfIndex);&#13;
                    }&#13;
                }&#13;
            });&#13;
        }else{&#13;
            $list.find('li a').each(function () {&#13;
                $(this).click(function (event) {&#13;
                    event.stopPropagation();&#13;
                    event.preventDefault();&#13;
                    pageName = $(this).text();&#13;
                    for(var p in presenter.pages) {&#13;
                        var page = presenter.pages[p];&#13;
&#13;
                        if (currentPageIndex !== page.index &amp;&amp; pageName === page.name) {&#13;
                            commander.gotoPageIndex(page.numberOfIndex);&#13;
                        }&#13;
                    }&#13;
                });&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    function handlePaginationMouseActions() {&#13;
        var lists = presenter.$view.find('.table-of-contents .table-of-contents-list'),&#13;
        $pagination = presenter.$view.find('.table-of-contents-pagination');&#13;
&#13;
        $pagination.click(function (event) {&#13;
            event.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$view.find('.table-of-contents-pagination a').each(function() {&#13;
            $(this).click(function(event) {&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
                displayPage(parseInt($(this).text(), 10) - 1);&#13;
            });&#13;
        });&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return false;&#13;
        }&#13;
&#13;
        function reportInsufficientSpace() {&#13;
            presenter.$view.html('&lt;strong&gt;Available space is insufficient! Please enlarge addon dimensions.&lt;/strong&gt;')&#13;
        }&#13;
&#13;
        presenter.pages = isPreview ? mockPresentationPages() : presenter.getPresentationPages();&#13;
        presenter.$view = $(view);&#13;
&#13;
        setElementsDimensions(model.Width, model.Height);&#13;
&#13;
        if(presenter.configuration.displayType == "comboList"){&#13;
            generateComboList(isPreview);&#13;
        }else{&#13;
            var listHeight = generateListElements(),&#13;
                spareHeight = elementsHeights.wrapper - elementsHeights.title;&#13;
&#13;
            var $list = presenter.$view.find('.table-of-contents .table-of-contents-list ol');&#13;
            if (!isSpaceSufficient($list, spareHeight)) {&#13;
                reportInsufficientSpace();&#13;
            }&#13;
        }&#13;
&#13;
        if ((listHeight &gt; spareHeight) &amp;&amp; (presenter.configuration.displayType == "default" || presenter.configuration.displayType == "" || presenter.configuration.displayType == undefined)) {&#13;
            if (!paginateList(spareHeight - elementsHeights.pagination, isPreview)) {&#13;
                reportInsufficientSpace();&#13;
            }&#13;
        } else {&#13;
            presenter.$view.find('.table-of-contents-pagination').hide();&#13;
        }&#13;
&#13;
        if(presenter.configuration.displayType == "list"){&#13;
            var titleHeight = presenter.$view.find('.table-of-contents-title').height();&#13;
            presenter.$view.find(".table-of-contents-list").css({&#13;
               "height":  model.Height-titleHeight+"px",&#13;
               "overflow-y": "scroll"&#13;
            });&#13;
        }&#13;
&#13;
        if (!isPreview) handleMouseClickActions();&#13;
        if (!ModelValidationUtils.isStringEmpty(model['Header'])) {&#13;
        	presenter.$view.find('.table-of-contents .table-of-contents-title').text(model['Header'])&#13;
        }&#13;
    }&#13;
&#13;
    presenter.validateHiddenPages = function(hiddenPages) {&#13;
        if (typeof(hiddenPages) == 'undefined') {&#13;
            hiddenPages = '';&#13;
        }&#13;
&#13;
        var pages = hiddenPages.split(';').sort();&#13;
&#13;
        for (var i = 0; i &lt; pages.length; i++) {&#13;
            var numberObject = ModelValidationUtils.validateInteger(pages[i]);&#13;
&#13;
            if (!numberObject.isValid &amp;&amp; hiddenPages.length &gt; 0) {&#13;
                return getErrorObject("E01");&#13;
            }&#13;
&#13;
            if (pages[i] &lt; 0) {&#13;
                return getErrorObject("E02");&#13;
            }&#13;
&#13;
            if (pages[i] === pages[i - 1]) {&#13;
                return getErrorObject("E03");&#13;
            }&#13;
        }&#13;
        return getCorrectObject(pages);&#13;
    }&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var pagesValidationResult = presenter.validateHiddenPages(model['DontShowPages']);&#13;
        if (!pagesValidationResult.isValid) {&#13;
            return pagesValidationResult;&#13;
        }&#13;
&#13;
        return {&#13;
            ID: model.ID,&#13;
            isValid: true,&#13;
            hiddenPages: pagesValidationResult.value,&#13;
            displayType: model.displayType&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getPresentationPages = function() {&#13;
        var pages = [],&#13;
            presentation = presentationController.getPresentation(),&#13;
            pageCount = presentation.getPageCount();&#13;
&#13;
        for (var i = 0; i &lt; pageCount; i++) {&#13;
            if ($.inArray(String(i+1), presenter.configuration.hiddenPages) == -1) {&#13;
                var page = {};&#13;
                page.name = presentation.getPage(i).getName();&#13;
                page.index = presentation.getPage(i).getId();&#13;
                page.numberOfIndex = i;&#13;
&#13;
                pages.push(page);&#13;
            }&#13;
        }&#13;
&#13;
        return pages;&#13;
    };&#13;
&#13;
    function mockPresentationPages() {&#13;
        return [&#13;
            {index:"fwrg4g1",&#13;
             name:"Page 01",&#13;
             numberOfIndex:"0"},&#13;
            {index:"fwrg4g2",&#13;
             name:"Page 02",&#13;
             numberOfIndex:"1"},&#13;
            {index:"fwrg4g3",&#13;
             name:"Page 03",&#13;
             numberOfIndex:"2"},&#13;
            {index:"fwrg4g4",&#13;
             name:"Page 04",&#13;
             numberOfIndex:"3"},&#13;
            {index:"fwrg4g5",&#13;
             name:"Page 05",&#13;
             numberOfIndex:"4"},&#13;
            {index:"fwrg4g6",&#13;
             name:"Page 06",&#13;
             numberOfIndex:"5"},&#13;
            {index:"fwrg4g7",&#13;
             name:"Page 07",&#13;
             numberOfIndex:"6"},&#13;
            {index:"fwrg4g8",&#13;
             name:"Page 08",&#13;
             numberOfIndex:"7"},&#13;
            {index:"fwrg4g9",&#13;
             name:"Page 09",&#13;
             numberOfIndex:"8"},&#13;
            {index:"fwrg4g0",&#13;
             name:"Page 10",&#13;
             numberOfIndex:"9"}&#13;
        ];&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presentationController = controller;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="TextAudio" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Controls" name="controls" nameLabel="TextAudio_property_controls" type="{None, Browser, Custom}"/>
        <property displayName="Display time" name="displayTime" nameLabel="TextAudio_property_display_time" type="boolean"/>
        <property displayName="Enable loop" name="enableLoop" nameLabel="TextAudio_property_enable_loop" type="boolean"/>

        <property name="Slides" nameLabel="TextAudio_property_slides" type="list">
            <property isLocalized="true" name="Text" nameLabel="TextAudio_property_text" type="html"/>
            <property isLocalized="true" name="Times" nameLabel="TextAudio_property_times" type="text"/>
            <property displayName="Position and Dimentions" isLocalized="true" name="positionAndDimentions" nameLabel="TextAudio_property_position_and_dimentions" type="text"/>
        </property>
        <property name="mp3" nameLabel="TextAudio_property_mp3" type="audio"/>
        <property name="ogg" nameLabel="TextAudio_property_ogg" type="audio"/>

        <property displayName="On Text Click Behavior" name="clickAction" nameLabel="TextAudio_property_click_action" type="{Play from the moment, Play the interval, Play the interval from vocabulary file}"/>
        <property displayName="Vocabulary mp3" name="vocabulary_mp3" nameLabel="TextAudio_property_vocabulary_mp3" type="audio"/>
        <property displayName="Vocabulary ogg" name="vocabulary_ogg" nameLabel="TextAudio_property_vocabulary_ogg" type="audio"/>
        <property displayName="Vocabulary intervals" isLocalized="true" name="vocabulary_intervals" nameLabel="TextAudio_property_vocabulary_intervals" type="text"/>

        <property displayName="On end" name="onEnd" nameLabel="TextAudio_property_vocabulary_on_end" type="event"/>
        <property displayName="Is Click Disabled" name="isClickDisabled" nameLabel="TextAudio_property_is_click_disabled" type="boolean"/>
        <property displayName="Show Slides" name="showSlides" nameLabel="TextAudio_property_show_slides" type="{Show current slide, Show all slides}"/>
    </model>
<css>.wrapper-addon-textaudio {&#13;
    height: 30px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.wrapper-addon-textaudio audio {&#13;
    bottom: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.wrapper-addon-textaudio .textaudio-text {&#13;
    width: 100%;&#13;
}&#13;
&#13;
.wrapper-addon-textaudio  span {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.wrapper-addon-textaudio span.active {&#13;
    color: #cc0000;&#13;
}&#13;
&#13;
.text-audio-loading-area {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    display: none;&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    background: url("/media/images/loading.gif") no-repeat center;&#13;
    background-size: 30px;&#13;
}&#13;
&#13;
&#13;
.textaudioplayer {&#13;
    top: -40px;&#13;
    background-color: #EBEFF0;&#13;
    border-radius: 20px;&#13;
    width: 340px;&#13;
    height: 40px;&#13;
    display: table;&#13;
    padding-right: 2px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.textaudio-play-pause-btn {&#13;
    width: 38px;&#13;
    height: 40px;&#13;
    float:left;&#13;
    border: solid 1px #444;&#13;
    border-radius: 30px;&#13;
    background-position: center center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.textaudio-play-btn {&#13;
    background-image: url('resources/audio-play-btn.png');&#13;
}&#13;
&#13;
.textaudio-pause-btn {&#13;
    background-image: url('resources/audio-pause-btn.png');&#13;
}&#13;
&#13;
.textaudio-stop-btn {&#13;
    width: 40px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-stop-btn.png') no-repeat center center;&#13;
    float:left;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.textaudio-volume-btn {&#13;
    width: 40px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-volume-btn.png') no-repeat center center;&#13;
    float:left;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.textaudio-volume0 {&#13;
    background-image: url('resources/volume-0.png');&#13;
}&#13;
&#13;
.textaudio-volume1 {&#13;
    background-image: url('resources/volume-1.png');&#13;
}&#13;
&#13;
.textaudio-volume2 {&#13;
    background-image: url('resources/volume-2.png');&#13;
}&#13;
&#13;
.textaudio-volume3 {&#13;
    background-image: url('resources/volume-3.png');&#13;
}&#13;
&#13;
.textaudio-player-time {&#13;
    vertical-align: middle;&#13;
    display: table-cell;&#13;
    height: 40px;&#13;
    line-height: 16px;&#13;
    padding-right: 10px;&#13;
    font-size: 14px;&#13;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;&#13;
    color: grey;&#13;
}&#13;
&#13;
.textaudio-progress-bar {&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
    width: 100px;&#13;
    float:left;&#13;
    padding-left: 0px;&#13;
    margin-top: 15px;&#13;
    margin-left: 5px;&#13;
    height: 10px;&#13;
    background-color: #FFF;&#13;
    border-radius: 5px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.textaudio-slider-btn {&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    background: url('resources/audio-slider-btn.png') no-repeat;&#13;
    float:left;&#13;
    margin-left: -10px;&#13;
    margin-top: -5px;&#13;
    position: absolute;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.textaudio-bar {&#13;
    background-color: #BDC2C7;&#13;
    float: left;&#13;
    height: 10px;&#13;
    margin-left: 0px;&#13;
    border-bottom-left-radius: 5px;&#13;
    border-top-left-radius: 5px;&#13;
}&#13;
&#13;
.textaudio-volume-layer {&#13;
    width: 100px;&#13;
    height: 40px;&#13;
    position: absolute;&#13;
    right: 15px;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.textaudio-volume-control-background {&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 50%;&#13;
    border-bottom: solid 1px #808080;&#13;
}&#13;
&#13;
.textaudio-volume-control {&#13;
    position: absolute;&#13;
    width: 20px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-slider-btn.png') no-repeat center;&#13;
    margin-left: -10px;&#13;
}&#13;
</css><view>&lt;div class="wrapper-addon-textaudio"&gt;&#13;
    &lt;div class="textaudio-player"&gt;&lt;/div&gt;&#13;
    &lt;div class="textaudio-text slide-id-0"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="text-audio-loading-area"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="wrapper-addon-textaudio"&gt;&#13;
    &lt;div class="textaudio-player"&gt;&lt;/div&gt;&#13;
    &lt;div class="textaudio-text slide-id-0"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonTextAudio_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.originalFile = {};&#13;
    presenter.vocabularyFile = {};&#13;
    presenter.eventBus = null;&#13;
    presenter.currentTimeAlreadySent = null;&#13;
    presenter.hasBeenStarted = false;&#13;
    presenter.isPlaying = false;&#13;
    presenter.globalIntervalNumber = 0;&#13;
    presenter.isVocabularyAudioLoaded = false;&#13;
    presenter.isVocabularyPlaying = false;&#13;
    presenter.buzzAudio = [];&#13;
    presenter.audio = {};&#13;
    presenter.current_slide_data = {&#13;
        slide_id: -1,&#13;
        selection_id: -1&#13;
    };&#13;
    presenter.playerController = null;&#13;
    presenter.selectionId = undefined;&#13;
    presenter.playedByClick = false;&#13;
    presenter.addonID = null;&#13;
    presenter.fps = 10;&#13;
    presenter.previousSelectionId = -1;&#13;
    presenter.mouseData = {};&#13;
    presenter.slidesMade = false;&#13;
&#13;
    /**&#13;
     * play_interval_or_vocabulary - this option if for compatibility sake. If user had both&#13;
     * 'Individual fragment playback' and 'Vocabulary audio files playback' options selected the result was&#13;
     * different than can be now obtained by selecting one of the 'On Text Click Behavior' property option.&#13;
     */&#13;
    presenter.ALLOWED_CLICK_BEHAVIOUR = {&#13;
        play_from_the_moment: 'Play from the moment',&#13;
        play_interval: 'Play the interval',&#13;
        play_vocabulary_file: 'Play vocabulary audio file',&#13;
        play_vocabulary_interval: 'Play the interval from vocabulary file',&#13;
        play_interval_or_vocabulary: 'Play interval from base file or vocabulary audio file'&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'M01': 'This addon needs at least 1 audio file.',&#13;
        'M02': 'Number of texts in the slide should be the same as number of time entities',&#13;
        'M03': 'Incorrectly defined period of time',&#13;
        'M04': 'Entry ends before start',&#13;
        'M05': 'Duplicated text for second',&#13;
        'SAF01': 'Property Vocabulary audio files cannot be empty',&#13;
        'SAF02': 'Number of Vocabulary audio files and time items must be the same',&#13;
        'SAF03': 'All values in property Vocabulary audio files has to be filled',&#13;
        'VI01': 'At least one vocabulary audio file have to be set.',&#13;
        'VI02': 'Number of parts in Vocabulary intervals have to be equal to sum of times periods defined in Slides property',&#13;
        'VI03': 'Vocabulary time intervals are not set'&#13;
    };&#13;
&#13;
&#13;
    presenter.getErrorObject = function AddonTextAudio_getErrorObject (ec) {&#13;
        return {&#13;
            isValid: false,&#13;
            errorCode: ec&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getCorrectObject = function AddonTextAudio_getCorrectObject (val) {&#13;
        return {&#13;
            isValid: true,&#13;
            value: val&#13;
        };&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function AddonTextAudio_onEventReceived (eventName, eventData) {&#13;
        if(eventData.value == 'dropdownClicked') {&#13;
            presenter.audio.load();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showLoadingArea = function AddonTextAudio_showLoadingArea (clickAction) {&#13;
        if (clickAction === 'play_vocabulary_interval' &amp;&amp; presenter.buzzAudio.length === 0 &amp;&amp; !MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            presenter.$view.find('div.text-audio-loading-area').css('display','block');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideLoadingArea = function AddonTextAudio_hideLoadingArea () {&#13;
        var $loadingArea = presenter.$view.find('div.text-audio-loading-area');&#13;
        $loadingArea.css('display','none');&#13;
        $loadingArea.remove();&#13;
    };&#13;
&#13;
    presenter.transposeDict = function AddonTextAudio_transposeDict (dict) {&#13;
        var transp = {};&#13;
        for (var key in dict) {&#13;
            if (dict.hasOwnProperty(key))&#13;
                transp[dict[key]] = key;&#13;
        }&#13;
        return transp;&#13;
    };&#13;
&#13;
    presenter.startTimeMeasurement = function AddonTextAudio_startTimeMeasurement () {&#13;
        presenter.isPlaying = true;&#13;
        if (!presenter.audioClock) {&#13;
            presenter.audioClock = setInterval(function AddonTextAudio_audioClockInterval () { presenter.onTimeUpdateCallback(); }, 1000 / presenter.fps);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stopTimeMeasurement = function AddonTextAudio_stopTimeMeasurement () {&#13;
        presenter.isPlaying = false;&#13;
        clearInterval(presenter.audioClock);&#13;
        presenter.audioClock = null;&#13;
    };&#13;
&#13;
    presenter.startVocabularyTimeMeasurement = function AddonTextAudio_startVocabularyTimeMeasurement () {&#13;
        presenter.isVocabularyPlaying = true;&#13;
        if (!presenter.audioVocClock) {&#13;
            presenter.audioVocClock = setInterval(function AddonTextAudio_audioVOcClockInterval () { presenter.onTimeUpdateCallback(); }, 1000 / presenter.fps);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stopVocabularyTimeMeasurement = function AddonTextAudio_stopVocabularyTimeMeasurement () {&#13;
        presenter.isVocabularyPlaying = false;&#13;
        clearInterval(presenter.audioVocClock);&#13;
        presenter.audioVocClock = null;&#13;
        presenter.clearSelection();&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function AddonTextAudio_setPlayerController (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.stopSingleAudioPlayer = function AddonTextAudio_stopSingleAudioPlayer () {&#13;
        presenter.removeMarkFromItems();&#13;
&#13;
        for (var i=0; i&lt;presenter.buzzAudio.length; i++) {&#13;
            presenter.buzzAudio[i].stop();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playSingleAudioPlayer = function AddonTextAudio_playSingleAudioPlayer (slideId, elementID) {&#13;
        presenter.stopSingleAudioPlayer();&#13;
&#13;
        for (var i=0; i&lt;slideId; i++) {&#13;
            elementID += presenter.slidesLengths[i];&#13;
        }&#13;
&#13;
        presenter.buzzAudio[elementID].play();&#13;
    };&#13;
&#13;
    presenter.markItem = function AddonTextAudio_markItem (selectionId) {&#13;
        var selector = 'span[data-selectionid="[NUMBER]"]'.replace('[NUMBER]', selectionId);&#13;
        presenter.$view.find('.textaudio-text').find(selector).addClass('active');&#13;
    };&#13;
&#13;
    presenter.removeMarkFromItems = function AddonTextAudio_removeMarkFromItems () {&#13;
        presenter.$view.find('span.active').removeClass('active');&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function AddonTextAudio_upgradeModel (model) {&#13;
    	var upgradedModel = presenter.upgradeControls(model);&#13;
&#13;
        return presenter.upgradeClickAction(upgradedModel);&#13;
    };&#13;
&#13;
    presenter.upgradeClickAction = function AddonTextAudio_upgradeClickAction (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (model.playPart != undefined || model.playSeparateFiles != undefined || model.separateFiles != undefined) {&#13;
            var playPart = ModelValidationUtils.validateBoolean(model.playPart),&#13;
                playSeparateFiles = ModelValidationUtils.validateBoolean(model.playSeparateFiles),&#13;
                clickAction = presenter.ALLOWED_CLICK_BEHAVIOUR.play_from_the_moment;&#13;
&#13;
            if (playPart &amp;&amp; !playSeparateFiles) {&#13;
                clickAction = presenter.ALLOWED_CLICK_BEHAVIOUR.play_interval;&#13;
            } else if (!playPart &amp;&amp; playSeparateFiles) {&#13;
                clickAction = presenter.ALLOWED_CLICK_BEHAVIOUR.play_vocabulary_file;&#13;
            } else if (playPart &amp;&amp; playSeparateFiles) {&#13;
                clickAction = presenter.ALLOWED_CLICK_BEHAVIOUR.play_interval_or_vocabulary;&#13;
            }&#13;
&#13;
            upgradedModel["clickAction"] = clickAction;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeControls = function AddonTextAudio_upgradeControls (model) {&#13;
    	var upgradedModel = {};&#13;
&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (typeof upgradedModel['controls'] == "undefined") {&#13;
        	if (upgradedModel['defaultControls'] == "True") {&#13;
        		upgradedModel['controls'] = "Browser";&#13;
        	} else {&#13;
        		upgradedModel['controls'] = "None";&#13;
        	}&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.getSlideNumber = function addonTextAudio_getSlideNumber () {&#13;
        return presenter.current_slide_data.slide_id + 1;&#13;
    };&#13;
&#13;
    presenter.getEventObject = function AddonTextAudio_getEventObject (_item, _value, _score) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item: _item + "",&#13;
            value: _value + "",&#13;
            score: _score + ""&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createTimeUpdateEventData = function AddonTextAudio_createTimeUpdateEventData (data) {&#13;
        return presenter.getEventObject(presenter.getSlideNumber(), data.currentTime, "");&#13;
    };&#13;
&#13;
    presenter.createOnEndEventData = function AddonTextAudio_createOnEndEventData () {&#13;
        return presenter.getEventObject("end", "", "");&#13;
    };&#13;
&#13;
    presenter.createOnPlayEventData = function AddonTextAudio_createOnPlayEventData () {&#13;
        return presenter.getEventObject(presenter.getSlideNumber(), "playing", "");&#13;
    };&#13;
&#13;
    presenter.createOnPauseEventData = function AddonTextAudio_createOnPauseEventData () {&#13;
        return presenter.getEventObject(presenter.getSlideNumber(), "stop", "");&#13;
    };&#13;
&#13;
    presenter.getAudioCurrentTime = function AddonTextAudio_getAudioCurrentTime () {&#13;
        return presenter.audio.currentTime;&#13;
    };&#13;
&#13;
    presenter.formatTime = function addonTextAudio_formatTime (seconds) {&#13;
        function addonTextAudio_addZero(v) { return (v &lt; 10 ? '0' : '') + v }&#13;
&#13;
        var minutes = Math.floor(seconds / 60);&#13;
        var remainingSeconds = Math.floor(seconds % 60);&#13;
&#13;
        return addonTextAudio_addZero(minutes) + ":" + addonTextAudio_addZero(remainingSeconds);&#13;
    };&#13;
&#13;
    presenter.onLoadedMetadataCallback = function AddonTextAudio_onLoadedMetadataCallback () {&#13;
        var duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        presenter.displayTimer(0, duration);&#13;
&#13;
        if (presenter.configuration.controls === "Custom"){&#13;
            presenter.$playerTime.html('0:00 / ' + presenter.formatTime(duration))&#13;
        }&#13;
    };&#13;
&#13;
    presenter.sendEventAndSetCurrentTimeAlreadySent = function AddonTextAudio_sendEventAndSetCurrentTimeAlreadySent (eventData, currentTime) {&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        presenter.currentTimeAlreadySent = currentTime;&#13;
    };&#13;
&#13;
    presenter.sendOnEndEvent = function AddonTextAudio_sendOnEndEvent () {&#13;
        var eventData = presenter.createOnEndEventData();&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.onTimeUpdateSendEventCallback = function AddonTextAudio_onTimeUpdateSendEventCallback () {&#13;
        var currentTime = presenter.formatTime(presenter.getAudioCurrentTime());&#13;
        if (currentTime !== presenter.currentTimeAlreadySent) { // to prevent duplicated value&#13;
            var eventData = presenter.createTimeUpdateEventData({'currentTime' : currentTime});&#13;
            presenter.sendEventAndSetCurrentTimeAlreadySent(eventData, currentTime);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onTimeUpdateCallback = function AddonTextAudio_onTimeUpdateCallback () {&#13;
        var bar_width, currentTime, duration;&#13;
&#13;
        if (presenter.isVocabularyPlaying) {&#13;
            if (presenter.vocabulary.getTime() &gt;= presenter.vocabulary_end) {&#13;
                presenter.vocabulary.setTime(0);&#13;
                presenter.vocabulary.pause();&#13;
            }&#13;
            return;&#13;
        }&#13;
        currentTime = presenter.audio.currentTime;&#13;
        duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
&#13;
        if (presenter.configuration.displayTime) {&#13;
            presenter.displayTimer(currentTime, duration);&#13;
        }&#13;
&#13;
        if (presenter.configuration.controls === "Custom"){&#13;
            presenter.$playerTime.html(presenter.formatTime(currentTime) + ' / ' + presenter.formatTime(duration));&#13;
            bar_width = presenter.$progressWrapper.width() * currentTime / duration;&#13;
            presenter.$progressBar.width(Math.round(bar_width));&#13;
            presenter.$progressSlider.css('left', Math.round(bar_width));&#13;
        }&#13;
&#13;
        if(presenter.configuration.showSlides == "Show all slides"){&#13;
            presenter.changeSlideAll(currentTime);&#13;
        }else{&#13;
            presenter.changeSlide(currentTime);&#13;
        }&#13;
&#13;
        if (presenter.stopClicked) {&#13;
            presenter.$view.find('span').removeClass('active');&#13;
            presenter.hasBeenStarted = false;&#13;
            presenter.stopClicked = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeVolumeClass = function addonTextAudio_changeVolumeClass (volume_btn, volume_class) {&#13;
        if (volume_btn.hasClass(volume_class)) {&#13;
            return;&#13;
        }&#13;
        for (var i=0; i&lt;=3; i++) {&#13;
            if (volume_btn.hasClass('textaudio-volume'+i)) {&#13;
                volume_btn.removeClass('textaudio-volume'+i);&#13;
            }&#13;
        }&#13;
        volume_btn.addClass(volume_class);&#13;
    };&#13;
&#13;
    presenter.onVolumeChanged = function AddonTextAudio_onVolumeChanged () {&#13;
        var volume, volume_class;&#13;
        if (presenter.configuration.controls === "Custom"){&#13;
            volume = presenter.audio.volume;&#13;
            volume_class = '';&#13;
            presenter.$volumeControl.css('left', volume * presenter.$volumeLayer.width());&#13;
            if (volume &lt; 0.1) {&#13;
                volume_class = 'textaudio-volume0';&#13;
                if (volume &gt; 0) {&#13;
                    presenter.audio.volume = 0;&#13;
                }&#13;
            } else if (volume &lt; 0.4) {&#13;
                volume_class = 'textaudio-volume1';&#13;
            } else if (volume &lt; 0.7) {&#13;
                volume_class = 'textaudio-volume2';&#13;
            } else {&#13;
                volume_class = 'textaudio-volume3';&#13;
            }&#13;
            presenter.changeVolumeClass(presenter.$volumeBtn, volume_class);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playPauseCallback = function AddonTextAudio_playPauseCallback () {&#13;
        if (presenter.$playPauseBtn.hasClass('textaudio-pause-btn')) {&#13;
            presenter.pause();&#13;
        }&#13;
        else {&#13;
            presenter.play();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.displayTimer = function AddonTextAudio_displayTimer (current, duration) {&#13;
        presenter.$view.find('#currentTime').html(presenter.formatTime(current) + ' / ');&#13;
        presenter.$view.find('#durationTime').html(presenter.formatTime(duration));&#13;
    };&#13;
&#13;
    presenter.goTo =  function AddonTextAudio_goTo (slide_id, selectionId) {&#13;
        if (slide_id &gt;= 0 || selectionId &gt;= 0) {&#13;
            var frame2go = presenter.configuration.slides[slide_id].Times[selectionId].start + 0.1;&#13;
            presenter.audio.currentTime = frame2go / presenter.fps;&#13;
        }&#13;
        presenter.play();&#13;
    };&#13;
&#13;
    presenter.setPositionAndDimentions = function AddonTextAudio_setPositionAndDimentions (element, slide_id) {&#13;
        element.css('position', 'absolute');&#13;
        element.css('left', presenter.configuration.slides[slide_id].positionAndDimentions[0]+ 'px');&#13;
        element.css('top', presenter.configuration.slides[slide_id].positionAndDimentions[1]+ 'px');&#13;
        element.css('width', presenter.configuration.slides[slide_id].positionAndDimentions[2]+ 'px');&#13;
        element.css('height', presenter.configuration.slides[slide_id].positionAndDimentions[3]+ 'px');&#13;
    };&#13;
&#13;
    presenter.removePositionAndDimentions = function AddonTextAudio_removePositionAndDimentions (element) {&#13;
        element.css('position', '');&#13;
        element.css('left', '');&#13;
        element.css('top', '');&#13;
        element.css('width', '');&#13;
        element.css('height', '');&#13;
    };&#13;
&#13;
    presenter.makeSlide =  function AddonTextAudio_makeSlide (textWrapper, slide_id) {&#13;
        slide_id = parseInt(slide_id, 10);&#13;
        if (slide_id &lt; 0) {&#13;
            textWrapper.html('');&#13;
        } else {&#13;
            if(presenter.configuration.showSlides == "Show all slides" &amp;&amp; slide_id &gt;=1){&#13;
                var textElement = $('&lt;div class="textaudio-text"&gt;&lt;/div&gt;');&#13;
                textElement.addClass('slide-id-'+slide_id);&#13;
                presenter.$view.find('.wrapper-addon-textaudio').append(textElement);&#13;
                textWrapper = presenter.$view.find('.slide-id-'+slide_id);&#13;
            }&#13;
            if(presenter.configuration.showSlides == "Show all slides"){&#13;
                textWrapper.append(presenter.configuration.slides[slide_id].html);&#13;
                if(presenter.configuration.slides[slide_id].positionAndDimentions != '' &amp;&amp; presenter.configuration.slides[slide_id].positionAndDimentions != undefined){&#13;
                    presenter.setPositionAndDimentions(textWrapper, slide_id);&#13;
                }&#13;
            }else{&#13;
                textWrapper.html(presenter.configuration.slides[slide_id].html);&#13;
                if(presenter.configuration.slides[slide_id].positionAndDimentions != '' &amp;&amp; presenter.configuration.slides[slide_id].positionAndDimentions != undefined){&#13;
                    presenter.setPositionAndDimentions(textWrapper, slide_id);&#13;
                }else{&#13;
                    presenter.removePositionAndDimentions(textWrapper);&#13;
                }&#13;
            }&#13;
            textWrapper.attr('data-slideId', slide_id);&#13;
            textWrapper.find("span[class^='textelement']").each(function AddonTextAudio_textWrapperTextElementEach () {&#13;
                var that = this;&#13;
                if(!presenter.configuration.isClickDisabled){&#13;
                    presenter.slidesSpanElements.push(that);&#13;
                    $(that).on('click', function addonTextAudio_textWrapperTextElementOnClick (e) {&#13;
                        e.stopPropagation();&#13;
&#13;
                        var isVocabularyInterval = presenter.configuration.clickAction == 'play_vocabulary_interval';&#13;
                        var isLoaded = presenter.isVocabularyAudioLoaded || presenter.buzzAudio.length !== 0;&#13;
                        if (isVocabularyInterval &amp;&amp; !MobileUtils.isMobileUserAgent(navigator.userAgent) &amp;&amp; !isLoaded) {&#13;
                            return false;&#13;
                        }&#13;
&#13;
                        presenter.playedByClick = true;&#13;
                        presenter.selectionId = parseInt($(this).attr('data-selectionId'), 10);&#13;
&#13;
                        switch (presenter.configuration.clickAction) {&#13;
                            case 'play_vocabulary_interval':&#13;
                                if (presenter.isVocabularyPlaying || !presenter.isPlaying) {&#13;
                                    var intervalId = parseInt($(this).attr('data-intervalId'), 10);&#13;
                                    var frame = presenter.configuration.vocabularyIntervals[intervalId];&#13;
&#13;
                                    if (presenter.isPlaying) {&#13;
                                        presenter.vocabulary.stop();&#13;
                                    }&#13;
                                    presenter.clearSelection();&#13;
                                    presenter.vocabulary.setTime(frame.start / presenter.fps);&#13;
                                    presenter.vocabulary_end = frame.end / presenter.fps;&#13;
                                    presenter.vocabulary.play();&#13;
                                    presenter.markItem(presenter.selectionId);&#13;
                                    break;&#13;
                                }&#13;
                            case 'play_interval_or_vocabulary':&#13;
                            case 'play_vocabulary_file':&#13;
                                if (!presenter.isPlaying) {&#13;
                                    presenter.pause();&#13;
                                    presenter.playSingleAudioPlayer(slide_id, presenter.selectionId);&#13;
                                    presenter.markItem(presenter.selectionId);&#13;
                                    break;&#13;
                                }&#13;
                            case 'play_interval':&#13;
                            case 'play_from_the_moment':&#13;
                                presenter.play();&#13;
&#13;
                                if ($(this).hasClass("tmp-active")) {&#13;
                                    $(this).removeClass("tmp-active");&#13;
                                    $(this).addClass("active");&#13;
                                }&#13;
&#13;
                                if (MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
                                    function AddonTextAudio_fun() {&#13;
                                        if (slide_id &gt;= 0 || presenter.selectionId &gt;= 0) {&#13;
                                            var frame2go = presenter.configuration.slides[slide_id].Times[presenter.selectionId].start;&#13;
                                            presenter.audio.currentTime = frame2go / presenter.fps;&#13;
                                        }&#13;
                                        presenter.audio.removeEventListener("playing", AddonTextAudio_fun, false);&#13;
                                    }&#13;
                                    if (presenter.hasBeenStarted) {&#13;
                                        presenter.pause();&#13;
                                        presenter.goTo(slide_id, presenter.selectionId);&#13;
                                    } else {&#13;
                                        presenter.audio.addEventListener("playing", AddonTextAudio_fun, false);&#13;
                                    }&#13;
                                } else {&#13;
                                    presenter.goTo(slide_id, presenter.selectionId);&#13;
                                }&#13;
                        }&#13;
                    });&#13;
                }&#13;
            });&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.highlightSelection = function AddonTextAudio_highlightSelection (textWrapper, selection_id) {&#13;
        textWrapper.find('span').each(function () {&#13;
            $(this).removeClass('active');&#13;
        });&#13;
        if (selection_id &gt;= 0) {&#13;
            textWrapper.find('span.textelement' + selection_id).addClass('active');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.areSlidesEqual = function addonTextAudio_areSlidesEqual (slide1, slide2) {&#13;
        return slide1.slide_id == slide2.slide_id &amp;&amp; slide1.selection_id == slide2.selection_id;&#13;
    };&#13;
&#13;
    presenter.highlightSelectionAll = function AddonTextAudio_highlightSelectionAll (textWrapper, selection_id) {&#13;
        presenter.$view.find('.textaudio-text').find('span').each(function () {&#13;
            $(this).removeClass('active');&#13;
        });&#13;
&#13;
        if(presenter.currentSlide &gt;= 1){&#13;
            textWrapper = presenter.$view.find('.slide-id-'+presenter.currentSlide);&#13;
        }&#13;
&#13;
        if (selection_id &gt;= 0) {&#13;
            textWrapper.find('span.textelement' + selection_id).addClass('active');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeSlideAll = function AddonTextAudio_changeSlideAll (currentTime) {&#13;
        currentTime = Math.round(currentTime * presenter.fps);&#13;
        var frames_array = presenter.configuration.frames;&#13;
        var isCurrentTimeInRange = currentTime &lt; frames_array.length;&#13;
        var slide_data = {&#13;
            slide_id: isCurrentTimeInRange ? frames_array[currentTime].slide_id : -1,&#13;
            selection_id: isCurrentTimeInRange ? frames_array[currentTime].selection_id : 0&#13;
        };&#13;
        presenter.currentSlide = slide_data.slide_id;&#13;
        if (!presenter.hasBeenStarted) {&#13;
            slide_data.selection_id = -1;&#13;
        }&#13;
        var difference = slide_data.selection_id - presenter.previousSelectionId;&#13;
        if (difference &gt; 1 &amp;&amp; !presenter.playedByClick) {&#13;
            slide_data.selection_id -= difference - 1;&#13;
        }&#13;
        presenter.previousSelectionId = slide_data.selection_id;&#13;
        presenter.changeSlideFromDataAll(slide_data);&#13;
    };&#13;
&#13;
    presenter.changeSlideFromDataAll = function AddonTextAudio_changeSlideFromDataAll (slide_data) {&#13;
        var textWrapper = presenter.$view.find(".slide-id-0");&#13;
        if (!presenter.areSlidesEqual(slide_data, presenter.current_slide_data)) {&#13;
            var blockHighlight = false;&#13;
            var currentSelId = presenter.current_slide_data.selection_id;&#13;
            if (presenter.configuration.playPart &amp;&amp; currentSelId !== -1 &amp;&amp; presenter.selectionId === currentSelId) {&#13;
                presenter.pause();&#13;
                blockHighlight = true;&#13;
            }&#13;
            if (slide_data.slide_id != presenter.current_slide_data.slide_id &amp;&amp; !presenter.slidesMade) {&#13;
                presenter.makeSlide(textWrapper, slide_data.slide_id);&#13;
            }&#13;
            presenter.highlightSelectionAll(textWrapper, slide_data.selection_id);&#13;
&#13;
            if (blockHighlight) {&#13;
                textWrapper.find('span').each(function AddonTextAudio_textWrapperSpanEach2 () {&#13;
                    if ($(this).hasClass('active')) {&#13;
                        $(this).removeClass('active');&#13;
                        $(this).addClass("tmp-active");&#13;
                    }&#13;
                });&#13;
            }&#13;
            presenter.current_slide_data = slide_data;&#13;
            presenter.playedByClick = false;&#13;
        } else {&#13;
            if (presenter.$view.find('.active').length === 0) {&#13;
                presenter.highlightSelectionAll(textWrapper, slide_data.selection_id);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeSlideFromData = function AddonTextAudio_changeSlideFromData (slide_data) {&#13;
        var textWrapper = presenter.$view.find(".wrapper-addon-textaudio .textaudio-text");&#13;
&#13;
        if (!presenter.areSlidesEqual(slide_data, presenter.current_slide_data)) {&#13;
            var blockHighlight = false;&#13;
&#13;
            var currentSelId = presenter.current_slide_data.selection_id;&#13;
            if (presenter.configuration.playPart &amp;&amp; currentSelId !== -1 &amp;&amp; presenter.selectionId === currentSelId) {&#13;
                presenter.pause();&#13;
                blockHighlight = true;&#13;
            }&#13;
&#13;
            if (slide_data.slide_id != presenter.current_slide_data.slide_id) {&#13;
                presenter.makeSlide(textWrapper, slide_data.slide_id);&#13;
            }&#13;
            presenter.highlightSelection(textWrapper, slide_data.selection_id);&#13;
&#13;
            if (blockHighlight) {&#13;
                textWrapper.find('span').each(function AddonTextAudio_textWrapperSpanEach3 () {&#13;
                    if ($(this).hasClass('active')) {&#13;
                        $(this).removeClass('active');&#13;
                        $(this).addClass("tmp-active");&#13;
                    }&#13;
                });&#13;
            }&#13;
&#13;
            presenter.current_slide_data = slide_data;&#13;
            presenter.playedByClick = false;&#13;
        } else {&#13;
            if (presenter.$view.find('.active').length === 0) {&#13;
                presenter.highlightSelection(textWrapper, slide_data.selection_id);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeSlide = function AddonTextAudio_changeSlide (currentTime) {&#13;
        currentTime = Math.round(currentTime * presenter.fps);&#13;
&#13;
        var frames_array = presenter.configuration.frames;&#13;
        var isCurrentTimeInRange = currentTime &lt; frames_array.length;&#13;
&#13;
        var slide_data = {&#13;
            slide_id: isCurrentTimeInRange ? frames_array[currentTime].slide_id : -1,&#13;
            selection_id: isCurrentTimeInRange ? frames_array[currentTime].selection_id : 0&#13;
        };&#13;
&#13;
        if (!presenter.hasBeenStarted) {&#13;
            slide_data.selection_id = -1;&#13;
        }&#13;
&#13;
        var difference = slide_data.selection_id - presenter.previousSelectionId;&#13;
        if (difference &gt; 1 &amp;&amp; !presenter.playedByClick) {&#13;
            slide_data.selection_id -= difference - 1;&#13;
        }&#13;
&#13;
        presenter.previousSelectionId = slide_data.selection_id;&#13;
        presenter.changeSlideFromData(slide_data);&#13;
    };&#13;
&#13;
    presenter.progressMouseDownCallback = function AddonTextAudio_progressMouseDownCallback (event) {&#13;
        if ($(event.target).hasClass('textaudio-slider-btn')) {&#13;
            presenter.mouseData.oldPosition = event.pageX;&#13;
            presenter.mouseData.isMouseDragged = true;&#13;
            presenter.mouseData.playedBeforeDragging = !presenter.audio.paused;&#13;
            if (!presenter.audio.paused) {&#13;
                presenter.pause();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.progressMouseUpCallback = function AddonTextAudio_progressMouseUpCallback () {&#13;
        var duration;&#13;
        if (presenter.mouseData.isMouseDragged) {&#13;
            duration = presenter.audio.duration;&#13;
            duration = isNaN(duration) ? 0 : duration;&#13;
            presenter.audio.currentTime = duration * presenter.$progressBar.width() / presenter.$progressWrapper.width();&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
            presenter.mouseData.oldPosition = 0;&#13;
            if (presenter.mouseData.playedBeforeDragging) {&#13;
                presenter.play();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.progressMouseMoveCallback = function AddonTextAudio_progressMouseMoveCallback (event) {&#13;
        var relativeDistance, barWidth, oldWidth;&#13;
        if (presenter.mouseData.isMouseDragged){&#13;
            relativeDistance = event.pageX - presenter.mouseData.oldPosition;&#13;
            barWidth = 0;&#13;
            oldWidth = presenter.$progressBar.width();&#13;
            if (oldWidth + relativeDistance &lt; presenter.$progressWrapper.width()) {&#13;
                barWidth = oldWidth + relativeDistance;&#13;
            }&#13;
            else {&#13;
                barWidth = presenter.$progressWrapper.width();&#13;
            }&#13;
            presenter.$progressBar.width(barWidth);&#13;
            presenter.$progressSlider.css('left',Math.round(barWidth));&#13;
            presenter.mouseData.oldPosition = event.pageX;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isMoreThanOneFingerGesture = function addonTextAudio_isMoreThanOneFingerGesture (event) {&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touchPoints = event.touches;&#13;
        return touchPoints.length&gt; 1;&#13;
    };&#13;
&#13;
    presenter.progressTouchStartCallback = function addonTextAudio_progressTouchStartCallback (event) {&#13;
        if (presenter.isMoreThanOneFingerGesture(event)) return;&#13;
        var touch, touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0];&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        presenter.progressMouseDownCallback(touch);&#13;
    };&#13;
&#13;
    presenter.progressTouchEndCallback =  function AddonTextAudio_progressTouchEndCallback () {&#13;
        presenter.progressMouseUpCallback();&#13;
    };&#13;
&#13;
    presenter.progressTouchMoveCallback = function AddonTextAudio_progressTouchMoveCallback (event) {&#13;
        if (presenter.isMoreThanOneFingerGesture(event)) return;&#13;
&#13;
        var touch;&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0];&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        presenter.progressMouseMoveCallback(touch);&#13;
    };&#13;
&#13;
    presenter.attachProgressListeners = function AddonTextAudio_attachProgressListeners () {&#13;
        presenter.isMobileDevice = MobileUtils.isMobileUserAgent(navigator.userAgent) || MobileUtils.isEventSupported('touchend');&#13;
        if (MobileUtils.isWindowsMobile(window.navigator)) {&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerDown", presenter.progressTouchStartCallback , false);&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerUp", presenter.progressTouchEndCallback, false);&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerMove", presenter.progressTouchMoveCallback, false);&#13;
        }&#13;
        else if (presenter.isMobileDevice) {&#13;
            presenter.$progressWrapper[0].ontouchstart=presenter.progressTouchStartCallback ;&#13;
            presenter.$customPlayer[0].ontouchend=presenter.progressTouchEndCallback;&#13;
            presenter.$progressWrapper[0].ontouchmove=presenter.progressTouchMoveCallback;&#13;
        }&#13;
        else {&#13;
            presenter.$progressWrapper.on('mousedown', presenter.progressMouseDownCallback);&#13;
            presenter.$progressWrapper.on('mouseup', presenter.progressMouseUpCallback);&#13;
            presenter.$progressWrapper.on('mousemove', presenter.progressMouseMoveCallback);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.toogleVolumeLayer = function AddonTextAudio_toogleVolumeLayer (){&#13;
        presenter.onVolumeChanged();&#13;
        presenter.$volumeLayer.toggle();&#13;
        presenter.$playerTime.toggle();&#13;
    };&#13;
&#13;
    presenter.createHtmlPlayer = function AddonTextAudio_createHtmlPlayer () {&#13;
        var $volumeControlBackground;&#13;
&#13;
        presenter.$customPlayer = $('&lt;div&gt;').&#13;
            addClass('textaudioplayer');&#13;
&#13;
        presenter.$playPauseBtn = $('&lt;div&gt;').&#13;
            addClass('textaudio-play-pause-btn').&#13;
            addClass('textaudio-play-btn').&#13;
            on('click', presenter.playPauseCallback);&#13;
&#13;
        presenter.$customPlayer.append(presenter.$playPauseBtn);&#13;
&#13;
        presenter.$stopBtn = $('&lt;div&gt;').&#13;
            addClass('textaudio-stop-btn').&#13;
            on('click', presenter.stop);&#13;
&#13;
        presenter.$customPlayer.append(presenter.$stopBtn);&#13;
&#13;
        presenter.$progressWrapper = $('&lt;div&gt;').&#13;
            addClass('textaudio-progress-bar');&#13;
&#13;
        presenter.$progressBar = $('&lt;div&gt;').&#13;
            addClass('textaudio-bar');&#13;
&#13;
        presenter.$progressSlider = $('&lt;div&gt;').&#13;
            addClass('textaudio-slider-btn');&#13;
&#13;
        presenter.attachProgressListeners();&#13;
&#13;
        presenter.$progressWrapper.&#13;
            append(presenter.$progressBar).&#13;
            append(presenter.$progressSlider);&#13;
&#13;
        presenter.$customPlayer.append(presenter.$progressWrapper);&#13;
&#13;
        if (!MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
            presenter.$volumeBtn = $('&lt;div&gt;').&#13;
                addClass('textaudio-volume-btn').&#13;
                on('click', presenter.toogleVolumeLayer);&#13;
&#13;
            presenter.$volumeLayer = $('&lt;div&gt;').&#13;
                addClass('textaudio-volume-layer').&#13;
                on('click', presenter.volumeLayerOnClick).&#13;
                hide();&#13;
&#13;
            $volumeControlBackground = $('&lt;div&gt;').&#13;
                addClass('textaudio-volume-control-background');&#13;
&#13;
            presenter.$volumeControl = $('&lt;div&gt;').&#13;
                addClass('textaudio-volume-control');&#13;
&#13;
            presenter.$volumeLayer.&#13;
                append($volumeControlBackground).&#13;
                append(presenter.$volumeControl);&#13;
&#13;
            presenter.$customPlayer.&#13;
                append(presenter.$volumeBtn).&#13;
                append(presenter.$volumeLayer);&#13;
        }&#13;
&#13;
        presenter.$playerTime = $('&lt;div&gt;').&#13;
            addClass('textaudio-player-time').&#13;
            text('00:00 / --:--');&#13;
&#13;
        presenter.$customPlayer.append(presenter.$playerTime);&#13;
&#13;
        presenter.$audioWrapper.append(presenter.$customPlayer);&#13;
    };&#13;
&#13;
    presenter.volumeLayerOnClick = function AddonTextAudio_volumeLayerOnClick (e) {&#13;
        presenter.audio.volume = e.offsetX / $(this).width();&#13;
    };&#13;
&#13;
    presenter.createView = function AddonTextAudio_createView (view, model, isPreview) {&#13;
        presenter.$view.bind('click', function (event) {&#13;
            event.stopPropagation();&#13;
        });&#13;
        presenter.originalFile .mp3 = model.mp3;&#13;
        presenter.originalFile .ogg = model.ogg;&#13;
&#13;
        presenter.audio = document.createElement('audio');&#13;
        presenter.$audioWrapper = presenter.$view.find(".wrapper-addon-textaudio .textaudio-player");&#13;
&#13;
        if (presenter.configuration.controls === "Browser") {&#13;
            presenter.audio.setAttribute("controls", "controls");&#13;
            presenter.audio.setAttribute("preload", "auto");&#13;
        } else if (presenter.configuration.controls === "Custom") {&#13;
            presenter.createHtmlPlayer();&#13;
        }&#13;
&#13;
        var currentTime = document.createElement("span");&#13;
        var durationTime = document.createElement("span");&#13;
        $(currentTime).attr("id", "currentTime").addClass('current-time');&#13;
        $(durationTime).attr("id", "durationTime").addClass('duration-time');&#13;
&#13;
        presenter.$audioWrapper.append(presenter.audio);&#13;
        if (presenter.configuration.displayTime) {&#13;
            presenter.$audioWrapper.append(currentTime).append(durationTime);&#13;
            presenter.audio.addEventListener('loadeddata', presenter.onLoadedMetadataCallback, false);&#13;
        }&#13;
&#13;
        if(presenter.configuration.showSlides == "Show all slides"){&#13;
            var frames_array = presenter.configuration.frames;&#13;
            for (var i = 0; i&lt; frames_array.length; i++){&#13;
                if(frames_array[i].slide_id &gt;= 0){&#13;
                    var slide_data = {&#13;
                        slide_id: frames_array[i].slide_id,&#13;
                        selection_id: frames_array[i].selection_id&#13;
                    };&#13;
                    presenter.changeSlideFromDataAll(slide_data);&#13;
                }&#13;
            }&#13;
            presenter.$view.find('.textaudio-text span').removeClass('active');&#13;
        }else{&#13;
            presenter.changeSlide(0);&#13;
        }&#13;
&#13;
        presenter.slidesMade = true;&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.audio.addEventListener('timeupdate', presenter.onTimeUpdateSendEventCallback, false);&#13;
            presenter.audio.addEventListener('playing', presenter.onAudioPlaying, false);&#13;
            presenter.audio.addEventListener('play', presenter.onAudioPlay, false);&#13;
            presenter.audio.addEventListener('pause', presenter.onAudioPause, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onAudioPlaying = function AddonTextAudio_onAudioPlaying () {&#13;
        presenter.hasBeenStarted = true;&#13;
    };&#13;
&#13;
    presenter.onAudioPlay =  function AddonTextAudio_onAudioPlay () {&#13;
        if (presenter.isVocabularyPlaying) {&#13;
            presenter.vocabulary.pause();&#13;
        }&#13;
        if (!presenter.playedByClick) {&#13;
            presenter.selectionId = undefined;&#13;
        }&#13;
        presenter.eventBus.sendEvent('ValueChanged', presenter.createOnPlayEventData());&#13;
        presenter.startTimeMeasurement();&#13;
    };&#13;
&#13;
    presenter.onAudioPause = function AddonTextAudio_onAudioPause () {&#13;
        presenter.stopTimeMeasurement();&#13;
        presenter.eventBus.sendEvent('ValueChanged', presenter.createOnPauseEventData())&#13;
    };&#13;
&#13;
    presenter.attachEventListeners = function AddonTextAudio_attachEventListeners () {&#13;
        presenter.audio.addEventListener('loadeddata', presenter.onLoadedMetadataCallback, false);&#13;
        presenter.audio.addEventListener('timeupdate', presenter.onTimeUpdateCallback, false);&#13;
        presenter.audio.addEventListener('volumechange', presenter.onVolumeChanged, false);&#13;
        presenter.audio.addEventListener('ended', presenter.onEnded, false);&#13;
        presenter.audio.addEventListener('click', presenter.onAudioClick, false);&#13;
    };&#13;
&#13;
    presenter.onEnded = function AddonTextAudio_onEnded () {&#13;
        if (presenter.configuration.enableLoop) {&#13;
            presenter.currentTime = 0;&#13;
            presenter.play();&#13;
        } else {&#13;
            presenter.executeOnEndEvent();&#13;
            presenter.sendOnEndEvent();&#13;
            presenter.stop();&#13;
            presenter.$view.find(".wrapper-addon-textaudio .textaudio-text :last-child").removeClass('active');&#13;
        }&#13;
&#13;
        presenter.playedByClick = false;&#13;
    };&#13;
&#13;
    presenter.onAudioClick = function AddonTextAudio_onAudioClick (event) {&#13;
        event.stopPropagation();&#13;
    };&#13;
&#13;
    presenter.loadFiles = function AddonTextAudio_loadFiles () {&#13;
        var canPlayMp3 = false;&#13;
        var canPlayOgg = false;&#13;
&#13;
        if (presenter.audio.canPlayType) {&#13;
            canPlayMp3 = presenter.audio.canPlayType &amp;&amp; "" != presenter.audio.canPlayType('audio/mpeg');&#13;
            canPlayOgg = presenter.audio.canPlayType &amp;&amp; "" != presenter.audio.canPlayType('audio/ogg; codecs="vorbis"');&#13;
&#13;
            if (canPlayMp3) {&#13;
                presenter.audio.setAttribute("src", presenter.originalFile .mp3);&#13;
            } else if (canPlayOgg) {&#13;
                presenter.audio.setAttribute("src", presenter.originalFile .ogg);&#13;
            }&#13;
&#13;
            if (presenter.configuration.clickAction == 'play_vocabulary_interval') {&#13;
                presenter.vocabulary = new buzz.sound([&#13;
                    presenter.configuration.vocabulary_mp3,&#13;
                    presenter.configuration.vocabulary_ogg&#13;
                ]);&#13;
                presenter.vocabulary.bind('canplaythrough', function AddonTextAudio_vocabularyCanPlayThrough () {&#13;
                    presenter.vocabulary.unbind('canplaythrough');&#13;
                    presenter.isVocabularyAudioLoaded = true;&#13;
                    presenter.hideLoadingArea();&#13;
                }, false);&#13;
                presenter.vocabulary.bind('ended', function AddonTextAudio_vocabularyEnded () {&#13;
                    presenter.clearSelection();&#13;
                });&#13;
                presenter.vocabulary.bind('play', function AddonTextAudio_vocabularyPlay () {&#13;
                    if (!presenter.playedByClick) {&#13;
                        presenter.selectionId = undefined;&#13;
                    }&#13;
                    presenter.startVocabularyTimeMeasurement();&#13;
                }, false);&#13;
                presenter.vocabulary.bind('pause', function AddonTextAudio_vocabularyPause () {&#13;
                    presenter.stopVocabularyTimeMeasurement();&#13;
                }, false);&#13;
            }&#13;
        } else {&#13;
            var infoSpan = document.createElement('span');&#13;
            infoSpan.innerHTML = "Your browser doesn't support audio.";&#13;
            presenter.audio.appendChild(infoSpan);&#13;
        }&#13;
&#13;
        presenter.audio.load();&#13;
        presenter.attachEventListeners();&#13;
    };&#13;
&#13;
    presenter.createSeparateAudioFiles = function AddonTextAudio_createSeparateAudioFiles (audioFiles) {&#13;
        for (var i=0; i&lt;audioFiles.length; i++) {&#13;
            var localBuzz = new buzz.sound([&#13;
                audioFiles[i].mp3,&#13;
                audioFiles[i].ogg&#13;
            ]);&#13;
&#13;
            localBuzz.bind('ended', function AddonTextAudio_localBuzzEnded () {&#13;
                presenter.clearSelection();&#13;
            });&#13;
&#13;
            presenter.buzzAudio.push(localBuzz);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function AddonTextAudio_run (view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
        presenter.isLoaded = false;&#13;
        if (presenter.configuration.isValid) {&#13;
            presenter.audio.addEventListener("loadeddata", presenter.onAudioLoadedData);&#13;
        }&#13;
        presenter.addonID = model.ID;&#13;
&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.onAudioLoadedData = function AddonTextAudio_onAudioLoadedData () {&#13;
        presenter.isLoaded = true;&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonTextAudio_destroy (event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        if (presenter.$customPlayer) {&#13;
            presenter.$customPlayer[0].ontouchend = null;&#13;
            presenter.$customPlayer = null;&#13;
        }&#13;
        if (presenter.$playPauseBtn) {&#13;
            presenter.$playPauseBtn.off();&#13;
            presenter.$playPauseBtn = null;&#13;
        }&#13;
        if (presenter.$stopBtn) {&#13;
            presenter.$stopBtn.off();&#13;
            presenter.$stopBtn = null;&#13;
        }&#13;
        if (presenter.$progressWrapper) {&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerDown", presenter.progressTouchStartCallback , false);&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerUp", presenter.progressTouchEndCallback, false);&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerMove", presenter.progressTouchMoveCallback, false);&#13;
            presenter.$progressWrapper[0].ontouchstart = null;&#13;
            presenter.$progressWrapper[0].ontouchmove = null;&#13;
            presenter.$progressWrapper.off();&#13;
            presenter.$progressWrapper = null;&#13;
        }&#13;
        if (presenter.$progressBar) {&#13;
            presenter.$progressBar = null;&#13;
        }&#13;
        if (presenter.$progressSlider) {&#13;
            presenter.$progressSlider = null;&#13;
        }&#13;
        if (presenter.$volumeBtn) {&#13;
            presenter.$volumeBtn.off();&#13;
            presenter.$volumeBtn = null;&#13;
        }&#13;
        if (presenter.$volumeLayer) {&#13;
            presenter.$volumeLayer.off();&#13;
            presenter.$volumeLayer = null;&#13;
        }&#13;
        if (presenter.$volumeControl) {&#13;
            presenter.$volumeControl = null;&#13;
        }&#13;
        if (presenter.$playerTime) {&#13;
            presenter.$playerTime = null;&#13;
        }&#13;
&#13;
        if (presenter.audio) {&#13;
            presenter.audio.pause();&#13;
            presenter.audio.removeEventListener('loadeddata', presenter.onLoadedMetadataCallback, false);&#13;
            presenter.audio.removeEventListener('timeupdate', presenter.onTimeUpdateSendEventCallback, false);&#13;
            presenter.audio.removeEventListener('playing', presenter.onAudioPlaying, false);&#13;
            presenter.audio.removeEventListener('play', presenter.onAudioPlay, false);&#13;
            presenter.audio.removeEventListener('pause', presenter.onAudioPause, false);&#13;
            presenter.audio.removeEventListener('timeupdate', presenter.onTimeUpdateCallback, false);&#13;
            presenter.audio.removeEventListener('volumechange', presenter.onVolumeChanged, false);&#13;
            presenter.audio.removeEventListener('ended', presenter.onEnded, false);&#13;
            presenter.audio.removeEventListener('click', presenter.onAudioClick, false);&#13;
            presenter.audio.removeEventListener("loadeddata", presenter.onAudioLoadedData);&#13;
            presenter.audio.removeEventListener("loadeddata", presenter.stopAudioLoadedData);&#13;
            presenter.audio.removeEventListener("loadeddata", presenter.playAudioLoadedData);&#13;
            presenter.audio.setAttribute('src', '');&#13;
            presenter.audio.removeAttribute('src');&#13;
            presenter.audio.load();&#13;
        }&#13;
&#13;
        if (presenter.vocabulary) {&#13;
            presenter.vocabulary.unbind('ended play pause canplaythrough');&#13;
            presenter.vocabulary = null;&#13;
        }&#13;
&#13;
        presenter.buzzAudio.forEach(function (singleBuzzAudio, index) {&#13;
            singleBuzzAudio.unbind('ended play pause canplaythrough');&#13;
            presenter.buzzAudio[index] = null;&#13;
        });&#13;
&#13;
        presenter.slidesSpanElements.forEach(function (spanElement, index) {&#13;
            $(spanElement).off();&#13;
            presenter.slidesSpanElements[index] = null;&#13;
        });&#13;
&#13;
        try {&#13;
            clearInterval(presenter.audioClock);&#13;
        } catch (e) {}&#13;
&#13;
        try {&#13;
            clearInterval(presenter.audioVocClock);&#13;
        } catch (e) {}&#13;
&#13;
        presenter.$audioWrapper = null;&#13;
        presenter.originalFile = null;&#13;
        presenter.vocabularyFile = null;&#13;
        presenter.eventBus = null;&#13;
        presenter.currentTimeAlreadySent = null;&#13;
        presenter.buzzAudio = null;&#13;
        presenter.audio = null;&#13;
        presenter.current_slide_data = null;&#13;
        presenter.playerController = null;&#13;
        presenter.mouseData = null;&#13;
        presenter.audioClock = null;&#13;
        presenter.audioVocClock = null;&#13;
        presenter.configuration = null;&#13;
        presenter.slidesSpanElements = null;&#13;
        presenter.$view.unbind();&#13;
        presenter.view = null;&#13;
        presenter.$view = null;&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonTextAudio_createPreview (view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.initialize = function AddonTextAudio_initialize (view, model, isPreview) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        buzz.defaults.preload = 'auto';&#13;
        buzz.defaults.autoplay = false;&#13;
        buzz.defaults.loop = false;&#13;
&#13;
        presenter.slidesSpanElements = [];&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            delete presenter.play;&#13;
            delete presenter.stop;&#13;
            delete presenter.pause;&#13;
            delete presenter.show;&#13;
            delete presenter.hide;&#13;
            delete presenter.executeCommand;&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isVisibleByDefault = presenter.configuration.isVisible;&#13;
&#13;
        presenter.createView(view, upgradedModel, isPreview);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.loadFiles();&#13;
&#13;
            if (presenter.configuration.playSeparateFiles) {&#13;
                presenter.createSeparateAudioFiles(presenter.configuration.separateFiles);&#13;
            }&#13;
&#13;
            presenter.showLoadingArea(presenter.configuration.clickAction);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.roundTimeEntry = function addonTextAudio_roundTimeEntry (time_entry) {&#13;
        var time = time_entry.replace(',', '.').split(':'),&#13;
            minutes = time[0],&#13;
            seconds = parseFloat(time[1]).toFixed(1).split('.');&#13;
&#13;
        if (seconds[0].length &lt; 2) {&#13;
            seconds[0] = '0' + seconds[0];&#13;
        }&#13;
&#13;
        return minutes + ':' + seconds[0] + '.' + seconds[1];&#13;
    };&#13;
&#13;
    presenter.toFrames = function addonTextAudio_toFrames (time_entry) {&#13;
        time_entry =  presenter.roundTimeEntry(time_entry);&#13;
&#13;
        var entry = time_entry.split(':');&#13;
        var minutes = parseInt(entry[0], 10);&#13;
        var seconds = 0;&#13;
        var decyseconds = 0;&#13;
        if (entry[1].indexOf('.') &gt; -1) {&#13;
            var seconds_with_decyseconds = entry[1].split('.');&#13;
            seconds = parseInt(seconds_with_decyseconds[0], 10);&#13;
            decyseconds = parseInt(seconds_with_decyseconds[1], 10);&#13;
            if (decyseconds.toString().length &gt; 1) {&#13;
                decyseconds = parseInt(decyseconds.toString().substr(0,1), 10);&#13;
            }&#13;
        } else {&#13;
            seconds = parseInt(entry[1], 10);&#13;
        }&#13;
        minutes = isNaN(minutes) ? 0 : minutes;&#13;
        seconds = isNaN(seconds) ? 0 : seconds;&#13;
        decyseconds = isNaN(decyseconds) ? 0 : decyseconds;&#13;
&#13;
        return ((minutes * 60 + seconds) * presenter.fps) + decyseconds;&#13;
    };&#13;
&#13;
    presenter.timeEntry = function AddonTextAudio_timeEntry (slide_time) {&#13;
        var entry = slide_time.split('-');&#13;
        if (entry.length != 2) {&#13;
            return {&#13;
                errorCode: 'M03',&#13;
                errorData: slide_time&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            start: presenter.toFrames(entry[0]),&#13;
            end: presenter.toFrames(entry[1])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createNewSpan = function addonTextAudio_createNewSpan(n1, n2, text) {&#13;
        var $span = $('&lt;span&gt;&lt;/span&gt;').&#13;
            addClass('textelement' + n1).&#13;
            attr('data-selectionid', n1).&#13;
            attr('data-intervalid', n2).&#13;
            html(text);&#13;
        return $span.prop("outerHTML");&#13;
    };&#13;
&#13;
    presenter.parseSlideText = function addonTextAudio_parseSlideText (text) {&#13;
        var elemNumber = 0;&#13;
        var resultHTML = "";&#13;
&#13;
        HTMLParser(text, {&#13;
            start: function (tag, attrs, unary) {&#13;
                resultHTML += "&lt;" + tag;&#13;
                for (var i=0; i&lt;attrs.length; i++) {&#13;
                    resultHTML += " " + attrs[i].name + '="' + attrs[i].escaped + '"';&#13;
                }&#13;
                resultHTML += (unary ? "/" : "") + "&gt;";&#13;
            },&#13;
            end: function (tag) {&#13;
                resultHTML += "&lt;/" + tag + "&gt;";&#13;
            },&#13;
            chars: function (text) {&#13;
                var localParts = text.split('||');&#13;
&#13;
                for (var i=0; i&lt;localParts.length; i++) {&#13;
                    if (localParts[i] !== '') {&#13;
                        resultHTML += presenter.createNewSpan(elemNumber, presenter.globalIntervalNumber, localParts[i]);&#13;
                    }&#13;
&#13;
                    if (i !== localParts.length-1) {&#13;
                        elemNumber++;&#13;
                        presenter.globalIntervalNumber++;&#13;
                    }&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        return resultHTML;&#13;
    };&#13;
&#13;
    presenter.validateSlides = function AddonTextAudio_validateSlides (slides) {&#13;
        var validationResult = {&#13;
            isValid: false,&#13;
            value: [{&#13;
                Text: [''],&#13;
                Times: [{start: 0, end: 0}],&#13;
                PosAndDim: ['']&#13;
            }],&#13;
            errorCode: false&#13;
        };&#13;
        var frames = [],&#13;
            interval = 0;&#13;
        for (var i=0; i&lt;slides.length; i++) {&#13;
            var slide = slides[i];&#13;
            var slide_texts = slide.Text.split('||');&#13;
            var parsed_slide_texts = presenter.parseSlideText(slide.Text);&#13;
            var slide_times = slide.Times.split('\n');&#13;
            var slide_intervals = [];&#13;
            var posAndDims;&#13;
&#13;
            if(slide.positionAndDimentions != '' &amp;&amp; slide.positionAndDimentions != undefined){&#13;
                posAndDims = slide.positionAndDimentions.split(';');&#13;
            }else{&#13;
                posAndDims = '';&#13;
            }&#13;
&#13;
            if (slide_texts.length != slide_times.length) {&#13;
                validationResult.errorCode = 'M02';&#13;
                return validationResult;&#13;
            }&#13;
&#13;
            for (var j=0; j&lt;slide_times.length; j++) {&#13;
                var entry = slide_times[j];&#13;
                slide_times[j] = presenter.timeEntry(entry);&#13;
                if (slide_times[j].errorCode) {&#13;
                    validationResult.errorCode = slide_times[j].errorCode;&#13;
                    validationResult.errorData = entry;&#13;
                    return validationResult;&#13;
                }&#13;
&#13;
                var entry_start = slide_times[j].start,&#13;
                    entry_end = slide_times[j].end;&#13;
&#13;
                if (entry_start &gt; entry_end) {&#13;
                    validationResult.errorCode = 'M04';&#13;
                    return validationResult;&#13;
                }&#13;
                if (frames.length &gt; entry_start) {&#13;
                    validationResult.errorData = entry_start;&#13;
                    validationResult.errorCode = 'M05';&#13;
                    return validationResult;&#13;
                }&#13;
&#13;
                var frame;&#13;
                for (frame=frames.length; frame &lt; entry_start; frame++) {&#13;
                    frames[frame] = {&#13;
                        slide_id: -1,&#13;
                        selection_id: -1&#13;
                    }&#13;
                }&#13;
                for (frame=entry_start; frame &lt; entry_end; frame++) {&#13;
                    frames[frame] = {&#13;
                        slide_id: i,&#13;
                        selection_id: j&#13;
                    }&#13;
                }&#13;
                slide_intervals.push(interval);&#13;
                interval++;&#13;
            }&#13;
&#13;
            slide.Text = slide_texts;&#13;
            slide.Times= slide_times;&#13;
            slide.intervals = slide_intervals;&#13;
            slide.html = parsed_slide_texts;&#13;
            slides[i] = slide;&#13;
            slide.positionAndDimentions = posAndDims;&#13;
        }&#13;
        validationResult.isValid = true;&#13;
        validationResult.value = slides;&#13;
        validationResult.frames = frames;&#13;
&#13;
        presenter.slidesLengths = [];&#13;
        presenter.totalNumberOfParts = interval;&#13;
&#13;
        return validationResult;&#13;
    };&#13;
&#13;
    presenter.validateSeparateFiles = function addonTextAudio_validateSeparateFiles (audioFiles) {&#13;
        function addonTextAudio_hasEmptyField (audioFiles) {&#13;
            return audioFiles.filter(function AddonTextAudio_audioFilesFilter (v) {&#13;
                return ModelValidationUtils.isStringEmpty(v.mp3) || ModelValidationUtils.isStringEmpty(v.ogg);&#13;
            }).length &gt; 0;&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isArrayEmpty(audioFiles)) {&#13;
            return presenter.getErrorObject('SAF01');&#13;
        }&#13;
&#13;
        if (presenter.totalNumberOfParts !== audioFiles.length) {&#13;
            return presenter.getErrorObject('SAF02');&#13;
        }&#13;
&#13;
        if (addonTextAudio_hasEmptyField(audioFiles)) {&#13;
            return presenter.getErrorObject('SAF03');&#13;
        }&#13;
&#13;
        return presenter.getCorrectObject(audioFiles);&#13;
    };&#13;
&#13;
    presenter.validateVocabularyIntervals = function addonTextAudio_validateVocabularyIntervals (intervals) {&#13;
        var returnObj = {&#13;
            intervals: undefined,&#13;
            errorCode: false&#13;
        };&#13;
&#13;
        if (intervals === undefined) {&#13;
            returnObj.errorCode = 'VI03';&#13;
            return returnObj;&#13;
        }&#13;
&#13;
        var vocIntervals = intervals.split('\n');&#13;
            intervals = [];&#13;
        if (vocIntervals.length != presenter.totalNumberOfParts) {&#13;
            returnObj.errorCode = 'VI02';&#13;
            return returnObj;&#13;
        }&#13;
&#13;
        for (var i=0; i&lt;vocIntervals.length; i++) {&#13;
            intervals.push(presenter.timeEntry(vocIntervals[i]));&#13;
        }&#13;
&#13;
        returnObj.intervals = intervals;&#13;
        return returnObj;&#13;
    };&#13;
&#13;
    presenter.validateModel = function addonTextAudio_validateModel (model) {&#13;
        if (model.clickAction === '') {&#13;
            model.clickAction = presenter.ALLOWED_CLICK_BEHAVIOUR.play_from_the_moment;&#13;
        }&#13;
        var validatedAudioFiles = null,&#13;
            transposedBehaviors = presenter.transposeDict(presenter.ALLOWED_CLICK_BEHAVIOUR),&#13;
            clickAction = transposedBehaviors[model.clickAction];&#13;
        presenter.originalFile .mp3 = model.mp3;&#13;
        presenter.originalFile .ogg = model.ogg;&#13;
&#13;
        if (!presenter.originalFile .ogg &amp;&amp; !presenter.originalFile .mp3) {&#13;
            return presenter.getErrorObject('M01');&#13;
        }&#13;
&#13;
        presenter.totalNumberOfParts = 0;&#13;
        var validatedSlides = presenter.validateSlides(model.Slides);&#13;
        var validatedVocabularyIntervals = presenter.validateVocabularyIntervals(model.vocabulary_intervals);&#13;
        if (validatedSlides.errorCode) {&#13;
            return presenter.getErrorObject(validatedSlides.errorCode);&#13;
        }&#13;
&#13;
        if (clickAction == 'play_vocabulary_file' || clickAction == 'play_interval_or_vocabulary') {&#13;
            validatedAudioFiles = presenter.validateSeparateFiles(model.separateFiles);&#13;
            if (!validatedAudioFiles.isValid) return presenter.getErrorObject(validatedAudioFiles.errorCode);&#13;
        } else {&#13;
            validatedAudioFiles = presenter.getCorrectObject(false);&#13;
        }&#13;
&#13;
        if (clickAction == 'play_vocabulary_interval') {&#13;
            presenter.vocabularyFile.mp3 = model.vocabulary_mp3;&#13;
            presenter.vocabularyFile.ogg = model.vocabulary_ogg;&#13;
            if (!presenter.vocabularyFile.mp3 &amp;&amp; !presenter.vocabularyFile.ogg) {&#13;
                return presenter.getErrorObject('VI01');&#13;
            }&#13;
            if (validatedVocabularyIntervals.errorCode) {&#13;
                return presenter.getErrorObject(validatedVocabularyIntervals.errorCode);&#13;
            }&#13;
        }&#13;
&#13;
        if(model.showSlides == undefined){&#13;
            model.showSlides = "Show current slide";&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            onEndEventCode: model.onEnd,&#13;
            enableLoop: ModelValidationUtils.validateBoolean(model.enableLoop),&#13;
            displayTime: ModelValidationUtils.validateBoolean(model.displayTime),&#13;
            controls: model.controls,&#13;
            slides: validatedSlides.value,&#13;
            frames: validatedSlides.frames,&#13;
            clickAction: clickAction,&#13;
            playPart: (clickAction == 'play_interval' || clickAction == 'play_interval_or_vocabulary'),&#13;
            separateFiles: validatedAudioFiles.value,&#13;
            playSeparateFiles: (clickAction == 'play_vocabulary_file' || clickAction == 'play_interval_or_vocabulary'),&#13;
            vocabulary_mp3: model.vocabulary_mp3,&#13;
            vocabulary_ogg: model.vocabulary_ogg,&#13;
            vocabularyIntervals: validatedVocabularyIntervals.intervals,&#13;
            isClickDisabled: ModelValidationUtils.validateBoolean(model.isClickDisabled),&#13;
            showSlides: model.showSlides&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function addonTextAudio_executeCommand (name, params) {&#13;
        var commands = {&#13;
            'play': presenter.play,&#13;
            'stop': presenter.stop,&#13;
            'pause': presenter.pause,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonTextAudio_setVisibility (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.pauseZero = function addonTextAudio_pauseZero () {&#13;
        presenter.stopTimeMeasurement();&#13;
&#13;
        if (!presenter.audio.paused &amp;&amp; presenter.isLoaded) {&#13;
            presenter.stopClicked = true;&#13;
            presenter.audio.pause();&#13;
            presenter.audio.currentTime = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.play = function addonTextAudio_play () {&#13;
        presenter.startTimeMeasurement();&#13;
        if (presenter.audio.paused) {&#13;
            presenter.stopClicked = false;&#13;
            presenter.pauseZero();&#13;
            presenter.audio.play();&#13;
            if (presenter.configuration.controls === "Custom") {&#13;
                presenter.$playPauseBtn.&#13;
                    removeClass('textaudio-play-btn').&#13;
                    addClass('textaudio-pause-btn');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stop = function addonTextAudio_stop () {&#13;
        if (presenter.configuration.controls === "Custom" &amp;&amp; presenter.isLoaded) {&#13;
            presenter.stopClicked = true;&#13;
            presenter.$playPauseBtn.&#13;
                addClass('textaudio-play-btn').&#13;
                removeClass('textaudio-pause-btn');&#13;
            if (presenter.audio.paused) {&#13;
                presenter.stopClicked = true;&#13;
                presenter.audio.currentTime = 0;&#13;
            }&#13;
        }&#13;
        presenter.removeMarkFromItems();&#13;
        presenter.pauseZero();&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.audio.addEventListener("loadeddata", presenter.stopAudioLoadedData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stopAudioLoadedData = function AddonTextAudio_StopAudioLoadedData () {&#13;
        presenter.isLoaded = true;&#13;
        presenter.stop();&#13;
    };&#13;
&#13;
    presenter.playPartStop = function addonTextAudio_playPartStop () {&#13;
        presenter.pauseZero();&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.audio.addEventListener("loadeddata", presenter.playAudioLoadedData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playAudioLoadedData = function AddonTextAudio_playAudioLoadedData () {&#13;
        presenter.isLoaded = true;&#13;
        presenter.stop();&#13;
    };&#13;
&#13;
    presenter.pause = function addonTextAudio_pause () {&#13;
        presenter.stopTimeMeasurement();&#13;
&#13;
        if (!presenter.audio.paused) {&#13;
            presenter.audio.pause();&#13;
            if (presenter.configuration.controls === "Custom") {&#13;
                presenter.$playPauseBtn.&#13;
                    removeClass('textaudio-pause-btn').&#13;
                    addClass('textaudio-play-btn');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.show = function addonTextAudio_show () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hideAddon = function addonTextAudio_hideAddon () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.hide = function addonTextAudio_hide () {&#13;
        presenter.stop();&#13;
        presenter.hideAddon();&#13;
    };&#13;
&#13;
    presenter.reset = function addonTextAudio_reset () {&#13;
        presenter.stop();&#13;
&#13;
        presenter.hasBeenStarted = false;&#13;
        presenter.isPlaying = false;&#13;
        presenter.playedByClick = false;&#13;
&#13;
        presenter.configuration.isVisible = presenter.isVisibleByDefault;&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hideAddon();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.clearSelection = function addonTextAudio_clearSelection () {&#13;
        presenter.$view.find('.textaudio-text span.active').removeClass('active');&#13;
    };&#13;
&#13;
    presenter.getState = function addonTextAudio_getState () {&#13;
        presenter.stop();&#13;
        if (presenter.vocabulary !== undefined) {&#13;
            presenter.vocabulary.stop();&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            isVisible : presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function addonTextAudio_setState (stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return false;&#13;
        if (!presenter.configuration.isValid) return false;&#13;
&#13;
        presenter.stop();&#13;
&#13;
        if (JSON.parse(stateString).isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hideAddon();&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.executeOnEndEvent = function AddonTextAudio_executeOnEndEvent () {&#13;
        if (presenter.configuration.onEndEventCode) {&#13;
            presenter.playerController.getCommands().executeEventCode(presenter.configuration.onEndEventCode);&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Text_Selection" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Mode" nameLabel="Text_Selection_property_mode" type="{Mark phrases to select, All selectable}"/>
		<property name="Selection type" nameLabel="Text_Selection_property_selection_type" type="{Single select, Multiselect}"/>
		<property isLocalized="true" name="Text" nameLabel="Text_Selection_property_text" type="html"/>
        <property name="Enable letters selections" nameLabel="Text_Selection_property_enable_letters_selections" type="boolean"/>
        <property displayName="Is Not Activity" name="isNotActivity" nameLabel="Text_Selection_property_is_not_activity" type="boolean"/>
	</model>
<css>.text_selection .selectable {&#13;
	border-radius: 5px;&#13;
}&#13;
&#13;
.text_selection .selected {&#13;
	background-color: #FAFAD2;&#13;
}&#13;
&#13;
.text_selection .wrong {&#13;
	background-color: #FF6347;&#13;
}&#13;
&#13;
.text_selection .correct {&#13;
	background-color: #7CFC00;&#13;
}&#13;
&#13;
.text_selection .hover {&#13;
	background-color: orange;&#13;
	cursor: pointer;&#13;
}&#13;
&#13;
.text_selection div {&#13;
    min-height: 20px;&#13;
}&#13;
</css><view/><preview/><presenter>function AddonText_Selection_create() {&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.eventBus = null;&#13;
    presenter.playerController = null;&#13;
    presenter.selected_elements = null;&#13;
    presenter.isWorkMode = true;&#13;
    presenter.markedMathJaxContent = [];&#13;
    var MATH_JAX_MARKER = 'MATHJAX';&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        this.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    function getEventData(it, val, sc) {&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': '' + it,&#13;
            'value': '' + val,&#13;
            'score': '' + sc&#13;
        }&#13;
    }&#13;
&#13;
    presenter.sendEvent = function(item, value, score, checkIsAllOK) {&#13;
        presenter.eventBus.sendEvent('ValueChanged', getEventData(&#13;
            parseInt(item, 10) + 1,&#13;
            value ? 1 : 0,&#13;
            score ? 1 : 0&#13;
        ));&#13;
&#13;
        if (presenter.isAllOK() &amp;&amp; checkIsAllOK &amp;&amp; presenter.configuration.isActivity) sendAllOKEvent();&#13;
    };&#13;
&#13;
    function sendAllOKEvent() {&#13;
        presenter.eventBus.sendEvent('ValueChanged', getEventData('all', '', ''));&#13;
    }&#13;
&#13;
    var first = 0,&#13;
        beforeActive = false,&#13;
        lastMoveEvent = null;&#13;
&#13;
    function isLastSpecialSign(word) {&#13;
        return ['.', ',', '?', '!', ';', ':'].indexOf(word[word.length-1]) != -1;&#13;
    }&#13;
&#13;
    presenter.isStartedCorrect = function(word) {&#13;
        return (/\\correct{/).test(word);&#13;
    };&#13;
&#13;
    presenter.isStartedWrong = function(word) {&#13;
        return (/\\wrong{/).test(word);&#13;
    };&#13;
&#13;
    presenter.hasOpeningBracket = function(word) {&#13;
        return (/{/).test(word);&#13;
    };&#13;
&#13;
    presenter.hasClosingBracket = function(word) {&#13;
        return (/}/).test(word);&#13;
    };&#13;
&#13;
    presenter.getWrongWords = function(word) {&#13;
        var pattern = (/(.*)\\wrong{(.*)}(.*)/);&#13;
        return pattern.exec(word).slice(1);&#13;
    };&#13;
&#13;
    presenter.getCorrectWords = function(word) {&#13;
        var pattern = (/(.*)\\correct{(.*)}(.*)/);&#13;
        return pattern.exec(word).slice(1);&#13;
    };&#13;
&#13;
    presenter.isMarkedCorrect = function(word) {&#13;
        var counted = this.countBrackets(word);&#13;
        return (/\\correct{.*}/).test(word) &amp;&amp; (counted.open === counted.close);&#13;
    };&#13;
&#13;
    presenter.isMarkedWrong = function(word) {&#13;
        var counted = this.countBrackets(word);&#13;
        return (/\\wrong{.*}/).test(word) &amp;&amp; (counted.open === counted.close);&#13;
    };&#13;
&#13;
    presenter.cutMarkedCorrect = function(word) {&#13;
        var countedBrackets = this.countBrackets(word);&#13;
        if (isLastSpecialSign(word)) {&#13;
            word = word.replace(/\\correct{/, '');&#13;
            if (countedBrackets.open === countedBrackets.close) {&#13;
                word = word.replace(/}([^}]*)$/,'$1');&#13;
            }&#13;
            return word.substring(0, word.length-1);&#13;
        } else {&#13;
            word = word.replace(/\\correct{/, '');&#13;
            if (countedBrackets.open === countedBrackets.close) {&#13;
                word = word.replace(/}([^}]*)$/,'$1');&#13;
            }&#13;
            return word;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.cutMarkedWrong = function(word) {&#13;
        var countedBrackets = this.countBrackets(word);&#13;
        if (isLastSpecialSign(word)) {&#13;
            word = word.replace(/\\wrong{/, '');&#13;
            if (countedBrackets.open === countedBrackets.close) {&#13;
                word = word.replace(/}([^}]*)$/,'$1');&#13;
            }&#13;
            return word.substring(0, word.length - 1);&#13;
        } else {&#13;
            word = word.replace(/\\wrong{/, '');&#13;
            if (countedBrackets.open === countedBrackets.close) {&#13;
                word = word.replace(/}([^}]*)$/,'$1');&#13;
            }&#13;
            return word;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.cutLastClosingBracket = function(word) {&#13;
        return word.replace(/}([^}]*)$/,'$1');&#13;
    };&#13;
&#13;
    presenter.countBrackets = function(word) {&#13;
        return {&#13;
            open : word.split("{").length - 1,&#13;
            close : word.split("}").length - 1&#13;
        }&#13;
    };&#13;
&#13;
    presenter.startSelection = function(et) {&#13;
        first = parseInt($(et).attr('number'), 10);&#13;
        if (isNaN(first)) first = parseInt($(et).attr('left'), 10);&#13;
        if (isNaN(first)) first = parseInt($(et).closest('.selectable').attr('number'), 10);&#13;
        if (isNaN(first)) {&#13;
            $(et).nextAll('div').each(function() {&#13;
                first = parseInt($(this).children('span.selectable').attr('number'), 10);&#13;
                if (!isNaN(first)) {&#13;
                    beforeActive = true;&#13;
                    return false;&#13;
                }&#13;
            });&#13;
        }&#13;
        if ($(et).hasClass('text_selection') &amp;&amp; isNaN(first)) {&#13;
            beforeActive = true;&#13;
            first = parseInt(presenter.$view.find('.text_selection').find('span.selectable').first().attr('number'), 10);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.endSelection = function(et) {&#13;
        var last = parseInt($(et).attr('number'), 10),&#13;
            tmp = 0,&#13;
            i,&#13;
            $span = null,&#13;
            element = null;&#13;
&#13;
        if (isNaN(last)) last = parseInt($(et).attr('right'), 10);&#13;
        if (isNaN(last)) last = parseInt($(et).closest('.selectable').attr('number'), 10);&#13;
        if (isNaN(last)) {&#13;
            $(et).nextAll('div').each(function() {&#13;
                last = parseInt($(this).children('span.selectable').attr('number'), 10);&#13;
                if (!isNaN(last)) {&#13;
                    return false;&#13;
                }&#13;
            });&#13;
        }&#13;
        if ($(et).hasClass('text_selection')) {&#13;
            last = first;&#13;
        }&#13;
        var selected = presenter.$view.find('.text_selection').find('.selected');&#13;
&#13;
        if (first !== last) {&#13;
            if (first &gt; last) {&#13;
                tmp = first; first = last; last = tmp;&#13;
            }&#13;
&#13;
            if (presenter.configuration.selection_type === 'SINGLESELECT') {&#13;
&#13;
                if (selected.length === 0) {&#13;
                    for (i=first; i&lt;last+1; i++) {&#13;
                        element = presenter.$view.find('.text_selection').find("span[number='" + i + "']");&#13;
                        if (element.hasClass('selectable')) {&#13;
                            element.toggleClass('selected');&#13;
                            break;&#13;
                        }&#13;
                    }&#13;
                } else if (selected.length === 1) {&#13;
                    for (i=first; i&lt;last+1; i++) {&#13;
                        element = presenter.$view.find('.text_selection').find("span[number='" + i + "']");&#13;
                        if (element.hasClass('selectable')) {&#13;
                            $(selected).removeClass('selected');&#13;
                            element.addClass('selected');&#13;
                            break;&#13;
                        }&#13;
                    }&#13;
                } else {&#13;
                    $(selected).removeClass('selected');&#13;
                }&#13;
            } else if (presenter.configuration.selection_type === 'MULTISELECT') {&#13;
&#13;
                for (i=first; i&lt;last+1; i++) {&#13;
                    element = presenter.$view.find('.text_selection').find("span[number='" + i + "']");&#13;
                    if (element.hasClass('selectable')) {&#13;
                        element.toggleClass('selected');&#13;
                    }&#13;
                }&#13;
&#13;
            }&#13;
&#13;
            for (i=first; i&lt;last+1; i++) {&#13;
                element = presenter.$view.find('.text_selection').find("span[number='" + i + "']");&#13;
                if (element.hasClass('selectable')) {&#13;
                    presenter.sendEvent(element.attr('number'), element.hasClass('selected'), isCorrect(element), i === last);&#13;
                }&#13;
            }&#13;
&#13;
        } else if (first === last &amp;&amp; !beforeActive) {&#13;
            $span = presenter.$view.find('.text_selection').find("span[number='" + first + "']");&#13;
&#13;
            if (presenter.configuration.selection_type === 'SINGLESELECT') {&#13;
&#13;
                if (selected.length == 0) {&#13;
                    if ($span.hasClass('selectable')) {&#13;
                        $span.addClass('selected');&#13;
                    }&#13;
                } else if (selected.length == 1) {&#13;
                    if (parseInt(selected.attr('number'), 10) === parseInt(first, 10)) {&#13;
                        selected.removeClass('selected');&#13;
                    } else {&#13;
                        if ($span.hasClass('selectable')) {&#13;
                            selected.removeClass('selected');&#13;
                            $span.toggleClass('selected');&#13;
                        }&#13;
                    }&#13;
                }&#13;
&#13;
            } else if (presenter.configuration.selection_type === 'MULTISELECT') {&#13;
&#13;
                if ($span.hasClass('selectable')) {&#13;
                    $span.toggleClass('selected');&#13;
                }&#13;
            }&#13;
&#13;
            if ($span.hasClass('selectable')) {&#13;
                presenter.sendEvent($span.attr('number'), $span.hasClass('selected'), isCorrect($span), true);&#13;
            }&#13;
        }&#13;
&#13;
        first = 0;&#13;
        beforeActive = false;&#13;
        if (window.getSelection) {&#13;
            window.getSelection().removeAllRanges();&#13;
        } else if (document.selection) {&#13;
            document.selection.empty();&#13;
        }&#13;
    };&#13;
&#13;
    function isCorrect($element) {&#13;
        var number = parseInt($($element).attr('number'), 10),&#13;
            isInCorrectArray = $.inArray(number, presenter.markers.markedCorrect) &gt;= 0;&#13;
        return $element.hasClass('selected') ? isInCorrectArray : !isInCorrectArray;&#13;
    }&#13;
&#13;
    presenter.turnOnEventListeners = function() {&#13;
        var $text_selection = presenter.$view.find('.text_selection');&#13;
&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            $text_selection.on('touchstart', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.startSelection(e.target);&#13;
            });&#13;
&#13;
            $text_selection.on('touchend', function(e) {&#13;
                e.stopPropagation();&#13;
                presenter.configuration.isExerciseStarted = true;&#13;
                e.preventDefault();&#13;
                if (lastMoveEvent != null) {&#13;
                    presenter.endSelection(lastMoveEvent);&#13;
                } else {&#13;
                    presenter.endSelection(e.target);&#13;
                }&#13;
                lastMoveEvent = null;&#13;
            });&#13;
&#13;
            $text_selection.on('touchmove', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                var temp = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] || e.originalEvent.targetTouches[0];&#13;
&#13;
                lastMoveEvent = $(document.elementFromPoint(temp.pageX - $(document).scrollLeft(), temp.pageY - $(document).scrollTop()));&#13;
            });&#13;
        } else {&#13;
            $text_selection.on('mouseup', function(e) {&#13;
                e.stopPropagation();&#13;
                presenter.configuration.isExerciseStarted = true;&#13;
                presenter.endSelection(e.target);&#13;
            });&#13;
&#13;
            $text_selection.on('mousedown', function(e) {&#13;
                e.stopPropagation();&#13;
                presenter.startSelection(e.target);&#13;
            });&#13;
&#13;
            $text_selection.find('.selectable').hover(&#13;
                function() {&#13;
                    $(this).addClass("hover");&#13;
                },&#13;
                function() {&#13;
                    $(this).removeClass("hover");&#13;
                }&#13;
            );&#13;
        }&#13;
&#13;
        $text_selection.on('click', function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.configuration.areEventListenersOn = true;&#13;
    };&#13;
&#13;
    presenter.turnOffEventListeners = function() {&#13;
        var $text_selection = presenter.$view.find('.text_selection'),&#13;
            selectable = $text_selection.find('.selectable');&#13;
&#13;
        $text_selection.off();&#13;
        selectable.off();&#13;
&#13;
        presenter.configuration.areEventListenersOn = false;&#13;
    };&#13;
&#13;
    presenter.turnOnShowAnswersListeners = function() {&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    function getSpace(i) {&#13;
        return "&lt;span left=\"" + i + "\" right=\"" + (i+1) + "\"&gt; &lt;/span&gt;";&#13;
    }&#13;
&#13;
    function getSpecialIfStarted(word) {&#13;
        return isLastSpecialSign(word) &amp;&amp; (presenter.isStartedWrong(word) || presenter.isStartedCorrect(word)) ? word[word.length - 1] : "";&#13;
    }&#13;
&#13;
    presenter.presenterLogic = function(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        if (isPreview) {&#13;
            presenter.$view.append($(presenter.configuration.renderedPreview));&#13;
        } else {&#13;
            presenter.$view.append($(presenter.configuration.renderedRun));&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        M01: 'Text cannot be empty',&#13;
        M02: 'Text cannot be w/o \\correct{} or \\wrong{}',&#13;
        M03: 'You cannot use \\wrong{} in "All selectable" mode',&#13;
        M04: 'Empty word in marker',&#13;
        M05: 'In single selection you have to mark only one phrase as correct and at least one mark as wrong'&#13;
    };&#13;
&#13;
    presenter.MODE = {&#13;
        'Mark phrases to select': 'MARK_PHRASES',&#13;
        'All selectable': 'ALL_SELECTABLE',&#13;
        DEFAULT: 'Mark phrases to select'&#13;
    };&#13;
&#13;
    presenter.SELECTION_TYPE = {&#13;
        'Single select': 'SINGLESELECT',&#13;
        'Multiselect': 'MULTISELECT',&#13;
        DEFAULT: 'Single select'&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
        presenter.turnOnEventListeners();&#13;
        presenter.turnOnShowAnswersListeners();&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    function getErrorObject(ec) {&#13;
        return { isValid: false, errorCode: ec };&#13;
    }&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var parsedText;&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(model.Text)) {&#13;
            return getErrorObject('M01');&#13;
        }&#13;
&#13;
        var mode = ModelValidationUtils.validateOption(presenter.MODE, model.Mode);&#13;
        var selection_type = ModelValidationUtils.validateOption(presenter.SELECTION_TYPE, model['Selection type']);&#13;
&#13;
        var wordSelection = ModelValidationUtils.validateBoolean(model['Enable letters selections']);&#13;
&#13;
        if (wordSelection) {&#13;
            parsedText = presenter.parseCharacters(model.Text, mode, selection_type);&#13;
        } else {&#13;
            parsedText = presenter.parseWords(model.Text, mode, selection_type);&#13;
        }&#13;
&#13;
        if (!parsedText.isValid) {&#13;
            return getErrorObject(parsedText.errorCode);&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            mode: mode,&#13;
            selection_type: selection_type,&#13;
            renderedRun: parsedText.renderedRun,&#13;
            renderedPreview: parsedText.renderedPreview,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isExerciseStarted: false,&#13;
            areEventListenersOn: true,&#13;
            addonID: model['ID'],&#13;
            isActivity: !(ModelValidationUtils.validateBoolean(model['isNotActivity']))&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getMarked = function(wrong, correct) {&#13;
        return {&#13;
            markedWrong: wrong,&#13;
            markedCorrect: correct&#13;
        };&#13;
    };&#13;
&#13;
    presenter.connectWords = function(words) {&#13;
        var i, j,&#13;
            longWord = '',&#13;
            result = [];&#13;
&#13;
        for (i=0; i&lt;words.length; i++) {&#13;
            if ((presenter.isStartedCorrect(words[i]) || presenter.isStartedWrong(words[i])) &amp;&amp; !presenter.isMarkedCorrect(words[i]) &amp;&amp; !presenter.isMarkedWrong(words[i])) {&#13;
                if (presenter.isStartedCorrect(words[i])) {&#13;
                    longWord += words[i] + ' ';&#13;
                    for (j=i+1; j&lt;words.length; j++) {&#13;
                        if(presenter.hasClosingBracket(words[j])) {&#13;
                            longWord += words[j];&#13;
                            i = j;&#13;
                            j = words.length + 1;&#13;
                        } else {&#13;
                            longWord += words[j] + ' ';&#13;
                        }&#13;
                    }&#13;
                    result.push(longWord);&#13;
                    longWord = '';&#13;
                } else if (presenter.isStartedWrong(words[i])) {&#13;
                    longWord += words[i] + ' ';&#13;
                    for (j=i+1; j&lt;words.length; j++) {&#13;
                        if(presenter.hasClosingBracket(words[j])) {&#13;
                            longWord += words[j];&#13;
                            i = j;&#13;
                            j = words.length + 1;&#13;
                        } else {&#13;
                            longWord += words[j] + ' ';&#13;
                        }&#13;
                    }&#13;
                    result.push(longWord);&#13;
                    longWord = '';&#13;
                }&#13;
            } else {&#13;
                result.push(words[i]);&#13;
            }&#13;
        }&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
    presenter.parseCharacters = function(text, mode, selection_type) {&#13;
        var i,&#13;
            result = '',&#13;
            words = [],&#13;
            markedCorrect = [],&#13;
            markedWrong = [],&#13;
            renderedPreview = '',&#13;
            renderedRun = '',&#13;
            amountWrong,&#13;
            amountCorrect,&#13;
            isTagClosed = true,&#13;
            spanNumber = 0,&#13;
            tmpWord = '',&#13;
            wrongMarkerInAllSelectable = false,&#13;
            emptyWord = false,&#13;
            stack = 0,&#13;
            counted = null;&#13;
&#13;
        text = presenter.removeNonBreakingSpacesInWith(text, ' ');&#13;
&#13;
        HTMLParser(text.replace(/&amp;nbsp;/g, ' '), {&#13;
            start: function(tag, attrs, unary) {&#13;
                renderedPreview += "&lt;" + tag;&#13;
                renderedRun     += "&lt;" + tag;&#13;
&#13;
                for (i=0; i&lt;attrs.length; i++) {&#13;
                    renderedPreview += " " + attrs[i].name + '="' + attrs[i].escaped + '"';&#13;
                    renderedRun     += " " + attrs[i].name + '="' + attrs[i].escaped + '"';&#13;
                }&#13;
&#13;
                renderedPreview += (unary ? "/" : "") + "&gt;";&#13;
                renderedRun     += (unary ? "/" : "") + "&gt;";&#13;
            },&#13;
            end: function(tag) {&#13;
                renderedPreview += "&lt;/" + tag + "&gt;";&#13;
                renderedRun     += "&lt;/" + tag + "&gt;";&#13;
            },&#13;
            chars: function(text) {&#13;
                //words = text.match(/\\?[\sa-zA-Z0-9\.\,]+(?:\{[\sa-zA-Z0-9]+\})?/g);&#13;
                words = text.split("\\");&#13;
                for(var j=0; j&lt;words.length; j++){&#13;
                    if(words[0] == ""){&#13;
                        words.splice(0,1);&#13;
                    }&#13;
                }&#13;
                for(var i=0; i&lt;words.length; i++){&#13;
                    if(words[0] == ""){&#13;
                        words.splice(0,1);&#13;
                    }&#13;
                    if(words[i].indexOf("correct{") &gt; -1 || words[i].indexOf("wrong{") &gt; -1){&#13;
                        words[i] = '\\' + words[i];&#13;
                    }&#13;
                }&#13;
&#13;
                for (i = 0; i &lt; words.length; i++) {&#13;
                    if (isTagClosed === true) {&#13;
                        if (words[i] === ' ') {&#13;
                            renderedPreview += getSpace(spanNumber);&#13;
                            renderedRun += getSpace(spanNumber);&#13;
                        } else if (presenter.isMarkedCorrect(words[i])) {&#13;
                            tmpWord = presenter.cutMarkedCorrect(words[i]);&#13;
&#13;
                            counted = presenter.countBrackets(words[i]);&#13;
                            if (counted.open &gt; counted.close) {&#13;
                                renderedPreview += '&lt;span class="correct selectable"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                                renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                                isTagClosed = false;&#13;
                                markedCorrect.push(spanNumber);&#13;
                                spanNumber++;&#13;
                            } else {&#13;
                                $.each(presenter.getCorrectWords(words[i]), function(index, word) {&#13;
                                    if (word.length == 0) {&#13;
                                        if (index == 1) {&#13;
                                            markedCorrect.push(spanNumber);&#13;
                                        }&#13;
                                        return;&#13;
                                    }&#13;
                                    var selectable = index == 1 ? 'selectable' : '',&#13;
                                        correct = index == 1 ? 'correct' : '';&#13;
                                    renderedPreview += '&lt;span class="' + correct + ' ' + selectable +'"&gt;' + word + '&lt;/span&gt;';&#13;
                                    if(mode === 'ALL_SELECTABLE'){&#13;
                                        renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + word + '&lt;/span&gt;';&#13;
                                        markedWrong.push(spanNumber);&#13;
                                    }else{&#13;
                                        renderedRun += '&lt;span class="' + selectable + '" number="' + spanNumber + '"&gt;' + word + '&lt;/span&gt;';&#13;
                                    }&#13;
                                    if (index == 1) {&#13;
                                        markedCorrect.push(spanNumber);&#13;
                                    }&#13;
                                    spanNumber++;&#13;
                                });&#13;
                            }&#13;
&#13;
                            if (ModelValidationUtils.isStringEmpty(tmpWord)) {&#13;
                                emptyWord = true;&#13;
                            }&#13;
                        } else if (presenter.isMarkedWrong(words[i])) {&#13;
                            tmpWord = presenter.cutMarkedWrong(words[i]);&#13;
&#13;
                            counted = presenter.countBrackets(words[i]);&#13;
                            if (counted.open &gt; counted.close) {&#13;
                                renderedPreview += '&lt;span class="wrong selectable"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                                renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                                isTagClosed = false;&#13;
                                markedWrong.push(spanNumber);&#13;
                                spanNumber++;&#13;
                            } else {&#13;
                                $.each(presenter.getWrongWords(words[i]), function(index, word) {&#13;
                                    if (word.length == 0) {&#13;
                                        if (index == 1) {&#13;
                                            markedWrong.push(spanNumber);&#13;
                                        }&#13;
                                        return;&#13;
                                    }&#13;
                                    var selectable = index == 1 ? 'selectable' : '',&#13;
                                        wrong = index == 1 ? 'wrong' : '';&#13;
                                    renderedPreview += '&lt;span class="' + wrong + ' ' + selectable + '"&gt;' + word + '&lt;/span&gt;';&#13;
                                    renderedRun += '&lt;span class="' + selectable + '" number="' + spanNumber + '"&gt;' + word + '&lt;/span&gt;';&#13;
                                    if (index == 1) {&#13;
                                        markedWrong.push(spanNumber);&#13;
                                    }&#13;
                                    spanNumber++;&#13;
                                });&#13;
                            }&#13;
&#13;
                            if (ModelValidationUtils.isStringEmpty(tmpWord)) {&#13;
                                emptyWord = true;&#13;
                            }&#13;
                            if (mode === 'ALL_SELECTABLE') {&#13;
                                wrongMarkerInAllSelectable = true;&#13;
                            }&#13;
                        } else if (presenter.isStartedCorrect(words[i])) {&#13;
                            tmpWord = presenter.cutMarkedCorrect(words[i]);&#13;
&#13;
                            counted = presenter.countBrackets(words[i]);&#13;
                            stack += counted.open;&#13;
                            stack -= counted.close;&#13;
&#13;
                            renderedPreview += '&lt;span class="correct selectable"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                            renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                            markedCorrect.push(spanNumber);&#13;
                            spanNumber++;&#13;
                            isTagClosed = false;&#13;
                        } else if (presenter.isStartedWrong(words[i])) {&#13;
                            tmpWord = presenter.cutMarkedWrong(words[i]);&#13;
&#13;
                            counted = presenter.countBrackets(words[i]);&#13;
                            stack += counted.open;&#13;
                            stack -= counted.close;&#13;
&#13;
                            renderedPreview += '&lt;span class="wrong selectable"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                            renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                            markedWrong.push(spanNumber);&#13;
                            spanNumber++;&#13;
                            isTagClosed = false;&#13;
                        } else {&#13;
                            counted = presenter.countBrackets(words[i]);&#13;
                            stack += counted.open;&#13;
                            stack -= counted.close;&#13;
&#13;
                            if (mode === 'ALL_SELECTABLE') {&#13;
                                renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + words[i] + '&lt;/span&gt;';&#13;
                                markedWrong.push(spanNumber);&#13;
                            } else if (mode === 'MARK_PHRASES') {&#13;
                                renderedRun += '&lt;span number="' + spanNumber + '"&gt;' + words[i] + '&lt;/span&gt;';&#13;
                            }&#13;
                            renderedPreview += '&lt;span number="' + spanNumber + '"&gt;' + words[i] + '&lt;/span&gt;';&#13;
&#13;
                            spanNumber++;&#13;
                        }&#13;
                    } else { // isTagClosed === false&#13;
                        counted = presenter.countBrackets(words[i]);&#13;
                        if (counted.open === counted.close) {&#13;
                            renderedPreview += words[i] + ' ';&#13;
                            renderedRun += words[i] + ' ';&#13;
                        } else {&#13;
                            if (counted.close &gt;= (stack + counted.open)) {&#13;
                                tmpWord = presenter.cutLastClosingBracket(words[i]);&#13;
                            } else {&#13;
                                tmpWord = words[i];&#13;
                            }&#13;
                            stack += counted.open;&#13;
                            stack -= counted.close;&#13;
                            if (stack === 0) {&#13;
                                renderedPreview += tmpWord + '&lt;/span&gt;';&#13;
                                renderedRun += tmpWord + '&lt;/span&gt;';&#13;
                                isTagClosed = true;&#13;
                            } else {&#13;
                                renderedPreview += tmpWord + ' ';&#13;
                                renderedRun += tmpWord + ' ';&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
                text = words.join(' ');&#13;
                result += text;&#13;
            },&#13;
            comment: function(text) {}&#13;
        });&#13;
&#13;
        amountCorrect = markedCorrect.length;&#13;
        amountWrong   = markedWrong.length;&#13;
&#13;
        presenter.markers = presenter.getMarked(markedWrong, markedCorrect);&#13;
&#13;
        if (amountCorrect === 0 &amp;&amp; amountWrong === 0) {&#13;
            return getErrorObject('M02');&#13;
        }&#13;
&#13;
        if (wrongMarkerInAllSelectable) {&#13;
            return getErrorObject('M03');&#13;
        }&#13;
&#13;
        if (emptyWord) {&#13;
            return getErrorObject('M04');&#13;
        }&#13;
&#13;
        if ((amountCorrect !== 1 || amountWrong &lt; 1) &amp;&amp; selection_type === 'SINGLESELECT') { // HasOneCorrectAtLeastOneWrongInSingleSelectionTypeSelection&#13;
            return getErrorObject('M05');&#13;
        }&#13;
&#13;
        renderedRun = presenter.deselectSpansWithOnlySpaces(renderedRun);&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            renderedPreview: '&lt;div class="text_selection"&gt;' + renderedPreview + '&lt;/div&gt;',&#13;
            renderedRun: '&lt;div class="text_selection"&gt;' + renderedRun + '&lt;/div&gt;',&#13;
            markedWrong: markedWrong,&#13;
            markedCorrect: markedCorrect&#13;
        };&#13;
    };&#13;
&#13;
    presenter.deselectSpansWithOnlySpaces = function (htmlString) {&#13;
        var $text = $(htmlString);&#13;
&#13;
        var textWithDeselectedSpaces = "";&#13;
        $text.each(function() {&#13;
            var $element = $(this);&#13;
            if ($element.hasClass("selectable")) {&#13;
                if ($element.text().trim() == "") {&#13;
                    $element.removeClass("selectable");&#13;
                }&#13;
            }&#13;
            textWithDeselectedSpaces += $(this).context.outerHTML;&#13;
        });&#13;
&#13;
        return textWithDeselectedSpaces;&#13;
    };&#13;
&#13;
    presenter.removeNonBreakingSpacesInWith = function (text, changeTo) {&#13;
        var textWithoutSpaces = "";&#13;
&#13;
        while(true) {&#13;
            var nbspIndex = text.indexOf("&amp;nbsp;");&#13;
            if (nbspIndex === -1) {&#13;
                textWithoutSpaces += text;&#13;
                break;&#13;
            }&#13;
&#13;
            textWithoutSpaces = textWithoutSpaces + text.slice(0, nbspIndex) + changeTo;&#13;
            text = text.slice(nbspIndex + 6, text.length);&#13;
        }&#13;
&#13;
        return textWithoutSpaces;&#13;
    };&#13;
&#13;
    presenter.markMathJax = function(text) {&#13;
        var findMathJaxRex = /\\\(.*?\\\)/g;&#13;
        var match = findMathJaxRex.exec(text);&#13;
        while (match !== null) {&#13;
            text = text.replace(match[0], MATH_JAX_MARKER + presenter.markedMathJaxContent.length);&#13;
            presenter.markedMathJaxContent.push(match[0]);&#13;
            match = findMathJaxRex.exec(text);&#13;
        }&#13;
&#13;
        return text;&#13;
    };&#13;
&#13;
    presenter.retrieveMathJax = function(text) {&#13;
        for (var i=0; i&lt;presenter.markedMathJaxContent.length; i++) {&#13;
            text = text.replace(new RegExp(MATH_JAX_MARKER + i, 'g'), presenter.markedMathJaxContent[i]);&#13;
        }&#13;
        return text;&#13;
    };&#13;
&#13;
    function wrapText(text, classes, number) {&#13;
        var $span = $('&lt;span&gt;&lt;/span&gt;');&#13;
        classes.forEach(function(c) {&#13;
            $span.addClass(c);&#13;
        });&#13;
        if (number !== undefined) {&#13;
            $span.attr('number', number);&#13;
        }&#13;
        $span.html(text);&#13;
&#13;
        return $span[0].outerHTML;&#13;
    }&#13;
&#13;
    function wrapSpaces(spaces, num) {&#13;
        var $span = $('&lt;span&gt;&lt;/span&gt;');&#13;
        $span.attr('left', num);&#13;
        $span.attr('right', num + 1);&#13;
        $span.html(spaces);&#13;
&#13;
        return $span[0].outerHTML;&#13;
    }&#13;
&#13;
    presenter.parseWords = function(text, mode, selection_type) {&#13;
        text = presenter.markMathJax(text.replace(/&amp;nbsp;/g, ' '));&#13;
&#13;
        var previewHTML = '', runHTML = '';&#13;
        var spanIndex = 0;&#13;
        var spansMarkedCorrect = [], spansMarkedWrong = [];&#13;
        var isEmptyWord = false;&#13;
        var isWrongMarker = false;&#13;
&#13;
        var correct = /\\correct{([^}]+)?}/.source;&#13;
        var wrong = /\\wrong{([^}]+)?}/.source;&#13;
        var tags = /(&lt;[^&gt;]+?&gt;)/.source;&#13;
        var word = /([^\s\.,#!$%\^&amp;\*;:{}=\-_`~\(\)&lt;&gt;]+)/.source;&#13;
        var whiteSpaces = /([\s\.,#!$%\^&amp;\*;:{}=\-_`~\(\)]+)/.source;&#13;
&#13;
        var mainRex = new RegExp([correct, wrong, tags, word, whiteSpaces].join('|'), 'g');&#13;
&#13;
        var match = mainRex.exec(text);&#13;
        while (match !== null) {&#13;
            if (match[1]) { // correct&#13;
                if (match[1] === '') isEmptyWord = true;&#13;
                previewHTML += wrapText(match[1], ['correct', 'selectable']);&#13;
                runHTML += wrapText(match[1], ['selectable'], spanIndex);&#13;
                spansMarkedCorrect.push(spanIndex);&#13;
                spanIndex++;&#13;
            } else if (match[2]) { // wrong&#13;
                if (match[2] === '') isEmptyWord = true;&#13;
                isWrongMarker = true;&#13;
                previewHTML += wrapText(match[2], ['wrong', 'selectable']);&#13;
                runHTML += wrapText(match[2], ['selectable'], spanIndex);&#13;
                spansMarkedWrong.push(spanIndex);&#13;
                spanIndex++;&#13;
            } else if (match[3]) { // HTML tag&#13;
                previewHTML += match[3];&#13;
                runHTML += match[3];&#13;
            } else if (match[4]) { // words&#13;
                if (mode === 'ALL_SELECTABLE') { // word&#13;
                    previewHTML += match[4];&#13;
                    runHTML += wrapText(match[4], ['selectable'], spanIndex);&#13;
                    spansMarkedWrong.push(spanIndex);&#13;
                } else {&#13;
                    previewHTML += match[4];&#13;
                    runHTML += match[4];&#13;
                }&#13;
                spanIndex++;&#13;
            } else { // spaces&#13;
                previewHTML += match[5];&#13;
                runHTML += wrapSpaces(match[5], spanIndex-1);&#13;
            }&#13;
&#13;
            // get next match&#13;
            match = mainRex.exec(text);&#13;
        }&#13;
&#13;
        presenter.markers = {&#13;
            markedCorrect: spansMarkedCorrect,&#13;
            markedWrong: spansMarkedWrong&#13;
        };&#13;
&#13;
        if (spansMarkedCorrect.length === 0 &amp;&amp; spansMarkedWrong.length === 0) {&#13;
            return getErrorObject('M02');&#13;
        }&#13;
&#13;
        if (mode === 'ALL_SELECTABLE' &amp;&amp; isWrongMarker) {&#13;
            return getErrorObject('M03');&#13;
        }&#13;
&#13;
        if (isEmptyWord) {&#13;
            return getErrorObject('M04');&#13;
        }&#13;
&#13;
        if ((spansMarkedCorrect.length !== 1 || spansMarkedWrong.length &lt; 1) &amp;&amp; selection_type === 'SINGLESELECT') {&#13;
            return getErrorObject('M05');&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            renderedPreview: '&lt;div class="text_selection"&gt;' + presenter.retrieveMathJax(previewHTML) + '&lt;/div&gt;',&#13;
            renderedRun: '&lt;div class="text_selection"&gt;' + presenter.retrieveMathJax(runHTML) + '&lt;/div&gt;'&#13;
        };&#13;
&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (!presenter.configuration.isValid) return;&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'isAttempted': presenter.isAttempted&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.selected_elements = null;&#13;
&#13;
        presenter.$view.find('.text_selection').find('.selected').removeClass('selected');&#13;
        presenter.setWorkMode();&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if (presenter.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var allSelected = presenter.$view.find('.text_selection').find('.selected');&#13;
        var numberSelected = [];&#13;
&#13;
        for (var i=0; i&lt;allSelected.length; i++) {&#13;
            numberSelected.push($(allSelected[i]).attr('number'));&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            numbers: numberSelected,&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            isExerciseStarted: presenter.configuration.isExerciseStarted&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) return;&#13;
&#13;
        var parsed = JSON.parse(state),&#13;
            nums              = parsed.numbers,&#13;
            isVisible         = parsed.isVisible,&#13;
            isExerciseStarted = parsed.isExerciseStarted;&#13;
&#13;
        for (var i=0; i&lt;nums.length; i++) {&#13;
            presenter.$view.find('.text_selection').find("span[number='" + nums[i] + "']").addClass("selected");&#13;
        }&#13;
&#13;
        if (isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.configuration.isVisible = isVisible;&#13;
        presenter.configuration.isExerciseStarted = isExerciseStarted;&#13;
    };&#13;
&#13;
    function intersection(a, b) {&#13;
        return a.filter(function(i) {&#13;
            return b.indexOf(parseInt(i, 10)) !== -1;&#13;
        });&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.configuration.isActivity) {&#13;
            if (presenter.isShowAnswers) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
&#13;
            presenter.isWorkMode = false;&#13;
&#13;
            presenter.turnOffEventListeners();&#13;
&#13;
            if (!presenter.configuration.isExerciseStarted) return false;&#13;
&#13;
            if (presenter.isShowAnswers) presenter.hideAnswers();&#13;
&#13;
            var i;&#13;
&#13;
            var numbersSelected = presenter.$view.find('.text_selection').find('.selected').map(function() {&#13;
                return this.getAttribute('number');&#13;
            }).get();&#13;
&#13;
            var numbersCorrect = presenter.markers.markedCorrect;&#13;
            var numbersWrong   = presenter.markers.markedWrong;&#13;
&#13;
            var correctSelected = intersection(numbersSelected, numbersCorrect);&#13;
&#13;
            for (i=0; i&lt;correctSelected.length; i++) {&#13;
                presenter.$view.find('.text_selection').find("span[number='" + correctSelected[i] + "']").addClass('correct');&#13;
            }&#13;
&#13;
            var selectedWrong = intersection(numbersSelected, numbersWrong);&#13;
            for (i=0; i&lt;selectedWrong.length; i++) {&#13;
                presenter.$view.find('.text_selection').find("span[number='" + selectedWrong[i] + "']").addClass('wrong');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        if (presenter.configuration.isActivity) {&#13;
            if (presenter.isShowAnswers) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
&#13;
            presenter.isWorkMode = true;&#13;
&#13;
            presenter.$view.find('.text_selection').find('.correct').removeClass('correct');&#13;
            presenter.$view.find('.text_selection').find('.wrong').removeClass('wrong');&#13;
&#13;
            presenter.selected_elements = presenter.$view.find('.text_selection').find('.selected');&#13;
            presenter.turnOffEventListeners();&#13;
            presenter.turnOnEventListeners();&#13;
        }&#13;
    };&#13;
&#13;
    function points(selector) {&#13;
        var numbersSelected = presenter.$view.find('.text_selection').find('.selected').map(function() {&#13;
            return parseInt(this.getAttribute('number'), 10);&#13;
        }).get();&#13;
&#13;
        return intersection(selector, numbersSelected).length;&#13;
    }&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (presenter.configuration.isActivity) {&#13;
            if (presenter.isShowAnswers) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
            return points(presenter.markers.markedWrong);&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if (presenter.configuration.isActivity) {&#13;
            if (presenter.isShowAnswers) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
            return presenter.markers.markedCorrect.length;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (presenter.configuration.isActivity) {&#13;
            if (presenter.isShowAnswers) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
            return points(presenter.markers.markedCorrect);&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOK = function() {&#13;
        var isMaxScore = presenter.getMaxScore() == presenter.getScore();&#13;
        var hasErrors = presenter.getErrorCount() &gt; 0;&#13;
&#13;
        return isMaxScore &amp;&amp; !hasErrors;&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return presenter.$view.find('.text_selection').find('.selected').length &gt; 0;&#13;
    };&#13;
&#13;
    presenter.showAnswers = function() {&#13;
        if (!presenter.configuration.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswers) { return false; }&#13;
&#13;
        if (!presenter.isWorkMode) { presenter.setWorkMode(); }&#13;
&#13;
        presenter.turnOffEventListeners();&#13;
&#13;
        presenter.isShowAnswers = true;&#13;
        presenter.selected_elements = presenter.$view.find(".selected");&#13;
        var selectable_elements = presenter.$view.find(".selectable");&#13;
&#13;
        presenter.selected_elements.removeClass("selected");&#13;
&#13;
        for (var i = 0; i &lt; selectable_elements.length; i++) {&#13;
            var elem = presenter.$view.find(".selectable")[i];&#13;
            var elem_number = parseInt($(elem).attr("number"), 10);&#13;
&#13;
            if (presenter.markers.markedCorrect.indexOf(elem_number) !== -1) {&#13;
                $(elem).addClass("correct-answer");&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function() {&#13;
        if (!presenter.configuration.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (!presenter.isShowAnswers) { return false; }&#13;
&#13;
        presenter.turnOnEventListeners();&#13;
&#13;
        presenter.isShowAnswers = false;&#13;
        presenter.$view.find(".correct-answer").removeClass("correct-answer");&#13;
        if (presenter.selected_elements != null) presenter.selected_elements.addClass("selected");&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="TrueFalse" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Is not an activity" name="isNotActivity" nameLabel="TrueFalse_property_is_not_activity" type="boolean"/>
		<property name="Multi" nameLabel="TrueFalse_property_multi" type="boolean"/>
		<property name="Questions" nameLabel="TrueFalse_property_questions" type="list">
			<property isLocalized="true" name="Question" nameLabel="TrueFalse_property_question" type="html"/>
			<property name="Answer" nameLabel="TrueFalse_property_answer" type="string"/>
		</property>
		<property name="Choices" nameLabel="TrueFalse_property_choices" type="list">
			<property isLocalized="true" name="Choice" nameLabel="TrueFalse_property_choice" type="html"/>
		</property>
	</model>
<css>.ic_page{&#13;
    direction:ltr;&#13;
}&#13;
&#13;
#container * {&#13;
    direction:inherit;&#13;
}&#13;
&#13;
.tf_radio,&#13;
.tf_checkbox {&#13;
    margin:0 0 1em 0;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    text-align:left;&#13;
    position: absolute;&#13;
    left: 0;&#13;
    top: 0;&#13;
    border-spacing:0 5px;&#13;
}&#13;
&#13;
.tf_radio_row,&#13;
.tf_checkbox_row {&#13;
}&#13;
&#13;
.tf_radio_image,&#13;
.tf_checkbox_image {&#13;
    cursor:pointer;&#13;
    border-collapse: separate;&#13;
    width:70px;&#13;
    min-width:70px;&#13;
    height:26px;&#13;
    min-height:26px;&#13;
    border-bottom:1px solid #111;&#13;
    border-top:1px solid #111;&#13;
&#13;
}&#13;
&#13;
.tf_radio_image.last,&#13;
.tf_checkbox_image.last {&#13;
    border-radius: 0 10px 10px 0;&#13;
    -moz-border-radius: 0 10px 10px 0;&#13;
    border-right:1px solid #111;&#13;
}&#13;
&#13;
.tf_radio_text,&#13;
.tf_checkbox_text {&#13;
    margin:5px 0 0 4px;&#13;
    width:70px;&#13;
    min-width:70px;&#13;
    height:26px;&#13;
    min-height:26px;&#13;
    text-align:center;&#13;
}&#13;
&#13;
.tf_radio_question.first,&#13;
.tf_checkbox_question.first {&#13;
    border:0;&#13;
}&#13;
&#13;
.tf_radio_question,&#13;
.tf_checkbox_question {&#13;
    margin-top:5px;&#13;
    border-bottom:1px solid #111;&#13;
    border-top:1px solid #111;&#13;
    border-left:1px solid #111;&#13;
    padding:10px;&#13;
    border-radius: 10px 0 0 10px;&#13;
    -moz-border-radius: 10px 0 0 10px;&#13;
}&#13;
&#13;
.tf_radio_image.up div {&#13;
    background-image: url('resources/tf-radio-image-up.png');&#13;
}&#13;
&#13;
.tf_radio_image.up.disabled div {&#13;
    background-image: url('resources/tf-radio-image-up-disabled.png');&#13;
}&#13;
&#13;
.tf_radio_image.down div {&#13;
    background-image: url('resources/tf-radio-image-down.png');&#13;
}&#13;
&#13;
.tf_radio_image.down.correct div,&#13;
.tf_radio_image.down.correct-answer div{&#13;
    background-image: url('resources/tf-radio-image-down-correct.png');&#13;
}&#13;
&#13;
.tf_radio_image.down.wrong div {&#13;
    background-image: url('resources/tf-radio-image-down-wrong.png');&#13;
}&#13;
&#13;
.tf_checkbox_image.up div {&#13;
    background-image: url('resources/tf-checkbox-image-up.png');&#13;
}&#13;
&#13;
.tf_checkbox_image.up.disabled div {&#13;
    background-image: url('resources/tf-checkbox-image-up-disabled.png');&#13;
}&#13;
&#13;
.tf_checkbox_image.down div {&#13;
    background-image: url('resources/tf-checkbox-image-down.png');&#13;
}&#13;
&#13;
.tf_checkbox_image.down.correct div,&#13;
.tf_checkbox_image.down.correct-answer div{&#13;
    background-image: url('resources/tf-checkbox-image-down-correct.png');&#13;
}&#13;
&#13;
.tf_checkbox_image.down.wrong div {&#13;
    background-image: url('resources/tf-checkbox-image-down-wrong.png');&#13;
}&#13;
&#13;
.tf_checkbox_image div,&#13;
.tf_radio_image div {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    background: no-repeat left center;&#13;
}&#13;
</css><view/><preview/><presenter>function AddonTrueFalse_create() {&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    presenter.type = "";&#13;
    presenter.lastEvent = null;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.keyboardNavigationActive = false;&#13;
    presenter.keyboardNavigationCurrentElement = null;&#13;
    presenter.keyboardNavigationElements = [];&#13;
    presenter.keyboardNavigationElementsLen = 0;&#13;
&#13;
    var possibleChoices = [];&#13;
    var multi = false;&#13;
    var isNotActivity = false;&#13;
    var questions = [];&#13;
    var playerController;&#13;
    var eventBus; // Modules communication&#13;
    var textParser = null; // Links to Glossary Addon&#13;
&#13;
    var QUESTION_AND_CHOICES_REQUIRED = "At least 1 question and 2 choices are required.";&#13;
    var INDEX_OUT_OF_RANGE = "Index is out of range.";&#13;
&#13;
    presenter.isSelectionCorrect = function (question, selection) {&#13;
        var answers = question.Answer.split(',');&#13;
&#13;
        for (var i = 0; i &lt; answers.length; i++) {&#13;
            if (parseInt(answers[i], 10) === selection) {&#13;
                return true;&#13;
            }&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    var score = function () {&#13;
        var score = { 'score': 0, 'maxScore': 0, 'errorCount': 0 };&#13;
        for (var i = 0; i &lt; questions.length + 1; i++) {&#13;
            var j = 0;&#13;
            var row = presenter.$view.find('#' + i);&#13;
            if (i &gt; 0) {&#13;
                var values = (questions[i - 1].Answer).split(',');&#13;
                score.maxScore += values.length;&#13;
                row.children().each(function () {&#13;
                    if (isCorrectAnswer($(this), values, j)) {&#13;
                        score.score += 1;&#13;
                    } else if (isWrongAnswer($(this), values, j)) {&#13;
                        score.errorCount += 1;&#13;
                    }&#13;
                    j++;&#13;
                });&#13;
            }&#13;
        }&#13;
        return score;&#13;
    };&#13;
&#13;
    var workMode = function (reset) {&#13;
        presenter.$view.find(".tf_" + presenter.type + "_image").each(function () {&#13;
            var image = $(this);&#13;
            image.removeClass("disabled wrong correct correct-answer");&#13;
            if (reset) {&#13;
                image.removeClass("down").addClass("up");&#13;
            }&#13;
        });&#13;
&#13;
        presenter.$view.find('.tf_radio_question').each(function() {&#13;
            $(this).removeClass('disabled');&#13;
        });&#13;
    };&#13;
&#13;
    var markElements = function () {&#13;
        for (var i = 0; i &lt; questions.length + 1; i++) {&#13;
            var j = 0;&#13;
            var row = presenter.$view.find('#' + i);&#13;
            if (i &gt; 0) {&#13;
                var values = (questions[i - 1].Answer).split(',');&#13;
                row.children().each(function () {&#13;
                    if ($(this).hasClass("disabled") &amp;&amp; j &gt; 0) return;&#13;
                    $(this).addClass("disabled");&#13;
                    if (isCorrectAnswer($(this), values, j)) {&#13;
                        $(this).addClass("correct");&#13;
                    } else if (isWrongAnswer($(this), values, j)) {&#13;
                        $(this).addClass("wrong");&#13;
                    }&#13;
                    j++;&#13;
                });&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function whichQuestion(row, table) {&#13;
        var questionNumber = 0;&#13;
&#13;
        $(table).find('tr').each(function (index) {&#13;
            if ($(this)[0] == $(row)[0]) {&#13;
                questionNumber = index;&#13;
&#13;
                return false;&#13;
            }&#13;
        });&#13;
&#13;
        return questionNumber;&#13;
    }&#13;
&#13;
    function whichAnswer(element, row) {&#13;
        var answerNumber = 0;&#13;
        $(row).find('.tf_' + presenter.type + '_image').each(function (index) {&#13;
            if ($(this)[0] == $(element)[0]) {&#13;
                answerNumber = index + 1; // Answers are counted from 1 to n&#13;
&#13;
                return false;&#13;
            }&#13;
&#13;
            return true;&#13;
        });&#13;
&#13;
        return answerNumber;&#13;
    }&#13;
&#13;
    presenter.createEventData = function (item, wasSelected, isSelectionCorrect) {&#13;
        return {&#13;
            'source': presenter.addonID,&#13;
            'item': item,&#13;
            'value': wasSelected ? '0' : '1',&#13;
            'score': isSelectionCorrect ? '1' : '0'&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createAllOKEventData = function () {&#13;
        return {&#13;
            'source': presenter.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createRowOKEventData = function (row) {&#13;
        return {&#13;
            'source': presenter.addonID,&#13;
            'item': row + '-all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        }&#13;
    };&#13;
&#13;
    function clickLogic(element) {&#13;
        var sendEvent = true;&#13;
        var wasSelected = false;&#13;
&#13;
        if (!$(element).hasClass("disabled")) {&#13;
            if (multi) {&#13;
                if ($(element).hasClass("down")) {&#13;
                    wasSelected = true;&#13;
                    $(element).removeClass("down").addClass("up");&#13;
                } else {&#13;
                    $(element).removeClass("up").addClass("down");&#13;
                }&#13;
            } else {&#13;
                sendEvent = !$(element).hasClass("down");&#13;
&#13;
                $(element).parent().children(".tf_" + presenter.type + "_image").each(function () {&#13;
                    $(this).removeClass("down").addClass("up");&#13;
                });&#13;
&#13;
                $(element).removeClass("up").addClass("down");&#13;
            }&#13;
&#13;
            if (sendEvent) {&#13;
                var selectedQuestion = whichQuestion($(element).parent(), $(element).parent().parent());&#13;
                var selectedAnswer = whichAnswer($(element), $(element).parent());&#13;
                var itemStr = selectedQuestion.toString() + '-' + selectedAnswer.toString();&#13;
                var isSelectionCorrect = presenter.isSelectionCorrect(questions[selectedQuestion - 1], parseInt(selectedAnswer, 10));&#13;
&#13;
                var eventData = presenter.createEventData(itemStr, wasSelected, isSelectionCorrect);&#13;
                eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
                if (multi &amp;&amp; presenter.isRowOK(selectedQuestion)) {&#13;
                    var rowOKEventData = presenter.createRowOKEventData(selectedQuestion);&#13;
                    eventBus.sendEvent('ValueChanged', rowOKEventData);&#13;
&#13;
                }&#13;
&#13;
                if (presenter.isAllOK()) {&#13;
                    var allOKEventData = presenter.createAllOKEventData();&#13;
                    eventBus.sendEvent('ValueChanged', allOKEventData);&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function handleClickActions(view) {&#13;
        var $elements = $(view).find(".tf_" + presenter.type + "_image");&#13;
&#13;
        $elements.on('touchstart', function (e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
&#13;
            presenter.lastEvent = e;&#13;
        });&#13;
&#13;
        $elements.on('touchend', function (e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
&#13;
            if (presenter.lastEvent.type != e.type) {&#13;
                clickLogic($(e.target).parent());&#13;
            }&#13;
        });&#13;
&#13;
        $elements.click(function (e) {&#13;
            e.stopPropagation();&#13;
            clickLogic(this);&#13;
        });&#13;
    }&#13;
&#13;
    function generatePossibleChoicesRow(row) {&#13;
        row.append('&lt;td class="tf_' + presenter.type + '_question first"&gt;&amp;nbsp;&lt;/td&gt;');&#13;
&#13;
        for (var k = 0; k &lt; possibleChoices.length; k++) {&#13;
            row.append('&lt;td class="tf_' + presenter.type + '_text"&gt;' + possibleChoices[k].Choice + '&lt;/td&gt;');&#13;
        }&#13;
    }&#13;
&#13;
    function generateQuestionElement(row, rowID) {&#13;
        var question = questions[rowID - 1].Question;&#13;
&#13;
        if (textParser !== null) { // Actions performed only in Player mode&#13;
            question = textParser.parse(question);&#13;
        }&#13;
&#13;
        row.append('&lt;td class="tf_' + presenter.type + '_question"&gt;' + question + '&lt;/td&gt;');&#13;
    }&#13;
&#13;
    function generateRowContent(row, rowID) {&#13;
        generateQuestionElement(row, rowID);&#13;
        for (var i = 0; i &lt; possibleChoices.length; i++) {&#13;
            if (i === (possibleChoices.length - 1)) {&#13;
                row.append('&lt;td class="tf_' + presenter.type + '_image up last"&gt;&lt;/td&gt;');&#13;
            } else {&#13;
                row.append('&lt;td class="tf_' + presenter.type + '_image up"&gt;&lt;/td&gt;');&#13;
            }&#13;
            var innerElement = document.createElement('div');&#13;
            $(row).find('td:last-child').append(innerElement);&#13;
        }&#13;
    }&#13;
&#13;
    function generateTableContent(table, view) {&#13;
        for (var rowID = 0; rowID &lt; questions.length + 1; rowID++) {&#13;
            $(table).append('&lt;tr class="tf_' + presenter.type + '_row" id=' + rowID + '&gt;&lt;/tr&gt;');&#13;
            var row = $(view).find('#' + rowID);&#13;
&#13;
            if (rowID === 0) {&#13;
                generatePossibleChoicesRow(row);&#13;
            } else {&#13;
                var answers = (questions[rowID - 1].Answer).split(',');&#13;
                for (var m = 0; m &lt; answers.length; m++) {&#13;
                    var answer = parseInt(answers[m]);&#13;
                    if (answer &gt; possibleChoices.length || answer &lt;= 0) {&#13;
                        $(view).html(INDEX_OUT_OF_RANGE)&#13;
&#13;
                        break;&#13;
                    }&#13;
                }&#13;
&#13;
                generateRowContent(row, rowID);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    var makeView = function (view, model, preview) {&#13;
        possibleChoices = model['Choices'];&#13;
        questions = model['Questions'];&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        if (notAllRequiredParameters(questions, possibleChoices)) {&#13;
            return $(view).html(QUESTION_AND_CHOICES_REQUIRED);&#13;
        }&#13;
&#13;
        multi = model['Multi'] === 'True';&#13;
&#13;
        if (model['isNotActivity'] != undefined){&#13;
            isNotActivity = (model['isNotActivity'] === 'True');&#13;
        }&#13;
        else {&#13;
            isNotActivity = false;&#13;
        }&#13;
&#13;
        presenter.type = multi ? "checkbox" : "radio";&#13;
        var table = document.createElement('table');&#13;
&#13;
        $(table).addClass('tf_' + presenter.type);&#13;
        $(table).attr("cellspacing", 0).attr("cellpadding", 0);&#13;
        $(view).append(table);&#13;
&#13;
        generateTableContent(table, view);&#13;
&#13;
        if (!preview) {&#13;
            handleClickActions(view);&#13;
        }&#13;
&#13;
        if (textParser !== null) { // Actions performed only in Player mode&#13;
            textParser.connectLinks($(view));&#13;
        }&#13;
&#13;
        if (!preview) {&#13;
            presenter.$view.find('.tf_' + presenter.type + '_image').each(function(index, element){&#13;
                presenter.keyboardNavigationElements[index] = $(element);&#13;
            });&#13;
            presenter.keyboardNavigationElementsLen = presenter.keyboardNavigationElements.length;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        eventBus = playerController.getEventBus();&#13;
        textParser = new TextParserProxy(playerController.getTextParser());&#13;
        presenter.addonID = model.ID;&#13;
        makeView(view, model, false);&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    function isCorrectAnswer(element, values, index) {&#13;
        return values.indexOf(index.toString()) &gt;= 0 &amp;&amp; element.hasClass("down");&#13;
    }&#13;
&#13;
    function isWrongAnswer(element, values, index) {&#13;
        return values.indexOf(index.toString()) &lt; 0 &amp;&amp; element.hasClass("down");&#13;
    }&#13;
&#13;
    function notAllRequiredParameters(questions, possibleChoices) {&#13;
        return !questions[0].Question || possibleChoices.length &lt; 2 || !possibleChoices[0].Choice || !possibleChoices[1].Choice;&#13;
    }&#13;
&#13;
    function getSelectedElements() {&#13;
        var selectedElements = [];&#13;
        var i = 0;&#13;
        presenter.$view.find(".tf_" + presenter.type + "_image").each(function () {&#13;
            selectedElements[i] = $(this).hasClass("down");&#13;
            i++;&#13;
        });&#13;
        return selectedElements;&#13;
    }&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        makeView(view, model, true);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            return presenter.currentState;&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            selectedElements: getSelectedElements(),&#13;
            isVisible: presenter.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) {&#13;
            return;&#13;
        }&#13;
&#13;
        var i = 0;&#13;
        var selectedElements;&#13;
        var parsedState = JSON.parse(state);&#13;
        if(typeof parsedState.isVisible !== "undefined"){&#13;
            selectedElements = parsedState.selectedElements;&#13;
            presenter.setVisibility(parsedState.isVisible);&#13;
            presenter.isVisible = parsedState.isVisible;&#13;
        }else{&#13;
            selectedElements = parsedState;&#13;
        }&#13;
&#13;
        presenter.$view.find(".tf_" + presenter.type + "_image").each(function () {&#13;
            if (selectedElements[i] == true) {&#13;
                $(this).addClass("down");&#13;
                $(this).removeClass("up");&#13;
            }&#13;
            i++;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if (isNotActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isErrorMode = true;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        markElements();&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        if (isNotActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isErrorMode = false;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        workMode(false);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.isErrorMode = false;&#13;
        presenter.isShowAnswersActive = false;&#13;
&#13;
        if (presenter.currentState) {&#13;
            delete presenter.currentState;&#13;
        }&#13;
&#13;
        workMode(true);&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
        presenter.isVisible = presenter.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (isNotActivity) return 0;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return score().errorCount;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if (isNotActivity) return 0;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return score().maxScore;&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if (isNotActivity) return 0;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return score().score;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.isErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'isSelected': presenter.isSelectedCommand,&#13;
            'markAsCorrect': presenter.markAsCorrectCommand,&#13;
            'markAsWrong': presenter.markAsWrongCommand,&#13;
            'markAsEmpty': presenter.markAsEmptyCommand,&#13;
            'removeMark': presenter.removeMarkCommand,&#13;
            'isAttempted' : presenter.isAttemptedCommand,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'reset' : presenter.reset&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.isRowOK = function (selectedQuestion) {&#13;
        var correctAnswersLength = 0;&#13;
        var rowAnswers = questions[selectedQuestion - 1].Answer.split(',');&#13;
        var row = presenter.$view.find('#' + selectedQuestion);&#13;
&#13;
        for (var i = 0; i &lt; row.children('.down').length; i++) {&#13;
            var selectedAnswer = $(row.children('.down')[i]).index();&#13;
            var isSelectionCorrect = presenter.isSelectionCorrect(questions[selectedQuestion - 1], parseInt(selectedAnswer, 10));&#13;
            if (isSelectionCorrect) {&#13;
                correctAnswersLength++;&#13;
            }&#13;
        }&#13;
&#13;
        return rowAnswers.length === correctAnswersLength;&#13;
    };&#13;
&#13;
    presenter.isSelected = function (rowIndex, answerIndex) {&#13;
        if (answerIndex &lt; 1) return false;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var row = presenter.$view.find('#' + rowIndex);&#13;
        var el = row.children()[answerIndex];&#13;
        return $(el).hasClass("down");&#13;
    };&#13;
&#13;
&#13;
    presenter.markAsCorrect = function (rowIndex, answerIndex) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var row = presenter.$view.find('#' + rowIndex);&#13;
        if (rowIndex &gt; 0) {&#13;
            var el = row.children()[answerIndex];&#13;
            $(el).addClass("disabled");&#13;
            $(el).addClass("correct");&#13;
         }&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function (rowIndex, answerIndex) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var row = presenter.$view.find('#' + rowIndex);&#13;
        if (rowIndex &gt; 0) {&#13;
            var el = row.children()[answerIndex];&#13;
            $(el).addClass("disabled");&#13;
            $(el).addClass("wrong");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.markAsEmpty = function (rowIndex, answerIndex) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var row = presenter.$view.find('#' + rowIndex);&#13;
        if (rowIndex &gt; 0) {&#13;
            var el = row.children()[answerIndex];&#13;
            $(el).addClass("disabled");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.removeMark = function (rowIndex, answerIndex) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var row = presenter.$view.find('#' + rowIndex);&#13;
        if (rowIndex &gt; 0) {&#13;
            var el = row.children()[answerIndex];&#13;
            $(el).removeClass("wrong").removeClass("correct");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAttempted = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var isAttempted = false;&#13;
        for (var rowIndex = 0; rowIndex &lt; questions.length + 1; rowIndex++) {&#13;
            var answerIndex = 0;&#13;
            var row = presenter.$view.find('#' + rowIndex);&#13;
            if (rowIndex &gt; 0) {&#13;
                row.children().each(function () {&#13;
                    if (presenter.isSelected(rowIndex, answerIndex)) {&#13;
                        isAttempted = true;&#13;
                        return false; // break;&#13;
                    }&#13;
                    answerIndex++;&#13;
                    return true;&#13;
                });&#13;
            }&#13;
        }&#13;
        return isAttempted;&#13;
    };&#13;
&#13;
    presenter.isSelectedCommand = function (params) {&#13;
        presenter.isSelected(parseInt(params[0], 10), parseInt(params[1], 10));&#13;
    };&#13;
&#13;
    presenter.isAttemptedCommand = function () {&#13;
         return presenter.isAttempted();&#13;
    };&#13;
&#13;
    presenter.markAsEmptyCommand = function (params) {&#13;
        presenter.markAsEmpty(parseInt(params[0], 10), parseInt(params[1], 10));&#13;
    };&#13;
&#13;
    presenter.markAsWrongCommand = function (params) {&#13;
        presenter.markAsWrong(parseInt(params[0], 10), parseInt(params[1], 10));&#13;
    };&#13;
&#13;
    presenter.removeMarkCommand = function (params) {&#13;
        presenter.removeMark(parseInt(params[0], 10), parseInt(params[1], 10));&#13;
    };&#13;
&#13;
    presenter.markAsCorrectCommand = function (params) {&#13;
        presenter.markAsCorrect(parseInt(params[0], 10), parseInt(params[1], 10));&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (isNotActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.currentState = getSelectedElements();&#13;
        workMode(true);&#13;
&#13;
        for (var i = 1; i &lt; questions.length + 1; i++) {&#13;
            var $row = presenter.$view.find('#' + i),&#13;
                correctValues = (questions[i - 1].Answer).split(',');&#13;
&#13;
            $row.find(".tf_" + presenter.type + "_image").addClass('disabled');&#13;
&#13;
            for (var j = 0; j &lt; correctValues.length; j++) {&#13;
                var index = parseInt(correctValues[j], 10) + 1,&#13;
                    $element = $row.find(".tf_" + presenter.type + "_image:nth-child(" + index + ")");&#13;
&#13;
                $element.addClass('down correct-answer').removeClass('up');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (isNotActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        workMode(true);&#13;
&#13;
        var state = JSON.stringify({&#13;
            "selectedElements": presenter.currentState,&#13;
            "isVisible": presenter.isVisible&#13;
        });&#13;
&#13;
        presenter.setState(state);&#13;
&#13;
        delete presenter.currentState;&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode) {&#13;
        $(document).on('keydown', function(e) {&#13;
            e.preventDefault();&#13;
            $(this).off('keydown');&#13;
        });&#13;
&#13;
        var keys = {&#13;
            ENTER: 13,&#13;
            ESCAPE: 27,&#13;
            SPACE: 32,&#13;
            ARROW_LEFT: 37,&#13;
            ARROW_UP: 38,&#13;
            ARROW_RIGHT: 39,&#13;
            ARROW_DOWN: 40&#13;
        };&#13;
&#13;
        function mark_current_element(new_position_index){&#13;
            if (presenter.keyboardNavigationCurrentElement) {&#13;
                presenter.keyboardNavigationCurrentElement.find('div').removeClass('keyboard_navigation_active_element');&#13;
            }&#13;
            presenter.keyboardNavigationCurrentElementIndex = new_position_index;&#13;
            presenter.keyboardNavigationCurrentElement = presenter.keyboardNavigationElements[new_position_index];&#13;
            presenter.keyboardNavigationCurrentElement.find('div').addClass('keyboard_navigation_active_element');&#13;
        }&#13;
&#13;
        var enter = function (){&#13;
            if (presenter.keyboardNavigationActive){&#13;
                return;&#13;
            }&#13;
            presenter.keyboardNavigationActive = true;&#13;
            mark_current_element(0);&#13;
        };&#13;
&#13;
        function swicht_element(move){&#13;
            var new_position_index = presenter.keyboardNavigationCurrentElementIndex + move;&#13;
            if (new_position_index &gt;= presenter.keyboardNavigationElementsLen) {&#13;
                new_position_index = new_position_index - presenter.keyboardNavigationElementsLen;&#13;
            } else if (new_position_index &lt; 0) {&#13;
                new_position_index = presenter.keyboardNavigationElementsLen + new_position_index;&#13;
            }&#13;
            mark_current_element(new_position_index);&#13;
        }&#13;
&#13;
        var next_element = function (){&#13;
            swicht_element(1);&#13;
        };&#13;
&#13;
        var previous_element = function (){&#13;
            swicht_element(-1);&#13;
        };&#13;
&#13;
        var next_question = function () {&#13;
            swicht_element(possibleChoices.length);&#13;
        };&#13;
&#13;
        var previous_question = function () {&#13;
            swicht_element(-possibleChoices.length);&#13;
        };&#13;
&#13;
        var mark = function (){&#13;
            presenter.keyboardNavigationCurrentElement.click();&#13;
        };&#13;
&#13;
        var escape = function (){&#13;
            if (!presenter.keyboardNavigationActive){&#13;
                return;&#13;
            }&#13;
            presenter.keyboardNavigationActive = false;&#13;
            presenter.keyboardNavigationCurrentElement.find('div').removeClass('keyboard_navigation_active_element');&#13;
            presenter.keyboardNavigationCurrentElement = null;&#13;
        };&#13;
&#13;
        var mapping = {};&#13;
        mapping[keys.ENTER] = enter;&#13;
        mapping[keys.ESCAPE] = escape;&#13;
        mapping[keys.SPACE] = mark;&#13;
        mapping[keys.ARROW_LEFT] = previous_element;&#13;
        mapping[keys.ARROW_UP] = previous_question;&#13;
        mapping[keys.ARROW_RIGHT] = next_element;&#13;
        mapping[keys.ARROW_DOWN] = next_question;&#13;
&#13;
        try {&#13;
            mapping[keycode]();&#13;
        } catch (er) {&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Variable_Storage" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Variables" name="Variables" nameLabel="Variable_Storage_property_variables" type="list">
            <property displayName="Name" name="Name" nameLabel="Variable_Storage_property_variables_name" type="string"/>
            <property displayName="Start value" name="Start" nameLabel="Variable_Storage_property_variables_start" type="string"/>
        </property>
    </model>
<css>.variables_storage {&#13;
    color: black;&#13;
    font-size:12px;&#13;
}&#13;
</css><view>&lt;div class="variables_addon"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="variables_storage"&gt;Variable storage&lt;/div&gt;&#13;
</preview><presenter>function AddonVariable_Storage_create(){&#13;
    var presenter = function(){}&#13;
    presenter.Variables = [];&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'getVariable'.toLowerCase():&#13;
                presenter.getVariable(params[0]);&#13;
                break;&#13;
            case 'setVariable'.toLowerCase():&#13;
                presenter.setVariable(params[0],params[1]);&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
        }&#13;
    }&#13;
    function validateVariables(list){&#13;
        var variable = [], variableName, variableValue, tmpVariable;&#13;
        for (i = 0; i &lt; list.length; i++) {&#13;
            variable = [];&#13;
            variableName = list[i]['Name'];&#13;
            if (variableName != '') {&#13;
                variableValue = list[i]['Start'];&#13;
                tmpVariable = {&#13;
                    name: variableName,&#13;
                    startValue: variableValue,&#13;
                    currentValue: variableValue&#13;
                };&#13;
                presenter.Variables.push(tmpVariable);&#13;
            }&#13;
        };&#13;
    }&#13;
    presenter.initiate = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        validateVariables(presenter.model['Variables']);&#13;
    }&#13;
    presenter.run = function(view, model){&#13;
        presenter.initiate(view, model);&#13;
    }&#13;
    presenter.createPreview = function(view, model){&#13;
        presenter.initiate(view, model);&#13;
    }&#13;
    presenter.getVariable = function(varName) {&#13;
        for (var i = 0; i &lt; presenter.Variables.length; i++) {&#13;
            if (presenter.Variables[i]['name'] == varName)&#13;
                return presenter.Variables[i]['currentValue'];&#13;
        }&#13;
        return false;&#13;
    }&#13;
    presenter.setVariable = function(varName, varValue) {&#13;
        var isValue = false;&#13;
        for (var i = 0; i &lt; presenter.Variables.length; i++) {&#13;
            if (presenter.Variables[i]['name'] == varName) {&#13;
                presenter.Variables[i]['currentValue'] = varValue;&#13;
                isValue = true;&#13;
            }&#13;
        }&#13;
        if (!isValue) {&#13;
            var tmpVariable = {&#13;
                name: varName,&#13;
                startValue: false,&#13;
                currentValue: varValue&#13;
            };&#13;
            presenter.Variables.push(tmpVariable);&#13;
        }&#13;
    }&#13;
    presenter.reset = function() {&#13;
        for (var i = 0; i &lt; presenter.Variables.length; i++) {&#13;
            presenter.Variables[i]['currentValue'] = presenter.Variables[i]['startValue'];&#13;
        }&#13;
    }&#13;
    presenter.getState = function() {&#13;
        var tmpVariablesValue = [], tmpVariablesStart = [], tmpVariablesName = [];&#13;
        for (var i = 0; i &lt; presenter.Variables.length; i++) {&#13;
            tmpVariablesValue[i] = presenter.Variables[i]['currentValue'];&#13;
            tmpVariablesStart[i] = presenter.Variables[i]['startValue'];&#13;
            tmpVariablesName[i] = presenter.Variables[i]['name'];&#13;
        }&#13;
        return JSON.stringify({&#13;
            Variables : tmpVariablesValue,&#13;
            VariablesName : tmpVariablesName,&#13;
            VariableValue : tmpVariablesStart,&#13;
            VariablesNumber: presenter.Variables.length&#13;
        });&#13;
    }&#13;
    presenter.setState = function(state) {&#13;
        var VariablesNumber = JSON.parse(state).VariablesNumber;&#13;
        var tmpVariable;&#13;
        for (var i = 0; i &lt; presenter.Variables.length; i++) {&#13;
            presenter.Variables[i]['currentValue'] = JSON.parse(state).Variables[i];&#13;
        }&#13;
        for (; i &lt; VariablesNumber; i++) {&#13;
            tmpVariable = {&#13;
                name: JSON.parse(state).VariablesName[i],&#13;
                startValue: JSON.parse(state).VariableValue[i],&#13;
                currentValue: JSON.parse(state).Variables[i]&#13;
            };&#13;
            presenter.Variables.push(tmpVariable);&#13;
        }&#13;
    }&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Viewer_3D" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="OBJ File" nameLabel="Viewer_3D_property_obj_file" type="file"/>
		<property name="MTL File" nameLabel="Viewer_3D_property_mtl_file" type="file"/>
		<property name="Initial Rotation X" nameLabel="Viewer_3D_property_initial_rotation_x" type="string"/>
		<property name="Initial Rotation Y" nameLabel="Viewer_3D_property_initial_rotation_y" type="string"/>
		<property name="Initial Rotation Z" nameLabel="Viewer_3D_property_initial_rotation_z" type="string"/>
		<property name="Model Color" nameLabel="Viewer_3D_property_model_color" type="string"/>
		<property name="Background Color 1" nameLabel="Viewer_3D_property_background_color_1" type="string"/>
		<property name="Background Color 2" nameLabel="Viewer_3D_property_background_color_2" type="string"/>
		<property name="Render Mode" nameLabel="Viewer_3D_property_render_mode" type="{Smooth,Points,Wireframe,Flat}"/>
	</model>
<css>/* https://code.google.com/p/android/issues/detail?id=35474 */&#13;
div.Viewer_3D_frame {&#13;
    overflow: hidden;&#13;
    overflow-x: visible;&#13;
}&#13;
&#13;
div.viewer-3d-wrapper {&#13;
    overflow: hidden;&#13;
    overflow-x: visible;&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
&#13;
</css><view>&lt;div class="viewer-3d-wrapper"&gt;&#13;
    &lt;canvas class="3d-viewer-canvas"&gt;&#13;
    &lt;/canvas&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="viewer-3d-wrapper"&gt;&#13;
    &lt;canvas class="3d-viewer-canvas"&gt;&#13;
    &lt;/canvas&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonViewer_3D_create(){&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.RENDER_MODES = {&#13;
        'Smooth': 'SMOOTH',&#13;
        'Points': 'POINTS',&#13;
        'Wireframe': 'WIREFRAME',&#13;
        'Flat': 'FLAT',&#13;
        DEFAULT: 'Smooth'&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'ERR_01': 'Missing OBJ file!',&#13;
        'ERR_02': 'Invalid rotation values!',&#13;
        'ERR_03': 'Invalid model color!',&#13;
        'ERR_04': 'Invalid background color values!'&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.setCanvasDimensions = function (width, height) {&#13;
        presenter.$view.find('.3d-viewer-canvas').attr({&#13;
            width: width,&#13;
            height: height&#13;
        });&#13;
    };&#13;
&#13;
    presenter.parseRotation = function (strRotation) {&#13;
        var rotation, parsedRotation;&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(strRotation)) {&#13;
            rotation = 0;&#13;
        } else {&#13;
            parsedRotation = ModelValidationUtils.validateInteger(strRotation);&#13;
&#13;
            if (!parsedRotation.isValid || parsedRotation.value &lt; 0) {&#13;
                return { isValid: false };&#13;
            } else {&#13;
                rotation = parsedRotation.value;&#13;
            }&#13;
        }&#13;
&#13;
        return { isValid: true, rotation: rotation };&#13;
    };&#13;
&#13;
    presenter.parseInitialRotation = function (model) {&#13;
        var strRotationX = model['Initial Rotation X'],&#13;
            parsedRotationX = presenter.parseRotation(strRotationX),&#13;
            strRotationY = model['Initial Rotation Y'],&#13;
            parsedRotationY = presenter.parseRotation(strRotationY),&#13;
            strRotationZ = model['Initial Rotation Z'],&#13;
            parsedRotationZ = presenter.parseRotation(strRotationZ);&#13;
&#13;
        if (!parsedRotationX.isValid || !parsedRotationY.isValid || !parsedRotationZ.isValid) {&#13;
            return { isValid: false };&#13;
        }&#13;
&#13;
        return { isValid: true, X: parsedRotationX.rotation, Y: parsedRotationY.rotation, Z: parsedRotationZ.rotation };&#13;
    };&#13;
&#13;
    presenter.parseModelColor = function (modelColor) {&#13;
        if (ModelValidationUtils.isStringEmpty(modelColor)) {&#13;
            return { isValid: true, color: '#EEEEEE' };&#13;
        }&#13;
&#13;
        return ModelValidationUtils.validateColor(modelColor, '#EEEEEE');&#13;
    };&#13;
&#13;
    presenter.parseBackgroundColors = function (model) {&#13;
        var backgroundColor1 = model['Background Color 1'],&#13;
            parsedBackgroundColor1,&#13;
            backgroundColor2 = model['Background Color 2'],&#13;
            parsedBackgroundColor2;&#13;
&#13;
        // Background Color 1&#13;
        if (ModelValidationUtils.isStringEmpty(backgroundColor1)) {&#13;
            parsedBackgroundColor1 = { color: "#CCCCCC" };&#13;
        } else {&#13;
            parsedBackgroundColor1 = ModelValidationUtils.validateColor(backgroundColor1, '#CCCCCC');&#13;
            if (!parsedBackgroundColor1.isValid) {&#13;
                return { isValid: false };&#13;
            }&#13;
        }&#13;
&#13;
        // Background Color 1&#13;
        if (ModelValidationUtils.isStringEmpty(backgroundColor2)) {&#13;
            parsedBackgroundColor2 = { color: "#EEEEEE" };&#13;
        } else {&#13;
            parsedBackgroundColor2 = ModelValidationUtils.validateColor(backgroundColor2, '#EEEEEE');&#13;
            if (!parsedBackgroundColor2.isValid) {&#13;
                return { isValid: false };&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            color1: parsedBackgroundColor1.color,&#13;
            color2: parsedBackgroundColor2.color&#13;
        };&#13;
    };&#13;
&#13;
    presenter.parseModel = function (model) {&#13;
        if (ModelValidationUtils.isStringEmpty(model['OBJ File'])) {&#13;
            return { isValid: false, errorCode: 'ERR_01' };&#13;
        }&#13;
&#13;
        var MTLFile = model['MTL File'];&#13;
        if (ModelValidationUtils.isStringEmpty(MTLFile)) {&#13;
            MTLFile = '';&#13;
        }&#13;
&#13;
        var parsedInitialRotation = presenter.parseInitialRotation(model);&#13;
        if (!parsedInitialRotation.isValid) {&#13;
            return { isValid: false, errorCode: 'ERR_02' };&#13;
        }&#13;
&#13;
        var parsedModelColor = presenter.parseModelColor(model['Model Color']);&#13;
        if (!parsedModelColor.isValid) {&#13;
            return { isValid: false, errorCode: 'ERR_03' };&#13;
        }&#13;
&#13;
        var parsedBackgroundColors = presenter.parseBackgroundColors(model);&#13;
        if (!parsedBackgroundColors.isValid) {&#13;
            return { isValid: false, errorCode: 'ERR_04' };&#13;
        }&#13;
&#13;
        var renderMode = ModelValidationUtils.validateOption(presenter.RENDER_MODES, model['Render Mode']);&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            addonID: model.ID,&#13;
            isVisible: isVisible,&#13;
            isCurrentlyVisible: isVisible,&#13;
            files: {&#13;
                OBJ: model['OBJ File'],&#13;
                MTL: MTLFile&#13;
            },&#13;
            initialRotation: {&#13;
                X: parsedInitialRotation.X,&#13;
                Y: parsedInitialRotation.Y,&#13;
                Z: parsedInitialRotation.Z&#13;
            },&#13;
            colors: {&#13;
                model: parsedModelColor.color,&#13;
                background1: parsedBackgroundColors.color1,&#13;
                background2: parsedBackgroundColors.color2&#13;
            },&#13;
            renderMode: renderMode,&#13;
            quality: 'standard',&#13;
            queues: {&#13;
                X: {&#13;
                    name: model.ID + "_X",&#13;
                    isActive: false,&#13;
                    delay: 0,&#13;
                    angle: 0&#13;
                },&#13;
                Y: {&#13;
                    name: model.ID + "_Y",&#13;
                    isActive: false,&#13;
                    delay: 0,&#13;
                    angle: 0&#13;
                },&#13;
                Z: {&#13;
                    name: model.ID + "_Z",&#13;
                    isActive: false,&#13;
                    delay: 0,&#13;
                    angle: 0&#13;
                }&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setViewerRenderMode = function (viewer) {&#13;
        var renderMode = "smooth";&#13;
&#13;
        switch (presenter.configuration.renderMode) {&#13;
            case 'POINTS':&#13;
                renderMode = "point";&#13;
                break;&#13;
            case 'WIREFRAME':&#13;
                renderMode = "wireframe";&#13;
                break;&#13;
            case 'FLAT':&#13;
                renderMode = 'flat';&#13;
                break;&#13;
        }&#13;
&#13;
        viewer.setParameter('RenderMode', renderMode);&#13;
    };&#13;
&#13;
    presenter.renderObject = function () {&#13;
        var canvas =  presenter.$view.find('.3d-viewer-canvas')[0],&#13;
            viewer = new JSC3D.Viewer(canvas);&#13;
&#13;
        presenter.viewer = viewer;&#13;
        viewer.setParameter('SceneUrl', presenter.configuration.files.OBJ + '.obj');&#13;
        viewer.setParameter('MtlLibUrl', presenter.configuration.files.MTL);&#13;
        viewer.setParameter('InitRotationX', presenter.configuration.initialRotation.X);&#13;
        viewer.setParameter('InitRotationY', presenter.configuration.initialRotation.Y);&#13;
        viewer.setParameter('InitRotationZ', presenter.configuration.initialRotation.Z);&#13;
        viewer.setParameter('ModelColor', presenter.configuration.colors.model);&#13;
        viewer.setParameter('BackgroundColor1', presenter.configuration.colors.background1);&#13;
        viewer.setParameter('BackgroundColor2', presenter.configuration.colors.background2);&#13;
        presenter.setViewerRenderMode(viewer);&#13;
&#13;
        viewer.init();&#13;
&#13;
        $.when(viewer.loadPromise).then(function () {&#13;
            presenter.isLoaded = true;&#13;
&#13;
            if (!presenter.commandsQueue.isQueueEmpty()) {&#13;
                presenter.commandsQueue.executeAllTasks();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.commandsQueue = CommandsQueueFactory.create(presenter);&#13;
        presenter.isLoaded = false;&#13;
&#13;
        presenter.setCanvasDimensions(model.Width, model.Height);&#13;
&#13;
        presenter.configuration = presenter.parseModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.renderObject();&#13;
&#13;
        presenter.$view.click(function(e){&#13;
            e.stopPropagation();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'reset': presenter.reset,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'rotateX': presenter.rotateXCommand,&#13;
            'rotateY': presenter.rotateYCommand,&#13;
            'rotateZ': presenter.rotateZCommand,&#13;
            'setState': presenter.setStateCommand,&#13;
            'setQuality': presenter.setQualityCommand,&#13;
            'startRotationX': presenter.startRotationXCommand,&#13;
            'stopRotationX': presenter.stopRotationX,&#13;
            'startRotationY': presenter.startRotationYCommand,&#13;
            'stopRotationY': presenter.stopRotationY,&#13;
            'startRotationZ': presenter.startRotationZCommand,&#13;
            'stopRotationZ': presenter.stopRotationZ,&#13;
            'stopAllRotations': presenter.stopAllRotations&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.rotateObject = function (angleX, angleY, angleZ) {&#13;
        presenter.viewer.rotate(angleX, angleY, angleZ);&#13;
        presenter.viewer.update();&#13;
    };&#13;
&#13;
    presenter.validateAngle = function (angle) {&#13;
        var validatedAngle = ModelValidationUtils.validateFloat(angle);&#13;
&#13;
        if (!validatedAngle.isValid) return { isValid: false };&#13;
        if (validatedAngle.value &lt; 0) return { isValid: false };&#13;
&#13;
        return { isValid: true, value: validatedAngle.value };&#13;
    };&#13;
&#13;
    presenter.rotateX = function (angle) {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('rotateX', [angle]);&#13;
            return;&#13;
        }&#13;
&#13;
        var validatedAngle = presenter.validateAngle(angle);&#13;
        if (!validatedAngle.isValid) return;&#13;
&#13;
        presenter.rotateObject(validatedAngle.value, 0, 0);&#13;
    };&#13;
&#13;
    presenter.rotateXCommand = function (params) {&#13;
        presenter.rotateX(params[0]);&#13;
    };&#13;
&#13;
    presenter.rotateY = function (angle) {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('rotateY', [angle]);&#13;
            return;&#13;
        }&#13;
&#13;
        var validatedAngle = presenter.validateAngle(angle);&#13;
        if (!validatedAngle.isValid) return;&#13;
&#13;
        presenter.rotateObject(0, validatedAngle.value, 0);&#13;
    };&#13;
&#13;
    presenter.rotateYCommand = function (params) {&#13;
        presenter.rotateY(params[0]);&#13;
    };&#13;
&#13;
    presenter.rotateZ = function (angle) {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('rotateZ', [angle]);&#13;
            return;&#13;
        }&#13;
&#13;
        var validatedAngle = presenter.validateAngle(angle);&#13;
        if (!validatedAngle.isValid) return;&#13;
&#13;
        presenter.rotateObject(0, 0, validatedAngle.value);&#13;
    };&#13;
&#13;
    presenter.rotateZCommand = function (params) {&#13;
        presenter.rotateZ(params[0]);&#13;
    };&#13;
&#13;
    presenter.setQuality = function (quality) {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('setQuality', [quality]);&#13;
            return;&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(quality)) return;&#13;
        if (quality !== 'low' &amp;&amp; quality !== 'standard' &amp;&amp; quality !== 'high') return;&#13;
        if (presenter.configuration.quality === quality) return;&#13;
&#13;
        presenter.configuration.quality = quality;&#13;
        presenter.viewer.setDefinition(quality);&#13;
        presenter.viewer.update();&#13;
    };&#13;
&#13;
    presenter.setQualityCommand = function (params) {&#13;
        presenter.setQuality(params[0]);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('reset', []);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.stopAllRotations();&#13;
        presenter.setQuality('standard');&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.configuration.isCurrentlyVisible = presenter.configuration.isVisible;&#13;
&#13;
        presenter.viewer.replaceSceneFromUrl(presenter.configuration.files.OBJ + '.obj');&#13;
        presenter.viewer.update();&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('show', []);&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.configuration.isCurrentlyVisible) return;&#13;
&#13;
        presenter.configuration.isCurrentlyVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('hide', []);&#13;
            return;&#13;
        }&#13;
&#13;
        if (!presenter.configuration.isCurrentlyVisible) return;&#13;
&#13;
        presenter.configuration.isCurrentlyVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if (!presenter.isLoaded) return;&#13;
&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isCurrentlyVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setStateCommand = function (params) {&#13;
        presenter.setState(params[0]);&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) return;&#13;
&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('setState', [state]);&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        if (parsedState.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateDelay = function (delay) {&#13;
        var validatedDelay = ModelValidationUtils.validateInteger(delay);&#13;
&#13;
        if (!validatedDelay.isValid) return { isValid: false };&#13;
        if (validatedDelay.value &lt; 0) return { isValid: false };&#13;
&#13;
        return { isValid: true, value: validatedDelay.value };&#13;
    };&#13;
&#13;
    // Generic commands&#13;
&#13;
    presenter.startRotation = function (axis, angle, delay) {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('startRotation' + axis, [angle, delay]);&#13;
            return;&#13;
        }&#13;
&#13;
        var validatedAngle = presenter.validateAngle(angle);&#13;
        if (!validatedAngle.isValid) return;&#13;
&#13;
        var validatedDelay = presenter.validateDelay(delay);&#13;
        if (!validatedDelay.isValid) return;&#13;
&#13;
        if (presenter.configuration.queues[axis].isActive) {&#13;
            if (validatedDelay.value == 0) {&#13;
                presenter['stopRotation' + axis]();&#13;
                return;&#13;
            }&#13;
&#13;
            presenter.configuration.queues[axis].delay = validatedDelay.value;&#13;
            presenter.configuration.queues[axis].angle = validatedAngle.value;&#13;
        } else {&#13;
            presenter.configuration.queues[axis].isActive = true;&#13;
            presenter.configuration.queues[axis].delay = validatedDelay.value;&#13;
            presenter.configuration.queues[axis].angle = validatedAngle.value;&#13;
&#13;
            presenter['startRotation' + axis + 'Queue']();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.startRotationQueue = function (axis) {&#13;
        var queue = presenter.configuration.queues[axis].name,&#13;
            delay = presenter.configuration.queues[axis].delay;&#13;
&#13;
        $.doTimeout(queue, delay, function () {&#13;
            var angle = presenter.configuration.queues[axis].angle,&#13;
                angleX = 0, angleY = 0, angleZ = 0;&#13;
&#13;
            switch (axis) {&#13;
                case 'X':&#13;
                    angleX = angle;&#13;
                    break;&#13;
                case 'Y':&#13;
                    angleY = angle;&#13;
                    break;&#13;
                case 'Z':&#13;
                    angleZ = angle;&#13;
                    break;&#13;
            }&#13;
&#13;
            presenter.rotateObject(angleX, angleY, angleZ);&#13;
&#13;
            return true; // continue callback call&#13;
        });&#13;
    };&#13;
&#13;
    presenter.stopRotation = function (axis) {&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.commandsQueue.addTask('stopRotation' + axis, []);&#13;
            return;&#13;
        }&#13;
&#13;
        if (!presenter.configuration.queues[axis].isActive) return;&#13;
&#13;
        presenter.configuration.queues[axis].isActive = false;&#13;
        presenter.configuration.queues[axis].angle = 0;&#13;
        presenter.configuration.queues[axis].delay = 0;&#13;
&#13;
        presenter['stopRotation' + axis + 'Queue']();&#13;
    };&#13;
&#13;
    presenter.stopRotationQueue = function (axis) {&#13;
        var queue = presenter.configuration.queues[axis].name;&#13;
&#13;
        $.doTimeout(queue);&#13;
    };&#13;
&#13;
    // X-axis specific rotation commands&#13;
&#13;
    presenter.startRotationX = function (angle, delay) {&#13;
        presenter.startRotation('X', angle, delay);&#13;
    };&#13;
&#13;
    presenter.startRotationXCommand = function (params) {&#13;
        presenter.startRotationX(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.startRotationXQueue = function () {&#13;
        presenter.startRotationQueue('X');&#13;
    };&#13;
&#13;
    presenter.stopRotationX = function () {&#13;
        presenter.stopRotation('X');&#13;
    };&#13;
&#13;
    presenter.stopRotationXQueue = function () {&#13;
        presenter.startRotationQueue('X');&#13;
    };&#13;
&#13;
    // Y-axis specific rotation commands&#13;
&#13;
    presenter.startRotationY = function (angle, delay) {&#13;
        presenter.startRotation('Y', angle, delay);&#13;
    };&#13;
&#13;
    presenter.startRotationYCommand = function (params) {&#13;
        presenter.startRotationY(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.startRotationYQueue = function () {&#13;
        presenter.startRotationQueue('Y');&#13;
    };&#13;
&#13;
    presenter.stopRotationY = function () {&#13;
        presenter.stopRotation('Y');&#13;
    };&#13;
&#13;
    presenter.stopRotationYQueue = function () {&#13;
        presenter.startRotationQueue('Y');&#13;
    };&#13;
&#13;
    // Z-axis specific rotation commands&#13;
&#13;
    presenter.startRotationZ = function (angle, delay) {&#13;
        presenter.startRotation('Z', angle, delay);&#13;
    };&#13;
&#13;
    presenter.startRotationZCommand = function (params) {&#13;
        presenter.startRotationZ(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.startRotationZQueue = function () {&#13;
        presenter.startRotationQueue('Z');&#13;
    };&#13;
&#13;
    presenter.stopRotationZ = function () {&#13;
        presenter.stopRotation('Z');&#13;
    };&#13;
&#13;
    presenter.stopRotationZQueue = function () {&#13;
        presenter.startRotationQueue('Z');&#13;
    };&#13;
&#13;
    presenter.stopAllRotations = function () {&#13;
        presenter.stopRotationX();&#13;
        presenter.stopRotationY();&#13;
        presenter.stopRotationZ();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Vimeo" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="movie id" nameLabel="Vimeo_property_movie_id" type="string"/>
	</model>
<css/><view>&lt;iframe &#13;
	src='http://player.vimeo.com/video/${movie id}?title=0&amp;byline=0&amp;portrait=0' &#13;
	width='100%' &#13;
	height='100%' &#13;
	frameborder="0" &#13;
	webkitAllowFullScreen &#13;
	mozallowfullscreen &#13;
	allowFullScreen&gt; &#13;
&lt;/iframe&gt;&#13;
</view><preview>&lt;img src="" style="width:100%;height:100%"/&gt;&#13;
</preview><presenter>function AddonVimeo_create(){&#13;
			&#13;
	var presenter = function(){}&#13;
&#13;
	presenter.run = function(view, model){&#13;
		var iframe = view.getElementsByTagName('iframe')[0];&#13;
		var src = iframe.getAttribute('src');&#13;
		src = src.replace('${movie id}', model['movie id'])&#13;
        src = src.replace('http', 'https');&#13;
		iframe.setAttribute('src', src);&#13;
	}&#13;
&#13;
	presenter.createPreview = function(view, model){&#13;
		$.ajax({&#13;
	        type:'GET',&#13;
	        url: 'https://vimeo.com/api/v2/video/' + model['movie id'] + '.json',&#13;
	        jsonp: 'callback',&#13;
	        dataType: 'jsonp',&#13;
	        success: function(data){&#13;
	        	$(view).children("img:first").attr("src", data[0].thumbnail_large);&#13;
	        }&#13;
	    });		&#13;
	};&#13;
	&#13;
	return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="WritingCalculations" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="Value" nameLabel="WritingCalculations_property_value" type="text"/>
        <property name="Signs" nameLabel="WritingCalculations_property_signs" type="list">
            <property name="Addition" nameLabel="WritingCalculations_property_addition" type="string"/>
            <property name="Subtraction" nameLabel="WritingCalculations_property_subtraction" type="string"/>
            <property name="Division" nameLabel="WritingCalculations_property_division" type="string"/>
            <property name="Multiplication" nameLabel="WritingCalculations_property_multiplication" type="string"/>
            <property name="Equals" nameLabel="WritingCalculations_property_equals" type="string"/>
        </property>
        <property displayName="Styles" name="Styles" nameLabel="WritingCalculations_property_styles" type="list">
            <property name="Column" nameLabel="WritingCalculations_property_column" type="string"/>
            <property name="Row" nameLabel="WritingCalculations_property_row" type="string"/>
            <property name="Class" nameLabel="WritingCalculations_property_class" type="string"/>
            <property name="Style" nameLabel="WritingCalculations_property_style" type="string"/>
        </property>
        <property displayName="Commutativity" name="Commutativity" nameLabel="WritingCalculations_property_commutativity" type="boolean"/>
        <property displayName="Is not activity" name="Is not activity" nameLabel="WritingCalculations_property_is_not_activity" type="boolean"/>
        <property displayName="Enable more digits in gap" name="Multisigns" nameLabel="WritingCalculations_property_is_not_activity" type="boolean"/>
    </model>
<css>.wrapper-cell, .writing-calculations-input {&#13;
    float: left;&#13;
    width: 50px;&#13;
    height: 25px;&#13;
    line-height: 25px;&#13;
    padding: 0;&#13;
    text-align: center;&#13;
    font-size: 12px;&#13;
    margin: 1px 0;&#13;
}&#13;
&#13;
.writing-calculations-input {&#13;
    width: 25px;&#13;
    float: none;&#13;
    height: 23px;&#13;
    text-align: center !important;&#13;
}&#13;
&#13;
.wrapper-row {&#13;
    float: left;&#13;
}&#13;
&#13;
.writing-calculations-input.incorrect {&#13;
    border: 1px solid red !important;&#13;
    background-color: #faa !important;&#13;
}&#13;
&#13;
.writing-calculations-input.correct {&#13;
    border: 1px solid green !important;&#13;
    background-color: #afa !important;&#13;
}&#13;
&#13;
.wrapper-line {&#13;
    float: left;&#13;
    width: 50px;&#13;
}&#13;
&#13;
.container-line {&#13;
    border-bottom: 1px solid #111;&#13;
    height: 5px;&#13;
}&#13;
&#13;
.wrapper-empty-space {&#13;
    float: left;&#13;
    height: 1px;&#13;
    width: 50px;&#13;
}&#13;
&#13;
.wrapper-dot {&#13;
    float: left;&#13;
    width: 0px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.container-dot {&#13;
    position: absolute;&#13;
    left: -4px;&#13;
    top: 4px;&#13;
}&#13;
&#13;
.wrapper-cell {&#13;
    min-height: 3px;&#13;
}&#13;
&#13;
.wrong {&#13;
    border: 1px solid #ff1111;&#13;
}&#13;
&#13;
.correct {&#13;
    border: 1px solid #00bb00;&#13;
}&#13;
</css><view>&lt;div id="writing-calculations-wrapper"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div id="writing-calculations-wrapper"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonWritingCalculations_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.$view = null;&#13;
    presenter.model = null;&#13;
    presenter.correctAnswersList = [];&#13;
    presenter.array = [];&#13;
    presenter.playerController = null;&#13;
    presenter.answers = [];&#13;
    presenter.isCommutativity;&#13;
    var eventBus;&#13;
&#13;
    presenter.ELEMENT_TYPE = {&#13;
        "NUMBER" : 1,&#13;
        "EMPTY_BOX" : 2,&#13;
        "SYMBOL" : 3,&#13;
        "EMPTY_SPACE" : 4,&#13;
        "LINE" : 5,&#13;
        "DOT" : 6&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeSigns(model);&#13;
    };&#13;
&#13;
    presenter.upgradeSigns = function (model) {&#13;
        if ('Signs' in model) return model;&#13;
&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
        upgradedModel['Signs'] = [{&#13;
            'Addition' : '',&#13;
            'Subtraction' : '',&#13;
            'Division' : '',&#13;
            'Multiplication' : '',&#13;
            'Equals' : ''&#13;
        }];&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        "OUT_OF_RANGE" : "Number between brackets must be from 0 to 9"&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenterLogic(view, model);&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model);&#13;
    };&#13;
&#13;
    function presenterLogic(view, model) {&#13;
        presenter.array = presenter.convertStringToArray(model.Value);&#13;
        presenter.isCommutativity = ModelValidationUtils.validateBoolean(model['Commutativity']) || false;&#13;
        presenter.$view = $(view);&#13;
        presenter.model = presenter.upgradeModel(model);&#13;
        presenter.signs = presenter.readSigns( presenter.model['Signs'][0] );&#13;
        presenter.isNotActivity = ModelValidationUtils.validateBoolean(model['Is not activity']);&#13;
        presenter.multisigns = ModelValidationUtils.validateBoolean(model['Multisigns']);&#13;
        presenter.createView(presenter.array);&#13;
        presenter.bindValueChangeEvent();&#13;
        presenter.setContainerWidth();&#13;
        presenter.addAdditionalStyles();&#13;
    }&#13;
&#13;
    presenter.readSigns = function( signs ) {&#13;
        var properSigns = {};&#13;
        for ( var key in signs ) {&#13;
            if ( signs.hasOwnProperty(key) ) {&#13;
                if ( signs[key] == '' || signs[key] == '&lt;br&gt;' ) {&#13;
                    properSigns[key] = presenter.useDefaultSign( key );&#13;
                } else {&#13;
                    properSigns[key] = signs[key];&#13;
                }&#13;
            }&#13;
        }&#13;
        return properSigns;&#13;
    };&#13;
&#13;
    presenter.useDefaultSign = function( key ) {&#13;
        if (key == 'Addition') {&#13;
            return "\\(+\\)";&#13;
        }&#13;
        if (key == 'Subtraction') {&#13;
            return "\\(-\\)";&#13;
        }&#13;
        if (key == 'Division') {&#13;
            return "\\(\\big)\\)";&#13;
        }&#13;
        if (key == 'Multiplication') {&#13;
            return "\\(\\times\\)";&#13;
        }&#13;
        if (key == 'Equals') {&#13;
            return "\\(=\\)";&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addAdditionalStyleToElement = function (row, column, style, clazz) {&#13;
        var rowElement = presenter.$view.find('.row-' + row),&#13;
            cellElement = rowElement.find('.cell-' + column);&#13;
&#13;
        cellElement.addClass(clazz);&#13;
        cellElement.attr('style', style);&#13;
    };&#13;
&#13;
    presenter.addAdditionalStyles = function() {&#13;
        if (!presenter.model['Styles']) {&#13;
            return;&#13;
        }&#13;
        $.each(presenter.model['Styles'], function() {&#13;
            var columns = this['Column'],&#13;
                rows = this['Row'];&#13;
&#13;
            if (rows) {&#13;
                rows = rows.split(',');&#13;
            }&#13;
&#13;
            if (columns) {&#13;
                columns = columns.split(',');&#13;
            }&#13;
&#13;
            for (var row = 0; row &lt; rows.length; row++) {&#13;
                for (var column = 0; column &lt; columns.length; column++) {&#13;
                    presenter.addAdditionalStyleToElement(rows[row], columns[column], this['Style'], this['Class']);&#13;
                }&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setContainerWidth = function() {&#13;
        var viewWrapper = this.$view.find("#writing-calculations-wrapper");&#13;
        var width = $(viewWrapper).children().outerWidth();&#13;
        $(viewWrapper).css('width', width);&#13;
    };&#13;
&#13;
    presenter.bindValueChangeEvent = function() {&#13;
        var $input = presenter.$view.find(".writing-calculations-input");&#13;
        $input.on('click', function(event) {&#13;
            event.stopPropagation();&#13;
        });&#13;
&#13;
        $input.on("change", function(event) {&#13;
            event.stopPropagation();&#13;
&#13;
            var value = event.target.value;&#13;
            var rowIndex = $(event.target).attr("row");&#13;
            var cellIndex = $(event.target).attr("cell");&#13;
            var item = rowIndex + "-" + cellIndex;&#13;
            var isCorrect = 0;&#13;
            var answer = presenter.createAnswer(rowIndex, cellIndex, value);&#13;
            if(presenter.isCorrect(answer)) {&#13;
                isCorrect = 1;&#13;
            }&#13;
&#13;
            if (presenter.isCommutativity &amp;&amp; presenter.isAllFilled()) {&#13;
                presenter.triggerValueChangeEvent("", "all", presenter.isAllCorrectlyFilled() ? 1 : 0);&#13;
            }&#13;
&#13;
            if (!presenter.isCommutativity) {&#13;
                presenter.triggerValueChangeEvent(value, item, isCorrect);&#13;
            }&#13;
&#13;
            if(!presenter.isCommutativity &amp;&amp; presenter.allAnswersCorrect()) {&#13;
                presenter.triggerValueChangeEvent("", "all", "");&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createView = function(convertedArray) {&#13;
        var viewWrapper = this.$view.find("#writing-calculations-wrapper"), columnItemIndex = 0;&#13;
        for(var rowIndex = 0; rowIndex &lt; convertedArray.length; rowIndex++) {&#13;
            var rowWrapper = this.createRowWrapper(rowIndex),&#13;
                cellIndex = 0;&#13;
&#13;
            columnItemIndex = 0;&#13;
            for(var index = 0; index &lt; convertedArray[rowIndex].length; index++) {&#13;
                var element, row = convertedArray[rowIndex],&#13;
                    isGap = row[index] == '[';&#13;
                var correctAnswer = {};&#13;
                if( isGap ) {&#13;
                    element = row.slice(index, index + 3);&#13;
                    presenter.verifyElementRange(element);&#13;
                    correctAnswer = {&#13;
                        rowIndex: rowIndex + 1,&#13;
                        cellIndex: ++columnItemIndex,&#13;
                        value: this.getValueOfElement(element)&#13;
                    };&#13;
&#13;
                    if (presenter.answers[rowIndex] === undefined) {&#13;
                        presenter.answers[rowIndex] = [];&#13;
                    }&#13;
&#13;
                    presenter.answers[rowIndex].push(correctAnswer.value);&#13;
&#13;
                    this.correctAnswersList.push(correctAnswer);&#13;
                    index += 2;&#13;
                } else {&#13;
                    element = row[index];&#13;
                    if(presenter.isCommutativity){&#13;
                        correctAnswer = {&#13;
                            rowIndex: rowIndex + 1,&#13;
                            cellIndex: ++columnItemIndex,&#13;
                            value: this.getValueOfElement(element)&#13;
                        };&#13;
                    }&#13;
                    if (!isNaN(parseInt(element, 10))) {&#13;
                        if (presenter.answers[rowIndex] === undefined) {&#13;
                            presenter.answers[rowIndex] = [];&#13;
                        }&#13;
&#13;
                        presenter.answers[rowIndex].push(element);&#13;
                    }&#13;
                }&#13;
                var elementType = this.getElementType(element);&#13;
&#13;
                var createdElement = this.createElement(element, elementType);&#13;
                if (elementType != presenter.ELEMENT_TYPE.LINE) {&#13;
                    addCellClass(createdElement, cellIndex);&#13;
                }&#13;
&#13;
                this.transformElement(createdElement, element, elementType);&#13;
&#13;
                if ( elementType == this.ELEMENT_TYPE.EMPTY_BOX || elementType == this.ELEMENT_TYPE.NUMBER) {&#13;
                    this.addPosition(createdElement, correctAnswer);&#13;
                }&#13;
&#13;
                rowWrapper.append(createdElement);&#13;
&#13;
                if (elementType != this.ELEMENT_TYPE.DOT) {&#13;
                    cellIndex++;&#13;
                }&#13;
            }&#13;
&#13;
            viewWrapper.append(rowWrapper);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    function addCellClass(createdElement, cellIndex) {&#13;
        $(createdElement).addClass('cell-' + (cellIndex + 1));&#13;
    }&#13;
&#13;
    presenter.verifyElementRange = function(element) {&#13;
        if( element[2] != ']' ) {&#13;
            return this.$view.html(this.ERROR_MESSAGES.OUT_OF_RANGE);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addPosition = function(element, position) {&#13;
        var input = $(element).find(".writing-calculations-input, .container-number")[0];&#13;
&#13;
        $(input).attr({&#13;
            "row" : position.rowIndex,&#13;
            "cell" : position.cellIndex&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getValueOfElement = function(element) {&#13;
        if( !this.isEmptyBox(element) ) {&#13;
            return;&#13;
        }&#13;
        var pattern = /[\d.,]/g;&#13;
        var value = element.match(pattern)[0];&#13;
        if( this.isInteger(value) ) {&#13;
            value = parseInt(value, 10);&#13;
        }&#13;
        return value;&#13;
    };&#13;
&#13;
    presenter.createRowWrapper = function(index) {&#13;
        var rowWrapper = $("&lt;div&gt;&lt;/div&gt;");&#13;
        rowWrapper.addClass("wrapper-row row-" + (index + 1));&#13;
        return rowWrapper;&#13;
    };&#13;
&#13;
    presenter.createElement = function(value, type) {&#13;
        var createdElement;&#13;
        switch(type) {&#13;
            case this.ELEMENT_TYPE.NUMBER:&#13;
                createdElement = this.createWrapperAndContainer("number");&#13;
                break;&#13;
            case this.ELEMENT_TYPE.SYMBOL:&#13;
                createdElement = this.createWrapperAndContainer("symbol");&#13;
                break;&#13;
            case this.ELEMENT_TYPE.EMPTY_SPACE:&#13;
                createdElement = this.createWrapperAndContainer("emptySpace", 'wrapper-empty-space');&#13;
                break;&#13;
            case this.ELEMENT_TYPE.EMPTY_BOX:&#13;
                createdElement = this.createWrapperAndContainer("emptyBox");&#13;
                break;&#13;
            case this.ELEMENT_TYPE.LINE:&#13;
                createdElement = this.createWrapperAndContainer("line", 'wrapper-line');&#13;
                break;&#13;
            case this.ELEMENT_TYPE.DOT:&#13;
                createdElement = this.createWrapperAndContainer("dot", 'wrapper-dot');&#13;
                break;&#13;
        }&#13;
&#13;
        return createdElement;&#13;
    };&#13;
&#13;
    presenter.createWrapperAndContainer = function(cssClass, wrapperClass) {&#13;
        if (!wrapperClass || wrapperClass === undefined) {&#13;
            wrapperClass = "wrapper-cell";&#13;
        }&#13;
        var wrapper = $("&lt;div&gt;&lt;/div&gt;");&#13;
        wrapper.addClass(wrapperClass);&#13;
        var container = $("&lt;div&gt;&lt;/div&gt;");&#13;
        container.addClass("container-" + cssClass);&#13;
        wrapper.append(container);&#13;
        return wrapper;&#13;
    };&#13;
&#13;
    presenter.transformElement = function(element, value, type) {&#13;
        var container = $(element).find("[class*=container]");&#13;
        switch(type) {&#13;
            case this.ELEMENT_TYPE.EMPTY_SPACE:&#13;
                break;&#13;
            case this.ELEMENT_TYPE.EMPTY_BOX:&#13;
                var input = $("&lt;input type='text'&gt;");&#13;
                input.addClass("writing-calculations-input");&#13;
                if(!presenter.multisigns){&#13;
                    input.attr("maxlength", 1);&#13;
                }&#13;
                container.append(input);&#13;
                break;&#13;
            case this.ELEMENT_TYPE.LINE:&#13;
                break;&#13;
            case this.ELEMENT_TYPE.SYMBOL:&#13;
                container.html(this.convertLaTeX(value));&#13;
                break;&#13;
            case this.ELEMENT_TYPE.DOT:&#13;
                container.html(value);&#13;
                break;&#13;
            default:&#13;
                container.html(value);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.convertLaTeX = function (value) {&#13;
        if (value === "*") {&#13;
            return presenter.signs['Multiplication'];&#13;
        }&#13;
        else if (value === ":" || value === ")") {&#13;
            return presenter.signs['Division'];&#13;
        }&#13;
        else if (value === "+") {&#13;
            return presenter.signs['Addition'];&#13;
        } else if (value === "-") {&#13;
            return presenter.signs['Subtraction'];&#13;
        } else if (value === "#") {&#13;
            return presenter.signs['Equals'];&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getElementType = function(element) {&#13;
        if( this.isInteger(element) ) return this.ELEMENT_TYPE.NUMBER;&#13;
        if( this.isSymbol(element) ) return this.ELEMENT_TYPE.SYMBOL;&#13;
        if( this.isEmptySpace(element) ) return this.ELEMENT_TYPE.EMPTY_SPACE;&#13;
        if( this.isEmptyBox(element) ) return this.ELEMENT_TYPE.EMPTY_BOX;&#13;
        if( this.isLine(element) ) return this.ELEMENT_TYPE.LINE;&#13;
        if( this.isDot(element)) return this.ELEMENT_TYPE.DOT;&#13;
    };&#13;
&#13;
    presenter.isDot = function(element) {&#13;
        return element == "." || element == ",";&#13;
    };&#13;
&#13;
    presenter.isEmptyBox = function(element) {&#13;
        var pattern = /\[[\d.,]?\]/g; // matches: '[number]' or '[.]' or '[,]'&#13;
        return pattern.test(element);&#13;
    };&#13;
&#13;
    presenter.isEmptySpace = function(element) {&#13;
        return element == "_";&#13;
    };&#13;
&#13;
    presenter.isSymbol = function(element) {&#13;
        var pattern = /[#+\-*:\)]/g; // matches: '#', '+', '-', ':', ')' and '*'&#13;
        return pattern.test(element);&#13;
    };&#13;
&#13;
    presenter.isInteger = function(element) {&#13;
        return element % 1 === 0 &amp;&amp; element !== null &amp;&amp; /\d/.test(element);&#13;
    };&#13;
&#13;
    presenter.isLine = function(element) {&#13;
        return element == "=";&#13;
    };&#13;
&#13;
    presenter.convertStringToArray = function(stringToConvert) {&#13;
        return stringToConvert.split(/[\n\r]+/);&#13;
    };&#13;
&#13;
    presenter.isCorrect = function(answer) {&#13;
        var result = false;&#13;
        var correctAnswers = this.correctAnswersList;&#13;
        for(var i = 0; i &lt; correctAnswers.length; i++) {&#13;
            if( this.isEqual(answer, correctAnswers[i]) ) {&#13;
                result = true;&#13;
            }&#13;
        }&#13;
        return result;&#13;
    };&#13;
&#13;
    presenter.allAnswersCorrect = function() {&#13;
        var maxScore = presenter.getPoints("all");&#13;
        var score = presenter.getPoints("correct");&#13;
        var errorCount = presenter.getPoints("incorrect");&#13;
&#13;
        return maxScore === score &amp;&amp; errorCount === 0;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        var maxScore = presenter.getPoints("all"),&#13;
            score = presenter.getPoints("correct"),&#13;
            errorCount = presenter.getPoints("incorrect");&#13;
&#13;
        return maxScore === score &amp;&amp; errorCount === 0;&#13;
    };&#13;
&#13;
    presenter.isEqual = function(answer, correctAnswer) {&#13;
        return answer.value === correctAnswer.value &amp;&amp; answer.rowIndex === correctAnswer.rowIndex &amp;&amp; answer.cellIndex === correctAnswer.cellIndex;&#13;
    };&#13;
&#13;
    presenter.getInputs = function() {&#13;
        return $(this.$view).find(".writing-calculations-input");&#13;
    };&#13;
&#13;
    presenter.isAllFilled = function() {&#13;
        var inputs = presenter.getInputs();&#13;
&#13;
        for (var i = 0; i &lt; inputs.length; i++) {&#13;
            if ($(inputs[i]).val().length == 0) return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(presenter.isNotActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (!presenter.isCommutativity) {&#13;
            $.each(inputs, function(){&#13;
                var answer = presenter.createAnswer($(this).attr("row"), $(this).attr("cell"), $(this).val());&#13;
&#13;
                if (ModelValidationUtils.isStringEmpty($(this).val())) {&#13;
                    presenter.markEmpty($(this));&#13;
                } else if( presenter.isCorrect(answer) ) {&#13;
                    presenter.markCorrect($(this));&#13;
                } else {&#13;
                    presenter.markIncorrect($(this));&#13;
                }&#13;
            });&#13;
        } else if (presenter.isAllFilled()) {&#13;
            var isCorrect = presenter.isAllCorrectlyFilled();&#13;
&#13;
            if (isCorrect) {&#13;
                presenter.$view.addClass('correct');&#13;
            } else {&#13;
                presenter.$view.addClass('wrong');&#13;
            }&#13;
&#13;
            disableAllInputs(inputs);&#13;
        } else {&#13;
            disableAllInputs(inputs);&#13;
        }&#13;
    };&#13;
&#13;
    function disableAllInputs(inputs) {&#13;
        $(inputs).attr("disabled", "disabled");&#13;
    }&#13;
&#13;
    presenter.compareAnswers = function(correctAnswers, userAnswers) {&#13;
        var answers = $.extend(true, [], userAnswers);&#13;
&#13;
        correctAnswers = $.extend(true, [], correctAnswers);&#13;
&#13;
        var userResult = answers.pop(),&#13;
            declaredResult = correctAnswers.pop();&#13;
&#13;
        var cleanedAnswers = [],&#13;
            cleanedCorrectAnswers = [],&#13;
            logicalFoundArray = [],&#13;
            found = false,&#13;
            result = true,&#13;
            i;&#13;
&#13;
        for (i = 0; i &lt;= answers.length; i++) {&#13;
            if (answers[i] !== undefined) {&#13;
                cleanedAnswers.push(answers[i]);&#13;
            }&#13;
&#13;
            if (correctAnswers[i] !== undefined) {&#13;
                cleanedCorrectAnswers.push(correctAnswers[i]);&#13;
            }&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; cleanedCorrectAnswers.length; i++) {&#13;
            found = presenter.wasRowFound(cleanedCorrectAnswers[i], cleanedAnswers);&#13;
            logicalFoundArray.push(found);&#13;
        }&#13;
&#13;
        jQuery.each(logicalFoundArray, function (_, element) {&#13;
            if (!element) {&#13;
                result = false;&#13;
                return false; // jQuery.each break statement&#13;
            }&#13;
        });&#13;
&#13;
        result = result &amp;&amp; presenter.compareResults(userResult, declaredResult);&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
&#13;
    presenter.compareResults = function(userResult, declaredResult) {&#13;
        return userResult.toString() === declaredResult.toString();&#13;
    };&#13;
&#13;
    /*&#13;
     This method get one of correctAnswers row&#13;
     and comparing it with each givenAnswers rows.&#13;
&#13;
     Takes: correctAnswers as all correct values in one row&#13;
     and givenAnswers as answers in all rows given by user.&#13;
&#13;
     Returns: boolean value if declared row in correctAnswers&#13;
     was found in givenAnswers.&#13;
     */&#13;
    presenter.wasRowFound = function(correctAnswers, givenAnswers) {&#13;
        var wasRowFound = false;&#13;
&#13;
        for (var j = 0; j &lt; givenAnswers.length; j++) { //answers given by user&#13;
            if (givenAnswers[j] !== undefined &amp;&amp; correctAnswers.toString() === givenAnswers[j].toString()) {&#13;
                delete givenAnswers[j];&#13;
                wasRowFound = true;&#13;
                break;&#13;
            } else {&#13;
                wasRowFound = false;&#13;
            }&#13;
        }&#13;
&#13;
        return wasRowFound;&#13;
    };&#13;
&#13;
    presenter.getAllAnswers = function(elements) {&#13;
        var answers = [];&#13;
&#13;
        $.each(elements, function(){&#13;
            if ($(this).hasClass('writing-calculations-input')) {&#13;
                if (answers[$(this).attr("row") - 1] === undefined) {&#13;
                    answers[$(this).attr("row") - 1] = [$(this).val()];&#13;
                } else {&#13;
                    answers[$(this).attr("row") - 1].push($(this).val());&#13;
                }&#13;
            } else if ($(this).hasClass('container-number')) {&#13;
                if (answers[$(this).attr("row") - 1] === undefined) {&#13;
                    answers[$(this).attr("row") - 1] = [$(this).html()];&#13;
                } else {&#13;
                    answers[$(this).attr("row") - 1].push($(this).html());&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        return answers;&#13;
    };&#13;
&#13;
    presenter.isAllCorrectlyFilled = function() {&#13;
        var elements = $(this.$view).find('.container-number, .writing-calculations-input');&#13;
        var answers = presenter.getAllAnswers(elements);&#13;
&#13;
        return presenter.compareAnswers(presenter.answers, answers);&#13;
    };&#13;
&#13;
    presenter.createAnswer = function(row, cell, value) {&#13;
        var answer = {&#13;
            rowIndex: parseInt(row, 10),&#13;
            cellIndex: parseInt(cell, 10)&#13;
        };&#13;
&#13;
        if( this.isInteger(value) ) {&#13;
            value = parseInt(value, 10);&#13;
        }&#13;
&#13;
        answer.value = value;&#13;
        return answer;&#13;
    };&#13;
&#13;
    presenter.markIncorrect = function(element) {&#13;
        presenter.markAs(element, "incorrect");&#13;
    };&#13;
&#13;
    presenter.markCorrect = function(element) {&#13;
        presenter.markAs(element, "correct");&#13;
    };&#13;
&#13;
    presenter.markEmpty = function(element) {&#13;
        presenter.markAs(element, "empty");&#13;
    };&#13;
&#13;
    presenter.markAs = function(element, className) {&#13;
        $(element).addClass(className);&#13;
        $(element).attr("disabled", "disabled");&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        if(presenter.isNotActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        this.clean(true, false);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        this.clean(true, true);&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
        if(typeof(presenter.userAnswers) !== "undefined") {&#13;
            $.each(inputs, function(index){&#13;
                presenter.userAnswers[index] = '';&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.clean = function(removeMarks, removeValues) {&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
        $.each(inputs, function(){&#13;
            if(removeMarks) {&#13;
                presenter.removeMark($(this));&#13;
            }&#13;
            if(removeValues) {&#13;
                presenter.removeValue($(this));&#13;
            }&#13;
        });&#13;
        if (presenter.$view.hasClass('wrong')) {&#13;
            presenter.$view.removeClass('wrong');&#13;
        } else if (presenter.$view.hasClass('correct')) {&#13;
            presenter.$view.removeClass('correct');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.removeMark = function(element) {&#13;
        $(element).removeClass("incorrect correct empty");&#13;
        $(element).removeAttr("disabled");&#13;
    };&#13;
&#13;
    presenter.removeValue = function(element) {&#13;
        $(element).val("");&#13;
    };&#13;
&#13;
&#13;
    presenter.getInputsData = function() {&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
        var inputsData = {&#13;
            values : [],&#13;
            correctAnswersCount : 0,&#13;
            incorrectAnswersCount : 0&#13;
        };&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        $.each(inputs, function () {&#13;
            var value = $(this).val();&#13;
            if (presenter.isInteger(value)) {&#13;
                value = parseInt(value, 10);&#13;
            }&#13;
            inputsData.values.push(value);&#13;
&#13;
            if (value === undefined || value === "") return true; // jQuery.each continue&#13;
&#13;
            var answer = presenter.createAnswer($(this).attr("row"), $(this).attr("cell"), $(this).val());&#13;
            if( presenter.isCorrect(answer) ) {&#13;
                inputsData.correctAnswersCount++;&#13;
            } else {&#13;
                inputsData.incorrectAnswersCount++;&#13;
            }&#13;
        });&#13;
        return inputsData;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return JSON.stringify({&#13;
            "inputsData" : this.getInputsData()&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
        if (state.inputsData) {&#13;
            var inputs = $(this.$view).find(".writing-calculations-input");&#13;
            var inputsData = state.inputsData;&#13;
            $.each(inputs, function(index){&#13;
                $(this).val(inputsData.values[index]);&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if(presenter.isNotActivity){&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            return presenter.currentScore;&#13;
        }&#13;
        return this.getPoints("correct");&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if(presenter.isNotActivity){&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            return presenter.currentMaxScore;&#13;
        }&#13;
        return this.getPoints("all");&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if(presenter.isNotActivity){&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            return presenter.currentErrorCount;&#13;
        }&#13;
        return this.getPoints("incorrect");&#13;
    };&#13;
&#13;
    presenter.getPoints = function(type) {&#13;
        var inputsData = this.getInputsData();&#13;
&#13;
        if (presenter.isCommutativity) {&#13;
            switch (type) {&#13;
                case 'correct':&#13;
                    return presenter.isAllCorrectlyFilled() ? 1 : 0;&#13;
                case 'incorrect':&#13;
                    if (presenter.isAllFilled()) {&#13;
                        return presenter.isAllCorrectlyFilled() ? 0 : 1;&#13;
                    } else {&#13;
                        return 0;&#13;
                    }&#13;
                case 'all':&#13;
                    return 1;&#13;
                default:&#13;
                    return 0;&#13;
            }&#13;
        } else {&#13;
            switch (type) {&#13;
                case 'correct':&#13;
                    return inputsData.correctAnswersCount;&#13;
                case 'incorrect':&#13;
                    return inputsData.incorrectAnswersCount;&#13;
                case 'all':&#13;
                    return inputsData.values.length;&#13;
                default:&#13;
                    return 0;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.createEventData = function(value, item, isCorrect) {&#13;
        return {&#13;
            source : this.model.ID,&#13;
            item : "" + item,&#13;
            value : "" + value,&#13;
            score : "" + isCorrect&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerValueChangeEvent = function(value, item, isCorrect) {&#13;
        var eventData = this.createEventData(value, item, isCorrect);&#13;
        if (this.playerController !== null) {&#13;
            this.playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        this.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(presenter.isNotActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.userAnswers = [];&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.currentScore = presenter.getScore();&#13;
        presenter.currentErrorCount = presenter.getErrorCount();&#13;
        presenter.currentMaxScore = presenter.getMaxScore();&#13;
        presenter.clean(true,false);&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
        var correctAnswers = this.correctAnswersList;&#13;
&#13;
        $.each(inputs, function(index){&#13;
            $(this).addClass('writing-calculations_show-answers');&#13;
            $(this).attr("disabled", true);&#13;
            presenter.userAnswers.push($(this).val());&#13;
            $(this).val(correctAnswers[index].value);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(presenter.isNotActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
        $.each(inputs, function(index){&#13;
            $(this).val(presenter.userAnswers[index]);&#13;
            $(this).removeClass('writing-calculations_show-answers');&#13;
            $(this).attr("disabled", false);&#13;
        });&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="YouTube_Addon" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="HTTPS" nameLabel="YouTube_Addon_property_https" type="boolean"/>
		<property name="ID" nameLabel="YouTube_Addon_property_id" type="string"/>
		<property name="URL" nameLabel="YouTube_Addon_property_url" type="string"/>
        <property name="Offline message" nameLabel="YouTube_Addon_property_offline_message" type="string"/>
	</model>
<css/><view/><preview/><presenter> function AddonYouTube_Addon_create(){&#13;
    var presenter = function() {&#13;
    };&#13;
 &#13;
    function createVideoThumbnailAsync(videoID, viewContainer, addonWidth, addonHeight) {&#13;
&#13;
        var feedURL = "https://www.googleapis.com/youtube/v3/videos?id=" + videoID + "&amp;key=AIzaSyAhdKL4WhiNG-fPIIC64LR95FNUOwddISs&amp;part=snippet";&#13;
&#13;
        $.when($.get(feedURL)).then(function (jsonResponse) {&#13;
            if (jsonResponse.items.length &gt; 0) {&#13;
                var thumbnails = jsonResponse.items[0].snippet.thumbnails;&#13;
                var thumbnailURL = thumbnails.maxres.url;&#13;
                var thumbnailElement = document.createElement("img");&#13;
                $(thumbnailElement).attr('src', thumbnailURL);&#13;
                viewContainer.html(thumbnailElement);&#13;
                $(thumbnailElement).css({&#13;
                    width: addonWidth + 'px',&#13;
                    height: addonHeight + 'px'&#13;
                });&#13;
            }&#13;
        });&#13;
    }&#13;
 &#13;
    function showErrorMessage(viewContainer, errorMessage) {&#13;
        var errorElement = document.createElement('p');&#13;
        $(errorElement).text(errorMessage);&#13;
        viewContainer.html(errorElement);&#13;
    }&#13;
&#13;
     function doesConnectionExist() {&#13;
         var xhr = new ( window.ActiveXObject || XMLHttpRequest )( "Microsoft.XMLHTTP" );&#13;
&#13;
         //YouTube API key is generated in lorepocorporate google account&#13;
         xhr.open( "HEAD", "https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&amp;key=AIzaSyAhdKL4WhiNG-fPIIC64LR95FNUOwddISs&amp;part=status", false );&#13;
&#13;
         try {&#13;
             xhr.send();&#13;
             return ( xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304 );&#13;
         } catch (error) {&#13;
             return false;&#13;
         }&#13;
     }&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        var width = model.Width;&#13;
        var height = model.Height;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.isVisibleByDefault = presenter.isVisible;&#13;
&#13;
        var viewContainer = $(view);&#13;
        var decodedVideoID = presenter.decodeVideoID(model.URL, model.ID);&#13;
&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        if (decodedVideoID.isError) {&#13;
            showErrorMessage(viewContainer, decodedVideoID.errorMessage);&#13;
        } else {&#13;
            if (preview) {&#13;
                createVideoThumbnailAsync(decodedVideoID.videoID, viewContainer, width, height);&#13;
            } else {&#13;
                var src = '${protocol}://www.youtube.com/embed/${video_id}';&#13;
                src = src.replace("${video_id}", decodedVideoID.videoID);&#13;
&#13;
                //Protocol (HTTP or HTTPS)&#13;
                var myProtocol = window.location.protocol;&#13;
                myProtocol = myProtocol.replace(":","");&#13;
                var httsStr = model.HTTPS;&#13;
                var protocol = httsStr === 'True' ? 'https' : 'http';&#13;
&#13;
                if (myProtocol == 'https' || protocol == 'http') {&#13;
                    src = src.replace("${protocol}", myProtocol);&#13;
                } else {&#13;
                    src = src.replace("${protocol}", protocol);&#13;
                }&#13;
&#13;
                var iframe = document.createElement('iframe');&#13;
                $(iframe).attr('id', 'ytIframe');&#13;
                $(iframe).attr('frameborder', '0');&#13;
                $(iframe).attr('src', src + "?enablejsapi=1");&#13;
                $(iframe).attr('width', parseInt(width, 10) + 'px');&#13;
                $(iframe).attr('height', parseInt(height, 10) + 'px');&#13;
&#13;
                if(doesConnectionExist()){&#13;
                    viewContainer.html(iframe);&#13;
                }else{&#13;
                    var offlineDiv = document.createElement('div');&#13;
                    $(offlineDiv).addClass('offline-message');&#13;
                    if(model['Offline message']){&#13;
                        $(offlineDiv).text(model['Offline message']);&#13;
                        viewContainer.html(offlineDiv);&#13;
                    }else{&#13;
                        $(offlineDiv).text('No connection to the Internet');&#13;
                        viewContainer.html(offlineDiv);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
 &#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
 &#13;
    presenter.run = function(view, model) {&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
 &#13;
    // Return -1 if any error occurs&#13;
    presenter.decodeVideoID = function(URL, ID) {&#13;
        //Encoding video ID from URL if ID is not given&#13;
        var videoID = "";&#13;
        var prefix = "";&#13;
        var methodResult = {&#13;
            videoID : -1,&#13;
            isError: false,&#13;
            errorMessage : ''&#13;
        };&#13;
 &#13;
        if(ID !== '') {&#13;
            if (ID.search(/[^a-zA-Z0-9_-]/gm) === -1) {&#13;
                methodResult.videoID = ID;&#13;
 &#13;
                return methodResult;&#13;
            } else {&#13;
                methodResult.isError = true;&#13;
                methodResult.errorMessage = "Video ID seems to be incorrect!";&#13;
 &#13;
                return methodResult;&#13;
            }&#13;
        }&#13;
 &#13;
        if(URL === '') {&#13;
            methodResult.isError = true;&#13;
            methodResult.errorMessage = "Neither video ID nor URL was given!";&#13;
 &#13;
            return methodResult;&#13;
        }&#13;
 &#13;
        var ampersandIndex = URL.indexOf("&amp;");&#13;
        var youtubeIndex = URL.indexOf("youtube.com/watch?v=");&#13;
 &#13;
        if(youtubeIndex == -1) {&#13;
            // There is a possibility that user enters shorted URL&#13;
            youtubeIndex = URL.indexOf("youtu.be/");&#13;
 &#13;
            if(youtubeIndex == -1) {&#13;
                methodResult.isError = true;&#13;
                methodResult.errorMessage = "URL seems to be incorrect!";&#13;
 &#13;
                return methodResult;&#13;
            }&#13;
 &#13;
            prefix = ".be/";&#13;
        } else {&#13;
            prefix = "?v=";&#13;
        }&#13;
 &#13;
        var startIndex = URL.indexOf(prefix) + prefix.length;&#13;
        if (startIndex == URL.length) {&#13;
            methodResult.isError = true;&#13;
            methodResult.errorMessage = "URL seems to be incorrect. It must contain video ID!";&#13;
 &#13;
            return methodResult;&#13;
        }&#13;
 &#13;
        if(ampersandIndex == -1) {&#13;
            videoID = URL.substring(startIndex);&#13;
        } else {&#13;
            videoID = URL.substring(startIndex, ampersandIndex);&#13;
        }&#13;
 &#13;
        methodResult.videoID = videoID;&#13;
 &#13;
        return methodResult;&#13;
    };&#13;
&#13;
     presenter.setVisibility = function (isVisible) {&#13;
         presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
     };&#13;
&#13;
     presenter.show = function() {&#13;
         presenter.setVisibility(true);&#13;
         presenter.isVisible = true;&#13;
     };&#13;
&#13;
     presenter.hide = function() {&#13;
         presenter.setVisibility(false);&#13;
         presenter.isVisible = false;&#13;
     };&#13;
&#13;
     // This function takes argument as function's name from iframe API:&#13;
     // https://developers.google.com/youtube/iframe_api_reference?hl=pl#Functions&#13;
     function callPlayer(func, args) {&#13;
         presenter.$view.find("iframe")[0].contentWindow.postMessage(JSON.stringify({&#13;
             'event': 'command',&#13;
             'func': func,&#13;
             'args': args || []&#13;
         }), "*");&#13;
     }&#13;
&#13;
     presenter.stop = function() {&#13;
         callPlayer('stopVideo');&#13;
         callPlayer('seekTo', [0, true]);&#13;
     };&#13;
&#13;
     presenter.executeCommand = function(name, params) {&#13;
         var commands = {&#13;
             'show': presenter.show,&#13;
             'hide': presenter.hide,&#13;
             'stop': presenter.stop&#13;
         };&#13;
&#13;
         Commands.dispatch(commands, name, params, presenter);&#13;
     };&#13;
&#13;
     presenter.reset = function(){&#13;
         presenter.isVisible = presenter.isVisibleByDefault;&#13;
         presenter.setVisibility(presenter.isVisibleByDefault);&#13;
     };&#13;
&#13;
     presenter.getState = function () {&#13;
         return JSON.stringify({&#13;
             isVisible: presenter.isVisible&#13;
         });&#13;
     };&#13;
&#13;
     presenter.upgradeStateForVisibility = function(state) {&#13;
         if (state.isVisible === undefined) {&#13;
             state.isVisible = true;&#13;
         }&#13;
&#13;
         return state;&#13;
     };&#13;
&#13;
     presenter.upgradeState = function (parsedState) {&#13;
         parsedState = presenter.upgradeStateForVisibility(parsedState);&#13;
&#13;
         return parsedState;&#13;
     };&#13;
&#13;
     presenter.setState = function(state) {&#13;
         if (ModelValidationUtils.isStringEmpty(state)) {&#13;
             return;&#13;
         }&#13;
&#13;
         var parsedState = presenter.upgradeState(JSON.parse(state));&#13;
&#13;
         presenter.isVisible = parsedState.isVisible;&#13;
&#13;
         presenter.setVisibility(presenter.isVisible);&#13;
     };&#13;
 &#13;
    return presenter;&#13;
}&#13;
/**&#13;
 * YouTube Addon&#13;
 * Version 1.6&#13;
 * Last update: 23-08-2016&#13;
 */&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Zoom_Image" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Full Screen image" name="Full Screen image" nameLabel="Zoom_Image_property_full_screen_image" type="image"/>
        <property displayName="Page image" name="Page image" nameLabel="Zoom_Image_property_page_image" type="image"/>
    </model>
<css>.addon_Zoom_Image .content {&#13;
    position: relative;&#13;
}&#13;
&#13;
.addon_Zoom_Image .content div.icon {&#13;
    position: absolute;&#13;
    background-color: #adff2f;&#13;
    width: 30px;&#13;
    height: 30px;&#13;
    bottom: 0;&#13;
    right: 0;&#13;
}&#13;
&#13;
img.big {&#13;
    display: table;&#13;
    margin: auto;&#13;
}&#13;
&#13;
.ui-widget-overlay {&#13;
    background: black !important;&#13;
    opacity: 0.7 !important;&#13;
}&#13;
&#13;
.close-button-ui-dialog {&#13;
    display: table;&#13;
    top: 0;&#13;
    right: 0;&#13;
    position: absolute;&#13;
    height: 25px;&#13;
    width: 25px;&#13;
    background: rgba(255, 255, 255, 0.15);&#13;
    border-radius: 5px;&#13;
    text-align: center;&#13;
    font-family: monospace;&#13;
    cursor: pointer;&#13;
    color: #FFF;&#13;
}&#13;
&#13;
.close-cross-ui-dialog {&#13;
    font-size: 15px;&#13;
    display: table-cell;&#13;
    vertical-align: middle;&#13;
}&#13;
</css><view>&lt;div class="content"&gt;&#13;
    &lt;div class="icon"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="content"&gt;&#13;
    &lt;div class="icon"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonZoom_Image_create() {&#13;
&#13;
    var presenter = function() {};&#13;
    var eventBus;&#13;
&#13;
    function setup_presenter() {&#13;
        presenter.$player = null;&#13;
        presenter.view = null;&#13;
        presenter.$view = null;&#13;
        presenter.$image = null;&#13;
        presenter.removeOpenedDialog = null;&#13;
        presenter.bigImageCreated = null;&#13;
        presenter.bigImageLoaded = null;&#13;
        presenter.createPopUp = null;&#13;
    };&#13;
&#13;
    setup_presenter();&#13;
&#13;
    function setSmallImage(url) {&#13;
        var $image = $('&lt;img class="small"&gt;');&#13;
        $image.attr("src", url);&#13;
        $image.attr("height", presenter.configuration.height);&#13;
        $image.attr("width", presenter.configuration.width);&#13;
        presenter.$view.find("div.content").append($image);&#13;
    }&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        IMAGE01: "Property Full Screen image and Page image cannot be empty"&#13;
    };&#13;
&#13;
    function returnErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    function returnCorrectObject(v) { return { isValid: true, value: v }; }&#13;
&#13;
    function parseImage(image) {&#13;
        if (ModelValidationUtils.isStringWithPrefixEmpty(image, "/file/")) {&#13;
            return returnErrorObject("IMAGE01");&#13;
        }&#13;
&#13;
        return returnCorrectObject(image);&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
&#13;
        var validatedBigImage = parseImage(model["Full Screen image"]);&#13;
        if (!validatedBigImage.isValid) {&#13;
            return returnErrorObject(validatedBigImage.errorCode);&#13;
        }&#13;
&#13;
        var validatedSmallImage = parseImage(model["Page image"]);&#13;
        if (!validatedSmallImage.isValid) {&#13;
            return returnErrorObject(validatedSmallImage.errorCode);&#13;
        }&#13;
&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
&#13;
        return {&#13;
            bigImage: validatedBigImage.value,&#13;
            smallImage: validatedSmallImage.value,&#13;
            ID: model.ID,&#13;
            width: parseInt(model["Width"], 10),&#13;
            height: parseInt(model["Height"], 10),&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            isValid: true&#13;
        }&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function(view, model, isPreview) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return false;&#13;
        }&#13;
&#13;
        setSmallImage(presenter.configuration.smallImage);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.eventType = MobileUtils.isMobileUserAgent(navigator.userAgent) ? "touchend" : "click";&#13;
            presenter.$view.find(".icon").on(presenter.eventType, presenter.createPopUp);&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', function onDOMNodeRemoved(ev) {&#13;
            if (ev.target === this) {&#13;
                presenter.destroy();&#13;
            }&#13;
        });&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.destroy = function () {&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.$view.find(".icon").off(presenter.eventType, presenter.createPopUp);&#13;
        if (presenter.$image !== null) {&#13;
            presenter.$image.off();&#13;
        }&#13;
        setup_presenter();&#13;
        setup_presenter = null;&#13;
&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        presenter.configuration.isVisible = isVisible;&#13;
    };&#13;
&#13;
    function calculateImageSize(image) {&#13;
        var $player;&#13;
        if(document.getElementById('_icplayer') != null){&#13;
            $player = $('#_icplayer');&#13;
        }else{&#13;
            $player = $('.ic_page_panel');&#13;
        }&#13;
&#13;
        var dialog = {};&#13;
        var x = image.width;&#13;
        var y = image.height;&#13;
        var xProportion = x / $player.width();&#13;
        var yProportion = y / $player.height();&#13;
&#13;
        if (xProportion &lt; 1 &amp;&amp; yProportion &lt; 1) {&#13;
            dialog.width = x;&#13;
            dialog.height = y;&#13;
        } else if (xProportion &gt; yProportion) {&#13;
            dialog.width = $player.width();&#13;
            dialog.height = y / xProportion;&#13;
        } else {&#13;
            dialog.height = $player.height();&#13;
            dialog.width = x / yProportion;&#13;
        }&#13;
&#13;
        return dialog;&#13;
    }&#13;
&#13;
    function sendEvent(value) {&#13;
        var eventData = {&#13;
            source: presenter.configuration.ID,&#13;
            value: value&#13;
        };&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    presenter.removeOpenedDialog = function (e) {&#13;
        e.preventDefault();&#13;
        e.stopPropagation();&#13;
&#13;
        $(".zoom-image-wraper").remove();&#13;
        $(".big").remove();&#13;
        sendEvent(0);&#13;
    };&#13;
&#13;
    presenter.bigImageCreated = function() {&#13;
        var $close = $('&lt;div class="close-button-ui-dialog"&gt;');&#13;
        $close.on('click', presenter.removeOpenedDialog);&#13;
&#13;
        $(this).parents(".ui-dialog").append($close);&#13;
&#13;
        var $closeCross= $('&lt;div class="close-cross-ui-dialog"&gt;');&#13;
        $closeCross.html('&amp;times;');&#13;
        $(this).parents(".ui-dialog").children(".close-button-ui-dialog").append($closeCross);&#13;
&#13;
        $(this).parents(".ui-dialog:first").find(".ui-dialog-titlebar").css("display", "none");&#13;
        $(this).parents(".ui-dialog").css("padding", 0);&#13;
        $(this).parents(".ui-dialog").css("border", 0);&#13;
        $(this).parents(".ui-dialog:first").find(".ui-dialog-content").css("padding", 0);&#13;
        sendEvent(1);&#13;
    };&#13;
&#13;
    presenter.bigImageLoaded = function(){&#13;
        if(document.getElementById('_icplayer') != null){&#13;
            presenter.$player  = document.getElementById('_icplayer');&#13;
        }else{&#13;
            presenter.$player  = document.getElementsByClassName('ic_page_panel');&#13;
        }&#13;
&#13;
        var dialogSize = calculateImageSize(this);&#13;
&#13;
        presenter.$image.appendTo(presenter.$view);&#13;
        presenter.$image.dialog({&#13;
            height: dialogSize.height,&#13;
            width: dialogSize.width,&#13;
            modal: true,&#13;
            resizable: false,&#13;
            draggable: false,&#13;
            show: {&#13;
                effect: "fade",&#13;
                duration: 1000&#13;
            },&#13;
            position: {&#13;
                my: "center",&#13;
                at: "center",&#13;
                of: presenter.$player&#13;
            },&#13;
            create: presenter.bigImageCreated,&#13;
            open: function() {&#13;
                $('.ui-widget-overlay').on(presenter.eventType, presenter.removeOpenedDialog);&#13;
            }&#13;
        });&#13;
        presenter.$image.parent().wrap("&lt;div class='zoom-image-wraper'&gt;&lt;/div&gt;");&#13;
        presenter.$image.on(presenter.eventType, presenter.removeOpenedDialog);&#13;
    };&#13;
&#13;
    presenter.createPopUp = function createPopUp(e) {&#13;
        e.preventDefault();&#13;
        e.stopPropagation();&#13;
        presenter.$image = $("&lt;img class='big' src='" + presenter.configuration.bigImage + "'&gt;");&#13;
        presenter.$image.on("load", presenter.bigImageLoaded);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.configuration.isVisibleByDefault ? presenter.show() : presenter.hide();&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.upgradeStateForVisibility = function (parsedState) {&#13;
        if (parsedState.isVisible == undefined) {&#13;
            parsedState.isVisible = true;&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.upgradeState = function(parsedState) {&#13;
        return presenter.upgradeStateForVisibility(parsedState);&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state),&#13;
            upgradedState = presenter.upgradeState(parsedState);&#13;
&#13;
        presenter.setVisibility(upgradedState.isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="crossword" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Crossword" nameLabel="crossword_property_crossword" type="text"/>
		<property name="Columns" nameLabel="crossword_property_columns" type="string"/>
		<property name="Rows" nameLabel="crossword_property_rows" type="string"/>
		<property name="Cell width" nameLabel="crossword_property_cell_width" type="string"/>
		<property name="Cell height" nameLabel="crossword_property_cell_height" type="string"/>
		<property name="Blank cells border color" nameLabel="crossword_property_blank_cells_border_color" type="string"/>
		<property name="Blank cells border style" nameLabel="crossword_property_blank_cells_border_style" type="{solid, dotted, dashed}"/>
		<property name="Blank cells border width" nameLabel="crossword_property_blank_cells_border_width" type="string"/>
		<property name="Letter cells border color" nameLabel="crossword_property_letter_cells_border_color" type="string"/>
		<property name="Letter cells border style" nameLabel="crossword_property_letter_cells_border_style" type="{solid, dotted, dashed}"/>
		<property name="Letter cells border width" nameLabel="crossword_property_letter_cells_border_width" type="string"/>
		<property name="Word numbers" nameLabel="crossword_property_word_numbers" type="{both, horizontal, vertical, none}"/>
		<property name="Marked column index" nameLabel="crossword_property_marked_column_index" type="string"/>
		<property name="Marked row index" nameLabel="crossword_property_marked_row_index" type="string"/>
        <property displayName="Block wrong answers" name="blockWrongAnswers" nameLabel="crossword_property_block_wrong_answers" type="boolean"/>
	</model>
<css>.crossword_container {&#13;
    position: absolute;&#13;
    top: 50%;&#13;
    left: 50%;&#13;
}&#13;
&#13;
.crossword_container .cell_container {&#13;
    float: left;&#13;
    position: relative;&#13;
}&#13;
&#13;
.crossword_container .cell {&#13;
    position: absolute;&#13;
    top: 0px;&#13;
    left: 0px;&#13;
    right: 0px;&#13;
    bottom: 0px;&#13;
}&#13;
&#13;
.crossword_container .cell_letter {&#13;
    background: white;&#13;
}&#13;
&#13;
.crossword_container .cell_valid {&#13;
    background: #00ff00;&#13;
}&#13;
&#13;
.crossword_container .cell_invalid {&#13;
    background: #aa0000;&#13;
}&#13;
&#13;
.crossword_container .cell_invalid input {&#13;
    color: #fff;&#13;
}&#13;
&#13;
.crossword_container .cell_container_blank {&#13;
    background: black;&#13;
}&#13;
&#13;
.crossword_container .cell_letter input {&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    text-align: center;&#13;
    background: transparent;&#13;
    border: none;&#13;
    -webkit-appearance: none;&#13;
    text-transform: uppercase;&#13;
}&#13;
&#13;
.crossword_container .cell .word_number {&#13;
    position: absolute;&#13;
    top: 2px;&#13;
    left: 2px;&#13;
    font-size: 6pt;&#13;
}&#13;
</css><view/><preview/><presenter>function Addoncrossword_create(){&#13;
    var presenter = function() {};&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.rowCount         = null;&#13;
    presenter.columnCount      = null;&#13;
    presenter.cellHeight       = null;&#13;
    presenter.cellWidth        = null;&#13;
    presenter.maxScore         = null;&#13;
    presenter.score            = null;&#13;
    presenter.id               = null;&#13;
    presenter.blankCellsBorderStyle  = "solid";&#13;
    presenter.blankCellsBorderWidth  = 0;&#13;
    presenter.blankCellsBorderColor  = "transparent";&#13;
    presenter.letterCellsBorderStyle = "solid";&#13;
    presenter.letterCellsBorderWidth = 0;&#13;
    presenter.letterCellsBorderColor = "transparent";&#13;
    presenter.wordNumbersHorizontal = false;&#13;
    presenter.wordNumbersVertical = false;&#13;
    presenter.disableAutomaticWordNumbering = false;&#13;
    presenter.markedColumnIndex = 0;&#13;
    presenter.markedRowIndex = 0;&#13;
    presenter.maxTabIndex = 0;&#13;
    presenter.SPECIAL_KEYS = {&#13;
        DELETE: 46,&#13;
        BACKSPACE: 8,&#13;
        TAB: 9,&#13;
        ESCAPE: 27,&#13;
        SHIFT: 16,&#13;
        CTRL: 17&#13;
    };&#13;
&#13;
    presenter.numberOfConstantLetters = 0;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        ROWS_NOT_SPECIFIED:                     "Amount of rows is not specified",&#13;
        COLUMNS_NOT_SPECIFIED:                  "Amount of columns is not specified",&#13;
        INVALID_MARKED_COLUMN_INDEX:            "Marked column index cannot be negative, use 0 to disable",&#13;
        INVALID_MARKED_ROW_INDEX:               "Marked row index cannot be negative, use 0 to disable",&#13;
        CELL_WIDTH_NOT_SPECIFIED:               "Cell width is not specified",&#13;
        CELL_HEIGHT_NOT_SPECIFIED:              "Cell height is not specified",&#13;
        INVALID_BLANK_CELLS_BORDER_WIDTH:       "Blank cells border width must be greater on equal to 0",&#13;
        INVALID_LETTER_CELLS_BORDER_WIDTH:      "Letter cells border width must be greater on equal to 0",&#13;
        INVALID_AMOUNT_OF_ROWS_IN_CROSSWORD:    "Amount of lines (that act as rows) in the specified Crossword is different that amount of rows you have specified in Properties",&#13;
        INVALID_AMOUNT_OF_COLUMNS_IN_CROSSWORD: "Amount of characters (that act as columns) in row %row% of specified Crossword is different that amount of columns you have specified in Properties",&#13;
        DOUBLED_EXCLAMATION_MARK:               "You cannot type 2 exclamation marks in a row",&#13;
        LAST_CHARACTER_EXCLAMATION_MARK:        "You cannot type exclamation mark at the end of line",&#13;
        EXCLAMATION_MARK_BEFORE_EMPTY_FIELD:    "You cannot type exclamation mark before empty field"&#13;
    };&#13;
&#13;
    presenter.VALIDATION_MODE = {&#13;
        COUNT_SCORE: 0,&#13;
        SHOW_ERRORS: 1&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function(message, substitutions) {&#13;
        var errorContainer;&#13;
        if(typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.prepareGrid = function(model) {&#13;
        presenter.tabIndexBase = ($("div.crossword_container").length * 5000) + 5000;&#13;
        presenter.maxScore = 0;&#13;
        presenter.crossword = [];&#13;
&#13;
        var rows = model['Crossword'].split("\n");&#13;
        for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
            var r = [];&#13;
            var numberOfExclamationMarks = rows[i].match(/!/g) == null ? 0 : rows[i].match(/!/g).length;&#13;
            presenter.numberOfConstantLetters += numberOfExclamationMarks;&#13;
            for(var j = 0; j &lt; presenter.columnCount + numberOfExclamationMarks; j++) {&#13;
                if (rows[i][j] === '!') {&#13;
                    j++;&#13;
                    r.push('!' + rows[i][j].toUpperCase());&#13;
                } else {&#13;
                    r.push(rows[i][j].toUpperCase());&#13;
                }&#13;
            }&#13;
&#13;
            presenter.crossword.push(r);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isHorizontalWordBegin = function(i, j) {&#13;
        if(!presenter.wordNumbersHorizontal)&#13;
            return false;&#13;
&#13;
        return (&#13;
            // Skip empty cells&#13;
            presenter.crossword[i][j] != ' ' &amp;&amp;&#13;
&#13;
                // We don't have a letter on the left&#13;
                (j === 0 ||  presenter.crossword[i][j-1] == ' ') &amp;&amp;&#13;
&#13;
                // We do have a letter on the right&#13;
                (presenter.columnCount &gt; j+1 &amp;&amp; presenter.crossword[i][j+1] != ' '));&#13;
    };&#13;
&#13;
    presenter.isVerticalWordBegin = function(i, j) {&#13;
        if(!presenter.wordNumbersVertical)&#13;
            return false;&#13;
&#13;
        return (&#13;
            // Skip empty cells&#13;
            presenter.crossword[i][j] != ' ' &amp;&amp;&#13;
&#13;
                // We don't have a letter above&#13;
                (i === 0 ||  presenter.crossword[i-1][j] == ' ') &amp;&amp;&#13;
&#13;
                // We do have a letter below&#13;
                (presenter.rowCount &gt; i+1 &amp;&amp; presenter.crossword[i+1][j] != ' '));&#13;
    };&#13;
&#13;
    presenter.getPosition = function($elem) {&#13;
        function getPositionFrom(classes, dim) {&#13;
            return classes.reduce(function(res, currentElem) {&#13;
                return res === null ? currentElem.match(new RegExp(dim + "(\\d+)")) : res;&#13;
            }, null)[1];&#13;
        }&#13;
&#13;
        var classes = $elem.attr('class').split(' ');&#13;
&#13;
        return {&#13;
            x: parseInt(getPositionFrom(classes, 'cell_column_'), 10),&#13;
            y: parseInt(getPositionFrom(classes, 'cell_row_'), 10)&#13;
        }&#13;
    };&#13;
&#13;
    var dictValues = function(dict) {&#13;
        var values = [];&#13;
        var keys = Object.keys(dict);&#13;
        keys.filter(function(key){&#13;
            values.push(dict[key])&#13;
        });&#13;
        return values;&#13;
    };&#13;
&#13;
    presenter.SPECIAL_KEYS_CODES = dictValues(presenter.SPECIAL_KEYS);&#13;
&#13;
    var validateSpecialKey = function(event) {&#13;
        // Allow: backspace, delete, tab, shift and escape&#13;
        if (presenter.SPECIAL_KEYS_CODES.indexOf(event.keyCode) &gt; -1 ||&#13;
            // Allow:  dot&#13;
            (event.keyCode == 190) ||&#13;
            // Allow: Ctrl+A&#13;
            (event.keyCode == 65 &amp;&amp; event.ctrlKey === true) ||&#13;
            // Allow: home, end, left, right&#13;
            (event.keyCode &gt;= 35 &amp;&amp; event.keyCode &lt;= 39)) {&#13;
            // let it happen, don't do anything&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.onCellInputKeyUp = function(event) {&#13;
        if (validateSpecialKey(event)) {&#13;
            return&#13;
        }&#13;
&#13;
        var target = event.target;&#13;
        var $target = $(target);&#13;
&#13;
        target.value = target.value.toUpperCase();&#13;
&#13;
        if ($target.val()) {&#13;
            var next_tab_index = target.tabIndex +1;&#13;
            if (presenter.blockWrongAnswers) {&#13;
                var usersLetter = target.value;&#13;
                var pos = presenter.getPosition($target.parent(''));&#13;
                var correctLetter = presenter.crossword[pos.y][pos.x][0];&#13;
                if (usersLetter !== correctLetter) {&#13;
                    presenter.sendScoreEvent(pos, usersLetter, false);&#13;
                    target.value = '';&#13;
                    return;&#13;
                }&#13;
            }&#13;
&#13;
            if (next_tab_index &lt; presenter.maxTabIndex) {&#13;
                presenter.$view.find('[tabindex=' + next_tab_index + ']').focus();&#13;
            } else {&#13;
                $target.blur();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onCellInputKeyDown = function(event) {&#13;
        if (event.keyCode == presenter.SPECIAL_KEYS.BACKSPACE) {&#13;
            var $target = $(event.target);&#13;
            if (!$target.val()) {&#13;
                var previous_tab_index = event.target.tabIndex - 1;&#13;
                if (previous_tab_index &gt;= presenter.tabIndexBase) {&#13;
                    var previous_element = presenter.$view.find('[tabindex=' + previous_tab_index + ']');&#13;
                    previous_element.focus();&#13;
                    previous_element.val('');&#13;
                    return;&#13;
                }&#13;
            }&#13;
        }&#13;
        if (validateSpecialKey(event)) {&#13;
            return&#13;
        }&#13;
&#13;
        // clear previous value&#13;
        var $target = $(event.target);&#13;
        if ($target.val()) {&#13;
            $target.val("");&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.onCellInputFocus = function(event) {&#13;
        event.target.select();&#13;
        var length = $(event.target).val().length;&#13;
        setCaretPosition(event.target, length + 1);&#13;
        if(length &gt; 1) {&#13;
            $(event.target).val($(event.target).val().substring(1, 2));&#13;
        }&#13;
        $(event.target).val($(event.target).val().toUpperCase());&#13;
    };&#13;
 &#13;
    presenter.onCellInputMouseUp = function(event) {&#13;
        event.preventDefault();&#13;
    };&#13;
&#13;
    presenter.onCellInputFocusOut = function(event) {&#13;
        var usersLetter = event.target.value;&#13;
        var pos = presenter.getPosition($(event.target).parent(''));&#13;
        var correctLetter = presenter.crossword[pos.y][pos.x][0];&#13;
        var isOk = usersLetter === correctLetter;&#13;
        presenter.sendScoreEvent(pos, usersLetter, isOk);&#13;
        var score = isOk ? 1 : 0;&#13;
        if(score == 0 &amp;&amp; presenter.blockWrongAnswers){&#13;
            event.target.value = "";&#13;
        }&#13;
        if (isOk) {&#13;
            var result = presenter.validateWord(pos);&#13;
            if (result.valid) {&#13;
                presenter.sendCorrectWordEvent(result.word, result.item);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function setCaretPosition(elem, caretPos) {&#13;
        var range;&#13;
&#13;
        if (elem.createTextRange) {&#13;
            range = elem.createTextRange();&#13;
            range.move('character', caretPos);&#13;
            range.select();&#13;
        } else {&#13;
            elem.focus();&#13;
            if (elem.selectionStart !== undefined) {&#13;
                elem.setSelectionRange(caretPos, caretPos);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createGrid = function() {&#13;
        var wordNumberCounter = 1;&#13;
&#13;
        var gridContainer = $('&lt;div class="crossword_container"&gt;&lt;/div&gt;');&#13;
        gridContainer&#13;
            .css({ width:      presenter.columnCount * presenter.cellWidth + 'px',&#13;
                height:     presenter.rowCount * presenter.cellHeight + 'px',&#13;
                marginLeft: -1 * Math.round(presenter.columnCount * presenter.cellWidth / 2) + 'px',&#13;
                marginTop:  -1 * Math.round(presenter.rowCount * presenter.cellHeight / 2) + 'px' });&#13;
&#13;
        var tabIndexOffset = 0;&#13;
        for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
            for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                var cellContainer = $('&lt;div class="cell_container"&gt;&lt;/div&gt;');&#13;
                cellContainer.css({ width:  presenter.cellWidth + 'px',&#13;
                    height: presenter.cellHeight + 'px' });&#13;
&#13;
                var cell = $('&lt;div class="cell"&gt;&lt;/div&gt;')&#13;
                    .addClass('cell_' + i + 'x' + j)&#13;
                    .addClass('cell_row_' + i)&#13;
                    .addClass('cell_column_' + j);&#13;
&#13;
                if(presenter.markedRowIndex &gt; 0 &amp;&amp; presenter.markedRowIndex == i+1) {&#13;
                    cell.addClass('cell_row_marked');&#13;
                }&#13;
&#13;
                if(presenter.markedColumnIndex &gt; 0 &amp;&amp; presenter.markedColumnIndex == j+1) {&#13;
                    cell.addClass('cell_column_marked');&#13;
                }&#13;
&#13;
                cellContainer.append(cell);&#13;
&#13;
                if(presenter.crossword[i][j] == ' ') {&#13;
                    cell.addClass('cell_blank');&#13;
                    cellContainer.addClass('cell_container_blank');&#13;
                } else {&#13;
                    cell.addClass('cell_letter');&#13;
                    cellContainer.addClass('cell_container_letter');&#13;
&#13;
                    var input = $('&lt;input type="text" maxlength="1" size="1"/&gt;');&#13;
&#13;
                    if (presenter.crossword[i][j][0] === '!') {&#13;
                        input&#13;
                            .val(presenter.crossword[i][j][1])&#13;
                            .prop('disabled', true);&#13;
&#13;
                        cell.addClass("cell_constant_letter");&#13;
                        cell.addClass("");&#13;
                    } else {&#13;
                        input&#13;
                            .attr('tabIndex', presenter.tabIndexBase + tabIndexOffset++)&#13;
                            .keyup(presenter.onCellInputKeyUp)&#13;
                            .keydown(presenter.onCellInputKeyDown)&#13;
                            .focus(presenter.onCellInputFocus)&#13;
                            .mouseup(presenter.onCellInputMouseUp)&#13;
                            .focusout(presenter.onCellInputFocusOut)&#13;
                            .click(function(e) { e.stopPropagation(); });&#13;
                    }&#13;
&#13;
                    if(presenter.preview) {&#13;
                        input.attr({&#13;
                            value: presenter.crossword[i][j].toUpperCase(),&#13;
                            disabled: true&#13;
                        });&#13;
                    }&#13;
&#13;
                    cell.append(input);&#13;
&#13;
                    var horizontalWordBegin = presenter.isHorizontalWordBegin(i, j);&#13;
                    var verticalWordBegin = presenter.isVerticalWordBegin(i, j);&#13;
&#13;
                    if (horizontalWordBegin) presenter.maxScore++;&#13;
                    if (verticalWordBegin) presenter.maxScore++;&#13;
&#13;
                    if(horizontalWordBegin || verticalWordBegin) {&#13;
                        cell.addClass('cell_word_begin');&#13;
&#13;
                        if(horizontalWordBegin)&#13;
                            cell.addClass('cell_word_begin_horizontal');&#13;
&#13;
                        if(verticalWordBegin)&#13;
                            cell.addClass('cell_word_begin_vertical');&#13;
&#13;
                        if(!presenter.disableAutomaticWordNumbering) {&#13;
                            var wordNumber = $('&lt;div class="word_number"&gt;&lt;/div&gt;').html(wordNumberCounter++);&#13;
&#13;
                            cell.append(wordNumber);&#13;
                        }&#13;
                    }&#13;
                }&#13;
&#13;
                presenter.maxTabIndex = presenter.tabIndexBase + tabIndexOffset;&#13;
&#13;
                // Cell borders&#13;
                var borderStyle;&#13;
                var borderWidth;&#13;
                var borderColor;&#13;
&#13;
                if(presenter.crossword[i][j] != ' ') {&#13;
                    borderStyle = presenter.letterCellsBorderStyle;&#13;
                    borderWidth = presenter.letterCellsBorderWidth;&#13;
                    borderColor = presenter.letterCellsBorderColor;&#13;
&#13;
                } else {&#13;
                    borderStyle = presenter.blankCellsBorderStyle;&#13;
                    borderWidth = presenter.blankCellsBorderWidth;&#13;
                    borderColor = presenter.blankCellsBorderColor;&#13;
                }&#13;
&#13;
                if(i === 0 || presenter.crossword[i-1][j] == ' ') { // Outer top border&#13;
                    cell.css({ borderTopStyle: borderStyle,&#13;
                        borderTopWidth: (borderWidth * 2) + 'px',&#13;
                        borderTopColor: borderColor,&#13;
                        top:            (borderWidth * -1) + 'px' });&#13;
                } else { // Inner top border&#13;
                    cell.css({ borderTopStyle: borderStyle,&#13;
                        borderTopWidth: borderWidth + 'px',&#13;
                        borderTopColor: borderColor });&#13;
                }&#13;
&#13;
                if(i === presenter.rowCount - 1 || presenter.crossword[i+1][j] == ' ') { // Outer bottom border&#13;
                    cell.css({ borderBottomStyle: borderStyle,&#13;
                        borderBottomWidth: (borderWidth * 2) + 'px',&#13;
                        borderBottomColor: borderColor,&#13;
                        bottom:            (borderWidth * -1) + 'px' });&#13;
                } else { // Inner bottom border&#13;
                    cell.css({ borderBottomStyle: borderStyle,&#13;
                        borderBottomWidth: borderWidth + 'px',&#13;
                        borderBottomColor: borderColor });&#13;
                }&#13;
&#13;
                if(j === 0 || presenter.crossword[i][j-1] == ' ') { // Outer left border&#13;
                    cell.css({ borderLeftStyle: borderStyle,&#13;
                        borderLeftWidth: (borderWidth * 2) + 'px',&#13;
                        borderLeftColor: borderColor,&#13;
                        left:            (borderWidth * -1) + 'px' });&#13;
                } else { // Inner left border&#13;
                    cell.css({ borderLeftStyle: borderStyle,&#13;
                        borderLeftWidth: borderWidth + 'px',&#13;
                        borderLeftColor: borderColor });&#13;
                }&#13;
&#13;
                if(j === presenter.columnCount - 1 || presenter.crossword[i][j+1] == ' ') { // Outer right border&#13;
                    cell.css({ borderRightStyle: borderStyle,&#13;
                        borderRightWidth: (borderWidth * 2) + 'px',&#13;
                        borderRightColor: borderColor,&#13;
                        right:            (borderWidth * -1) + 'px' });&#13;
                } else { // Inner right border&#13;
                    cell.css({ borderRightStyle: borderStyle,&#13;
                        borderRightWidth: borderWidth + 'px',&#13;
                        borderRightColor: borderColor });&#13;
                }&#13;
&#13;
                // Additional classes&#13;
                if(j == 0) {&#13;
                    cell.addClass('cell_first_in_row');&#13;
                } else if(j == presenter.columnCount - 1) {&#13;
                    cell.addClass('cell_last_in_row');&#13;
                }&#13;
&#13;
                if(i == 0) {&#13;
                    cell.addClass('cell_first_in_column');&#13;
                } else if(i == presenter.rowCount - 1) {&#13;
                    cell.addClass('cell_last_in_column');&#13;
                }&#13;
&#13;
                gridContainer.append(cellContainer);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.$view.append(gridContainer);&#13;
    };&#13;
&#13;
    function returnErrorMessage(errorMessage, errorMessageSubstitutions) {&#13;
        return {&#13;
            isError: true,&#13;
            errorMessage: errorMessage,&#13;
            errorMessageSubstitutions: errorMessageSubstitutions&#13;
        }&#13;
    }&#13;
&#13;
    presenter.readConfiguration = function(model) {&#13;
        if(typeof(model['Blank cells border color']) != "undefined" &amp;&amp; model['Blank cells border color'] !== "")&#13;
            presenter.blankCellsBorderColor = model['Blank cells border color'];&#13;
&#13;
        if(typeof(model['Blank cells border width']) != "undefined" &amp;&amp; model['Blank cells border width'] !== "")&#13;
            presenter.blankCellsBorderWidth = parseInt(model['Blank cells border width']);&#13;
&#13;
        if(typeof(model['Blank cells border style']) != "undefined" &amp;&amp; model['Blank cells border style'] !== "")&#13;
            presenter.blankCellsBorderStyle = model['Blank cells border style'];&#13;
&#13;
        if(typeof(model['Letter cells border color']) != "undefined" &amp;&amp; model['Letter cells border color'] !== "")&#13;
            presenter.letterCellsBorderColor = model['Letter cells border color'];&#13;
&#13;
        if(typeof(model['Letter cells border width']) != "undefined" &amp;&amp; model['Letter cells border width'] !== "")&#13;
            presenter.letterCellsBorderWidth = parseInt(model['Letter cells border width']);&#13;
&#13;
        if(typeof(model['Letter cells border style']) != "undefined" &amp;&amp; model['Letter cells border style'] !== "")&#13;
            presenter.letterCellsBorderStyle = model['Letter cells border style'];&#13;
&#13;
        if(typeof(model['Word numbers']) != "undefined") {&#13;
            if(model['Word numbers'] == "horizontal" || model['Word numbers'] == "both" || model['Word numbers'] === "")&#13;
                presenter.wordNumbersHorizontal = true;&#13;
&#13;
            if(model['Word numbers'] == "vertical" || model['Word numbers'] == "both" || model['Word numbers'] === "")&#13;
                presenter.wordNumbersVertical = true;&#13;
        }&#13;
&#13;
        if(typeof(model['Marked column index']) != "undefined" &amp;&amp; model['Marked column index'] !== "") {&#13;
            presenter.markedColumnIndex = parseInt(model['Marked column index']);&#13;
            if(presenter.markedColumnIndex &lt; 0) {&#13;
                return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_MARKED_COLUMN_INDEX)&#13;
            }&#13;
        }&#13;
&#13;
        if(typeof(model['Marked row index']) != "undefined" &amp;&amp; model['Marked row index'] !== "") {&#13;
            presenter.markedRowIndex = parseInt(model['Marked row index']);&#13;
            if(presenter.markedRowIndex &lt; 0) {&#13;
                return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_MARKED_ROW_INDEX);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.disableAutomaticWordNumbering = model['Disable automatic word numberin'] == 'True';&#13;
&#13;
        if(presenter.blankCellsBorderWidth &lt; 0) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_BLANK_CELLS_BORDER_WIDTH);&#13;
        }&#13;
&#13;
        if(presenter.letterCellsBorderWidth &lt; 0) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_LETTER_CELLS_BORDER_WIDTH);&#13;
        }&#13;
&#13;
        if(parseInt(model['Columns']) &lt;= 0 || isNaN(parseInt(model['Columns'])) ) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.COLUMNS_NOT_SPECIFIED);&#13;
        }&#13;
&#13;
        if(parseInt(model['Rows']) &lt;= 0 || isNaN(parseInt(model['Rows']))) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.ROWS_NOT_SPECIFIED);&#13;
        }&#13;
&#13;
        if(parseInt(model['Cell width']) &lt;= 0 || isNaN(parseInt(model['Cell width'])) ) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.CELL_WIDTH_NOT_SPECIFIED);&#13;
        }&#13;
&#13;
        if(parseInt(model['Cell height']) &lt;= 0 || isNaN(parseInt(model['Cell height']))) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.CELL_HEIGHT_NOT_SPECIFIED);&#13;
        }&#13;
&#13;
        presenter.rowCount        = parseInt(model['Rows']);&#13;
        presenter.columnCount     = parseInt(model['Columns']);&#13;
        presenter.cellWidth       = parseInt(model['Cell width']);&#13;
        presenter.cellHeight      = parseInt(model['Cell height']);&#13;
&#13;
        var rows = model['Crossword'].split("\n");&#13;
        if(rows.length != presenter.rowCount) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_AMOUNT_OF_ROWS_IN_CROSSWORD);&#13;
        }&#13;
&#13;
        for(var i = 0; i &lt; rows.length; i++) {&#13;
            if(rows[i].replace(/!/g, "").length != presenter.columnCount) {&#13;
                return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_AMOUNT_OF_COLUMNS_IN_CROSSWORD, { row : i + 1 });&#13;
            }&#13;
&#13;
            var line = rows[i];&#13;
            var previous = line[0];&#13;
&#13;
            if (line.slice(-1) === '!') {&#13;
                return returnErrorMessage(presenter.ERROR_MESSAGES.LAST_CHARACTER_EXCLAMATION_MARK);&#13;
            }&#13;
&#13;
            for (var j=1; j&lt;line.length; j++) {&#13;
                if (previous === '!') {&#13;
                    switch (line[j]) {&#13;
                        case '!': return returnErrorMessage(presenter.ERROR_MESSAGES.DOUBLED_EXCLAMATION_MARK); break;&#13;
                        case ' ': return returnErrorMessage(presenter.ERROR_MESSAGES.EXCLAMATION_MARK_BEFORE_EMPTY_FIELD); break;&#13;
                        default: break;&#13;
                    }&#13;
                }&#13;
                previous = line[j];&#13;
            }&#13;
        }&#13;
&#13;
        presenter.blockWrongAnswers = presenter.isBlockWrongAnswers(model);&#13;
&#13;
        return {&#13;
            isError: false&#13;
        };&#13;
    };&#13;
&#13;
    presenter.isBlockWrongAnswers = function (model) {&#13;
        return ModelValidationUtils.validateBoolean(model.blockWrongAnswers);&#13;
    };&#13;
&#13;
    presenter.initializeLogic = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.ID = model.ID;&#13;
&#13;
        var configuration = presenter.readConfiguration(model);&#13;
        if(configuration.isError) {&#13;
            presenter.showErrorMessage(configuration.errorMessage, configuration.errorMessageSubstitutions);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view.find(".cell").live("blur", presenter.cellBlurEventHandler);&#13;
        presenter.prepareGrid(model);&#13;
        presenter.createGrid();&#13;
    };&#13;
&#13;
    presenter.validate = function(mode) {&#13;
        var wordValid, k, l, score, markedCell;&#13;
        var filled = false;&#13;
        &#13;
        if (presenter.isShowAnswersActive &amp;&amp; mode == presenter.VALIDATION_MODE.SHOW_ERRORS) {&#13;
            presenter.hideAnswers();&#13;
            for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
                for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                    if(presenter.$view.find('.cell_' + i + 'x' + j + ' input').val() != '' &amp;&amp; typeof(presenter.$view.find('.cell_' + i + 'x' + j + ' input').val()) !== "undefined" &amp;&amp; presenter.crossword[i][j][0] !== '!') {&#13;
                        filled = true;&#13;
                    }&#13;
                 }&#13;
            }&#13;
            if (!filled) {&#13;
                return;&#13;
            }&#13;
        }&#13;
&#13;
        if(mode == presenter.VALIDATION_MODE.SHOW_ERRORS) {&#13;
            presenter.$view.find(".cell_letter input").attr('disabled', true);&#13;
        } else if(mode == presenter.VALIDATION_MODE.COUNT_SCORE) {&#13;
            score = 0;&#13;
        }&#13;
&#13;
        for(i = 0; i &lt; presenter.rowCount; i++) {&#13;
            for(j = 0; j &lt; presenter.columnCount; j++) {&#13;
                if(presenter.isHorizontalWordBegin(i, j)) {&#13;
                    wordValid = true;&#13;
&#13;
                    for(k = j; k &lt; presenter.columnCount; k++) {&#13;
                        if(presenter.crossword[i][k] == ' ') {&#13;
                            break;&#13;
                        }&#13;
&#13;
                        if(presenter.crossword[i][k] != presenter.$view.find('.cell_' + i + 'x' + k + " input").attr('value').toUpperCase() &amp;&amp; presenter.crossword[i][k][0] !== '!') {&#13;
                            wordValid = false;&#13;
                        }&#13;
                    }&#13;
&#13;
                    if(mode == presenter.VALIDATION_MODE.COUNT_SCORE &amp;&amp; wordValid) {&#13;
                        score++;&#13;
                    }&#13;
&#13;
                    if(mode == presenter.VALIDATION_MODE.SHOW_ERRORS) {&#13;
                        for(l = j; l &lt; k; l++) {&#13;
                            markedCell = presenter.$view.find('.cell_' + i + 'x' + l);&#13;
                            if(!markedCell.hasClass('cell_valid'))&#13;
                                markedCell.addClass('cell_' + (wordValid ? 'valid' : 'invalid'));&#13;
&#13;
                            if(wordValid &amp;&amp; markedCell.hasClass('cell_invalid'))&#13;
                                markedCell.removeClass('cell_invalid');&#13;
                        }&#13;
                    }&#13;
                }&#13;
&#13;
                if(presenter.isVerticalWordBegin(i, j)) {&#13;
                    wordValid = true;&#13;
&#13;
                    for(k = i; k &lt; presenter.rowCount; k++) {&#13;
                        if(presenter.crossword[k][j] == ' ') {&#13;
                            break;&#13;
                        }&#13;
&#13;
                        if(presenter.crossword[k][j] != presenter.$view.find('.cell_' + k + 'x' + j + " input").attr('value').toUpperCase() &amp;&amp; presenter.crossword[k][j][0] !== '!') {&#13;
                            wordValid = false;&#13;
                        }&#13;
                    }&#13;
&#13;
                    if(mode == presenter.VALIDATION_MODE.COUNT_SCORE &amp;&amp; wordValid) {&#13;
                        score++;&#13;
                    }&#13;
&#13;
                    if(mode == presenter.VALIDATION_MODE.SHOW_ERRORS) {&#13;
                        for(l = i; l &lt; k; l++) {&#13;
                            markedCell = presenter.$view.find('.cell_' + l + 'x' + j);&#13;
                            if(!markedCell.hasClass('cell_valid'))&#13;
                                markedCell.addClass('cell_' + (wordValid ? 'valid' : 'invalid'));&#13;
&#13;
                            if(wordValid &amp;&amp; markedCell.hasClass('cell_invalid'))&#13;
                                markedCell.removeClass('cell_invalid');&#13;
&#13;
                        }&#13;
                    }&#13;
                }&#13;
&#13;
            }&#13;
        }&#13;
&#13;
        if(mode == presenter.VALIDATION_MODE.COUNT_SCORE) {&#13;
            return score;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (!presenter.isAttempted()) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.validate(presenter.VALIDATION_MODE.SHOW_ERRORS);&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.$view.find(".cell_letter:not(.cell_constant_letter) input").attr('disabled', false);&#13;
        presenter.$view.find(".cell_valid").removeClass("cell_valid");&#13;
        presenter.$view.find(".cell_invalid").removeClass("cell_invalid");&#13;
    };&#13;
&#13;
    presenter.cellBlurEventHandler = function () {&#13;
        if (presenter.isAllOK()) {&#13;
            presenter.sendAllOKEvent();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.preview = false;&#13;
        eventBus = playerController.getEventBus();&#13;
        presenter.initializeLogic(view, model);&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.preview = true;&#13;
        presenter.initializeLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
            for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                if(presenter.crossword[i][j][0] !== '!') {&#13;
                    presenter.$view.find('.cell_' + i + 'x' + j + ' input').val('');&#13;
                }&#13;
                if(typeof(presenter.userAnswers) !== "undefined") {&#13;
                    presenter.userAnswers[i][j] = '';&#13;
                }&#13;
             }&#13;
        }&#13;
        presenter.setWorkMode();&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        var countedConstantLetters = 0;&#13;
&#13;
        jQuery.each(presenter.$view.find('.cell input'), function() {&#13;
            if (!ModelValidationUtils.isStringEmpty($(this).val())) countedConstantLetters++;&#13;
        });&#13;
&#13;
        return presenter.numberOfConstantLetters &lt; countedConstantLetters;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var score = presenter.validate(presenter.VALIDATION_MODE.COUNT_SCORE);&#13;
&#13;
        return presenter.isAttempted() ? score : 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return presenter.maxScore;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var score = presenter.validate(presenter.VALIDATION_MODE.COUNT_SCORE),&#13;
            errorCount = presenter.getMaxScore() - score;&#13;
&#13;
        return presenter.isAttempted() ? errorCount : 0;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        var s = [];&#13;
        var cell;&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
            for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                cell = presenter.$view.find('.cell_' + i + 'x' + j + ' input').attr('value');&#13;
                if(typeof(cell) == "string")&#13;
                    cell = cell.replace("\"", "\\\"");&#13;
&#13;
                s.push(cell);&#13;
            }&#13;
        }&#13;
&#13;
        return "[\"" + s.join("\",\"") + "\"]";&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var s = $.parseJSON(state.toString());&#13;
        var counter = 0;&#13;
&#13;
        for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
            for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                presenter.$view.find('.cell_' + i + 'x' + j + ' input').attr('value', s[counter]);&#13;
                counter++;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.isAllOK = function() {&#13;
        if (presenter.wordNumbersHorizontal || presenter.wordNumbersVertical) {&#13;
            return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
        }else{&#13;
            return false;&#13;
        }&#13;
    };&#13;
&#13;
    function getEventObject(it, val, sc) {&#13;
        return {&#13;
            'source': presenter.ID,&#13;
            'item': '' + it,&#13;
            'value': '' + val,&#13;
            'score': '' + sc&#13;
        };&#13;
    }&#13;
&#13;
    presenter.sendAllOKEvent = function () {&#13;
        eventBus.sendEvent('ValueChanged', getEventObject('all', '', ''));&#13;
    };&#13;
&#13;
    presenter.sendCorrectWordEvent = function sendCorrectWordEvent (word, item) {&#13;
        eventBus.sendEvent('CorrectWord', getEventObject(item, word, ''));&#13;
    };&#13;
&#13;
    presenter.sendScoreEvent = function(pos, value, isOk) {&#13;
        var item = '[row][col]'.replace('col', pos.x + 1).replace('row', pos.y + 1);&#13;
        var score = isOk ? '1' : '0';&#13;
        eventBus.sendEvent('ValueChanged', getEventObject(item, value, score));&#13;
    };&#13;
&#13;
    presenter.validateWord = function validateWord(pos) {&#13;
        var max_x = pos.x;&#13;
        var max_y = pos.y;&#13;
        var i, k, result = {&#13;
            word: '',&#13;
            item: 0,&#13;
            valid : false&#13;
        };&#13;
&#13;
        if (presenter.wordNumbersHorizontal) {&#13;
            for (i = 0; i &lt;= max_x; i++) {&#13;
                if (!presenter.isHorizontalWordBegin(max_y, i)) {&#13;
                    continue;&#13;
                }&#13;
                for (k = i; k &lt; presenter.columnCount; k++) {&#13;
                    if(presenter.crossword[max_y][k] == ' ') {&#13;
                        break;&#13;
                    }&#13;
                    if(presenter.crossword[max_y][k] != presenter.$view.find('.cell_' + max_y + 'x' + k + " input").attr('value').toUpperCase() &amp;&amp; presenter.crossword[max_y][k][0] !== '!') {&#13;
                        result.word = '';&#13;
                        break;&#13;
                    }&#13;
                    result.word += presenter.crossword[max_y][k];&#13;
                }&#13;
                result.item = presenter.$view.find('.cell_' + max_y + 'x' + i +' .word_number').text();&#13;
                break;&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.wordNumbersVertical) {&#13;
            for (i = 0; i &lt;= max_y; i++) {&#13;
                if (!presenter.isVerticalWordBegin(i, max_x)) {&#13;
                    continue;&#13;
                }&#13;
                for (k = i; k &lt; presenter.rowCount; k++) {&#13;
                    if(presenter.crossword[k][max_x] == ' ') {&#13;
                        break;&#13;
                    }&#13;
                    if(presenter.crossword[k][max_x] != presenter.$view.find('.cell_' + k + 'x' + max_x + " input").attr('value').toUpperCase() &amp;&amp; presenter.crossword[k][max_x][0] !== '!') {&#13;
                        result.word = '';&#13;
                        break;&#13;
                    }&#13;
                    result.word += presenter.crossword[k][max_x];&#13;
                }&#13;
                result.item = presenter.$view.find('.cell_' + i + 'x' + max_x +' .word_number').text();&#13;
                break;&#13;
            }&#13;
        }&#13;
&#13;
        if (result.word != '' ) {&#13;
            result.valid = true;&#13;
        }&#13;
&#13;
        return result&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.wordNumbersHorizontal || presenter.wordNumbersVertical) {&#13;
            if (presenter.isShowAnswersActive) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.setWorkMode();&#13;
            presenter.userAnswers = new Array(presenter.rowCount);&#13;
            presenter.$view.find(".cell_letter input:enabled").attr('disabled', true);&#13;
            presenter.$view.find(".cell_letter input").addClass('crossword_cell_show-answers');&#13;
&#13;
            for (var i = 0; i &lt; presenter.rowCount; i++) {&#13;
                presenter.userAnswers[i] = new Array(presenter.columnCount);&#13;
                for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                    presenter.userAnswers[i][j] = presenter.$view.find('.cell_' + i + 'x' + j + ' input').val();&#13;
                    presenter.$view.find('.cell_' + i + 'x' + j + ' input').val(presenter.crossword[i][j].replace(/[!]/g,""));&#13;
                 }&#13;
            }&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.wordNumbersHorizontal || presenter.wordNumbersVertical) {&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find(".cell_letter input").attr('disabled', false);&#13;
            presenter.$view.find(".cell_letter input").removeClass('crossword_cell_show-answers');&#13;
            for (var i = 0; i &lt; presenter.rowCount; i++) {&#13;
                for (var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                    presenter.$view.find('.cell_' + i + 'x' + j + ' input').val(presenter.userAnswers[i][j]);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
    &#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="eKeyboard" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Work With" name="workWith" nameLabel="eKeyboard_property_work_with" type="text"/>
        <property displayName="Layout Type" name="layoutType" nameLabel="eKeyboard_property_layout_type" type="{Numeric, French (Special Characters), German (Special Characters), Italian (Special Characters), Spanish (Special Characters), Custom}"/>
        <property displayName="Custom Layout" name="customLayout" nameLabel="eKeyboard_property_custom_layout" type="text"/>
        <property displayName="Position My" name="positionMy" nameLabel="eKeyboard_property_position_my" type="string"/>
        <property displayName="Position At" name="positionAt" nameLabel="eKeyboard_property_position_at" type="string"/>
        <property displayName="Max Characters" name="maxCharacters" nameLabel="eKeyboard_property_max_characters" type="string"/>
        <property displayName="Don't Open On Focus" name="noOpenOnFocus" nameLabel="eKeyboard_property_no_open_on_focus" type="boolean"/>
        <property displayName="Lock Standard Keyboard Input" name="lockStandardKeyboardInput" nameLabel="eKeyboard_property_lock_standard_keyboard_input" type="boolean"/>
        <property displayName="Custom Display" name="customDisplay" nameLabel="eKeyboard_property_custom_display" type="text"/>
	</model>
<css>/* keyboard - jQuery UI Widget */&#13;
.ui-keyboard { padding: .3em; position: absolute; left: 0; top: 0; z-index: 16000; }&#13;
.ui-keyboard-has-focus { z-index: 16001; }&#13;
.ui-keyboard div { font-size: 1.1em; }&#13;
.ui-keyboard-button { height: 2em; width: 2em; min-width: 1em; margin: .1em; cursor: pointer; overflow: hidden; line-height: 2em; -moz-user-focus: ignore; }&#13;
.ui-keyboard-button span { padding: 0; margin: 0; white-space:nowrap; display: inline-block; }&#13;
.ui-keyboard-button-endrow { clear: left; }&#13;
.ui-keyboard-widekey { min-width: 4em; width: auto; }&#13;
.ui-keyboard-space { width: 15em; }&#13;
.ui-keyboard-space span, .ui-keyboard-empty span { font: 0/0 a; text-shadow: none; color: transparent; } /* see http://nicolasgallagher.com/another-css-image-replacement-technique/ */&#13;
.ui-keyboard-preview-wrapper { text-align: center; }&#13;
.ui-keyboard-preview { text-align: left; margin: 0 0 3px 0; display: inline; width: 99%;} /* width is calculated in IE, since 99% = 99% full browser width =( */&#13;
.ui-keyboard-keyset { text-align: center; white-space: nowrap; }&#13;
.ui-keyboard-input { text-align: left; }&#13;
.ui-keyboard-input-current { -moz-box-shadow: 1px 1px 10px #00f; -webkit-box-shadow: 1px 1px 10px #00f; box-shadow: 1px 1px 10px #00f; }&#13;
.ui-keyboard-placeholder { color: #888; }&#13;
.ui-keyboard-nokeyboard { color: #888; border-color: #888; } /* disabled or readonly inputs, or use input[disabled='disabled'] { color: #f00; } */&#13;
.ui-keyboard-button.disabled { opacity: 0.5; filter: alpha(opacity=50); } /* used by the acceptValid option to make the accept button appear faded */&#13;
.ui-keyboard-spacer { display: inline-block; width: 1px; height: 0; }&#13;
&#13;
/* combo key styling - toggles diacritics on/off */&#13;
.ui-keyboard-button.ui-keyboard-combo.ui-state-default { border-color: #ffaf0f; }&#13;
&#13;
/* (in)valid inputs */&#13;
button.ui-keyboard-accept.ui-keyboard-valid-input { border-color: #0c0; background: #080; color: #fff; }&#13;
button.ui-keyboard-accept.ui-keyboard-valid-input:hover { background: #0a0; }&#13;
button.ui-keyboard-accept.ui-keyboard-invalid-input { border-color: #c00; background: #800; color: #fff; }&#13;
button.ui-keyboard-accept.ui-keyboard-invalid-input:hover { background: #a00; }&#13;
&#13;
/*** jQuery Mobile definitions ***/&#13;
/* jQuery Mobile styles - need wider buttons because of font size and text-overflow:ellipsis */&#13;
.ui-bar .ui-keyboard-button { width: 3em; display: inline-block; }&#13;
.ui-bar .ui-keyboard-widekey { width: 5.5em; }&#13;
.ui-bar .ui-keyboard-space { width: 15em; }&#13;
.ui-bar .ui-keyboard-space span { visibility: hidden; } /* hides the ellipsis */&#13;
.ui-bar .ui-keyboard-keyset { line-height: 0.5em; }&#13;
.ui-bar input.ui-input-text, .ui-bar textarea.ui-input-text { width: 95%; }&#13;
&#13;
/* over-ride padding set by mobile ui theme - needed because the mobile script wraps button text with several more spans */&#13;
.ui-bar .ui-btn-inner { height: 2em; padding: 0.2em 0; margin: 0; }&#13;
.ui-bar .ui-btn { margin: 0; font-size: 13px; } /* mobile default size is 13px */&#13;
&#13;
/* Media Queries (optimized for jQuery UI themes; may be slightly off in jQuery Mobile themes) */&#13;
/* 240 x 320 (small phone)  */&#13;
@media all and (max-width: 319px) {&#13;
    .ui-keyboard div { font-size: 9px; }&#13;
    .ui-keyboard .ui-keyboard-input { font-size: 12px; }&#13;
    /* I don't own an iPhone so I have no idea how small this really is... is it even clickable with your finger? */&#13;
    .ui-bar .ui-btn { margin: 0; font-size: 9px; }&#13;
    .ui-bar .ui-keyboard-button { width: 1.8em; height: 2.5em; }&#13;
    .ui-bar .ui-keyboard-widekey { width: 4em; }&#13;
    .ui-bar .ui-keyboard-space { width: 8em; }&#13;
    .ui-bar .ui-btn-inner { height: 2.5em; padding: 0.3em 0; }&#13;
}&#13;
&#13;
/* 320 x 480 (iPhone)  */&#13;
@media all and (min-width: 320px) and (max-width: 479px) {&#13;
    .ui-keyboard div { font-size: 9px; }&#13;
    .ui-keyboard .ui-keyboard-input { font-size: 14px; }&#13;
    /* I don't own an iPhone so I have no idea how small this really is... is it even clickable with your finger? */&#13;
    .ui-bar .ui-btn { margin: 0; font-size: 11px; }&#13;
    .ui-bar .ui-keyboard-button { width: 1.8em; height: 3em; }&#13;
    .ui-bar .ui-keyboard-widekey { width: 4.5em; }&#13;
    .ui-bar .ui-keyboard-space { width: 10em; }&#13;
    .ui-bar .ui-btn-inner { height: 3em; padding: 0.7em 0; }&#13;
}&#13;
&#13;
/* 480 x 640 (small tablet) */&#13;
@media all and (min-width: 480px) and (max-width: 767px) {&#13;
    .ui-keyboard div { font-size: 13px; }&#13;
    .ui-keyboard .ui-keyboard-input { font-size: 14px; }&#13;
    .ui-bar .ui-btn { margin: 0; font-size: 10px; }&#13;
    .ui-bar .ui-keyboard-button { height: 2.5em; }&#13;
    .ui-bar .ui-btn-inner { height: 2.5em; padding: 0.5em 0; }&#13;
}&#13;
</css><view>&lt;div class="eKeyboard-wrapper"&gt;&#13;
    &lt;div class="eKeyboard-container"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="eKeyboard-wrapper"&gt;&#13;
    &lt;div class="eKeyboard-container"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddoneKeyboard_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.LAYOUT_TO_LANGUAGE_MAPPING = {&#13;
        'french (special characters)' : "{ \&#13;
            'default': ['\u00e0 \u00e2 \u00e7 \u00e8 \u00e9 \u00ea \u00ee \u00ef \u00f4 \u00f9 \u0153 \u00fb \u00e6 \u00eb {shift}'], \&#13;
            'shift': ['\u00c0 \u00c2 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00ce \u00cf \u00d4 \u00d9 \u00db \u00c6 \u0152 {shift}'] \&#13;
        }",&#13;
        'german (special characters)' : "{ \&#13;
            'default': ['\u00e4 \u00f6 \u00fc \u00df {shift}'], \&#13;
            'shift': ['\u00c4 \u00d6 \u00dc {empty} {shift}'] \&#13;
        }",&#13;
        'spanish (special characters)' : "{ \&#13;
            'default': ['\u00e1 \u00e9 \u00ed \u00f3 \u00fa \u00f1 \u00e7 \u00fc \u00a1 \u00bf \u00ba \u00aa {shift}'], \&#13;
            'shift': ['\u00c1 \u00c9 \u00cd \u00d3 \u00da \u00d1 \u00c7 \u00dc {empty} {empty} {empty} {empty} {shift}'] \&#13;
        }",&#13;
        'italian (special characters)' : "{ \&#13;
            'default': ['\u00e0 \u00e8 \u00e9 \u00ec \u00f2 \u00f9 {shift}'], \&#13;
            'shift': ['\u00c0 \u00c8 \u00c9 \u00cc \u00d2 \u00d9 {shift}'] \&#13;
        }"&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateType = function(rawType) {&#13;
        if (rawType == 'Numeric' || rawType.length == 0) {&#13;
            return 'num';&#13;
        }&#13;
&#13;
        return rawType.toLowerCase();&#13;
    };&#13;
&#13;
    presenter.validateMaxCharacters = function(rawMaxCharacters) {&#13;
        if (rawMaxCharacters.length == 0) {&#13;
            return {&#13;
                'isError' : false,&#13;
                'value' : false&#13;
            };&#13;
        }&#13;
&#13;
        if ( !(/\d+/.test(rawMaxCharacters)) ) {&#13;
            return {&#13;
                'isError' : true,&#13;
                'errorCode' : 'E04'&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'value' : parseInt(rawMaxCharacters, 10)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'E01' : 'The position is wrong. See documentation for more details.',&#13;
        'E02' : 'Module ID not found.',&#13;
        'E03' : 'The module you provided has no getView method implemented.',&#13;
        'E04' : 'Max Characters must be a digit or empty string (unlimited).'&#13;
    };&#13;
&#13;
    presenter.validatePosition = function(rawPosition, isMy) {&#13;
        if (rawPosition.length == 0) {&#13;
            return {&#13;
                isError: false,&#13;
                value: isMy ? 'left center' : 'right center'&#13;
            }&#13;
        }&#13;
&#13;
        var possibilitiesOnTheLeft = ['left', 'center', 'right'],&#13;
            possibilitiesOnTheRight = ['top', 'center', 'bottom'],&#13;
            splitted = rawPosition.split(' ');&#13;
&#13;
        if (splitted.length == 2&#13;
            &amp;&amp; possibilitiesOnTheLeft.indexOf(splitted[0]) &gt;= 0&#13;
            &amp;&amp; possibilitiesOnTheRight.indexOf(splitted[1]) &gt;= 0&#13;
            ) {&#13;
&#13;
            return {&#13;
                isError: false,&#13;
                value: rawPosition&#13;
            }&#13;
&#13;
        } else {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: 'E01'&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateOffsetData = function(positionMy, positionAt) {&#13;
        var splittedMy = positionMy.split(' '),&#13;
            splittedAt = positionAt.split(' ');&#13;
&#13;
        if (splittedMy[1] == 'bottom' &amp;&amp; splittedAt[1] == 'top') {&#13;
            return {&#13;
                orientation: 'horizontal',&#13;
                directionSign: '-',&#13;
                value: '0 -10'&#13;
            }&#13;
        }&#13;
&#13;
        if (splittedMy[0] == 'left' &amp;&amp; splittedAt[0] == 'right') {&#13;
            return {&#13;
                orientation: 'vertical',&#13;
                directionSign: '',&#13;
                value: '10 0'&#13;
            };&#13;
        }&#13;
&#13;
        if (splittedMy[1] == 'top' &amp;&amp; splittedAt[1] == 'bottom') {&#13;
            return {&#13;
                orientation: 'horizontal',&#13;
                directionSign: '',&#13;
                value : '0 10'&#13;
            };&#13;
        }&#13;
&#13;
        if (splittedMy[0] == 'right' &amp;&amp; splittedAt[0] == 'left') {&#13;
            return {&#13;
                orientation: 'vertical',&#13;
                directionSign: '-',&#13;
                value: '-10 0'&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            orientation: 'none',&#13;
            directionSign: '',&#13;
            value : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model, isPreview) {&#13;
        var workWithModules = Helpers.splitLines(model['workWith']),&#13;
            workWithViews = [],&#13;
            layoutType = presenter.validateType(model['layoutType']),&#13;
            customLayout = model['customLayout'],&#13;
            maxCharacters = presenter.validateMaxCharacters(model['maxCharacters']),&#13;
            positionMy = presenter.validatePosition(model['positionMy'], true),&#13;
            positionAt = presenter.validatePosition(model['positionAt'], false),&#13;
            workWithIsValid = true,&#13;
            workWithErrorCode = '',&#13;
            customDisplay = model['customDisplay'];&#13;
&#13;
        if (!isPreview) {&#13;
            $.each(workWithModules, function() {&#13;
                var module = presenter.playerController.getModule(this.toString()),&#13;
                    moduleNotFound = false,&#13;
                    getViewNotImplemented = false;&#13;
&#13;
                if (module) {&#13;
                    if ( module.getView() ) {&#13;
                        workWithViews.push( module.getView() );&#13;
                    } else {&#13;
                        getViewNotImplemented = true;&#13;
                        return false;&#13;
                    }&#13;
                } else {&#13;
                    moduleNotFound = true;&#13;
                    return false;&#13;
                }&#13;
&#13;
                if (getViewNotImplemented || moduleNotFound) {&#13;
                    workWithIsValid = false;&#13;
                    workWithErrorCode = moduleNotFound ? 'E02' : 'E03';&#13;
                    return false;&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
        if (!workWithIsValid) {&#13;
            return {&#13;
                'isError' : true,&#13;
                'errorCode' : workWithErrorCode&#13;
            }&#13;
        }&#13;
&#13;
        if (maxCharacters.isError) {&#13;
            return {&#13;
                'isError' : true,&#13;
                'errorCode' : maxCharacters.errorCode&#13;
            }&#13;
        }&#13;
&#13;
        if (positionMy.isError) {&#13;
            return {&#13;
                'isError' : true,&#13;
                'errorCode' : positionMy.errorCode&#13;
            }&#13;
        }&#13;
&#13;
        if (positionAt.isError) {&#13;
            return {&#13;
                'isError' : true,&#13;
                'errorCode' : positionAt.errorCode&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.LAYOUT_TO_LANGUAGE_MAPPING[layoutType] != undefined) {&#13;
            customLayout = presenter.LAYOUT_TO_LANGUAGE_MAPPING[layoutType];&#13;
            layoutType = 'custom';&#13;
        }&#13;
&#13;
        if (typeof(customDisplay) == 'undefined') {&#13;
            customDisplay = '';&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'workWithViews' : workWithViews,&#13;
            'layoutType' : layoutType,&#13;
            'customLayout' : customLayout,&#13;
            'positionAt' : positionAt,&#13;
            'positionMy' : positionMy,&#13;
            'maxCharacters' : maxCharacters.value,&#13;
            'offset' : presenter.validateOffsetData(positionMy.value, positionAt.value),&#13;
            'openOnFocus' : !ModelValidationUtils.validateBoolean(model['noOpenOnFocus']),&#13;
            'lockInput' : ModelValidationUtils.validateBoolean(model['lockStandardKeyboardInput']),&#13;
            'customDisplay' : customDisplay&#13;
        }&#13;
    };&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
&#13;
        var mathJaxDeferred = new jQuery.Deferred(),&#13;
            mathJaxProcessEnded = mathJaxDeferred.promise();&#13;
&#13;
        MathJax.Hub.Register.MessageHook("End Process", function (message) {&#13;
            if ($(message[1]).hasClass('ic_page')) {&#13;
                if(mathJaxDeferred.state() != 'resolved'){&#13;
                    mathJaxDeferred.resolve();&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        $.when(presenter.pageLoaded, mathJaxProcessEnded).then(function() {&#13;
            presenter.configuration = presenter.validateModel(model, isPreview);&#13;
&#13;
            if (presenter.configuration.isError) {&#13;
                DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
                return;&#13;
            }&#13;
&#13;
            if (!isPreview) {&#13;
                if (presenter.configuration.customLayout.length &gt; 0) {&#13;
                    try {&#13;
                        eval('presenter.configuration.customLayout = ' + presenter.configuration.customLayout);&#13;
                    } catch(e) {&#13;
                        presenter.ERROR_CODES['evaluationError'] = e.message;&#13;
                        DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, 'evaluationError');&#13;
                    }&#13;
                }&#13;
&#13;
                if (presenter.configuration.customDisplay.length &gt; 0) {&#13;
                    try {&#13;
                        eval('presenter.configuration.customDisplay = ' + presenter.configuration.customDisplay);&#13;
                    } catch(e) {&#13;
                        presenter.ERROR_CODES['evaluationError'] = e.message;&#13;
                        DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, 'evaluationError');&#13;
                    }&#13;
                }&#13;
                presenter.configuration.customLayout.id = new Date().getTime();&#13;
&#13;
                var defaultDisplay = {&#13;
                    a      : '\u2714:Accept (Shift-Enter)', // check mark - same action as accept&#13;
                    accept : 'Accept:Accept (Shift-Enter)',&#13;
                    alt    : 'AltGr:Alternate Graphemes',&#13;
                    b      : '\u2190:Backspace',    // Left arrow (same as &amp;larr;)&#13;
                    bksp   : 'Bksp:Backspace',&#13;
                    c      : '\u2716:Cancel (Esc)', // big X, close - same action as cancel&#13;
                    cancel : 'Cancel:Cancel (Esc)',&#13;
                    clear  : 'C:Clear',             // clear num pad&#13;
                    combo  : '\u00f6:Toggle Combo Keys',&#13;
                    dec    : '.:Decimal',           // decimal point for num pad (optional), change '.' to ',' for European format&#13;
                    e      : '\u21b5:Enter',        // down, then left arrow - enter symbol&#13;
                    enter  : 'Enter:Enter',&#13;
                    left   : '\u2190',              // left arrow (move caret)&#13;
                    lock   : '\u21ea Lock:Caps Lock', // caps lock&#13;
                    next   : 'Next',&#13;
                    prev   : 'Prev',&#13;
                    right  : '\u2192',              // right arrow (move caret)&#13;
                    s      : '\u21e7:Shift',        // thick hollow up arrow&#13;
                    shift  : 'CapsLock:CapsLock',&#13;
                    sign   : '\u00b1:Change Sign',  // +/- sign for num pad&#13;
                    space  : '&amp;nbsp;:Space',&#13;
                    t      : '\u21e5:Tab',          // right arrow to bar (used since this virtual keyboard works with one directional tabs)&#13;
                    tab    : '\u21e5 Tab:Tab'       // \u21b9 is the true tab symbol (left &amp; right arrows)&#13;
                };&#13;
&#13;
                var customDisplay = presenter.configuration.customDisplay;&#13;
                var display = $.extend(defaultDisplay, customDisplay);&#13;
&#13;
                if (MobileUtils.isMobileUserAgent(navigator.userAgent) &amp;&amp; presenter.configuration.lockInput) {&#13;
                    $('input').addClass('ui-keyboard-lockedinput');&#13;
                    $('input').attr("readonly", true);&#13;
                }&#13;
&#13;
                $(presenter.configuration.workWithViews).find('input').on('click', function() {&#13;
                    $(this).keyboard({&#13;
                    // *** choose layout ***&#13;
                    layout: presenter.configuration.layoutType,&#13;
                    customLayout: presenter.configuration.customLayout,&#13;
&#13;
                    position: {&#13;
                        of : null, // optional - null (attach to input/textarea) or a jQuery object (attach elsewhere)&#13;
                        my : presenter.configuration.positionMy.value,&#13;
                        at : presenter.configuration.positionAt.value,&#13;
                        at2 : presenter.configuration.positionAt.value,&#13;
                        offset : presenter.configuration.offset.value,&#13;
                        collision: 'flip'&#13;
                    },&#13;
&#13;
                    // preview added above keyboard if true, original input/textarea used if false&#13;
                    usePreview: false,&#13;
&#13;
                    // if true, the keyboard will always be visible&#13;
                    alwaysOpen: false,&#13;
&#13;
                    // give the preview initial focus when the keyboard becomes visible&#13;
                    initialFocus: true,&#13;
&#13;
                    // if true, keyboard will remain open even if the input loses focus.&#13;
                    stayOpen: false,&#13;
&#13;
                    // *** change keyboard language &amp; look ***&#13;
                    display: display,&#13;
&#13;
                    // Message added to the key title while hovering, if the mousewheel plugin exists&#13;
                    wheelMessage: 'Use mousewheel to see other keys',&#13;
&#13;
                    css: {&#13;
                        input          : '', //'ui-widget-content ui-corner-all', // input &amp; preview&#13;
                        container      : 'ui-widget-content ui-widget ui-corner-all ui-helper-clearfix', // keyboard container&#13;
                        buttonDefault  : 'ui-state-default ui-corner-all', // default state&#13;
                        buttonHover    : 'ui-state-hover',  // hovered button&#13;
                        buttonAction   : 'ui-state-active', // Action keys (e.g. Accept, Cancel, Tab, etc); replaces "actionClass"&#13;
                        buttonDisabled : 'ui-state-disabled' // used when disabling the decimal button {dec}&#13;
                    },&#13;
&#13;
                    // *** Useability ***&#13;
                    // Auto-accept content when clicking outside the keyboard (popup will close)&#13;
                    autoAccept: true,&#13;
&#13;
                    // Prevents direct input in the preview window when true&#13;
                    lockInput: presenter.configuration.lockInput,&#13;
&#13;
                    // Prevent keys not in the displayed keyboard from being typed in&#13;
                    restrictInput: false,&#13;
&#13;
                    // Check input against validate function, if valid the accept button is clickable;&#13;
                    // if invalid, the accept button is disabled.&#13;
                    acceptValid: true,&#13;
&#13;
                    // Use tab to navigate between input fields&#13;
                    tabNavigation: true,&#13;
&#13;
                    // press enter (shift-enter in textarea) to go to the next input field&#13;
                    enterNavigation : true,&#13;
                    // mod key options: 'ctrlKey', 'shiftKey', 'altKey', 'metaKey' (MAC only)&#13;
                    enterMod : 'altKey', // alt-enter to go to previous; shift-alt-enter to accept &amp; go to previous&#13;
&#13;
                    // if true, the next button will stop on the last keyboard input/textarea; prev button stops at first&#13;
                    // if false, the next button will wrap to target the first input/textarea; prev will go to the last&#13;
                    stopAtEnd : false,&#13;
&#13;
                    // Set this to append the keyboard immediately after the input/textarea it is attached to.&#13;
                    // This option works best when the input container doesn't have a set width and when the&#13;
                    // "tabNavigation" option is true&#13;
                    appendLocally: false,&#13;
&#13;
                    // If false, the shift key will remain active until the next key is (mouse) clicked on;&#13;
                    // if true it will stay active until pressed again&#13;
                    stickyShift: true,&#13;
&#13;
                    // Prevent pasting content into the area&#13;
                    preventPaste: false,&#13;
&#13;
                    // Set the max number of characters allowed in the input, setting it to false disables this option&#13;
                    maxLength: presenter.configuration.maxCharacters,&#13;
&#13;
                    // Mouse repeat delay - when clicking/touching a virtual keyboard key, after this delay the key&#13;
                    // will start repeating&#13;
                    repeatDelay: 500,&#13;
&#13;
                    // Mouse repeat rate - after the repeatDelay, this is the rate (characters per second) at which the&#13;
                    // key is repeated. Added to simulate holding down a real keyboard key and having it repeat. I haven't&#13;
                    // calculated the upper limit of this rate, but it is limited to how fast the javascript can process&#13;
                    // the keys. And for me, in Firefox, it's around 20.&#13;
                    repeatRate: 20,&#13;
&#13;
                    // resets the keyboard to the default keyset when visible&#13;
                    resetDefault: false,&#13;
&#13;
                    // Event (namespaced) on the input to reveal the keyboard. To disable it, just set it to ''.&#13;
                    openOn: presenter.configuration.openOnFocus ? 'focus' : '',&#13;
&#13;
                    // When the character is added to the input&#13;
                    keyBinding: MobileUtils.isEventSupported("touchend") ? 'touchend' : 'mousedown',&#13;
&#13;
                    // combos (emulate dead keys : http://en.wikipedia.org/wiki/Keyboard_layout#US-International)&#13;
                    // if user inputs `a the script converts it to Ă , ^o becomes Ă´, etc.&#13;
                    useCombos: false,&#13;
&#13;
                    // *** Methods ***&#13;
                    // Callbacks - add code inside any of these callback functions as desired&#13;
                    initialized: function(e, keyboard, el) {&#13;
                    },&#13;
                    beforeVisible: function(e, keyboard, el) {&#13;
&#13;
                        if(!keyboard['$keyboard'].parent().hasClass('html')) {&#13;
                            var dialogBox = keyboard['$keyboard'].parent().find('.gwt-DialogBox');&#13;
                            dialogBox.append(keyboard['$keyboard']);&#13;
                        }&#13;
&#13;
                    },&#13;
                    visible: function(e, keyboard, el) {&#13;
&#13;
                        var isVisibleInViewPort = getIsVisibleInViewPort(keyboard['$keyboard']);&#13;
&#13;
                        if (!isVisibleInViewPort.vertical || !isVisibleInViewPort.horizontal) {&#13;
                            shiftKeyboard(keyboard, isVisibleInViewPort);&#13;
                            isVisibleInViewPort = getIsVisibleInViewPort(keyboard['$keyboard']);&#13;
                        }&#13;
&#13;
                        keyboard['$keyboard'].draggable();&#13;
&#13;
                    },&#13;
                    change: function(e, keyboard, el) {&#13;
                    	var max_chars = presenter.configuration.maxCharacters;&#13;
                    	if ($(el).attr('maxlength')) {&#13;
                    		max_chars = $(el).attr('maxlength');&#13;
                    	}&#13;
&#13;
                        if( $(el).val().length ===  max_chars) {&#13;
                            keyboard.switchInput(true, true);&#13;
                        }&#13;
&#13;
                    },&#13;
                    beforeClose: function(e, keyboard, el, accepted) {&#13;
                    },&#13;
                    accepted: function(e, keyboard, el) {},&#13;
                    canceled: function(e, keyboard, el) {},&#13;
                    hidden: function(e, keyboard, el) {},&#13;
&#13;
                    switchInput : function(keyboard, goToNext, isAccepted){&#13;
                    	var base = keyboard, kb, stopped = false,&#13;
                				all = $('input, textarea').filter(':enabled'),&#13;
                				indx = all.index(base.$el) + (goToNext ? 1 : -1);&#13;
                				base.$keyboard.show();&#13;
                			if (indx &gt; all.length - 1) {&#13;
                				stopped = keyboard.stopAtEnd;&#13;
                				indx = 0; // go to first input&#13;
                			}&#13;
                			if (indx &lt; 0) {&#13;
                				stopped = keyboard.stopAtEnd;&#13;
                				indx = all.length - 1; // stop or go to last&#13;
                			}&#13;
                			if (!stopped) {&#13;
                				if (!base.close(isAccepted)) { return; }&#13;
                                all.eq(indx).focus();&#13;
                			}&#13;
&#13;
                        return false;&#13;
                	},&#13;
                    // this callback is called just before the "beforeClose" to check the value&#13;
                    // if the value is valid, return true and the  will continue as it should&#13;
                    // (close if not always open, etc)&#13;
                    // if the value is not value, return false and the clear the keyboard value&#13;
                    // ( like this "keyboard.$preview.val('');" ), if desired&#13;
                    // The validate function is called after each input, the "isClosing" value will be false;&#13;
                    // when the accept button is clicked, "isClosing" is true&#13;
                    validate    : function(keyboard, value, isClosing) { return true; }&#13;
&#13;
                    });&#13;
&#13;
                    $(this).focus();&#13;
                });&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function shiftKeyboard(keyboard, isVisibleInViewPort) {&#13;
        if (!isVisibleInViewPort.horizontal) {&#13;
            var currentLeft = parseInt(keyboard['$keyboard'].css('left'), 10);&#13;
            keyboard['$keyboard'].css('left', currentLeft + parseInt(isVisibleInViewPort.horizontalSign + '10', 10));&#13;
        }&#13;
        if (!isVisibleInViewPort.vertical) {&#13;
            var currentTop = parseInt(keyboard['$keyboard'].css('top'), 10);&#13;
            keyboard['$keyboard'].css('top', currentTop + parseInt(isVisibleInViewPort.verticalSign + '10', 10));&#13;
        }&#13;
    }&#13;
&#13;
    function getIsVisibleInViewPort(element) {&#13;
        var $window = $(window);&#13;
&#13;
        if (this.length &lt; 1)&#13;
            return;&#13;
&#13;
        var $element = $(element),&#13;
            vpWidth = $window.width(),&#13;
            vpHeight = $window.height(),&#13;
            viewTop = $window.scrollTop(),&#13;
            viewBottom = viewTop + vpHeight,&#13;
            viewLeft = $window.scrollLeft(),&#13;
            viewRight = viewLeft + vpWidth,&#13;
            offset = $element.offset(),&#13;
            _top = offset.top,&#13;
            _bottom = _top + $element.height(),&#13;
            _left = offset.left,&#13;
            _right = _left + $element.width();&#13;
&#13;
        return {&#13;
            vertical: ((_bottom &lt;= viewBottom) &amp;&amp; (_top &gt;= viewTop)),&#13;
            horizontal: ((_right &lt;= viewRight) &amp;&amp; (_left &gt;= viewLeft)),&#13;
            verticalSign: _bottom &lt;= viewBottom ? '' : '-',&#13;
            horizontalSign: _right &lt;= viewRight ? '' : '-'&#13;
        };&#13;
    }&#13;
&#13;
    presenter.run = function(view, model){&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.configuration.isError) return;&#13;
&#13;
        var commands = {&#13;
            'open' : presenter.openCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.open = function(moduleId, index) {&#13;
        var module = presenter.playerController.getModule(moduleId);&#13;
        try {&#13;
            var input = $(module.getView()).find('input:enabled').get(parseInt(index, 10) - 1);&#13;
            $(input).data('keyboard').reveal();&#13;
        } catch (e) {&#13;
            alert(e.message);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.openCommand = function(moduleId, index) {&#13;
        if ($.isArray(moduleId)) {&#13;
            presenter.open(moduleId[0], moduleId[1]);&#13;
        } else {&#13;
            presenter.open(moduleId, index);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function(){&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="feedback" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Responses" nameLabel="feedback_property_responses" type="list">
			<property name="Unique response ID" nameLabel="feedback_property_unique_response_id" type="string"/>
			<property name="Status" nameLabel="feedback_property_status" type="string"/>
			<property isLocalized="true" name="Text" nameLabel="feedback_property_text" type="html"/>
		</property>
		<property isLocalized="true" name="Default response" nameLabel="feedback_property_default_response" type="html"/>
		<property name="Preview response ID" nameLabel="feedback_property_preview_response_id" type="string"/>
		<property name="Reset response on page change" nameLabel="feedback_property_reset_response_on_page_change" type="boolean"/>
		<property name="Fade transitions" nameLabel="feedback_property_fade_transitions" type="boolean"/>
		<property name="Center horizontally" nameLabel="feedback_property_center_horizontally" type="boolean"/>
		<property name="Center vertically" nameLabel="feedback_property_center_vertically" type="boolean"/>
		<property name="Is not an activity" nameLabel="feedback_property_is_not_an_activity" type="boolean"/>
	</model>
<css>.feedback_container .response {&#13;
    padding: 1em;&#13;
    position: absolute;&#13;
    width: 100%;&#13;
}&#13;
&#13;
.feedback_container .response.visible a {&#13;
    z-index: 1;&#13;
}&#13;
&#13;
.feedback_container .true_response {&#13;
    border: 2px solid #00aa00;&#13;
    border-radius: 4px;&#13;
}&#13;
&#13;
.feedback_container .false_response {&#13;
    border: 2px solid #ff0000;&#13;
    border-radius: 4px;&#13;
}&#13;
</css><view/><preview/><presenter>function Addonfeedback_create() {&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    presenter.responses = {};&#13;
    presenter.defaultResponse = "";&#13;
    presenter.feedbackContainer = null;&#13;
    presenter.currentStateDefault = false;&#13;
    presenter.currentStateId = null;&#13;
&#13;
    var playerController = null;&#13;
    var textParser = null;&#13;
&#13;
    presenter.STATUSES = {&#13;
        TRUE: "T",&#13;
        FALSE: "F",&#13;
        NEUTRAL: "N"&#13;
    };&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        RESPONSE_ID_NOT_UNIQUE: "Response ID \"%id%\" is not unique",&#13;
        RESPONSE_STATUS_INVALID: "Response status \"%status%\" for response %n% (ID \"%id%\") is invalid, it has to be one of \"T\" (true), \"N\" (neutral) or \"F\" (false)",&#13;
        PREVIEW_RESPONSE_ID_INVALID: "Cannot preview response: there's no response with ID \"%id%\""&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
        textParser = new TextParserProxy(playerController.getTextParser());&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function (message, substitutions) {&#13;
        var errorContainer;&#13;
        if (typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                if (!substitutions.hasOwnProperty(key)) continue;&#13;
&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.setDefaultResponse = function () {&#13;
        if (!presenter.preview) {&#13;
            presenter.feedbackContainer.find('.response').removeClass('visible');&#13;
            presenter.feedbackContainer.find('.default_response').addClass('visible');&#13;
        }&#13;
        if (presenter.preview || !presenter.configuration.fadeTransitions) {&#13;
            presenter.feedbackContainer.find('.response').css('opacity', 0);&#13;
            presenter.feedbackContainer.find('.default_response').css('opacity', 1);&#13;
        } else if (presenter.configuration.fadeTransitions) {&#13;
            presenter.feedbackContainer.find('.response:not(.default_response)').animate({opacity: 0.0}, {queue: false});&#13;
            presenter.feedbackContainer.find('.default_response').animate({opacity: 1.0}, {queue: false});&#13;
        }&#13;
        presenter.currentStateDefault = true;&#13;
        presenter.currentStateId = null;&#13;
    };&#13;
&#13;
    presenter.setResponse = function (id) {&#13;
        if (!presenter.preview) {&#13;
            presenter.feedbackContainer.find('.response').removeClass('visible');&#13;
            presenter.feedbackContainer.find('.response_' + id).addClass('visible');&#13;
        }&#13;
        if (presenter.preview || !presenter.configuration.fadeTransitions) {&#13;
            presenter.feedbackContainer.find('.response').css('opacity', 0);&#13;
            presenter.feedbackContainer.find('.response_' + id).appendTo(presenter.feedbackContainer).css('opacity', 1);&#13;
        } else if (presenter.configuration.fadeTransitions) {&#13;
            presenter.feedbackContainer.find('.response').animate({opacity: 0.0}, {queue: false});&#13;
            presenter.feedbackContainer.find('.response_' + id).appendTo(presenter.feedbackContainer).animate({opacity: 1.0}, {queue: false});&#13;
        }&#13;
&#13;
        presenter.currentStateDefault = false;&#13;
        presenter.currentStateId = id;&#13;
    };&#13;
&#13;
&#13;
    function createResponseTable(content) {&#13;
        var $feedbackTable = $(document.createElement('table'));&#13;
        var $feedbackTableRow = $(document.createElement('tr'));&#13;
        var $feedbackTableCell = $(document.createElement('td'));&#13;
&#13;
        $feedbackTableRow.append($feedbackTableCell);&#13;
        $feedbackTable.append($feedbackTableRow);&#13;
        $feedbackTableCell.html(content);&#13;
&#13;
        return $feedbackTable;&#13;
    }&#13;
&#13;
    presenter.initialize = function (view, model, preview) {&#13;
        var text;&#13;
        var text_inner;&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.preview = preview;&#13;
        presenter.model = model;&#13;
&#13;
        presenter.feedbackContainer = $('&lt;div class="feedback_container"&gt;&lt;/div&gt;');&#13;
        presenter.$view.append(presenter.feedbackContainer);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        for (var i = 0; i &lt; model['Responses'].length; i++) {&#13;
            if (typeof(presenter.responses[model['Responses'][i]['Unique response ID']]) != "undefined") {&#13;
                presenter.showErrorMessage(presenter.ERROR_MESSAGES.RESPONSE_ID_NOT_UNIQUE, { id: model['Responses'][i]['Unique response ID']});&#13;
                return;&#13;
            }&#13;
&#13;
            if (model['Responses'][i]['Status'] != presenter.STATUSES.TRUE &amp;&amp;&#13;
                model['Responses'][i]['Status'] != presenter.STATUSES.NEUTRAL &amp;&amp;&#13;
                model['Responses'][i]['Status'] != presenter.STATUSES.FALSE) {&#13;
                presenter.showErrorMessage(presenter.ERROR_MESSAGES.RESPONSE_STATUS_INVALID, { n: i + 1, id: model['Responses'][i]['Unique response ID'], status: model['Responses'][i]['Status']});&#13;
                return;&#13;
            }&#13;
&#13;
            var responseText = model['Responses'][i]['Text'];&#13;
            if (textParser !== null &amp;&amp; !preview) {&#13;
                responseText = textParser.parse(responseText);&#13;
            }&#13;
            presenter.responses[model['Responses'][i]['Unique response ID']] = { status: model['Responses'][i]['Status'].toUpperCase(), text: responseText };&#13;
&#13;
            text = $('&lt;div class="response"&gt;&lt;/div&gt;');&#13;
            text_inner = $('&lt;div class="response_inner"&gt;&lt;/div&gt;');&#13;
            text.append(text_inner);&#13;
            text.addClass('response_' + model['Responses'][i]['Unique response ID']);&#13;
&#13;
            var $responseTable = createResponseTable(responseText);&#13;
            text_inner.html($responseTable);&#13;
&#13;
            switch (model['Responses'][i]['Status']) {&#13;
                case presenter.STATUSES.TRUE:&#13;
                    text.addClass("true_response");&#13;
                    break;&#13;
&#13;
                case presenter.STATUSES.NEUTRAL:&#13;
                    text.addClass("neutral_response");&#13;
                    break;&#13;
&#13;
                case presenter.STATUSES.FALSE:&#13;
                    text.addClass("false_response");&#13;
                    break;&#13;
            }&#13;
&#13;
            presenter.feedbackContainer.append(text);&#13;
            presenter.centerInner(text_inner);&#13;
        }&#13;
&#13;
        presenter.$view.find('.response').css('opacity', 0.0);&#13;
&#13;
        presenter.defaultResponse = model['Default response'];&#13;
        if (textParser !== null &amp;&amp; !preview) {&#13;
            presenter.defaultResponse = textParser.parse(presenter.defaultResponse);&#13;
        }&#13;
&#13;
        text = $('&lt;div class="response default_response neutral_response"&gt;&lt;/div&gt;');&#13;
        text_inner = $('&lt;div class="response_inner"&gt;&lt;/div&gt;');&#13;
        text.append(text_inner);&#13;
&#13;
        var defaultResponseTable = createResponseTable(presenter.defaultResponse);&#13;
        text_inner.html(defaultResponseTable);&#13;
        presenter.feedbackContainer.append(text);&#13;
        presenter.centerInner(text_inner);&#13;
        if (textParser !== null &amp;&amp; !preview) {&#13;
            textParser.connectLinks(presenter.feedbackContainer);&#13;
        }&#13;
&#13;
        if (!preview) {&#13;
            presenter.setDefaultResponse();&#13;
            return;&#13;
        }&#13;
&#13;
        if (typeof(model['Preview response ID']) == "undefined" ||&#13;
            (typeof(model['Preview response ID']) == "string" &amp;&amp; model['Preview response ID'] == "")) {&#13;
            presenter.setDefaultResponse();&#13;
        } else {&#13;
            if (typeof(presenter.responses[model['Preview response ID']]) == "undefined") {&#13;
                presenter.showErrorMessage(presenter.ERROR_MESSAGES.PREVIEW_RESPONSE_ID_INVALID, { id: model['Preview response ID'] });&#13;
            } else {&#13;
                presenter.setResponse(model['Preview response ID']);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedIsVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        return {&#13;
            resetResponse: ModelValidationUtils.validateBoolean(model['Reset response on page change']),&#13;
            fadeTransitions: ModelValidationUtils.validateBoolean(model['Fade transitions']),&#13;
            centerHorizontally: ModelValidationUtils.validateBoolean(model['Center horizontally']),&#13;
            centerVertically: ModelValidationUtils.validateBoolean(model['Center vertically']),&#13;
            isActivity: !ModelValidationUtils.validateBoolean(model['Is not an activity']),&#13;
            isVisible: validatedIsVisible,&#13;
            isVisibleByDefault: validatedIsVisible&#13;
        };&#13;
    };&#13;
&#13;
    presenter.centerInner = function (text_inner) {&#13;
        if (presenter.configuration.centerVertically) {&#13;
            var parentHeight = $(text_inner).parent().height();&#13;
            var parentHWidth = $(text_inner).parent().width();&#13;
            $(text_inner).css({&#13;
                height: parentHeight + 'px',&#13;
                width: parentHWidth + 'px',&#13;
                display: 'table-cell',&#13;
                'verticalAlign': 'middle'&#13;
            });&#13;
        }&#13;
&#13;
        if (presenter.configuration.centerHorizontally) {&#13;
            $(text_inner).find('table').css({&#13;
                marginLeft: 'auto',&#13;
                marginRight: 'auto'&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.setDefaultResponse();&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.setDefaultResponse();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.change = function (responseID) {&#13;
        if (presenter.responses[responseID] !== undefined) {&#13;
            presenter.setResponse(responseID);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeCommand = function (params) {&#13;
        if (params.length &gt;= 1) {&#13;
            presenter.change(params[0])&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'change': presenter.changeCommand,&#13;
            'setDefaultResponse': presenter.setDefaultResponse,&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
    &#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    }&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    }&#13;
&#13;
    presenter.next = function () {&#13;
        var currentID = presenter.currentStateId, index, newID;&#13;
        if (presenter.currentStateDefault) {&#13;
            newID = presenter.getResponseID(0);&#13;
        } else {&#13;
            index = presenter.getResponseIndex(currentID);&#13;
            newID = presenter.getResponseID(index + 1);&#13;
        }&#13;
&#13;
        if (newID == undefined) return;&#13;
&#13;
        presenter.setResponse(newID);&#13;
    };&#13;
&#13;
    presenter.previous = function () {&#13;
        var currentID = presenter.currentStateId, index, newID;&#13;
&#13;
        if (presenter.currentStateDefault) return;&#13;
&#13;
        index = presenter.getResponseIndex(currentID);&#13;
        newID = presenter.getResponseID(index - 1);&#13;
&#13;
        if (newID == undefined) return;&#13;
&#13;
        presenter.setResponse(newID);&#13;
    };&#13;
&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            'currentStateDefault': presenter.currentStateDefault,&#13;
            'currentStateId': presenter.currentStateId,&#13;
            'isVisible': presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        if (presenter.configuration.resetResponse) {&#13;
            presenter.setDefaultResponse();&#13;
            return;&#13;
        }&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        if (state['currentStateDefault']) {&#13;
            presenter.setDefaultResponse();&#13;
        } else {&#13;
            presenter.setResponse(state['currentStateId']);&#13;
        }&#13;
        &#13;
        presenter.configuration.isVisible = state['isVisible'];&#13;
        presenter.setVisibility(state['isVisible']);&#13;
    };&#13;
&#13;
    presenter.getResponseIndex = function (responseID) {&#13;
        var responses = presenter.model.Responses, i;&#13;
&#13;
        for (i = 0; i &lt; responses.length; i++) {&#13;
            if (responses[i]['Unique response ID'] === responseID) return i;&#13;
        }&#13;
&#13;
        return -1;&#13;
    };&#13;
&#13;
    presenter.getResponseID = function (index) {&#13;
        var response = presenter.model.Responses[index];&#13;
&#13;
        return response !== undefined ? response['Unique response ID'] : undefined;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="gamememo" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Pairs" nameLabel="gamememo_property_pairs" type="list">
			<property isLocalized="true" name="A (text)" nameLabel="gamememo_property_pair_a_text" type="string"/>
			<property name="A (image)" nameLabel="gamememo_property_pair_a_image" type="image"/>
			<property isLocalized="true" name="B (text)" nameLabel="gamememo_property_pair_b_text" type="string"/>
			<property name="B (image)" nameLabel="gamememo_property_pair_b_image" type="image"/>
		</property>
		<property name="Columns" nameLabel="gamememo_property_columns" type="string"/>
		<property name="Rows" nameLabel="gamememo_property_rows" type="string"/>
		<property name="Use two styles for cards" nameLabel="gamememo_property_use_two_styles_for_cards" type="boolean"/>
		<property name="Image for style A" nameLabel="gamememo_property_image_for_style_a" type="image"/>
		<property name="Image for style B" nameLabel="gamememo_property_image_for_style_b" type="image"/>
		<property name="Keep cards aspect ratio" nameLabel="gamememo_property_keep_cards_aspect_ratio" type="boolean"/>
		<property name="Show cards for preview" nameLabel="gamememo_property_show_cards_for_preview" type="boolean"/>
        <property name="Is Not Activity" nameLabel="gamememo_property_is_not_activity" type="boolean"/>
        <property name="Image Mode" nameLabel="gamememo_property_image_mode" type="{Original, Stretch, KeepAspect}"/>
        <property name="Keep wrong marking" nameLabel="gamememo_property_keep_wrong_marking" type="boolean"/>
	</model>
<css>.gamememo_container table {&#13;
    border-spacing: 0;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.gamememo_container table td {&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    position: relative;&#13;
}&#13;
&#13;
.gamememo_container table td img {&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
&#13;
}&#13;
&#13;
.gamememo_container p {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.gamememo_container div.cell {&#13;
    float: left;&#13;
    position: relative;&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
&#13;
.gamememo_container div.placeholder {&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    right: 0;&#13;
    bottom: 0;&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.gamememo_container div.front {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.gamememo_container div.front_A {&#13;
    background: #ff0000;&#13;
}&#13;
&#13;
.gamememo_container div.front_A:hover {&#13;
    background: #aa0000;&#13;
}&#13;
&#13;
.gamememo_container div.front_B {&#13;
    background: #0000ff;&#13;
}&#13;
&#13;
.gamememo_container div.front_B:hover {&#13;
    background: #0000bb;&#13;
}&#13;
&#13;
.gamememo_container div.mismatch_mark {&#13;
    color: #cc0000;&#13;
    font-weight: bold;&#13;
    font-size: 64pt;&#13;
    text-align: center;&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    width: 100%;&#13;
    vertical-align: middle;&#13;
    margin-top: -0.15ex;&#13;
    cursor: default;&#13;
    line-height: normal;&#13;
}&#13;
&#13;
.gamememo_container div.tick_mark {&#13;
    color: #11cc11;&#13;
    font-weight: bold;&#13;
    font-size: 64pt;&#13;
    text-align: center;&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    width: 100%;&#13;
    vertical-align: middle;&#13;
    margin-top: -0.15ex;&#13;
    cursor: default;&#13;
    line-height: normal;&#13;
}&#13;
</css><view>&lt;div&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div&gt;&lt;/div&gt;&#13;
</preview><presenter>function Addongamememo_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.numberToCardType = function(n) {&#13;
        if(n == 0) {&#13;
            return 'A';&#13;
        } else if(n == 1) {&#13;
            return 'B';&#13;
        } else {&#13;
            throw new Error('presenter.numberToCardType accepts only values 0 and 1');&#13;
        }&#13;
    };&#13;
&#13;
    // Fisher-Yates algorithm&#13;
    // based on http://sedition.com/perl/javascript-fy.html&#13;
    presenter.shuffleArray = function(a) {&#13;
        var i = a.length;&#13;
        if ( i == 0 ) return [];&#13;
&#13;
        while ( --i ) {&#13;
            var j = Math.floor( Math.random() * ( i + 1 ) );&#13;
            var tempi = a[i];&#13;
            a[i] = a[j];&#13;
            a[j] = tempi;&#13;
        }&#13;
&#13;
        return a;&#13;
    };&#13;
&#13;
    // Fisher-Yates algorithm&#13;
    // based on http://sedition.com/perl/javascript-fy.html&#13;
    presenter.shuffleTwoArrays = function(a1, a2) {&#13;
        var i = a1.length;&#13;
        if ( i == 0 ) return [[],[]];&#13;
&#13;
        while ( --i ) {&#13;
            var j = Math.floor( Math.random() * ( i + 1 ) );&#13;
&#13;
            var temp1i = a1[i];&#13;
            a1[i] = a1[j];&#13;
            a1[j] = temp1i;&#13;
&#13;
            var temp2i = a2[i];&#13;
            a2[i] = a2[j];&#13;
            a2[j] = temp2i;&#13;
        }&#13;
&#13;
        return [a1, a2];&#13;
    };&#13;
&#13;
    presenter.STATES = {&#13;
        READY: 0,&#13;
        CLICKED_FIRST: 1,&#13;
        CLICKED_SECOND: 2&#13;
    };&#13;
&#13;
    presenter.state = presenter.STATES.READY;&#13;
&#13;
    presenter.cardClickedFirst = null;&#13;
    presenter.cardClickedSecond = null;&#13;
    presenter.cardClickedFirstId = null;&#13;
    presenter.cardClickedSecondId = null;&#13;
    presenter.cardClickedStyle = null;&#13;
&#13;
    presenter.errorCount = 0;&#13;
    presenter.score = 0;&#13;
    presenter.maxScore = null;&#13;
&#13;
    presenter.preview = false;&#13;
    presenter.previewCards = false;&#13;
&#13;
    presenter.cards = [];&#13;
    presenter.serializedCards = [];&#13;
    presenter.rowCount = null;&#13;
    presenter.columnCount = null;&#13;
    presenter.useTwoStyles = false;&#13;
    presenter.keepAspectRatio = false;&#13;
    presenter.styleAImage = null;&#13;
    presenter.styleBImage = null;&#13;
&#13;
    presenter.model = null;&#13;
&#13;
    presenter.requestedRowHeight = null;&#13;
    presenter.requestedColumnWidth = null;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        PAIRS_NOT_SPECIFIED: "Pairs are not specified",&#13;
        ROWS_NOT_SPECIFIED: "Amount of rows is not specified",&#13;
        COLUMNS_NOT_SPECIFIED: "Amount of columns is not specified",&#13;
        INVALID_GEOMETRY: "Invalid amount of columns and/or rows - their multiplication must be even",&#13;
        AMOUNT_OF_PAIRS_OTHER_THAN_GEOMETRY: "Invalid amount of pairs: for %columns% columns and %rows% rows there should be defined %pairs% pairs",&#13;
        PAIR_MEMBER_SPECIFIED_TWICE: "Pair %pair% is invalid: its member \"%member%\" is specified both as a text and an image",&#13;
        PAIR_MEMBERS_NOT_SPECIFIED: "Pair %pair% is invalid: its members are not specified"&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function(message, substitutions) {&#13;
        var errorContainer;&#13;
        if(typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for(var key in substitutions) {&#13;
                if (!substitutions.hasOwnProperty(key)) continue;&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
&#13;
        presenter.viewContainer.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.readConfiguration = function(model) {&#13;
        if(model['Pairs'].length == 0) {&#13;
            return {&#13;
                isError: true,&#13;
                errorMessage: presenter.ERROR_MESSAGES.PAIRS_NOT_SPECIFIED&#13;
            };&#13;
        }&#13;
&#13;
        if(parseInt(model['Columns']) &lt;= 0 || isNaN(parseInt(model['Columns'])) ) {&#13;
            return {&#13;
                isError: true,&#13;
                errorMessage: presenter.ERROR_MESSAGES.COLUMNS_NOT_SPECIFIED&#13;
            };&#13;
        }&#13;
&#13;
        if(parseInt(model['Rows']) &lt;= 0 || isNaN(parseInt(model['Rows']))) {&#13;
            return {&#13;
                isError: true,&#13;
                errorMessage: presenter.ERROR_MESSAGES.ROWS_NOT_SPECIFIED&#13;
            };&#13;
        }&#13;
&#13;
        if((parseInt(model['Rows']) * parseInt(model['Columns'])) % 2 == 1) {&#13;
            return {&#13;
                isError: true,&#13;
                errorMessage: presenter.ERROR_MESSAGES.INVALID_GEOMETRY&#13;
            };&#13;
        }&#13;
&#13;
        if(parseInt(model['Rows']) * parseInt(model['Columns']) != model['Pairs'].length * 2) {&#13;
            return {&#13;
                isError: true,&#13;
                errorMessage: presenter.ERROR_MESSAGES.AMOUNT_OF_PAIRS_OTHER_THAN_GEOMETRY,&#13;
                errorMessageSubstitutions: {&#13;
                    rows: parseInt(model['Rows']),&#13;
                    columns: parseInt(model['Columns']),&#13;
                    pairs: parseInt(model['Rows']) * parseInt(model['Columns']) / 2&#13;
                }&#13;
            };&#13;
        }&#13;
&#13;
&#13;
        for(var i = 0; i &lt; model['Pairs'].length; i++) {&#13;
            if(model['Pairs'][i]['A (text)'] == "" &amp;&amp; model['Pairs'][i]['A (image)'] == "" &amp;&amp;&#13;
                model['Pairs'][i]['B (text)'] == "" &amp;&amp; model['Pairs'][i]['B (image)'] == "") {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorMessage: presenter.ERROR_MESSAGES.PAIR_MEMBERS_NOT_SPECIFIED,&#13;
                    errorMessageSubstitutions: {&#13;
                        pair: i + 1&#13;
                    }&#13;
                };&#13;
            }&#13;
            for(var n = 0; n &lt;= 1; n++) {&#13;
                if(model['Pairs'][i][presenter.numberToCardType(n) + ' (text)'] != "" &amp;&amp; model['Pairs'][i][presenter.numberToCardType(n) + ' (image)'] != "") {&#13;
                    return {&#13;
                        isError: true,&#13;
                        errorMessage: presenter.ERROR_MESSAGES.PAIR_MEMBER_SPECIFIED_TWICE,&#13;
                        errorMessageSubstitutions: {&#13;
                            pair: i + 1,&#13;
                            member: presenter.numberToCardType(n)&#13;
                        }&#13;
                    };&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.maxScore = model['Pairs'].length;&#13;
        presenter.rowCount = parseInt(model['Rows']);&#13;
        presenter.columnCount = parseInt(model['Columns']);&#13;
        presenter.useTwoStyles = model['Use two styles for cards'] == 'True';&#13;
        presenter.keepAspectRatio = model['Keep cards aspect ratio'] == 'True';&#13;
        presenter.previewCards = model['Show cards for preview'] == 'True';&#13;
        presenter.styleAImage = model['Image for style A'] != '' ? model['Image for style A'] : null;&#13;
        presenter.styleBImage = model['Image for style B'] != '' ? model['Image for style B'] : null;&#13;
        presenter.isActivity = !(ModelValidationUtils.validateBoolean(model['Is Not Activity']));&#13;
        presenter.imageMode = model['Image Mode'];&#13;
        presenter.keppWrongMarking = ModelValidationUtils.validateBoolean(model['Keep wrong marking']);&#13;
&#13;
        var viewWidth = parseInt(presenter.viewContainer.css('width'));&#13;
        var viewHeight = parseInt(presenter.viewContainer.css('height'));&#13;
&#13;
        presenter.requestedColumnWidth = Math.round(viewWidth / presenter.columnCount);&#13;
        presenter.requestedRowHeight = Math.round(viewHeight / presenter.rowCount);&#13;
&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            ID: model.ID,&#13;
            pairs: model['Pairs'],&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model['Is Visible'])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.slideUpAnimation = function ($element, successFunction) {&#13;
        var distance = $element.outerHeight();&#13;
        $element.animate({bottom: (distance + 'px')}, 200, function () {&#13;
            $(this).css({&#13;
                visibility: 'hidden',&#13;
                bottom: 0&#13;
            });&#13;
&#13;
            successFunction();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.slideDownAnimation = function ($element, successFunction) {&#13;
        var distance = $element.outerHeight();&#13;
        $element.css({'bottom': (distance + 'px'), visibility: 'visible'})&#13;
                .animate({bottom: 0}, 200);&#13;
        };&#13;
&#13;
    presenter.showCard = function(cell) {&#13;
        var successFunction = function () {&#13;
            presenter.slideDownAnimation(cell.children(".back"));&#13;
        };&#13;
&#13;
        presenter.slideUpAnimation(cell.children(".front"), successFunction);&#13;
&#13;
        if(!presenter.isShowAnswersActive){&#13;
            cell.addClass('was-clicked');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideCard = function(cell) {&#13;
        var successFunction = function () {&#13;
            presenter.slideDownAnimation(cell.children(".front"));&#13;
        };&#13;
&#13;
        presenter.slideUpAnimation(cell.children(".back"), successFunction);&#13;
&#13;
        if(!presenter.isShowAnswersActive){&#13;
            cell.removeClass('was-clicked');&#13;
        }&#13;
    };&#13;
&#13;
    function getMarkDiv(markType, height) {&#13;
        var factory = {&#13;
            "tick": function () {&#13;
                return $('&lt;div class="tick_mark"&gt;&amp;check;&lt;/div&gt;');&#13;
            },&#13;
&#13;
            "mismatch": function () {&#13;
                return $('&lt;div class="mismatch_mark"&gt;&amp;times;&lt;/div&gt;');&#13;
            }&#13;
        };&#13;
&#13;
        var mark = factory[markType]();&#13;
&#13;
        mark.css({&#13;
            opacity: 0.8,&#13;
            fontSize: Math.round(parseInt(height) * 0.95) + 'px'&#13;
        });&#13;
&#13;
        return mark;&#13;
    }&#13;
&#13;
    function fadeOutMark (mark, time) {&#13;
        mark.fadeOut(time, function () {&#13;
            mark.remove();&#13;
        });&#13;
    }&#13;
&#13;
    function setMarkHeight (mark) {&#13;
        mark.css('top', Math.round(parseInt(mark.css('height')) * -0.08) + 'px');&#13;
    }&#13;
&#13;
    presenter.markCardMismatch = function(cell, heightProbeCell) {&#13;
        var mark = getMarkDiv("mismatch", heightProbeCell.parent().css('height'));&#13;
&#13;
        cell.parent().append(mark);&#13;
&#13;
        setMarkHeight(mark);&#13;
        if (!presenter.keppWrongMarking) {&#13;
            fadeOutMark(mark, 1300)&#13;
        }&#13;
    };&#13;
&#13;
    presenter.markCardTick = function(cell, heightProbeCell) {&#13;
        var mark = getMarkDiv("tick", heightProbeCell.parent().css('height'));&#13;
        cell.parent().append(mark);&#13;
&#13;
        setMarkHeight(mark);&#13;
        fadeOutMark(mark, 1300)&#13;
    };&#13;
&#13;
&#13;
    presenter.prepareGrid = function() {&#13;
        var cards = [];&#13;
        var serializedCards = [];&#13;
        var card;&#13;
        var serializedCard;&#13;
&#13;
        var pairs = presenter.configuration.pairs;&#13;
&#13;
        for(var n = 0; n &lt;= 1; n++) {&#13;
            for(var j = 0; j &lt; pairs.length; j++) {&#13;
&#13;
                if(pairs[j][presenter.numberToCardType(n) + ' (text)'] != "") {&#13;
                    card = $('&lt;p&gt;&lt;/p&gt;').text(pairs[j][presenter.numberToCardType(n) + ' (text)']);&#13;
                    serializedCard = { revealed: false, type: "text", content: pairs[j][presenter.numberToCardType(n) + ' (text)'] }&#13;
&#13;
                } else {&#13;
                    card = $('&lt;img/&gt;').attr({ src: pairs[j][presenter.numberToCardType(n) + ' (image)']});&#13;
                    serializedCard = { revealed: false, type: "image", content: pairs[j][presenter.numberToCardType(n) + ' (image)'] }&#13;
                }&#13;
&#13;
                card.addClass('card').attr({'card_id' : j, 'card_style' : n});&#13;
                cards.push(card);&#13;
&#13;
                serializedCard.cardStyle = n;&#13;
                serializedCard.cardId = j;&#13;
                serializedCards.push(serializedCard);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.cards = cards;&#13;
        presenter.serializedCards = serializedCards;&#13;
&#13;
        presenter.shuffleCards();&#13;
    };&#13;
&#13;
    presenter.shuffleCards = function() {&#13;
        var shuffled = presenter.shuffleTwoArrays(presenter.cards, presenter.serializedCards);&#13;
&#13;
        presenter.cards = shuffled[0];&#13;
        presenter.serializedCards = shuffled[1];&#13;
    };&#13;
&#13;
    presenter.prepareGridFromSavedState = function(savedCards) {&#13;
        var cards = [], card,&#13;
            pairs = presenter.model['Pairs'], src;&#13;
&#13;
        for(var i = 0; i &lt; savedCards.length; i++) {&#13;
            if(savedCards[i].type == "text") {&#13;
                card = $('&lt;p&gt;&lt;/p&gt;').text(savedCards[i].content);&#13;
            } else {&#13;
                src = pairs[savedCards[i].cardId][presenter.numberToCardType(savedCards[i].cardStyle) + ' (image)'];&#13;
                card = $('&lt;img/&gt;').attr({ src: src });&#13;
            }&#13;
            card.addClass('card').attr({'card_id' : savedCards[i].cardId, 'card_style' : savedCards[i].cardStyle });&#13;
            cards.push(card);&#13;
        }&#13;
&#13;
        presenter.cards = cards;&#13;
        presenter.serializedCards = savedCards;&#13;
    };&#13;
&#13;
    presenter.handleCardClickedFirst = function(card) {&#13;
        presenter.state = presenter.STATES.CLICKED_FIRST;&#13;
        if(presenter.imageMode == 'KeepAspect'){&#13;
            if(card.hasClass('cell')){&#13;
                presenter.cardClickedFirst = card;&#13;
            }else{&#13;
                presenter.cardClickedFirst = card.parent();&#13;
            }&#13;
        }else{&#13;
            presenter.cardClickedFirst = card;&#13;
        }&#13;
        presenter.showCard(presenter.cardClickedFirst);&#13;
&#13;
        if(presenter.useTwoStyles) {&#13;
            presenter.cardClickedStyle = presenter.numberToCardType(parseInt(presenter.cardClickedFirst.find('.card').attr('card_style')));&#13;
            presenter.viewContainer.find("div.front_" + presenter.cardClickedStyle).css('cursor', 'default');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.cardReveal = function () {&#13;
        var cells = presenter.viewContainer.find('.cell');&#13;
        presenter.serializedCards[$.inArray(presenter.cardClickedFirst[0], cells)].revealed = true;&#13;
        presenter.serializedCards[$.inArray(presenter.cardClickedSecond[0], cells)].revealed = true;&#13;
    };&#13;
&#13;
    presenter.addScoreAndSentEvent = function () {&#13;
        presenter.cardReveal();&#13;
&#13;
        presenter.score++;&#13;
&#13;
        if (presenter.isAllOK() &amp;&amp; presenter.isActivity) {&#13;
            presenter.sendAllOKEvent();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createBaseEventData = function () {&#13;
        return {&#13;
            source: presenter.ID ,&#13;
            item: "",&#13;
            value: "",&#13;
            score: ""&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createItemEventData = function (firstID, secondID, isCorrect) {&#13;
        var eventData = presenter.createBaseEventData();&#13;
        var firstId = parseInt(firstID)+1;&#13;
        var secondId = parseInt(secondID)+1;&#13;
&#13;
        eventData.item = firstId+"-"+secondId;&#13;
        eventData.value = '1';&#13;
        eventData.score = isCorrect ? "1" : "0";&#13;
&#13;
        if (!presenter.isActivity) {&#13;
            eventData.score = "";&#13;
        }&#13;
&#13;
        return eventData;&#13;
    };&#13;
&#13;
    presenter.sendEventData = function (eventData) {&#13;
        if (playerController !== null) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onCardClicked = function(e) {&#13;
        e.stopPropagation();&#13;
&#13;
        var eventData;&#13;
        var cardId = $(e.target).parent().find('.card').attr('card_id');&#13;
&#13;
        if(presenter.useTwoStyles) {&#13;
            var clickedStyle;&#13;
            clickedStyle = presenter.numberToCardType(parseInt($(e.target).parent().find('.card').attr('card_style')));&#13;
            if(clickedStyle == presenter.cardClickedStyle) {&#13;
                return;&#13;
            }&#13;
        }&#13;
        switch(presenter.state) {&#13;
            case presenter.STATES.READY:&#13;
                presenter.handleCardClickedFirst($(e.target).parent());&#13;
                break;&#13;
&#13;
            case presenter.STATES.CLICKED_FIRST:&#13;
                presenter.state = presenter.STATES.CLICKED_SECOND;&#13;
&#13;
                if(presenter.imageMode == 'KeepAspect'){&#13;
                    if($(e.target).parent().hasClass('cell')){&#13;
                        presenter.cardClickedSecond = $(e.target).parent();&#13;
                    }else{&#13;
                        presenter.cardClickedSecond = $(e.target).parent().parent();&#13;
                    }&#13;
                }else{&#13;
                    presenter.cardClickedSecond = $(e.target).parent();&#13;
                }&#13;
&#13;
                presenter.showCard(presenter.cardClickedSecond);&#13;
&#13;
                presenter.cardClickedFirstId = presenter.cardClickedFirst.find('.card').attr('card_id');&#13;
                presenter.cardClickedSecondId = presenter.cardClickedSecond.find('.card').attr('card_id');&#13;
&#13;
                if(presenter.cardClickedFirstId != presenter.cardClickedSecondId) {&#13;
                    presenter.errorCount++;&#13;
                    presenter.markCardMismatch(presenter.cardClickedFirst.find(".card"), presenter.cardClickedFirst.find(".card"));&#13;
                    presenter.markCardMismatch(presenter.cardClickedSecond.find(".card"), presenter.cardClickedFirst.find(".card"));&#13;
&#13;
                    eventData = presenter.createItemEventData(presenter.cardClickedFirstId, presenter.cardClickedSecondId,  false);&#13;
                    presenter.sendEventData(eventData);&#13;
                } else {&#13;
                    presenter.markCardTick(presenter.cardClickedFirst.find(".card"), presenter.cardClickedFirst.find(".card"));&#13;
                    presenter.markCardTick(presenter.cardClickedSecond.find(".card"), presenter.cardClickedFirst.find(".card"));&#13;
&#13;
                    eventData = presenter.createItemEventData(presenter.cardClickedFirstId, presenter.cardClickedSecondId, true);&#13;
                    presenter.sendEventData(eventData);&#13;
&#13;
                    presenter.addScoreAndSentEvent();&#13;
                }&#13;
&#13;
                if(presenter.useTwoStyles) {&#13;
                    presenter.viewContainer.find("div.front_" + presenter.cardClickedStyle).css('cursor', '');&#13;
                    presenter.cardClickedStyle = null;&#13;
                }&#13;
&#13;
                break;&#13;
&#13;
            case presenter.STATES.CLICKED_SECOND:&#13;
                if(presenter.cardClickedFirstId != presenter.cardClickedSecondId) {&#13;
                    presenter.hideCard(presenter.cardClickedFirst);&#13;
                    presenter.hideCard(presenter.cardClickedSecond);&#13;
                }&#13;
                presenter.handleCardClickedFirst($(e.target).parent());&#13;
&#13;
                presenter.cardClickedSecond = null;&#13;
                presenter.cardClickedFirstId = null;&#13;
                presenter.cardClickedSecondId = null;&#13;
&#13;
                if (presenter.keppWrongMarking) {&#13;
                    var mark = presenter.viewContainer.find('.mismatch_mark');&#13;
                    fadeOutMark(mark, 1000);&#13;
                }&#13;
&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createGrid = function() {&#13;
        var cards = presenter.cards;&#13;
&#13;
        var $container = $('&lt;div class="gamememo_container"&gt;&lt;/div&gt;');&#13;
&#13;
        if(presenter.keepAspectRatio) {&#13;
            if(presenter.requestedRowHeight &gt; presenter.requestedColumnWidth) {&#13;
                $container.css('height', (presenter.requestedColumnWidth * presenter.rowCount) + 'px');&#13;
            } else if (presenter.requestedColumnWidth &gt;= presenter.requestedRowHeight) {&#13;
                $container.css('width', (presenter.requestedRowHeight * presenter.columnCount) + 'px');&#13;
                $container.css('height', (presenter.requestedRowHeight * presenter.rowCount) + 'px');&#13;
            }&#13;
        } else {&#13;
            $container.css({&#13;
                width: presenter.viewContainer.css('width'),&#13;
                height: presenter.viewContainer.css('height')&#13;
            });&#13;
        }&#13;
&#13;
        var columnWidthPercent = (100.0 / presenter.columnCount) + '%';&#13;
        var rowHeightPercent = (100.0 / presenter.rowCount) + '%';&#13;
&#13;
        for(var r = 0; r &lt; presenter.rowCount; r++) {&#13;
&#13;
            for(var c = 0; c &lt; presenter.columnCount; c++) {&#13;
                var front = $('&lt;div class="front placeholder"&gt;&lt;/div&gt;')&#13;
                    .addClass(presenter.useTwoStyles ?&#13;
                    'front_' + presenter.numberToCardType(parseInt(cards[r * presenter.columnCount + c].attr('card_style'))) :&#13;
                    'front_A');&#13;
&#13;
                if(!presenter.preview) {&#13;
                    front.click(presenter.onCardClicked);&#13;
                }&#13;
&#13;
                var back = $('&lt;div class="back placeholder"&gt;&lt;/div&gt;')&#13;
                    .append(cards[r * presenter.columnCount + c]);&#13;
&#13;
                var cell = $('&lt;div class="cell"&gt;&lt;/div&gt;').css({&#13;
                    height : rowHeightPercent,&#13;
                    width : columnWidthPercent&#13;
                });&#13;
&#13;
&#13;
                if(!presenter.preview) {&#13;
                    cell.append(back).append(front);&#13;
&#13;
                } else {&#13;
                    if(presenter.previewCards) {&#13;
                        back.css('display', 'block');&#13;
                        cell.append(back);&#13;
&#13;
                    } else {&#13;
                        cell.append(back).append(front);&#13;
                    }&#13;
                }&#13;
&#13;
                $container.append(cell);&#13;
            }&#13;
        }&#13;
&#13;
        var img;&#13;
&#13;
        if(presenter.styleAImage != null){&#13;
            if(presenter.imageMode == 'Stretch'){&#13;
                $container.find('div.front_A').css({&#13;
                    'background': 'url(' + encodeURI(presenter.styleAImage) + ')',&#13;
                    'background-size': '100% 100%'&#13;
                });&#13;
            }else if(presenter.imageMode == 'KeepAspect'){&#13;
                img = $('&lt;img&gt;');&#13;
                img.attr('src', encodeURI(presenter.styleAImage));&#13;
                img.css({&#13;
                    'display': 'block',&#13;
                    'max-width': presenter.requestedColumnWidth,&#13;
                    'max-height': presenter.requestedRowHeight,&#13;
                    'width': 'auto',&#13;
                    'height': 'auto'&#13;
                });&#13;
                $container.find('div.front_A').append(img);&#13;
                $container.find('div.front_A').css('background', 'transparent');&#13;
            }else{&#13;
                $container.find('div.front_A').css({&#13;
                    'background': 'url(' + encodeURI(presenter.styleAImage) + ')'&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        if(presenter.styleBImage != null){&#13;
            if(presenter.imageMode == 'Stretch'){&#13;
                $container.find('div.front_B').css({&#13;
                    'background': 'url(' + encodeURI(presenter.styleBImage) + ')',&#13;
                    'background-size': '100% 100%'&#13;
                });&#13;
            }else if(presenter.imageMode == 'KeepAspect'){&#13;
                img = $('&lt;img&gt;');&#13;
                img.attr('src', encodeURI(presenter.styleBImage));&#13;
                img.css({&#13;
                    'display': 'block',&#13;
                    'max-width': presenter.requestedColumnWidth,&#13;
                    'max-height': presenter.requestedRowHeight,&#13;
                    'width': 'auto',&#13;
                    'height': 'auto'&#13;
                });&#13;
                $container.find('div.front_B').append(img);&#13;
                $container.find('div.front_B').css('background', 'transparent');&#13;
            }else{&#13;
                $container.find('div.front_B').css({&#13;
                    'background': 'url(' + encodeURI(presenter.styleBImage) + ')'&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        presenter.viewContainer.children('div').append($container);&#13;
&#13;
        $container.find('p.card').each(function(i, e) {&#13;
            var element = $(e);&#13;
            element.css({&#13;
                position : 'absolute',&#13;
                width : '100%',&#13;
                top : Math.round((parseInt(element.parent().css('height')) - parseInt(element.css('height'))) / 2) + 'px'&#13;
            });&#13;
        });&#13;
&#13;
        if(!presenter.preview || (presenter.preview &amp;&amp; !presenter.previewCards))&#13;
            $container.find('div.back').css('visibility', 'hidden');&#13;
&#13;
        if(presenter.imageMode == 'Stretch'){&#13;
            presenter.viewContainer.find('.gamememo_container .cell .back.placeholder img').css({&#13;
                'width': '100%',&#13;
                'height': '100%'&#13;
            });&#13;
        }&#13;
&#13;
        if(presenter.imageMode == 'KeepAspect'){&#13;
            presenter.viewContainer.find('.gamememo_container .cell .back.placeholder img').css({&#13;
                'display': 'block',&#13;
                'max-width': presenter.requestedColumnWidth,&#13;
                'max-height': presenter.requestedRowHeight,&#13;
                'width': 'auto',&#13;
                'height': 'auto'&#13;
            });&#13;
&#13;
            presenter.viewContainer.find('.gamememo_container .cell .back.placeholder img').load(function () {&#13;
                presenter.viewContainer.find('.gamememo_container .cell .back.placeholder').each(function () {&#13;
                    centerImage(this);&#13;
                });&#13;
            });&#13;
&#13;
            presenter.viewContainer.find('img').load(function () {&#13;
                presenter.viewContainer.find('div.front_A').each(function () {&#13;
                    centerImage(this);&#13;
                });&#13;
            });&#13;
&#13;
            presenter.viewContainer.find('img').load(function () {&#13;
                presenter.viewContainer.find('div.front_B').each(function () {&#13;
                    centerImage(this);&#13;
                });&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    function centerImage(element) {&#13;
        var imgTop = ($(element).height() - $(element).find('img').height())/2;&#13;
        var imgLeft = ($(element).width() - $(element).find('img').width())/2;&#13;
&#13;
        $(element).find('img').css({&#13;
            'top': imgTop+'px',&#13;
            'left': imgLeft+'px',&#13;
            'position': 'relative'&#13;
        });&#13;
    }&#13;
&#13;
    presenter.initializeLogic = function(view, model) {&#13;
        presenter.viewContainer = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.configuration = presenter.readConfiguration(model);&#13;
        presenter.ID = model.ID;&#13;
        if(presenter.configuration.isError) {&#13;
            presenter.showErrorMessage(presenter.configuration.errorMessage, presenter.configuration.errorMessageSubstitutions);&#13;
        } else {&#13;
            presenter.prepareGrid();&#13;
            presenter.createGrid();&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.preview = false;&#13;
        eventBus = playerController.getEventBus();&#13;
        presenter.initializeLogic(view, model);&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.preview = true;&#13;
        presenter.initializeLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            score: presenter.score,&#13;
            errorCount: presenter.errorCount,&#13;
            cards: presenter.serializedCards,&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var stateObj = JSON.parse(state);&#13;
&#13;
        presenter.viewContainer.html('&lt;div&gt;&lt;/div&gt;');&#13;
        presenter.score = stateObj.score;&#13;
        presenter.errorCount = stateObj.errorCount;&#13;
        presenter.state = presenter.STATES.READY;&#13;
&#13;
        presenter.prepareGridFromSavedState(stateObj.cards);&#13;
        presenter.createGrid();&#13;
&#13;
        var cell;&#13;
&#13;
        for(var i = 0; i &lt; stateObj.cards.length; i++) {&#13;
            if(stateObj.cards[i].revealed) {&#13;
                cell = $(presenter.viewContainer.find(".cell")[i]);&#13;
&#13;
                cell.children(".front").css('visibility', 'hidden');&#13;
                cell.children(".back").css('visibility', 'visible');&#13;
                cell.addClass("was-clicked");&#13;
            }&#13;
        }&#13;
&#13;
        if (stateObj.isVisible != undefined) {&#13;
            presenter.configuration.isVisible = stateObj.isVisible;&#13;
            presenter.setVisibility(presenter.configuration.isVisible);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.concealAllCards = function () {&#13;
        $.each(presenter.serializedCards, function (index, value) {&#13;
            value.revealed = false;&#13;
        });&#13;
    };&#13;
&#13;
&#13;
    presenter.reset = function(){&#13;
        presenter.viewContainer.html('&lt;div&gt;&lt;/div&gt;');&#13;
        presenter.score = 0;&#13;
        presenter.errorCount = 0;&#13;
        presenter.state = presenter.STATES.READY;&#13;
&#13;
        presenter.cardClickedFirst = null;&#13;
        presenter.cardClickedSecond = null;&#13;
        presenter.cardClickedFirstId = null;&#13;
        presenter.cardClickedSecondId = null;&#13;
&#13;
        presenter.prepareGrid();&#13;
        presenter.createGrid();&#13;
        presenter.concealAllCards();&#13;
&#13;
        MathJax.CallBack.Queue().Push(function () {MathJax.Hub.Typeset(presenter.viewContainer.find(".gamememo_container")[0])});&#13;
&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (!presenter.isActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        var lastErrorCount = presenter.errorCount;&#13;
        presenter.errorCount = 0;&#13;
&#13;
        return lastErrorCount;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        return presenter.isActivity ? presenter.maxScore : 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        return presenter.isActivity ? presenter.score : 0;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'showAnswers' : presenter.showAnswers,&#13;
            'hideAnswers' : presenter.hideAnswers,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore();&#13;
    };&#13;
&#13;
     presenter.sendAllOKEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.ID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (presenter.isActivity) {&#13;
            presenter.turnOffUserInteraction();&#13;
&#13;
            markCardsWithCorrectWrongStyle(filterClickedCards(getClickedCards()), true);&#13;
        }&#13;
    };&#13;
&#13;
    function getClickedCards() {&#13;
        return filterClickedCards(presenter.viewContainer.find('.cell.was-clicked'));&#13;
    }&#13;
&#13;
    function filterClickedCards(clickedCards) {&#13;
        var filteredArray = [];&#13;
        for(var i = 0; i &lt; clickedCards.length; i++) {&#13;
            filteredArray.push(clickedCards[i]);&#13;
        }&#13;
&#13;
        return filteredArray;&#13;
    }&#13;
&#13;
    function filterCardsById (cardsArray, id) {&#13;
        return cardsArray.filter(function (element) {&#13;
                return ($(element).find("[card_id]").attr("card_id") ==  id);&#13;
        });&#13;
    }&#13;
&#13;
    function getStyleAction (isAdding) {&#13;
        if (isAdding) {&#13;
            return function (element, style) {&#13;
                $(element).addClass(style);&#13;
            };&#13;
        }&#13;
&#13;
        return function (element, style) {&#13;
            $(element).removeClass(style);&#13;
        };&#13;
    }&#13;
&#13;
    function markCardsWithCorrectWrongStyle (clickedCards, isAdding) {&#13;
        var styleAction = getStyleAction(isAdding);&#13;
&#13;
&#13;
        function styleWithCorrect(element) {&#13;
            styleAction(element, "cell-correct");&#13;
        }&#13;
&#13;
        function styleWithWrong(element) {&#13;
            styleAction(element, "cell-wrong");&#13;
        }&#13;
&#13;
        var usedIds = [];&#13;
&#13;
        clickedCards.map(function (element) {&#13;
            var id = $(element).find("[card_id]").attr("card_id");&#13;
&#13;
            if (usedIds.indexOf(id) == -1) {&#13;
&#13;
                var cardsById = filterCardsById(clickedCards, id);&#13;
&#13;
                if (cardsById.length == 2) {&#13;
                    cardsById.map(styleWithCorrect);&#13;
                } else {&#13;
                    cardsById.map(styleWithWrong);&#13;
                }&#13;
                usedIds.push(id);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function getClickablePartOfCards() {&#13;
        return presenter.viewContainer.find(".front.placeholder");&#13;
    }&#13;
&#13;
    function unbindOnCardsCollection (cardsCollection) {&#13;
        for(var i = 0; i &lt; cardsCollection.length; i++) {&#13;
            $(cardsCollection[i]).unbind();&#13;
        }&#13;
    }&#13;
&#13;
    function bindClickInteractionOnCardsCollection (cardsCollection) {&#13;
        for(var i = 0; i &lt; cardsCollection.length; i++) {&#13;
            $(cardsCollection[i]).click(presenter.onCardClicked);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.turnOffUserInteraction = function () {&#13;
        unbindOnCardsCollection(getClickablePartOfCards());&#13;
    };&#13;
&#13;
    presenter.turnOnUserInteraction = function () {&#13;
        bindClickInteractionOnCardsCollection(getClickablePartOfCards());&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (presenter.isActivity) {&#13;
            presenter.turnOnUserInteraction();&#13;
            markCardsWithCorrectWrongStyle(getClickedCards(), false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (!presenter.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
&#13;
        presenter.showCard(presenter.viewContainer.find('.cell'));&#13;
        presenter.viewContainer.find('.cell').addClass('.cell-show-answers');&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (!presenter.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.viewContainer.find('.cell').removeClass('.cell-show-answers');&#13;
        presenter.viewContainer.find('.cell').find('.back').css('visibility', 'hidden');&#13;
        presenter.viewContainer.find('.cell').find('.front').css('visibility', 'visible');&#13;
&#13;
        presenter.viewContainer.find('.was-clicked').find('.front').css('visibility', 'hidden');&#13;
        presenter.viewContainer.find('.was-clicked').find('.back').css('visibility', 'visible');&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.viewContainer.css("visibility", isVisible ? "visible" : "hidden");&#13;
        presenter.viewContainer.css("display", isVisible ? "block" : "none");&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="graph" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Is not an activity" name="isNotActivity" nameLabel="graph_property_is_not_activity" type="boolean"/>
		<property isLocalized="true" name="X axis description" nameLabel="graph_property_x_axis_description" type="string"/>
		<property name="Show X axis bars descriptions" nameLabel="graph_property_show_x_axis_bars_descriptions" type="boolean"/>
		<property name="X axis bars descriptions" nameLabel="graph_property_x_axis_bars_descriptions" type="list">
			<property isLocalized="true" name="Description" nameLabel="graph_property_description" type="string"/>
		</property>
		<property name="Show X axis series descriptions" nameLabel="graph_property_show_x_axis_series_descriptions" type="boolean"/>
		<property name="X axis series descriptions" nameLabel="graph_property_x_axis_series_descriptions" type="list">
			<property isLocalized="true" name="Description" nameLabel="graph_property_description" type="string"/>
		</property>
		<property isLocalized="true" name="Y axis description" nameLabel="graph_property_y_axis_description" type="string"/>
		<property name="Y axis maximum value" nameLabel="graph_property_y_axis_maximum_value" type="string"/>
		<property name="Y axis minimum value" nameLabel="graph_property_y_axis_minimum_value" type="string"/>
		<property name="Y axis grid step" nameLabel="graph_property_y_axis_grid_step" type="string"/>
        <property name="Y axis values" nameLabel="graph_property_y_axis_values" type="string"/>
		<property name="Interactive" nameLabel="graph_property_interactive" type="boolean"/>
		<property name="Interactive step" nameLabel="graph_property_interactive_step" type="string"/>
		<property name="Data" nameLabel="graph_property_data" type="text"/>
		<property name="Answers" nameLabel="graph_property_answers" type="list">
			<property name="Answer" nameLabel="graph_property_answer" type="string"/>
		</property>
		<property name="Series colors" nameLabel="graph_property_series_colors" type="list">
			<property name="Color" nameLabel="graph_property_color" type="string"/>
		</property>
		<property name="Decimal separator" nameLabel="graph_property_decimal_separator" type="string"/>
	</model>
<css>.graph_container_outer {&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    bottom: 0;&#13;
    right: 0;&#13;
}&#13;
&#13;
.graph_container_outer div {&#13;
    position: absolute;&#13;
}&#13;
&#13;
.graph_container_inner {&#13;
    top: 10px;&#13;
    left: 10px;&#13;
    bottom: 10px;&#13;
    right: 10px;&#13;
    -ms-touch-action: none;&#13;
}&#13;
&#13;
.graph_axis_y_description {&#13;
    top: 0;&#13;
    left: 0;&#13;
}&#13;
&#13;
.graph_axis_x_description {&#13;
    right: 0;&#13;
}&#13;
&#13;
.graph_chart_outer {&#13;
    left: 0;&#13;
    bottom: 0;&#13;
}&#13;
&#13;
.graph_grid_description {&#13;
    text-align: right;&#13;
    color: #999;&#13;
    font-size: 75%;&#13;
}&#13;
&#13;
.graph_chart_inner {&#13;
    top: 0;&#13;
    bottom: 0;&#13;
    right: 0;&#13;
}&#13;
&#13;
.graph_axis_line {&#13;
    background: #000;&#13;
}&#13;
&#13;
.graph_axis_x_line {&#13;
    left: 0;&#13;
    height: 2px;&#13;
    right: 0;&#13;
}&#13;
&#13;
.graph_axis_y_line {&#13;
    left: 0;&#13;
    width: 2px;&#13;
    bottom: 0;&#13;
    top: 0;&#13;
}&#13;
&#13;
.graph_axis_arrow {&#13;
    width: 0;&#13;
    height: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.graph_axis_y_arrow {&#13;
    border-left: 5px solid transparent;&#13;
    border-right: 5px solid transparent;&#13;
    border-bottom: 5px solid black;&#13;
    top: 0;&#13;
    left: -4px;&#13;
}&#13;
&#13;
.graph_axis_x_arrow {&#13;
    border-top: 5px solid transparent;&#13;
    border-bottom: 5px solid transparent;&#13;
    border-left: 5px solid black;&#13;
    right: 0;&#13;
}&#13;
&#13;
.graph_grid_block {&#13;
    left: 0;&#13;
    right: 0;&#13;
}&#13;
&#13;
.graph_grid_block_above {&#13;
    border-top: 1px dotted #999;&#13;
}&#13;
&#13;
.graph_grid_block_below {&#13;
    border-bottom: 1px dotted #999;&#13;
}&#13;
&#13;
.graph_serie_container {&#13;
    position: relative  !important;&#13;
    float: left;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.graph_serie_element {&#13;
    top: 0;&#13;
    left: 0;&#13;
    bottom: 0;&#13;
    right: 0;&#13;
}&#13;
&#13;
.graph_column_container {&#13;
    position: relative !important;&#13;
    float: left;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.graph_value_container {&#13;
    width: 100%;&#13;
    bottom: 0;&#13;
}&#13;
&#13;
.graph_value_element {&#13;
    border-left: 1px solid #666;&#13;
    border-right: 1px solid #666;&#13;
    top: 0;&#13;
    left: 0;&#13;
    bottom: 0;&#13;
    right: 0;&#13;
}&#13;
&#13;
&#13;
.graph_value_element_positive {&#13;
    border-top: 1px solid #666;&#13;
}&#13;
&#13;
.graph_value_element_negative {&#13;
    border-bottom: 1px solid #666;&#13;
}&#13;
&#13;
.graph_value_element_invalid {&#13;
    border-left-color: #ff0000;&#13;
    border-right-color: #ff0000;&#13;
}&#13;
&#13;
.graph_value_element_positive_invalid {&#13;
    border-top-color: #ff0000;&#13;
}&#13;
&#13;
.graph_value_element_negative_invalid {&#13;
    border-bottom-color: #ff0000;&#13;
}&#13;
&#13;
.graph_value_element_valid {&#13;
    border-left-color: #00ff00;&#13;
    border-right-color: #00ff00;&#13;
}&#13;
&#13;
.graph_value_element_positive_valid {&#13;
    border-top-color: #00ff00;&#13;
}&#13;
&#13;
.graph_value_element_negative_valid {&#13;
    border-bottom-color: #00ff00;&#13;
}&#13;
&#13;
&#13;
.graph_grid, .graph_series, .graph_axises  {&#13;
    top: 0;&#13;
    left: 0;&#13;
    bottom: 0;&#13;
    right: 0;&#13;
}&#13;
&#13;
.graph_column_container_interactive {&#13;
    top: 0;&#13;
    left: 0;&#13;
    bottom: 0;&#13;
    right: 0;&#13;
}&#13;
&#13;
.graph_column_container_above {&#13;
    cursor: n-resize;&#13;
}&#13;
&#13;
.graph_value_element_interactive, .graph_column_container_below {&#13;
    cursor: s-resize;&#13;
}&#13;
&#13;
.graph_serie_description, .graph_column_description {&#13;
    text-align: center;&#13;
    color: #999;&#13;
    font-size: 75%;&#13;
    overflow: hidden;&#13;
    height: 16px;&#13;
    left: 0;&#13;
    right: 0;&#13;
}&#13;
&#13;
.graph_column_description {&#13;
    bottom: -20px;&#13;
}&#13;
</css><view/><preview/><presenter>function Addongraph_create(){&#13;
&#13;
    /*&#13;
    *KNOWN ISSUES:&#13;
    *       Invalid properties values (Data, Y grid step, Y max, Y min values):&#13;
    *           addon graph uses functions with errors - parseInt &amp; parseFloat. It creates situations where user could&#13;
    *           type in properties fields digits with strings, and graph still shows up as valid. Changing validation to&#13;
    *           be too much accurate can break backward compatibility&#13;
    *&#13;
    *       Answers greater than Y max / lower than Y min:&#13;
    *           Answers validation is invalid. It allows create graphs where answer is greater or lower than YMax/YMin.&#13;
    *           Changing this validation can break backward compatibility, graph addon have to allow such invalid situations.&#13;
    *&#13;
    *       Y grid step greater than Y max:&#13;
    *           Y grid step validation is also invalid. Allows situations where grid is greater then Y max, it should&#13;
    *           just show nothing, no grid &amp; no Y axis values.&#13;
    *&#13;
    *       Model validation flow:&#13;
    *          Logic of parsing &amp; validating properties requires some properties be checked and parsed at first.&#13;
    *          Don't changeflow of model validation.&#13;
    *&#13;
    */&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.drawingXPosition  = null;&#13;
    presenter.absoluteRange     = null;&#13;
    presenter.chartInner        = null;&#13;
    presenter.axisXLine         = null;&#13;
    presenter.eventBus          = null;&#13;
    presenter.playerController  = null;&#13;
    presenter.errorMode         = false;&#13;
    presenter.isStarted         = false;&#13;
&#13;
    presenter.$view             = null;&#13;
    presenter.configuration     = {};&#13;
    var minimumValueGraph;&#13;
&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        DATA_ROW_NOT_ENOUGH_COLUMNS:      "Row %row% in data contains not enough columns, minimum amount of columns is 2 - first indicates X axis description, second and further contain values",&#13;
        DATA_ROW_MALFORMED:               "Row %row% is not valid CSV - check its syntax",&#13;
        DATA_ROW_VALUE_NOT_NUMERIC:       "Value \"%value%\" of column %column% of row %row% is not numeric",&#13;
        DATA_ROW_DIFFERENT_COLUMNS_COUNT: "Row %row% contains different amount of columns than previous rows",&#13;
        AXIS_Y_MAXIMUM_VALUE_NOT_NUMERIC: "Y axis maximum value is not numeric",&#13;
        AXIS_Y_MINIMUM_VALUE_NOT_NUMERIC: "Y axis minimum value is not numeric",&#13;
        AXIS_Y_MAXIMUM_VALUE_TOO_SMALL:   "Cannot fit graph into view container - Y axis maximum value of %range% is smaller than maximum value %value% passed with the data",&#13;
        AXIS_Y_MINIMUM_VALUE_TOO_BIG:     "Cannot fit graph into view container - Y axis minimum value of %range% is bigger than minimum value %value% passed with the data",&#13;
        AXIS_Y_DOES_NOT_INCLUDE_ZERO:     "Invalid Y axis minimum &amp; maximum value - graph should contain value of zero",&#13;
        AXIS_Y_GRID_STEP_NOT_NUMERIC:     "Y axis grid step is not numeric",&#13;
        SERIES_COLORS_AMOUNT_INVALID:     "Amount of Series colors is different that amount of columns in the data",&#13;
        INTERACTIVE_STEP_NOT_NUMERIC:     "Interactive step is not numeric",&#13;
        INTERACTIVE_STEP_NOT_POSITIVE:    "Interactive step is not a positive integer",&#13;
        ANSWER_NOT_NUMERIC:               "Answer \"%answer%\" is not numeric",&#13;
        ANSWERS_AMOUNT_INVALID:           "Amount of answers (%answers%) has to be equal amount of bars (%bars%)",&#13;
        AXIS_X_SERIES_DESCRIPTIONS_AMOUNT_INVALID: "Amount of X axis series descriptions (%descriptions%) has to be equal to amount of series (%series%)",&#13;
        AXIS_X_BARS_DESCRIPTIONS_AMOUNT_INVALID:   "Amount of X axis bars descriptions (%descriptions%) has to be equal to amount of bars (%bars%)",&#13;
        YAV_01: "Y axis values have to be float numbers.",&#13;
        YAV_02: "Cyclic value can't be zero number in Y axis values property.",&#13;
        YAV_03: "Y axis values can't be greater than Y maximum value.",&#13;
        YAV_04: "Y axis values can't be lower than Y minimum value.",&#13;
        YAV_05: "Cyclic value can't be negative number in Y axis values property.",&#13;
        YAV_06: "Y axis values can't have duplicated numbers"&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function(message, substitutions) {&#13;
        var errorContainer;&#13;
        if(typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for(var key in substitutions) {&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.redrawGraphValue = function(valueContainer) {&#13;
        var currentValue = parseFloat(valueContainer.attr('current-value'));&#13;
        var valueElement = valueContainer.find('.graph_value_element');&#13;
&#13;
        if(currentValue &gt;= 0) {&#13;
            valueElement.removeClass('graph_value_element_negative').addClass('graph_value_element_positive');&#13;
            valueContainer.css({&#13;
                bottom: (presenter.drawingXPosition - Math.round(presenter.axisXLine.height() / 2)) + 'px',&#13;
                height: parseFloat(currentValue / presenter.absoluteRange) * 100 + '%',&#13;
                top: ''&#13;
            });&#13;
&#13;
        } else if (currentValue &lt; 0) {&#13;
            valueElement.removeClass('graph_value_element_positive').addClass('graph_value_element_negative');&#13;
            valueContainer.css({&#13;
                height: parseFloat(currentValue * -1 / presenter.absoluteRange) * 100 + '%',&#13;
                top: (presenter.chartInner.height() - presenter.drawingXPosition + Math.round(presenter.axisXLine.height() / 2)) + 'px',&#13;
                bottom: ''&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
&#13;
    presenter.areAllOk = function(currentGridValues) {&#13;
        for (var i = 0; i &lt; currentGridValues.length; i++) {&#13;
            if (currentGridValues[i].indexOf(false) !== -1) {&#13;
                return false;&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.sendOverallScoreEvent = function(direction, valueId, newValue, wasAllValidBeforeChange, wasThisValidBeforeChange, willAllBeValidAfterChange, willThisBeValidAfterChange) {&#13;
        var score =&#13;
            (wasAllValidBeforeChange    ? 'BEFORE_ALL_VALID '  : 'BEFORE_ALL_INVALID ') +&#13;
                (wasThisValidBeforeChange   ? 'BEFORE_THIS_VALID ' : 'BEFORE_THIS_INVALID ') +&#13;
                (willAllBeValidAfterChange  ? 'AFTER_ALL_VALID '   : 'AFTER_ALL_INVALID ') +&#13;
                (willThisBeValidAfterChange ? 'AFTER_THIS_VALID'   : 'AFTER_THIS_INVALID');&#13;
&#13;
        var parsedValue = '' + newValue;&#13;
        if (presenter.configuration.isDecimalSeparatorSet) {&#13;
            parsedValue = parsedValue.replace('.', presenter.configuration.decimalSeparator);&#13;
        }&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            'source': presenter.configuration.ID,&#13;
            'item'  : valueId + ' ' + direction,&#13;
            'value' : parsedValue,&#13;
            'score' : score&#13;
        });&#13;
&#13;
        presenter.configuration.results[valueId.split(' ')[0]][valueId.split(' ')[1]] = willThisBeValidAfterChange;&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            'source': presenter.configuration.ID,&#13;
            'item': valueId,&#13;
            'value': parsedValue,&#13;
            'score': willThisBeValidAfterChange ? '1' : '0'&#13;
        });&#13;
&#13;
        if (presenter.areAllOk(presenter.configuration.results)) {&#13;
            presenter.eventBus.sendEvent('ValueChanged', {&#13;
                'source': presenter.configuration.ID,&#13;
                'item': 'all',&#13;
                'value': '',&#13;
                'score': ''&#13;
            });&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.areAllBarsValid = function() {&#13;
        var r = true;&#13;
        presenter.$view.find('.graph_value_container').each(function(i, e) {&#13;
            if(presenter.configuration.answers[i] != parseFloat($(e).attr('current-value'))) {&#13;
                r = false;&#13;
            }&#13;
        });&#13;
&#13;
        return r;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.errorMode = true;&#13;
        if (!presenter.isStarted || presenter.configuration.isNotActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if(presenter.configuration.isInteractive) {&#13;
            presenter.$view.find('.graph_value_element_interactive, .graph_column_container_below, .graph_column_container_above').css('cursor', 'default');&#13;
&#13;
            presenter.$view.find('.graph_value_container').each(function(index, element) {&#13;
                if(presenter.configuration.answers[index] != parseFloat($(element).attr('current-value'))) {&#13;
                    $(element).find('.graph_value_element').addClass('graph_value_element_invalid');&#13;
                    $(element).find('.graph_value_element_positive').addClass('graph_value_element_positive_invalid');&#13;
                    $(element).find('.graph_value_element_negative').addClass('graph_value_element_negative_invalid');&#13;
                } else {&#13;
                    $(element).find('.graph_value_element').addClass('graph_value_element_valid');&#13;
                    $(element).find('.graph_value_element_positive').addClass('graph_value_element_positive_valid');&#13;
                    $(element).find('.graph_value_element_negative').addClass('graph_value_element_negative_valid');&#13;
                }&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.errorMode = false;&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if(presenter.configuration.isInteractive) {&#13;
            presenter.$view.find('.graph_value_element_interactive, .graph_column_container_below, .graph_column_container_above').css('cursor', '');&#13;
&#13;
            var classesToRemove =&#13;
                [ 'graph_value_element_invalid', 'graph_value_element_positive_invalid', 'graph_value_element_negative_invalid',&#13;
                    'graph_value_element_valid',   'graph_value_element_positive_valid',   'graph_value_element_negative_valid' ];&#13;
&#13;
            for(var i = 0; i &lt; classesToRemove.length; i++) {&#13;
                presenter.$view.find('.' + classesToRemove[i]).removeClass(classesToRemove[i]);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.calcScore = function () {&#13;
        var score = 0;&#13;
        presenter.$view.find('.graph_value_container').each(function(index, element) {&#13;
            if(presenter.configuration.answers[index] == parseFloat($(element).attr('current-value'))) {&#13;
                score++&#13;
            }&#13;
        });&#13;
&#13;
        return score;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (presenter.configuration.isNotActivity || !presenter.configuration.shouldCalcScore || !presenter.isStarted) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return presenter.calcScore();&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if (presenter.configuration.isNotActivity) return 0;&#13;
&#13;
        return presenter.configuration.answers.length;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (presenter.configuration.isNotActivity || !presenter.configuration.shouldCalcScore || !presenter.isStarted) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return presenter.getMaxScore() - presenter.getScore();&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.redrawValueContainers = function () {&#13;
        var valueContainers = presenter.$view.find('.graph_value_container');&#13;
        var currentValueContainer;&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.data.length; i++) {&#13;
            for (var j = 0; j &lt; presenter.configuration.data[i].length; j++) {&#13;
                currentValueContainer = $(valueContainers[i * presenter.configuration.data[i].length + j]);&#13;
                currentValueContainer.attr('current-value', presenter.configuration.data[i][j]);&#13;
                presenter.redrawGraphValue(currentValueContainer);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.isStarted = false;&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.isShowAnswersActive = false;&#13;
&#13;
        presenter.redrawValueContainers();&#13;
&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        presenter.setWorkMode();&#13;
&#13;
        presenter.removeShowAnswersClass();&#13;
    };&#13;
&#13;
    presenter.removeShowAnswersClass = function () {&#13;
        presenter.$view.find(".graph_value_container").each(function (index, element) {&#13;
            $(element).parent().find('.graph_column_container_interactive').removeClass("graph_column_container_show_answers");&#13;
            $(element).removeClass("graph_show_answers");&#13;
        });&#13;
    };&#13;
&#13;
&#13;
    presenter.getState = function() {&#13;
        var r = [];&#13;
        presenter.$view.find('.graph_value_container').each(function(index, element) {&#13;
            r.push(parseFloat($(element).attr('current-value')));&#13;
        });&#13;
        var state = {&#13;
            'r' : r,&#13;
            'isVisible' : presenter.configuration.isVisible,&#13;
            shouldCalcScore: presenter.configuration.shouldCalcScore,&#13;
            isStarted: presenter.isStarted&#13;
        };&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        var state = JSON.parse(stateString),&#13;
            valueContainers = presenter.$view.find('.graph_value_container'),&#13;
            currentValueContainer,&#13;
            r = state.r, i,&#13;
            shouldCalcScore = state.shouldCalcScore;&#13;
&#13;
        for (i = 0; i &lt; r.length; i++) {&#13;
            currentValueContainer = $(valueContainers[i]);&#13;
            currentValueContainer.attr('current-value', parseFloat(r[i]));&#13;
            presenter.redrawGraphValue(currentValueContainer);&#13;
        }&#13;
&#13;
        presenter.setVisibility(state.isVisible);&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
        presenter.configuration.shouldCalcScore = shouldCalcScore;&#13;
        presenter.isStarted = state.isStarted;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
    };&#13;
&#13;
    presenter.getValue = function (index) {&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        var maxIndex = presenter.$view.find('.graph_column_container').length;&#13;
&#13;
        if (!ModelValidationUtils.validateIntegerInRange(index, maxIndex, 1).isValid) return;&#13;
&#13;
        var $column = presenter.$view.find('.graph_column_container:eq(' + (index - 1) + ') .graph_value_container');&#13;
&#13;
        return parseFloat($column.attr('current-value'));&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide' : presenter.hide,&#13;
            'getValue': presenter.getValue,&#13;
            'isAllOK': presenter.isAllOK&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    function prepareAndSendEvent(direction, changedBarIndex, currentValue, newValue, valueContainer) {&#13;
        var wasAllValidBeforeChange = presenter.areAllBarsValid();&#13;
        var wasThisValidBeforeChange = presenter.configuration.answers[changedBarIndex] == currentValue;&#13;
        var willAllBeValidAfterChange = presenter.areAllBarsValid();&#13;
        var willThisBeValidAfterChange = presenter.configuration.answers[changedBarIndex] == newValue;&#13;
&#13;
        presenter.sendOverallScoreEvent(direction,&#13;
            valueContainer.attr('value-id'),&#13;
            newValue,&#13;
            wasAllValidBeforeChange,&#13;
            wasThisValidBeforeChange,&#13;
            willAllBeValidAfterChange,&#13;
            willThisBeValidAfterChange&#13;
        );&#13;
    }&#13;
&#13;
    presenter.getProperPrecision = function (number1, number2) {&#13;
        var number1Precision = 0, number2Precision = 0;&#13;
&#13;
        if (('' + number1).split('.')[1]) {&#13;
            number1Precision = ('' + number1).split('.')[1].length;&#13;
        }&#13;
&#13;
        if (('' + number2).split('.')[1]) {&#13;
            number2Precision = ('' + number2).split('.')[1].length;&#13;
        }&#13;
&#13;
        return Math.max(number1Precision, number2Precision);&#13;
    };&#13;
&#13;
    presenter.increaseGraphValue = function(eventData) {&#13;
        eventData.stopPropagation();&#13;
&#13;
        if(presenter.errorMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        if (presenter.configuration.mouseData.wasDragged) {&#13;
            presenter.configuration.mouseData.wasDragged = false;&#13;
            return false;&#13;
        }&#13;
&#13;
        var valueContainer = $(eventData.target).parent().find('.graph_value_container');&#13;
&#13;
        var changedBarIndex = presenter.$view.find('.graph_series .graph_value_container').index(valueContainer),&#13;
            currentValue = parseFloat(valueContainer.attr('current-value')),&#13;
            minInteractivePoint = presenter.getMinimumInteractivePoint(valueContainer.attr('value-id')),&#13;
            newValue, newValuePrecision;&#13;
&#13;
        if (currentValue == presenter.configuration.axisYMinimumValue &amp;&amp; minInteractivePoint !== currentValue) {&#13;
            // Special case when current value is minimum and can not match with those calculated with interactive step&#13;
            newValue = minInteractivePoint;&#13;
            newValuePrecision = presenter.getProperPrecision(minInteractivePoint, presenter.configuration.interactiveStep);&#13;
        } else {&#13;
            newValue = currentValue + presenter.configuration.interactiveStep;&#13;
            newValuePrecision = presenter.getProperPrecision(currentValue, presenter.configuration.interactiveStep);&#13;
        }&#13;
&#13;
        if(newValue &gt; presenter.configuration.axisYMaximumValue) return;&#13;
&#13;
        valueContainer.attr('current-value', newValue.toFixed(newValuePrecision));&#13;
        presenter.redrawGraphValue(valueContainer);&#13;
&#13;
        if (currentValue === newValue) return;&#13;
&#13;
        prepareAndSendEvent("increase", changedBarIndex, currentValue, newValue, valueContainer);&#13;
    };&#13;
&#13;
    presenter.decreaseGraphValue = function(eventData) {&#13;
        eventData.stopPropagation();&#13;
&#13;
        if(presenter.errorMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        if (presenter.configuration.mouseData.wasDragged) {&#13;
            presenter.configuration.mouseData.wasDragged = false;&#13;
            return false;&#13;
        }&#13;
&#13;
        var valueContainer;&#13;
        if($(eventData.target).parent().hasClass('graph_value_container')) {&#13;
            // Clicked in bar&#13;
            valueContainer = $(eventData.target).parent();&#13;
        } else {&#13;
            // Clicked below bar&#13;
            valueContainer = $(eventData.target).parent().find('.graph_value_container');&#13;
        }&#13;
&#13;
        var changedBarIndex = presenter.$view.find('.graph_series .graph_value_container').index(valueContainer),&#13;
            currentValue = parseFloat(valueContainer.attr('current-value')),&#13;
            maxInteractivePoint = presenter.getMaximumInteractivePoint(valueContainer.attr('value-id')),&#13;
            newValue, newValuePrecision;&#13;
&#13;
        if (currentValue == presenter.configuration.axisYMaximumValue &amp;&amp; maxInteractivePoint !== currentValue) {&#13;
            // Special case when current value is maximum and can not match with those calculated with interactive step&#13;
            newValue = maxInteractivePoint;&#13;
            newValuePrecision = presenter.getProperPrecision(maxInteractivePoint, presenter.configuration.interactiveStep);&#13;
        } else {&#13;
            newValue = currentValue - presenter.configuration.interactiveStep;&#13;
            newValuePrecision = presenter.getProperPrecision(currentValue, presenter.configuration.interactiveStep);&#13;
        }&#13;
&#13;
        if(newValue &lt; presenter.configuration.axisYMinimumValue) return;&#13;
&#13;
        var splittedStep = presenter.configuration.axisYGridStep.toString().split('.'),&#13;
            precision;&#13;
        if(splittedStep[1]){&#13;
            precision = splittedStep[1].length;&#13;
            valueContainer.attr('current-value', newValue.toFixed(precision));&#13;
        }else{&#13;
            valueContainer.attr('current-value', newValue.toFixed(newValuePrecision));&#13;
        }&#13;
&#13;
        presenter.redrawGraphValue(valueContainer);&#13;
&#13;
        if (currentValue === newValue) return;&#13;
&#13;
        prepareAndSendEvent("decrease", changedBarIndex, currentValue, newValue, valueContainer);&#13;
    };&#13;
&#13;
    function getValueElement() {&#13;
        var $element;&#13;
&#13;
        if (presenter.configuration.mouseData.$element.hasClass('graph_value_element')) {&#13;
            $element = presenter.configuration.mouseData.$element;&#13;
        } else {&#13;
            $element = presenter.configuration.mouseData.$element.parent().find('.graph_value_element');&#13;
        }&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function isAboveXAxis($element) {&#13;
        return $element.hasClass('graph_value_element_positive');&#13;
    }&#13;
&#13;
    function getColumnContainer($valueElement) {&#13;
        var containerClassName = '.graph_column_container_' + (isAboveXAxis($valueElement) ? 'above' : 'below');&#13;
        return $valueElement.parent().parent().find(containerClassName);&#13;
    }&#13;
&#13;
    function isMoreThanOneFingerGesture(event) {&#13;
        return (event.touches.length || event.changedTouches.length) &gt; 1;&#13;
    }&#13;
&#13;
    function mouseDownCallback (eventData) {&#13;
        if(presenter.errorMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        presenter.configuration.mouseData.isMouseDown = true;&#13;
        presenter.configuration.mouseData.wasMouseDown = true;&#13;
        presenter.configuration.mouseData.wasDragged = false;&#13;
        presenter.configuration.mouseData.oldPosition.y = eventData.pageY;&#13;
        presenter.configuration.mouseData.$element = $(eventData.target);&#13;
&#13;
        var $container = getValueElement().parent();&#13;
&#13;
        presenter.configuration.mouseData.currentValue = parseFloat($container.attr('current-value'));&#13;
    }&#13;
&#13;
    function touchStartCallback (event) {&#13;
        if (isMoreThanOneFingerGesture(event)) {&#13;
            presenter.configuration.mouseData.wasDragged = true;&#13;
            return;&#13;
        }&#13;
&#13;
        event.preventDefault();&#13;
&#13;
        var touch = event.touches[0] || event.changedTouches[0];&#13;
        mouseDownCallback(touch);&#13;
    }&#13;
&#13;
    function columnContainerMouseDownCallback (eventData) {&#13;
        if(presenter.errorMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.configuration.mouseData.$element = $(eventData.target);&#13;
        var $element = getValueElement(), currentValue = parseFloat($element.parent().attr('current-value'));&#13;
&#13;
        if (currentValue === 0) {&#13;
            presenter.configuration.mouseData.wasMouseDown = true;&#13;
            presenter.configuration.mouseData.isMouseDown = true;&#13;
            presenter.configuration.mouseData.wasDragged = false;&#13;
            presenter.configuration.mouseData.oldPosition.y = eventData.pageY;&#13;
            presenter.configuration.mouseData.$element = $element;&#13;
            presenter.configuration.mouseData.currentValue = currentValue;&#13;
        }&#13;
    }&#13;
&#13;
    function columnContainerTouchStartCallback (event) {&#13;
        if (isMoreThanOneFingerGesture(event)) {&#13;
            presenter.configuration.mouseData.wasDragged = true;&#13;
            return;&#13;
        }&#13;
&#13;
        event.preventDefault();&#13;
&#13;
        var touch = event.touches[0] || event.changedTouches[0];&#13;
&#13;
        presenter.configuration.mouseData.isColumnContainerTouchTriggered = true;&#13;
        presenter.configuration.mouseData.isColumnContainerTriggerIncrease = $(touch.target).hasClass('graph_column_container_above');&#13;
        presenter.configuration.mouseData.columnContainerEventData = touch;&#13;
&#13;
        columnContainerMouseDownCallback(touch);&#13;
    }&#13;
&#13;
    presenter.whichPoint = function (position, maximumValue, containerHeight, step) {&#13;
        var snapPointsCount = Math.floor(maximumValue / step), halfOfValueHigh = (containerHeight / (maximumValue / step)) / 2;&#13;
&#13;
        if (position &lt; halfOfValueHigh) {&#13;
            return 0;&#13;
        } else if (position &gt;= containerHeight - halfOfValueHigh) {&#13;
            return maximumValue;&#13;
        } else {&#13;
            for (var i = 1; i &lt;= snapPointsCount; i++) {&#13;
                var snapPoint = 2 * halfOfValueHigh * i;&#13;
                if (position &gt;= snapPoint - halfOfValueHigh &amp;&amp; position &lt; snapPoint + halfOfValueHigh) return i * step;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getInitialData = function (valueID) {&#13;
        var series = parseInt(valueID.split(' ')[0], 10),&#13;
            index = parseInt(valueID.split(' ')[1], 10);&#13;
&#13;
        return parseFloat(presenter.configuration.data[series][index]);&#13;
    };&#13;
&#13;
    presenter.getMaximumInteractivePoint = function (valueID) {&#13;
        var initialData = presenter.getInitialData(valueID),&#13;
            interactiveStep = presenter.configuration.interactiveStep,&#13;
            maxYValue = presenter.configuration.axisYMaximumValue,&#13;
            maxPoint = initialData;&#13;
&#13;
        while (maxPoint + interactiveStep &lt;= maxYValue) {&#13;
            maxPoint += interactiveStep;&#13;
        }&#13;
&#13;
        return maxPoint&#13;
    };&#13;
&#13;
    presenter.getMinimumInteractivePoint = function (valueID) {&#13;
        var initialData = presenter.getInitialData(valueID),&#13;
            interactiveStep = presenter.configuration.interactiveStep,&#13;
            minYValue = presenter.configuration.axisYMinimumValue,&#13;
            minPoint = initialData;&#13;
&#13;
        while (minPoint - interactiveStep &gt;= minYValue) {&#13;
            minPoint -= interactiveStep;&#13;
        }&#13;
&#13;
        return minPoint&#13;
    };&#13;
&#13;
    function triggerColumnContainerClickHandler() {&#13;
        if (presenter.configuration.mouseData.isColumnContainerTriggerIncrease) {&#13;
            presenter.increaseGraphValue(presenter.configuration.mouseData.columnContainerEventData);&#13;
        } else {&#13;
            presenter.decreaseGraphValue(presenter.configuration.mouseData.columnContainerEventData);&#13;
        }&#13;
    }&#13;
&#13;
    function mouseUpCallback () {&#13;
        if(presenter.errorMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        presenter.isStarted = true;&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if (!presenter.configuration.mouseData.isMouseDown) {&#13;
            if (presenter.configuration.mouseData.isColumnContainerTouchTriggered) {&#13;
                triggerColumnContainerClickHandler();&#13;
            }&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration.mouseData.isMouseDown = false;&#13;
        if (!presenter.configuration.mouseData.wasDragged) {&#13;
            if (presenter.configuration.mouseData.isColumnContainerTouchTriggered) {&#13;
                triggerColumnContainerClickHandler();&#13;
            }&#13;
            return;&#13;
        }&#13;
&#13;
        var $element = getValueElement();&#13;
        var $container = $element.parent(), height = $container.height();&#13;
&#13;
        var valueContainer = presenter.configuration.mouseData.$element.parent(),&#13;
            columnContainer = getColumnContainer($element),&#13;
            columnContainerHeight = columnContainer.height(),&#13;
            newValue;&#13;
&#13;
        var halfOfValueHigh;&#13;
        if (isAboveXAxis($element)) {&#13;
            halfOfValueHigh = (columnContainerHeight / presenter.configuration.axisYMaximumValue) / 2;&#13;
        } else {&#13;
            halfOfValueHigh = (columnContainerHeight / Math.abs(presenter.configuration.axisYMinimumValue)) / 2;&#13;
        }&#13;
&#13;
        if (height &lt; halfOfValueHigh) {&#13;
            newValue = 0;&#13;
        } else if (height &gt;= columnContainerHeight - halfOfValueHigh) {&#13;
            newValue = isAboveXAxis($element) ? presenter.configuration.axisYMaximumValue : presenter.configuration.axisYMinimumValue;&#13;
        } else {&#13;
            var maxValue = isAboveXAxis($element) ? presenter.configuration.axisYMaximumValue : Math.abs(presenter.configuration.axisYMinimumValue);&#13;
            newValue = presenter.whichPoint(height, maxValue, columnContainerHeight, presenter.configuration.interactiveStep);&#13;
            if (!isAboveXAxis($element)) {&#13;
                newValue = -1 * newValue;&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        var splittedStep = presenter.configuration.axisYGridStep.toString().split('.');&#13;
&#13;
        if(splittedStep[1]){&#13;
            var precision = splittedStep[1].length;&#13;
            $container.attr('current-value', newValue.toFixed(precision));&#13;
        }else{&#13;
            $container.attr('current-value', newValue);&#13;
        }&#13;
&#13;
        presenter.redrawGraphValue(valueContainer);&#13;
&#13;
        if (presenter.configuration.mouseData.currentValue !== newValue) {&#13;
            var direction = presenter.configuration.mouseData.currentValue &lt; newValue ? "increase" : "decrease";&#13;
            var changedBarIndex = presenter.$view.find('.graph_series .graph_value_container').index(valueContainer);&#13;
            prepareAndSendEvent(direction, changedBarIndex, presenter.configuration.mouseData.currentValue, newValue, $container);&#13;
        }&#13;
&#13;
        presenter.configuration.mouseData.isMouseDown = false;&#13;
        presenter.configuration.mouseData.oldPosition = { y:0 };&#13;
    }&#13;
&#13;
    function touchEndCallback (event) {&#13;
        if (isMoreThanOneFingerGesture(event)) {&#13;
            presenter.configuration.mouseData.wasDragged = true;&#13;
            return;&#13;
        }&#13;
&#13;
        event.preventDefault();&#13;
&#13;
        mouseUpCallback();&#13;
    }&#13;
&#13;
    function mouseMoveCallback (eventData) {&#13;
        if(presenter.errorMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
        if (presenter.configuration.mouseData.isMouseDown !== true) return;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.configuration.mouseData.wasDragged = true;&#13;
&#13;
        var $element = getValueElement();&#13;
        var $container = $element.parent();&#13;
        var height = $container.height();&#13;
        var columnContainerHeight = getColumnContainer($element).height();&#13;
        var distance = presenter.configuration.mouseData.oldPosition.y - eventData.pageY;&#13;
&#13;
        if (!isAboveXAxis($element)) {&#13;
            distance = -1 * distance;&#13;
        }&#13;
&#13;
        presenter.configuration.mouseData.oldPosition.y = eventData.pageY;&#13;
&#13;
        $container.css('height', (height + distance) + 'px');&#13;
        if (height + distance &gt; columnContainerHeight) {&#13;
            $container.css('height', columnContainerHeight + 'px');&#13;
        }&#13;
&#13;
        if ($container.height() &lt; 1 &amp;&amp; minimumValueGraph &lt; 0) {&#13;
            if (isAboveXAxis($element)) {&#13;
                $container.css({&#13;
                    top: (presenter.chartInner.height() - presenter.drawingXPosition + Math.round(presenter.axisXLine.height() / 2)) + 'px',&#13;
                    bottom: ''&#13;
                });&#13;
                $element.removeClass('graph_value_element_positive').addClass('graph_value_element_negative');&#13;
            } else {&#13;
                $container.css({&#13;
                    bottom: (presenter.drawingXPosition - Math.round(presenter.axisXLine.height() / 2)) + 'px',&#13;
                    top: ''&#13;
                });&#13;
                $element.removeClass('graph_value_element_negative').addClass('graph_value_element_positive');&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function touchMoveCallback (event) {&#13;
        if (isMoreThanOneFingerGesture(event)) {&#13;
            presenter.configuration.mouseData.wasDragged = true;&#13;
            return;&#13;
        }&#13;
&#13;
        event.preventDefault();&#13;
&#13;
        var touch = event.touches[0] || event.changedTouches[0];&#13;
        mouseMoveCallback(touch);&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeAxisYValues(model);&#13;
    };&#13;
&#13;
    presenter.upgradeAxisYValues = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model["Y axis values"] == undefined) {&#13;
            upgradedModel["Y axis values"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateAxisYMaximumValue = function (model, isDecimalSeparatorSet, decimalSeparator) {&#13;
        // Y-axis maximum value&#13;
        var modelYAxisMaximumValue = model['Y axis maximum value'];&#13;
&#13;
        if (isDecimalSeparatorSet) {&#13;
            modelYAxisMaximumValue = modelYAxisMaximumValue.replace(decimalSeparator, '.');&#13;
        }&#13;
        var axisYMaximumValue = ModelValidationUtils.validateFloat(modelYAxisMaximumValue);&#13;
        if (!axisYMaximumValue.isValid) {&#13;
            return { isValid: false, errorCode: 'AXIS_Y_MAXIMUM_VALUE_NOT_NUMERIC' };&#13;
        }&#13;
&#13;
        return {isValid: true, value: axisYMaximumValue.parsedValue};&#13;
    };&#13;
&#13;
    presenter.validateAxisYMinimumValue = function (model, isDecimalSeparatorSet, decimalSeparator) {&#13;
        //Y-axis minimum value&#13;
        var modelYAxisMinimumValue = model['Y axis minimum value'];&#13;
        minimumValueGraph = model['Y axis minimum value'];&#13;
&#13;
        if (isDecimalSeparatorSet) {&#13;
            modelYAxisMinimumValue = modelYAxisMinimumValue.replace(decimalSeparator, '.');&#13;
        }&#13;
        var axisYMinimumValue = ModelValidationUtils.validateFloat(modelYAxisMinimumValue);&#13;
        if (!axisYMinimumValue.isValid) {&#13;
            return { isValid: false, errorCode: 'AXIS_Y_MINIMUM_VALUE_NOT_NUMERIC' };&#13;
        }&#13;
&#13;
        return {isValid: true, value: axisYMinimumValue.parsedValue};&#13;
    };&#13;
&#13;
    presenter.validateAxisYRange = function (axisYMaximumValue, axisYMinimumValue) {&#13;
        if((axisYMaximumValue &gt; 0 &amp;&amp; axisYMinimumValue &gt; 0) ||&#13;
            (axisYMaximumValue &lt; 0 &amp;&amp; axisYMinimumValue &lt; 0)) {&#13;
&#13;
            return { isValid: false, errorCode: 'AXIS_Y_DOES_NOT_INCLUDE_ZERO' };&#13;
        }&#13;
&#13;
        return {isValid: true};&#13;
    };&#13;
&#13;
    presenter.validateAxisYGridStep = function (model, isDecimalSeparatorSet, decimalSeparator) {&#13;
         var modelYAxisGridStep = model['Y axis grid step'];&#13;
        if (isDecimalSeparatorSet) {&#13;
            modelYAxisGridStep = modelYAxisGridStep.replace(decimalSeparator, '.');&#13;
        }&#13;
&#13;
        var axisYGridStep = ModelValidationUtils.validateFloat(modelYAxisGridStep);&#13;
        if(!axisYGridStep.isValid) {&#13;
            return { isValid: false, errorCode: 'AXIS_Y_GRID_STEP_NOT_NUMERIC' };&#13;
        }&#13;
&#13;
        return { isValid: true, value: axisYGridStep.parsedValue};&#13;
&#13;
    };&#13;
&#13;
    presenter.validateInteractiveStep = function (model, isDecimalSeparatorSet, decimalSeparator) {&#13;
        var isInteractive = ModelValidationUtils.validateBoolean(model['Interactive']);&#13;
        var interactiveStep;&#13;
&#13;
        if(isInteractive) {&#13;
            var modelInteractiveStep = model['Interactive step'];&#13;
            if (isDecimalSeparatorSet) {&#13;
                modelInteractiveStep = modelInteractiveStep.replace(decimalSeparator, '.');&#13;
            }&#13;
&#13;
            interactiveStep = ModelValidationUtils.validateFloat(modelInteractiveStep);&#13;
            if(!interactiveStep.isValid) {&#13;
                return { isValid: false, errorCode: 'INTERACTIVE_STEP_NOT_NUMERIC' };&#13;
            }&#13;
&#13;
            if(interactiveStep.parsedValue &lt;= 0) {&#13;
                return { isValid: false, errorCode: 'INTERACTIVE_STEP_NOT_POSITIVE' };&#13;
            }&#13;
&#13;
            interactiveStep = interactiveStep.parsedValue;&#13;
        }&#13;
&#13;
        return {isValid: true, interactiveStep: interactiveStep, isInteractive: isInteractive};&#13;
    };&#13;
&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var decimalSeparator = model["Decimal separator"];&#13;
        var isDecimalSeparatorSet = !ModelValidationUtils.isStringEmpty(decimalSeparator);&#13;
&#13;
        var validatedAxisYMaximumValue = presenter.validateAxisYMaximumValue(model, isDecimalSeparatorSet, decimalSeparator);&#13;
        if(!validatedAxisYMaximumValue.isValid) {&#13;
            return validatedAxisYMaximumValue;&#13;
        }&#13;
&#13;
        var validatedAxisYMinimumValue = presenter.validateAxisYMinimumValue(model, isDecimalSeparatorSet, decimalSeparator);&#13;
        if (!validatedAxisYMinimumValue.isValid) {&#13;
            return validatedAxisYMinimumValue;&#13;
        }&#13;
&#13;
        var validatedAxisYRange = presenter.validateAxisYRange(validatedAxisYMaximumValue.value, validatedAxisYMinimumValue.value);&#13;
        if (!validatedAxisYRange.isValid) {&#13;
            return validatedAxisYRange;&#13;
        }&#13;
&#13;
        // Y-axis grid step&#13;
        var validatedAxisYGridStep = presenter.validateAxisYGridStep(model, isDecimalSeparatorSet, decimalSeparator);&#13;
        if (!validatedAxisYGridStep.isValid) {&#13;
            return validatedAxisYGridStep;&#13;
        }&#13;
&#13;
        // Interactive (step) mode&#13;
        var validatedInteractiveStep = presenter.validateInteractiveStep(model, isDecimalSeparatorSet,&#13;
            decimalSeparator);&#13;
&#13;
        if (!validatedInteractiveStep.isValid) {&#13;
            return validatedInteractiveStep;&#13;
        }&#13;
        var isInteractive = validatedInteractiveStep.isInteractive;&#13;
&#13;
        var isNotActivity;&#13;
        try {&#13;
            isNotActivity = (model['isNotActivity'].toLowerCase() === 'true');&#13;
        } catch (_) {&#13;
            isNotActivity = false;&#13;
        }&#13;
        var parsedColors = presenter.parseColors(model);&#13;
&#13;
        var graphConfiguration = {&#13;
            "isDecimalSeparatorSet": isDecimalSeparatorSet,&#13;
            "decimalSeparator": decimalSeparator,&#13;
            "Series colors": parsedColors,&#13;
            "axisYMaximumValue": validatedAxisYMaximumValue.value,&#13;
            "axisYMinimumValue": validatedAxisYMinimumValue.value&#13;
        };&#13;
        // Data&#13;
        var validatedData = presenter.validateData(model, graphConfiguration);&#13;
&#13;
        if(!validatedData.isValid) {&#13;
            return validatedData&#13;
        }&#13;
&#13;
        var validatedAxisXBarsDescriptions = presenter.validateAxisXBarsDescriptions(model, validatedData.value.barsCount);&#13;
&#13;
        if(!validatedAxisXBarsDescriptions.isValid) {&#13;
            return validatedAxisXBarsDescriptions&#13;
        }&#13;
&#13;
        var validatedAxisXSeriesDescriptions = presenter.validateAxisXSeriesDescriptions(model, validatedData.value.validRows);&#13;
        if (!validatedAxisXSeriesDescriptions.isValid) {&#13;
            return validatedAxisXSeriesDescriptions;&#13;
        }&#13;
&#13;
        if (isInteractive) {&#13;
            var validatedAnswers = presenter.validateAnswers(model['Answers'], validatedData.value.barsCount);&#13;
            if (!validatedAnswers.isValid) {&#13;
                return validatedAnswers;&#13;
            }&#13;
            var results = presenter.parseResults(validatedData.value.parsedData, validatedAnswers.answers);&#13;
&#13;
        } else {&#13;
            var validatedAnswers = {answers: []};&#13;
            var results = [];&#13;
        }&#13;
&#13;
        var validatedAxisYValues = presenter.validateAxisYValues(model, validatedAxisYMaximumValue.value,&#13;
            validatedAxisYMinimumValue.value, isDecimalSeparatorSet);&#13;
&#13;
        if (!validatedAxisYValues.isValid) {&#13;
            return validatedAxisYValues;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            ID: model.ID,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isNotActivity: isNotActivity,&#13;
            shouldCalcScore: false,&#13;
            decimalSeparator: decimalSeparator,&#13;
            isDecimalSeparatorSet: isDecimalSeparatorSet,&#13;
            axisYMaximumValue: validatedAxisYMaximumValue.value,&#13;
            axisYMinimumValue: validatedAxisYMinimumValue.value,&#13;
            axisYGridStep: validatedAxisYGridStep.value,&#13;
            data: validatedData.value.parsedData,&#13;
            isInteractive: isInteractive,&#13;
            interactiveStep: validatedInteractiveStep.interactiveStep,&#13;
            mouseData: {&#13;
                isMouseDown : false,&#13;
                oldPosition : { y : 0 },&#13;
                isMouseDragged : false&#13;
            },&#13;
            showXAxisBarsDescriptions: validatedAxisXBarsDescriptions.value.showXAxisBarsDescriptions,&#13;
            axisXBarsDescriptions: validatedAxisXBarsDescriptions.value.axisXBarsDescriptions,&#13;
            showXAxisSeriesDescriptions: validatedAxisXSeriesDescriptions.value.showXAxisSeriesDescriptions,&#13;
            axisXSeriesDescriptions: validatedAxisXSeriesDescriptions.value.axisXSeriesDescriptions,&#13;
            seriesColors: parsedColors,&#13;
            barsCount: validatedData.value.barsCount,&#13;
            columnsCount: validatedData.value.columnsCount,&#13;
            validRows: validatedData.value.validRows,&#13;
            results: results,&#13;
            answers: validatedAnswers.answers,&#13;
            axisYValues: {fixedValues: validatedAxisYValues.fixedValues, cyclicValues: validatedAxisYValues.cyclicValues}&#13;
        };&#13;
    };&#13;
&#13;
    presenter.parseResults = function (data, answers) {&#13;
        var results = [];&#13;
&#13;
        var k = 0;&#13;
        var i, j;&#13;
&#13;
        for (i=0; i &lt; data.length; i++) {&#13;
            var a = [];&#13;
            for (j = 0; j &lt; data[i].length; j++) {&#13;
                a.push(parseInt(answers[k++]) ===  parseInt(data[i][j]));&#13;
            }&#13;
&#13;
            results.push(a);&#13;
        }&#13;
&#13;
        return results;&#13;
    };&#13;
&#13;
    presenter.parseAxisXBarsDescriptions = function (model, showXAxisBarsDescriptions) {&#13;
        var i;&#13;
        var xAxisBarsDescriptions = [];&#13;
&#13;
        if (showXAxisBarsDescriptions &amp;&amp; typeof(model['X axis bars descriptions']) != 'undefined') {&#13;
            for (i = 0; i &lt; model['X axis bars descriptions'].length; i++) {&#13;
                xAxisBarsDescriptions.push(model['X axis bars descriptions'][i]['Description']);&#13;
            }&#13;
        }&#13;
&#13;
        return xAxisBarsDescriptions;&#13;
    };&#13;
&#13;
    presenter.parseAxisXSeriesDescriptions = function (model,showXAxisSeriesDescriptions) {&#13;
        var xAxisSeriesDescriptions = [];&#13;
        var i;&#13;
        if (showXAxisSeriesDescriptions &amp;&amp; typeof(model['X axis series descriptions']) != 'undefined') {&#13;
            for (i = 0; i &lt; model['X axis series descriptions'].length; i++) {&#13;
                xAxisSeriesDescriptions.push(model['X axis series descriptions'][i]['Description']);&#13;
            }&#13;
        }&#13;
&#13;
        return xAxisSeriesDescriptions;&#13;
    };&#13;
&#13;
    presenter.validateData = function(model, graphConfiguration) {&#13;
&#13;
        var parsedData = presenter.parseData(model, graphConfiguration.isDecimalSeparatorSet, graphConfiguration.decimalSeparator);&#13;
&#13;
        // Read data&#13;
        var currentValue;&#13;
        var maximumValue = null;&#13;
        var minimumValue = null;&#13;
        var row, column;&#13;
        var validRows = 0;&#13;
        var columnsCount = null;&#13;
        var barsCount = 0;&#13;
&#13;
        // Validate data and find maximum value&#13;
        for (row = 0; row &lt; parsedData.length; row++) {&#13;
            // Ensure that rows have valid syntax&#13;
            if (parsedData[row] === null) {&#13;
                return {isValid: false, errorCode: "DATA_ROW_MALFORMED", errorMessageSubstitutions: { row: row + 1 }};&#13;
            }&#13;
&#13;
            // Skip empty rows&#13;
            if (parsedData[row].length === 0) {&#13;
                continue;&#13;
            }&#13;
            validRows++;&#13;
            // Ensure that rows have valid amount of columns&#13;
            if (parsedData[row].length &lt; 1) {&#13;
                return {isValid: false, errorCode: "DATA_ROW_NOT_ENOUGH_COLUMNS", errorMessageSubstitutions: { row: row + 1 }};&#13;
            }&#13;
&#13;
            if (columnsCount === null) {&#13;
                columnsCount = parsedData[row].length;&#13;
            } else if (columnsCount != parsedData[row].length) {&#13;
                return {isValid: false, errorCode: "DATA_ROW_DIFFERENT_COLUMNS_COUNT", errorMessageSubstitutions:  { row: row + 1 }};&#13;
            }&#13;
&#13;
            // Save min/max value and ensure that data is numeric&#13;
            for (column = 0; column &lt; parsedData[row].length; column++) {&#13;
                currentValue = parseFloat(parsedData[row][column]);&#13;
&#13;
                if (isNaN(currentValue)) {&#13;
                    return {isValid: false, errorCode: "DATA_ROW_VALUE_NOT_NUMERIC", errorMessageSubstitutions: { row: row + 1, column: column, value: parsedData[row][column] }};&#13;
                }&#13;
&#13;
                if (maximumValue === null || currentValue &gt; maximumValue) {&#13;
                    maximumValue = currentValue;&#13;
                }&#13;
&#13;
                if (minimumValue === null || currentValue &lt; minimumValue) {&#13;
                    minimumValue = currentValue;&#13;
                }&#13;
&#13;
                parsedData[row][column] = currentValue;&#13;
            }&#13;
            // Count amount of bars&#13;
            barsCount += parsedData[row].length;&#13;
        }&#13;
&#13;
        if (graphConfiguration.axisYMaximumValue &lt; maximumValue) {&#13;
            return {isValid: false, errorCode: 'AXIS_Y_MAXIMUM_VALUE_TOO_SMALL', errorMessageSubstitutions: { value: maximumValue, range: graphConfiguration.axisYMaximumValue }};&#13;
        }&#13;
&#13;
        if (graphConfiguration.axisYMinimumValue &gt; minimumValue) {&#13;
            return {isValid: false, errorCode: "AXIS_Y_MINIMUM_VALUE_TOO_BIG", errorMessageSubstitutions:  { value: minimumValue, range: graphConfiguration.axisYMinimumValue}};&#13;
        }&#13;
&#13;
        if (graphConfiguration["Series colors"].length != columnsCount) {&#13;
            return {isValid: false, errorCode: "SERIES_COLORS_AMOUNT_INVALID"}&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            value: {&#13;
                maximumValue: maximumValue,&#13;
                minimumValue: minimumValue,&#13;
                validRows: validRows,&#13;
                barsCount: barsCount,&#13;
                columnsCount: columnsCount,&#13;
                parsedData: parsedData&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.parseColors = function(model) {&#13;
        var colors = [];&#13;
&#13;
        var i;&#13;
        for (i = 0; i &lt; model['Series colors'].length; i++) {&#13;
            colors.push(model['Series colors'][i]['Color']);&#13;
        }&#13;
&#13;
        return colors;&#13;
    };&#13;
&#13;
    presenter.parseData = function(model, isDecimalSeparatorSet, decimalSeparator) {&#13;
        var data = $.csv2Array(model['Data']);&#13;
&#13;
        try {&#13;
            if (isDecimalSeparatorSet) {&#13;
                for (var i= 0; i &lt; data.length; i++) {&#13;
                    for (var j= 0; j &lt; data[i].length; j++) {&#13;
                        data[i][j] = data[i][j].replace(decimalSeparator, '.');&#13;
                    }&#13;
                }&#13;
            }&#13;
        } catch ( _ ) {&#13;
            //when user inputs invalid csv syntax in data property, data is null&#13;
            //it creates error which shows popup in lesson &amp; editor&#13;
            //this error is validated in validateData&#13;
            return data&#13;
        }&#13;
&#13;
        return data;&#13;
    };&#13;
&#13;
    presenter.validateAxisXBarsDescriptions = function(model, barsCount) {&#13;
        var showXAxisBarsDescriptions = typeof(model['Show X axis bars descriptions']) != 'undefined' &amp;&amp;&#13;
            model['Show X axis bars descriptions'] === 'True';&#13;
&#13;
        var parsedXAxisBarsDescriptions = presenter.parseAxisXBarsDescriptions(model, showXAxisBarsDescriptions);&#13;
&#13;
        if (showXAxisBarsDescriptions &amp;&amp; parsedXAxisBarsDescriptions.length != barsCount) {&#13;
            return {isValid: false, errorCode: "AXIS_X_BARS_DESCRIPTIONS_AMOUNT_INVALID",&#13;
                errorMessageSubstitutions:{ bars: barsCount, descriptions: parsedXAxisBarsDescriptions.length }};&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            value: {&#13;
                showXAxisBarsDescriptions: showXAxisBarsDescriptions,&#13;
                axisXBarsDescriptions: parsedXAxisBarsDescriptions&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateAxisXSeriesDescriptions = function(model, validRows) {&#13;
        var showXAxisSeriesDescriptions = typeof(model['Show X axis series descriptions']) != 'undefined' &amp;&amp;&#13;
            model['Show X axis series descriptions'] === 'True';&#13;
        var parsedXAxisSeriesDescriptions = presenter.parseAxisXSeriesDescriptions(model, showXAxisSeriesDescriptions);&#13;
&#13;
        if (showXAxisSeriesDescriptions &amp;&amp; parsedXAxisSeriesDescriptions.length != validRows) {&#13;
            return {isValid: false, errorCode: "AXIS_X_SERIES_DESCRIPTIONS_AMOUNT_INVALID",&#13;
                errorMessageSubstitutions: { series: validRows, descriptions: parsedXAxisSeriesDescriptions.length }};&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            value: {&#13;
                showXAxisSeriesDescriptions: showXAxisSeriesDescriptions,&#13;
                axisXSeriesDescriptions: parsedXAxisSeriesDescriptions&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isFloat = function (value) {&#13;
        value = value.trim();&#13;
        if (ModelValidationUtils.isStringEmpty(value)) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (value.charAt(0) == "+") {&#13;
            return false;&#13;
        }&#13;
&#13;
        var too_many_zeroes = /^0{2,}/;&#13;
        if (too_many_zeroes.test(value)) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if ( value == "-0") {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (value.charAt(0) == "-") {&#13;
            value = value.slice(1, value.length);&#13;
        }&#13;
&#13;
        var i, commas_number = 0;&#13;
        var digits = /[0-9]/;&#13;
&#13;
        for(i = 0; i &lt; value.length; i++) {&#13;
            if (value.charAt(i) == ".") {&#13;
                if (commas_number == 1) {&#13;
                    return false;&#13;
                }&#13;
                commas_number ++;&#13;
            } else {&#13;
                if (digits.test(value.charAt(i))) {&#13;
                    continue;&#13;
                } else {&#13;
                    return false;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.checkIfValueInAxisRange = function (value, yMax, yMin) {&#13;
        if (value &gt; yMax) {&#13;
            return {isValid: false, errorCode: "YAV_03"};&#13;
        }&#13;
&#13;
        if (value &lt; yMin) {&#13;
            return {isValid: false, errorCode: "YAV_04"};&#13;
        }&#13;
&#13;
        return {isValid: true, value: value};&#13;
    };&#13;
&#13;
    presenter.checkCyclicValue = function (value, yMax, yMin) {&#13;
        if (!presenter.isFloat(value)) {&#13;
            return {isValid: false, errorCode: "YAV_01"};&#13;
        }&#13;
&#13;
        value = parseFloat(value);&#13;
&#13;
        if (value == 0) {&#13;
            return {isValid: false, errorCode: "YAV_02"};&#13;
        }&#13;
&#13;
        if (value &lt; 0) {&#13;
            return {isValid: false, errorCode: "YAV_05"};&#13;
        }&#13;
&#13;
&#13;
        var validatedValue = presenter.checkIfValueInAxisRange(value, yMax, yMin);&#13;
&#13;
        return validatedValue;&#13;
    };&#13;
&#13;
    presenter.checkFixedValue = function (value, yMax, yMin) {&#13;
        if (!presenter.isFloat(value)) {&#13;
            return {isValid: false, errorCode: "YAV_01"};&#13;
        } else {&#13;
            var validatedValue = presenter.checkIfValueInAxisRange(parseFloat(value), yMax, yMin);&#13;
        }&#13;
&#13;
        return validatedValue;&#13;
    };&#13;
&#13;
    presenter.createAxisYValues = function (fixedValues, cyclicValues, yMax, yMin) {&#13;
        var values = [];&#13;
        var i;&#13;
&#13;
        if (fixedValues == undefined &amp;&amp; cyclicValues == undefined) {&#13;
            cyclicValues = [presenter.configuration.axisYGridStep];&#13;
        }&#13;
&#13;
        if (fixedValues != undefined) {&#13;
            for(i = 0; i &lt; fixedValues.length; i++) {&#13;
                values.push(fixedValues[i]);&#13;
            }&#13;
        }&#13;
&#13;
        if (cyclicValues != undefined) {&#13;
&#13;
            for(i = 0; i &lt; cyclicValues.length; i++) {&#13;
                var step = cyclicValues[i];&#13;
&#13;
                var splittedStep = step.toString().split('.');&#13;
&#13;
                var value;&#13;
                if(splittedStep[1]){&#13;
                    var commaLength = splittedStep[1].length;&#13;
                    for(value = step; value.toFixed(commaLength) &lt;= yMax; value += step) {&#13;
                        values.push(value.toFixed(commaLength));&#13;
                    }&#13;
                }else{&#13;
                    for(value = step; value &lt;= yMax; value += step) {&#13;
                        values.push(value);&#13;
                    }&#13;
                }&#13;
&#13;
                for(value = -step; value &gt;= yMin; value -= step) {&#13;
                    values.push(value);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return values;&#13;
    };&#13;
&#13;
    presenter.validateAxisYValues = function(model, yMax, yMin, isDecimalSeparatorSet) {&#13;
        var values = model["Y axis values"];&#13;
        var i;&#13;
&#13;
        var parsedAxisYValues = {isValid: true, fixedValues: undefined, cyclicValues: undefined};&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(values.trim())) {&#13;
            return parsedAxisYValues;&#13;
        }&#13;
&#13;
        values = values.split(";");&#13;
&#13;
        if(isDecimalSeparatorSet) {&#13;
            for(i = 0; i &lt; values.length; i++) {&#13;
                values[i] = values[i].replace(model["Decimal separator"], '.');&#13;
            }&#13;
        }&#13;
&#13;
        for(i = 0; i &lt; values.length; i++) {&#13;
            var value = values[i].trim();&#13;
            var endChar = value.length - 1;&#13;
            var validatedValue;&#13;
&#13;
            if(value.charAt(endChar) == "*") {&#13;
                validatedValue = presenter.checkCyclicValue(value.slice(0, endChar), yMax, yMin);&#13;
&#13;
                if (!validatedValue.isValid) {&#13;
                    return validatedValue;&#13;
                }&#13;
&#13;
                if (parsedAxisYValues.cyclicValues == undefined) {&#13;
                    parsedAxisYValues.cyclicValues = [];&#13;
                }&#13;
&#13;
                if (parsedAxisYValues.cyclicValues.indexOf(validatedValue.value) == -1) {&#13;
                    parsedAxisYValues.cyclicValues.push(validatedValue.value);&#13;
                    continue;&#13;
                }&#13;
&#13;
                return {isValid: false, errorCode: "YAV_06"};&#13;
&#13;
            } else {&#13;
                validatedValue = presenter.checkFixedValue(value, yMax, yMin);&#13;
&#13;
                if (!validatedValue.isValid) {&#13;
                    return validatedValue;&#13;
                }&#13;
&#13;
                if (parsedAxisYValues.fixedValues == undefined) {&#13;
                    parsedAxisYValues.fixedValues = [];&#13;
                }&#13;
&#13;
                if (parsedAxisYValues.fixedValues.indexOf(validatedValue.value) == -1) {&#13;
                    parsedAxisYValues.fixedValues.push(validatedValue.value);&#13;
                    continue;&#13;
                }&#13;
&#13;
                return {isValid: false, errorCode: "YAV_06"};&#13;
            }&#13;
        }&#13;
&#13;
        return parsedAxisYValues;&#13;
    };&#13;
&#13;
    presenter.validateAnswers = function (answers, barsCount) {&#13;
        var validatedAnswers = [], i;&#13;
&#13;
        for (i = 0; i &lt; answers.length; i++) {&#13;
            var answer = answers[i]['Answer'];&#13;
&#13;
            if (presenter.configuration.isDecimalSeparatorSet) {&#13;
                answer = answer.replace(presenter.configuration.decimalSeparator, '.');&#13;
            }&#13;
&#13;
            var parseAnswer = parseFloat(answer);&#13;
            if (isNaN(parseAnswer)) {&#13;
                return { isValid: false, errorCode: 'ANSWER_NOT_NUMERIC', errorMessageSubstitutions: { answer: i + 1 } };&#13;
            }&#13;
&#13;
            validatedAnswers.push(parseAnswer);&#13;
        }&#13;
&#13;
        if (validatedAnswers.length != barsCount) {&#13;
            return { isValid: false, errorCode: 'ANSWERS_AMOUNT_INVALID', errorMessageSubstitutions: { answers: validatedAnswers.length, bars: barsCount } };&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            answers: validatedAnswers&#13;
        };&#13;
    };&#13;
&#13;
    presenter.drawGrid = function (grid) {&#13;
        var axisYGridStep = presenter.configuration.axisYGridStep;&#13;
        var drawingGridStep = presenter.chartInner.height() * axisYGridStep / presenter.absoluteRange;&#13;
        var i;&#13;
&#13;
&#13;
        for (i = axisYGridStep; i &lt;= presenter.configuration.axisYMaximumValue; i += axisYGridStep) {&#13;
            var currentGridBlock = $('&lt;div class="graph_grid_block graph_grid_block_above"&gt;&lt;/div&gt;');&#13;
            grid.append(currentGridBlock);&#13;
            currentGridBlock.css({&#13;
                height: (drawingGridStep - parseInt(currentGridBlock.css('borderTopWidth'))) + 'px',&#13;
                bottom: presenter.drawingXPosition - drawingGridStep + (drawingGridStep * i / axisYGridStep)&#13;
            });&#13;
        }&#13;
&#13;
&#13;
        for (i = -1 * axisYGridStep; i &gt;= presenter.configuration.axisYMinimumValue; i -= axisYGridStep) {&#13;
            currentGridBlock = $('&lt;div class="graph_grid_block graph_grid_block_below"&gt;&lt;/div&gt;');&#13;
            grid.append(currentGridBlock);&#13;
            currentGridBlock.css({&#13;
                height: (drawingGridStep - parseInt(currentGridBlock.css('borderBottomWidth'))) + 'px',&#13;
                bottom: presenter.drawingXPosition + (drawingGridStep * i / axisYGridStep)&#13;
            });&#13;
        }&#13;
&#13;
        return grid;&#13;
    };&#13;
&#13;
    presenter.createGridDescriptions = function (innerContainer) {&#13;
        var gridDescription, gridDescriptionText;&#13;
        var maximumGridDescriptionWidth = null;&#13;
        var currentGridDescriptionWidth;&#13;
        var i;&#13;
&#13;
        var fixedValues = presenter.configuration.axisYValues.fixedValues;&#13;
        var cyclicValues = presenter.configuration.axisYValues.cyclicValues;&#13;
        var yMax = presenter.configuration.axisYMaximumValue;&#13;
        var yMin = presenter.configuration.axisYMinimumValue;&#13;
        var values = presenter.createAxisYValues(fixedValues, cyclicValues, yMax, yMin);&#13;
&#13;
&#13;
        for (i = 0; i &lt; values.length; i++) {&#13;
            gridDescription = $('&lt;div class="graph_grid_description"&gt;&lt;/div&gt;');&#13;
            gridDescription.addClass('graph_grid_description_' + ("" + values[i]).toString().replace('.', '_'));&#13;
            gridDescriptionText = "" + values[i];&#13;
            if (presenter.configuration.isDecimalSeparatorSet) {&#13;
                gridDescriptionText = gridDescriptionText.replace('.', presenter.configuration.decimalSeparator);&#13;
            }&#13;
            gridDescription.text(gridDescriptionText);&#13;
            innerContainer.append(gridDescription);&#13;
&#13;
            currentGridDescriptionWidth = gridDescription.width();&#13;
            if (maximumGridDescriptionWidth === null || currentGridDescriptionWidth &gt; maximumGridDescriptionWidth) {&#13;
                maximumGridDescriptionWidth = currentGridDescriptionWidth;&#13;
            }&#13;
        }&#13;
&#13;
        presenter.$view.find('.graph_grid_description').css('width', maximumGridDescriptionWidth + 'px');&#13;
&#13;
        return { maximumGridDescriptionWidth: maximumGridDescriptionWidth , axisYValues: values};&#13;
    };&#13;
&#13;
    presenter.positionAxisYValues = function (values, xAxisDescriptionMargin) {&#13;
        var i, containerHeight = presenter.chartInner.height();&#13;
&#13;
        for (i = 0; i &lt; values.length; i++) {&#13;
            //rescale every value to 0 - positive, and calculate what percentage of height they are&#13;
            var descriptionElementHeight = (values[i] - presenter.configuration.axisYMinimumValue) ;&#13;
            descriptionElementHeight = (descriptionElementHeight / presenter.absoluteRange) * containerHeight;&#13;
&#13;
            presenter.$view.find('.graph_grid_description_' + String(values[i]).toString().replace('.', '_')).each(function (index, element) {&#13;
                $(element).css({&#13;
                    bottom: (descriptionElementHeight - ($(element).height() / 2) + xAxisDescriptionMargin) + 'px'&#13;
                });&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.deleteCommands = function () {&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.getScore;&#13;
        delete presenter.setState;&#13;
        delete presenter.getState;&#13;
        delete presenter.getValue;&#13;
    };&#13;
&#13;
    presenter.initialize = function(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        var validatedModel = presenter.validateModel(upgradedModel);&#13;
&#13;
        presenter.configuration = validatedModel;&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[validatedModel.errorCode], validatedModel.errorMessageSubstitutions);&#13;
            presenter.deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        // Read data&#13;
        var i, j;&#13;
        var validRows = presenter.configuration.validRows;&#13;
        var columnsCount = presenter.configuration.columnsCount;&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        var showXAxisBarsDescriptions = presenter.configuration.showXAxisBarsDescriptions;&#13;
        var showXAxisSeriesDescriptions = presenter.configuration.showXAxisSeriesDescriptions;&#13;
&#13;
        var xAxisBarsDescriptions = presenter.configuration.axisXBarsDescriptions;&#13;
        var xAxisSeriesDescriptions = presenter.configuration.axisXSeriesDescriptions;&#13;
&#13;
        if (isPreview) presenter.configuration.isInteractive = false;&#13;
&#13;
        // Draw graph's containers&#13;
        var outerContainer = $('&lt;div class="graph_container_outer"&gt;&lt;/div&gt;');&#13;
        presenter.$view.append(outerContainer);&#13;
&#13;
        var innerContainer = $('&lt;div class="graph_container_inner"&gt;&lt;/div&gt;');&#13;
        outerContainer.append(innerContainer);&#13;
&#13;
        // Draw axis descriptions&#13;
        var axisYDescription = $('&lt;div class="graph_axis_description graph_axis_y_description"&gt;&lt;/div&gt;');&#13;
        axisYDescription.text(model['Y axis description']);&#13;
        innerContainer.append(axisYDescription);&#13;
&#13;
        var axisXDescription = $('&lt;div class="graph_axis_description graph_axis_x_description"&gt;&lt;/div&gt;');&#13;
        axisXDescription.text(model['X axis description']);&#13;
        innerContainer.append(axisXDescription);&#13;
&#13;
&#13;
        // Draw outer chart container and set its position using&#13;
        // Y axis description's height and X axis description's width&#13;
        // plus 4px margin&#13;
        var chartOuter = $('&lt;div class="graph_chart_outer"&gt;&lt;/div&gt;');&#13;
        chartOuter.css({&#13;
            top: (axisYDescription.height() + 4) + 'px',&#13;
            right: (axisXDescription.width() + 4) + 'px'&#13;
        });&#13;
        innerContainer.append(chartOuter);&#13;
&#13;
        // Create axis Y Values&#13;
        var gridDescriptionsObject = presenter.createGridDescriptions(innerContainer);&#13;
        var maximumGridDescriptionWidth = gridDescriptionsObject.maximumGridDescriptionWidth;&#13;
        var axisYValues = gridDescriptionsObject.axisYValues;&#13;
&#13;
        // Draw inner chart container and set its position using&#13;
        // Y axis descriptions' width plus 4px margin&#13;
        var xAxisDescriptionMargin = 0;&#13;
        if (showXAxisBarsDescriptions) {&#13;
            xAxisDescriptionMargin += 20;&#13;
        }&#13;
&#13;
        if (showXAxisSeriesDescriptions) {&#13;
            xAxisDescriptionMargin += 20;&#13;
        }&#13;
&#13;
        presenter.chartInner = $('&lt;div class="graph_chart_inner"&gt;&lt;/div&gt;');&#13;
        presenter.chartInner.css({&#13;
            left: (maximumGridDescriptionWidth + 4) + 'px',&#13;
            bottom: (xAxisDescriptionMargin) + 'px'&#13;
        });&#13;
        chartOuter.append(presenter.chartInner);&#13;
&#13;
&#13;
        // Calculate position of axis X, grid &amp; interactive step&#13;
        presenter.absoluteRange = presenter.configuration.axisYMaximumValue - presenter.configuration.axisYMinimumValue;&#13;
        var absoluteXPosition = presenter.absoluteRange - presenter.configuration.axisYMaximumValue;&#13;
&#13;
        presenter.drawingXPosition = presenter.chartInner.height() * absoluteXPosition / presenter.absoluteRange;&#13;
&#13;
        // Move Y axis descriptions to the right place and draw grid&#13;
        var grid = $('&lt;div class="graph_grid"&gt;&lt;/div&gt;');&#13;
        presenter.chartInner.append(grid);&#13;
&#13;
        grid = presenter.drawGrid(grid);&#13;
        presenter.positionAxisYValues(axisYValues, xAxisDescriptionMargin);&#13;
&#13;
        // Draw axis X&#13;
        presenter.axisXLine = $('&lt;div class="graph_axis_x_line graph_axis_line"&gt;&lt;/div&gt;');&#13;
        presenter.chartInner.append(presenter.axisXLine);&#13;
        presenter.axisXLine.css('bottom', (presenter.drawingXPosition - Math.round(presenter.axisXLine.height() / 2)) + 'px');&#13;
&#13;
        var axisXArrow = $('&lt;div class="graph_axis_x_arrow graph_axis_arrow"&gt;&lt;/div&gt;');&#13;
        presenter.chartInner.append(axisXArrow);&#13;
&#13;
&#13;
        // Prepare drawing of the graph itself&#13;
        var serieContainer;&#13;
        var serieElement;&#13;
        var columnContainer;&#13;
        var columnContainerBelow;&#13;
        var columnContainerAbove;&#13;
        var valueContainer;&#13;
        var valueElement;&#13;
        var columnDescription;&#13;
        var serieDescription;&#13;
&#13;
        var serieWidth = Math.round(parseInt(presenter.chartInner.width() / validRows));&#13;
&#13;
        // Adjust serieWidth to previous value that divides by columnsCount without rest&#13;
        while (serieWidth % columnsCount !== 0) {&#13;
            serieWidth--;&#13;
        }&#13;
&#13;
        var columnWidth = (100.0 / columnsCount) + '%';&#13;
&#13;
        var series = $('&lt;div class="graph_series"&gt;&lt;/div&gt;');&#13;
        presenter.axisXLine.before(series);&#13;
&#13;
&#13;
        for (i = 0; i &lt; presenter.configuration.data.length; i++) {&#13;
            // Skip empty rows&#13;
            if (presenter.configuration.data[i].length === 0) {&#13;
                continue;&#13;
            }&#13;
&#13;
            serieContainer = $('&lt;div class="graph_serie_container"&gt;&lt;/div&gt;');&#13;
            serieContainer.css('width', serieWidth);&#13;
&#13;
            serieElement = $('&lt;div class="graph_serie_element graph_serie_size"&gt;&lt;/div&gt;');&#13;
            serieContainer.append(serieElement);&#13;
&#13;
&#13;
            if (showXAxisSeriesDescriptions) {&#13;
                serieDescription = $('&lt;div class="graph_serie_description"&gt;&lt;/div&gt;');&#13;
                serieDescription.text(xAxisSeriesDescriptions[i]);&#13;
                serieElement.append(serieDescription);&#13;
&#13;
                if (showXAxisBarsDescriptions) {&#13;
                    serieDescription.css('bottom', '-40px');&#13;
                } else {&#13;
                    serieDescription.css('bottom', '-20px');&#13;
                }&#13;
            }&#13;
&#13;
&#13;
            for (j = 0; j &lt; presenter.configuration.data[i].length; j++) {&#13;
                columnContainer = $('&lt;div class="graph_column_container"&gt;&lt;/div&gt;');&#13;
                columnContainer.css('width', columnWidth);&#13;
&#13;
                if (presenter.configuration.isInteractive) {&#13;
                    columnContainerBelow = $('&lt;div class="graph_value_size graph_column_container_interactive graph_column_container_below"&gt;&lt;/div&gt;');&#13;
                    columnContainerAbove = $('&lt;div class="graph_value_size graph_column_container_interactive graph_column_container_above"&gt;&lt;/div&gt;');&#13;
                    columnContainer.append(columnContainerBelow);&#13;
                    columnContainer.append(columnContainerAbove);&#13;
                    columnContainerBelow.css('top', (presenter.chartInner.height() - presenter.drawingXPosition) + 'px');&#13;
                    columnContainerAbove.css('bottom', presenter.drawingXPosition + 'px');&#13;
&#13;
                    columnContainerAbove.click(presenter.increaseGraphValue);&#13;
                    columnContainerBelow.click(presenter.decreaseGraphValue);&#13;
                }&#13;
&#13;
                valueContainer = $('&lt;div class="graph_value_container"&gt;&lt;/div&gt;');&#13;
&#13;
                valueElement = $('&lt;div class="graph_value_element graph_value_size"&gt;&lt;/div&gt;');&#13;
                if (presenter.configuration.isInteractive) {&#13;
                    valueElement.addClass('graph_value_element_interactive');&#13;
                    valueElement.click(presenter.decreaseGraphValue);&#13;
                }&#13;
&#13;
                valueElement.css('backgroundColor', presenter.configuration.seriesColors[j]);&#13;
&#13;
                valueContainer.attr('current-value', presenter.configuration.data[i][j]);&#13;
                valueContainer.attr('value-id', i + ' ' + j);&#13;
                valueContainer.append(valueElement);&#13;
&#13;
                if (presenter.configuration.isInteractive) {&#13;
                    $(valueContainer).mousedown(mouseDownCallback);&#13;
                    valueContainer[0].ontouchstart = touchStartCallback;&#13;
                }&#13;
&#13;
                if (showXAxisBarsDescriptions) {&#13;
                    columnDescription = $('&lt;div class="graph_column_description graph_value_size"&gt;&lt;/div&gt;');&#13;
                    columnDescription.text(xAxisBarsDescriptions[i * columnsCount + j]);&#13;
                    columnContainer.append(columnDescription);&#13;
                }&#13;
&#13;
                presenter.redrawGraphValue(valueContainer);&#13;
                columnContainer.append(valueContainer);&#13;
&#13;
                if (presenter.configuration.isInteractive) {&#13;
                    $(columnContainer).mousedown(columnContainerMouseDownCallback);&#13;
                    columnContainer[0].ontouchstart = columnContainerTouchStartCallback;&#13;
                    $(columnContainer).mouseup(mouseUpCallback);&#13;
                    columnContainer[0].ontouchend = touchEndCallback;&#13;
                    $(columnContainer).mousemove(mouseMoveCallback);&#13;
                    columnContainer[0].ontouchmove = touchMoveCallback;&#13;
                }&#13;
&#13;
                serieElement.append(columnContainer);&#13;
            }&#13;
&#13;
            series.append(serieContainer);&#13;
        }&#13;
&#13;
        // Move axis X description &amp; arrow to right place&#13;
        axisXDescription.css('bottom', (presenter.drawingXPosition - Math.round(axisXDescription.height() / 2) + xAxisDescriptionMargin) + 'px');&#13;
        axisXArrow.css('bottom', (presenter.drawingXPosition - parseInt(axisXArrow.css('borderLeftWidth'))) + 'px');&#13;
&#13;
        // Draw axis Y&#13;
        var axisYLine = $('&lt;div class="graph_axis_y_line graph_axis_line"&gt;&lt;/div&gt;');&#13;
        presenter.chartInner.append(axisYLine);&#13;
&#13;
        var axisYArrow = $('&lt;div class="graph_axis_y_arrow graph_axis_arrow"&gt;&lt;/div&gt;');&#13;
        presenter.chartInner.append(axisYArrow);&#13;
&#13;
        // Move axis Y description &amp; arrow to right place&#13;
        var axisYDescriptionLeft = parseInt(presenter.chartInner.css('left')) - Math.round(axisYDescription.width() / 2);&#13;
        if (axisYDescriptionLeft &lt; 0) {&#13;
            axisYDescriptionLeft = 0;&#13;
        }&#13;
        axisYDescription.css('left', axisYDescriptionLeft + 'px');&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(presenter.configuration.isNotActivity) return;&#13;
&#13;
        if(presenter.errorMode){&#13;
            presenter.setWorkMode();&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.currentData = [];&#13;
        presenter.$view.find(".graph_value_container").each(function (index, element) {&#13;
            presenter.currentData[index] = $(element).attr("current-value");&#13;
        });&#13;
&#13;
        presenter.$view.find(".graph_value_container").each(function (index, element) {&#13;
            var currentValue = presenter.configuration.answers[index],&#13;
                valueContainer = $(element),&#13;
                $columnContainer = valueContainer.parent('').find('.graph_column_container_interactive');&#13;
            if(currentValue &gt;= 0) {&#13;
                valueContainer.css({&#13;
                    bottom: (presenter.drawingXPosition - Math.round(presenter.axisXLine.height() / 2)) + 'px',&#13;
                    height: parseFloat(currentValue / presenter.absoluteRange) * 100 + '%',&#13;
                    top: ''&#13;
                });&#13;
                $columnContainer.addClass('graph_column_container_show_answers');&#13;
                valueContainer.addClass('graph_show_answers');&#13;
            } else if (currentValue &lt; 0) {&#13;
                valueContainer.css({&#13;
                    height: parseFloat(currentValue * -1 / presenter.absoluteRange) * 100 + '%',&#13;
                    top: (presenter.chartInner.height() - presenter.drawingXPosition + Math.round(presenter.axisXLine.height() / 2)) + 'px',&#13;
                    bottom: ''&#13;
                });&#13;
                $columnContainer.addClass('graph_column_container_show_answers');&#13;
                valueContainer.addClass('graph_show_answers');&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(presenter.configuration.isNotActivity) return;&#13;
&#13;
        presenter.$view.find(".graph_value_container").each(function (index, element) {&#13;
            var currentValue = presenter.currentData[index],&#13;
                valueContainer = $(element),&#13;
                $columnContainer = valueContainer.parent('').find('.graph_column_container_interactive');&#13;
&#13;
            if(currentValue &gt;= 0) {&#13;
                valueContainer.css({&#13;
                    bottom: (presenter.drawingXPosition - Math.round(presenter.axisXLine.height() / 2)) + 'px',&#13;
                    height: parseFloat(currentValue / presenter.absoluteRange) * 100 + '%',&#13;
                    top: ''&#13;
                });&#13;
                $columnContainer.removeClass('graph_column_container_show_answers');&#13;
                valueContainer.removeClass('graph_show_answers');&#13;
            } else if (currentValue &lt; 0) {&#13;
                valueContainer.css({&#13;
                    height: parseFloat(currentValue * -1 / presenter.absoluteRange) * 100 + '%',&#13;
                    top: (presenter.chartInner.height() - presenter.drawingXPosition + Math.round(presenter.axisXLine.height() / 2)) + 'px',&#13;
                    bottom: ''&#13;
                });&#13;
                $columnContainer.removeClass('graph_column_container_show_answers');&#13;
                valueContainer.removeClass('graph_show_answers');&#13;
            }&#13;
        });&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="multiplegap" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Orientation" nameLabel="multiplegap_property_orientation" type="{horizontal, vertical}"/>
		<property name="Source type" nameLabel="multiplegap_property_source_type" type="{images, texts}"/>
		<property name="Items" nameLabel="multiplegap_property_items" type="list">
			<property name="Answer ID" nameLabel="multiplegap_property_answer_id" type="string"/>
		</property>
		<property name="Item width" nameLabel="multiplegap_property_item_width" type="string"/>
		<property name="Item height" nameLabel="multiplegap_property_item_height" type="string"/>
		<property name="Item spacing" nameLabel="multiplegap_property_item_spacing" type="string"/>
		<property name="Stretch images?" nameLabel="multiplegap_property_stretch_images" type="boolean"/>
		<property name="Item horizontal align" nameLabel="multiplegap_property_item_horizontal_align" type="{none, left, right, center}"/>
		<property name="Item vertical align" nameLabel="multiplegap_property_item_vertical_align" type="{none, top, bottom, center}"/>
		<property name="Maximum item count" nameLabel="multiplegap_property_maximum_item_count" type="string"/>
		<property name="Is not an activity" nameLabel="multiplegap_property_is_not_an_activity" type="boolean"/>
        <property name="Number of repetitions" nameLabel="multiplegap_property_number_of_repetitions" type="string"/>
        <property name="ID repeated element" nameLabel="multiplegap_property_id_repeated_element" type="string"/>
        <property displayName="Block wrong answers" name="Block wrong answers" nameLabel="multiplegap_property_block_wrong_answers" type="boolean"/>
	</model>
<css>.multiplegap_container {&#13;
    position: absolute;&#13;
}&#13;
&#13;
.multiplegap_container .placeholder {&#13;
    position: absolute;&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.multiplegap_texts .placeholder img,&#13;
.multiplegap_texts .placeholder p,&#13;
{&#13;
    margin: 0;&#13;
    padding: 0;&#13;
}&#13;
&#13;
.multiplegap_container .handler {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position: absolute;&#13;
    cursor: pointer;&#13;
    top: 0;&#13;
    left: 0;&#13;
}&#13;
&#13;
.multiplegap_active {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.multiplegap_container .placeholder_valid {&#13;
    border: 1px solid #00ff00;&#13;
}&#13;
&#13;
.multiplegap_container .placeholder_invalid {&#13;
    border: 1px solid #ff0000;&#13;
}&#13;
&#13;
.multiplegap_container .placeholder_valid .handler,&#13;
.multiplegap_container .placeholder_invalid .handler {&#13;
    cursor: default;&#13;
}&#13;
</css><view/><preview/><presenter>function Addonmultiplegap_create(){&#13;
    /*&#13;
     * KNOWN ISSUES:&#13;
     *     Invalid properties values (Item width, Item height, Item spacing, Maximum item count):&#13;
     *          When addon validated model it checks only value of those properties by numerical values. If parsed&#13;
     *         value is not a number - no error message is showed - that's because calculated values from those&#13;
     *         properties are only used in CSS. Invalid CSS value set with jQuery will simply not be added to&#13;
     *         DOM element, but it won't brake anything. Changing this behaviour will break backward compatibility!&#13;
     */&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.ORIENTATIONS = {&#13;
        HORIZONTAL: 0,&#13;
        VERTICAL: 1&#13;
    };&#13;
&#13;
    presenter.SOURCE_TYPES = {&#13;
        IMAGES: 0,&#13;
        TEXTS: 1&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        INVALID_ITEM_WIDTH: "Item width has to be greater than 0",&#13;
        INVALID_ITEM_HEIGHT: "Item height has to be greater than 0",&#13;
        INVALID_ITEM_SPACING: "Item spacing has to be greater or equal than 0",&#13;
        INVALID_MAXIMUM_ITEM_COUNT: "Maximum item count has to be greater or equal than 1",&#13;
        INVALID_NUMBER_OF_REPETITION: "Incorrect value. It should be integer and greater than 0",&#13;
        INVALID_REPEATED_ELEMENT: "Incorrect value. This field should contains only one ID"&#13;
    };&#13;
&#13;
    presenter.eventBus            = null;&#13;
    presenter.playerController    = null;&#13;
&#13;
    presenter.$view               = null;&#13;
&#13;
    presenter.selectedItem        = null;&#13;
&#13;
    presenter.items               = [];&#13;
&#13;
    presenter.showErrorsMode      = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.itemCounterMode = false;&#13;
    presenter.placeholders2drag = [];&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.createLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.createLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.validateItems = function (model) {&#13;
        var itemWidth = parseInt(model['Item width']);&#13;
        if (!isNaN(itemWidth) &amp;&amp; itemWidth &lt;= 0) {&#13;
            return {isError: true, errorCode: 'INVALID_ITEM_WIDTH'};&#13;
        }&#13;
&#13;
        var itemHeight = parseInt(model['Item height']);&#13;
        if (!isNaN(itemHeight) &amp;&amp; itemHeight &lt;= 0) {&#13;
            return {isError: true, errorCode: 'INVALID_ITEM_HEIGHT'};&#13;
        }&#13;
&#13;
        var itemSpacing = parseInt(model['Item spacing']);&#13;
        if (!isNaN(itemSpacing) &amp;&amp; itemSpacing &lt; 0) {&#13;
            return {isError: true, errorCode: 'INVALID_ITEM_SPACING'};&#13;
        }&#13;
&#13;
        var maximumItemCount = parseInt(model['Maximum item count']);&#13;
        if (!isNaN(maximumItemCount) &amp;&amp; maximumItemCount &lt; 1) {&#13;
            return {isError: true, errorCode: 'INVALID_MAXIMUM_ITEM_COUNT'};&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            value: {&#13;
                width: itemWidth,&#13;
                height: itemHeight,&#13;
                spacing: itemSpacing,&#13;
                maximumCount: maximumItemCount,&#13;
                horizontalAlign: model['Item horizontal align'],&#13;
                verticalAlign: model['Item vertical align']&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateRepetitions = function(number) {&#13;
        if (number === undefined || number === "") {&#13;
            number = 0;&#13;
        }&#13;
        number = parseInt(number, 10);&#13;
        if (isNaN(number) || number &lt; 0) {&#13;
            return {isError: true, errorCode: 'INVALID_NUMBER_OF_REPETITION'};&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            value: number&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateIdRepeatedElement = function(id) {&#13;
        id = id || "";&#13;
&#13;
        if (id.indexOf(",") !== -1 || id.indexOf(";") !== -1) {&#13;
            return {isError: true, errorCode: 'INVALID_REPEATED_ELEMENT'};&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            value: id&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var orientation = presenter.ORIENTATIONS.HORIZONTAL;&#13;
        if (model['Orientation'] === "vertical") {&#13;
            orientation = presenter.ORIENTATIONS.VERTICAL;&#13;
        }&#13;
&#13;
        var sourceType = presenter.SOURCE_TYPES.IMAGES;&#13;
        if (model['Source type'] == "texts") {&#13;
            sourceType = presenter.SOURCE_TYPES.TEXTS;&#13;
        }&#13;
&#13;
        var validatedItems = presenter.validateItems(model);&#13;
        if (validatedItems.isError) {&#13;
            return validatedItems;&#13;
        }&#13;
&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        var validatedRepetitions = presenter.validateRepetitions(model["Number of repetitions"]);&#13;
        var validateRepeatedElement = presenter.validateIdRepeatedElement(model["ID repeated element"]);&#13;
&#13;
        if (validatedRepetitions.isError) {&#13;
            return validatedRepetitions;&#13;
        }&#13;
        if (validateRepeatedElement.isError) {&#13;
            return validateRepeatedElement;&#13;
        }&#13;
        return {&#13;
            isError: false,&#13;
            ID: model.ID,&#13;
            isActivity: !ModelValidationUtils.validateBoolean(model['Is not an activity']),&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            orientation: orientation,&#13;
            sourceType: sourceType,&#13;
            stretchImages: model['Stretch images?'] == 'True',&#13;
            items: validatedItems.value,&#13;
            repetitions: validatedRepetitions.value,&#13;
            repeatedElement: validateRepeatedElement.value,&#13;
            blockWrongAnswers: ModelValidationUtils.validateBoolean(model["Block wrong answers"])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createLogic = function(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.addonID = model.ID;&#13;
&#13;
        var container = $('&lt;div class="multiplegap_container"&gt;&lt;/div&gt;');&#13;
        container.click(function(event) {&#13;
            event.stopPropagation();&#13;
            event.preventDefault();&#13;
        });&#13;
        var placeholders = $('&lt;div class="multiplegap_placeholders"&gt;&lt;/div&gt;');&#13;
&#13;
        container.append(placeholders);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (presenter.configuration.repetitions !== undefined &amp;&amp;&#13;
            presenter.configuration.repeatedElement !== undefined &amp;&amp;&#13;
            presenter.configuration.repetitions !== 0 &amp;&amp;&#13;
            presenter.configuration.repeatedElement !== "")&#13;
        {&#13;
            presenter.itemCounterMode = true;&#13;
        }&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
&#13;
            delete presenter.executeCommand;&#13;
            delete presenter.countItems;&#13;
            delete presenter.isAllOK;&#13;
            delete presenter.isAttempted;&#13;
            delete presenter.show;&#13;
            delete presenter.hide;&#13;
            delete presenter.getMaxScore;&#13;
            delete presenter.getScore;&#13;
            delete presenter.getErrorCount;&#13;
            delete presenter.setShowErrorsMode;&#13;
            delete presenter.setWorkMode;&#13;
            delete presenter.reset;&#13;
            delete presenter.getState;&#13;
            delete presenter.setState;&#13;
&#13;
            return;&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.pageLoadedDeferred = new $.Deferred();&#13;
            presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
&#13;
            presenter.eventBus.addEventListener('ItemSelected', presenter.eventListener);&#13;
            presenter.eventBus.addEventListener('ItemConsumed', presenter.eventListener);&#13;
            presenter.eventBus.addEventListener('PageLoaded', this);&#13;
            presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
            presenter.eventBus.addEventListener('HideAnswers', this);&#13;
            presenter.eventBus.addEventListener('NotAllAttempted', this);&#13;
            presenter.eventBus.addEventListener('Submitted', this);&#13;
        }&#13;
&#13;
        container.addClass("multiplegap_" + (presenter.configuration.orientation == presenter.ORIENTATIONS.HORIZONTAL ? "horizontal" : "vertical"));&#13;
        container.addClass("multiplegap_" + (presenter.configuration.sourceType == presenter.SOURCE_TYPES.TEXTS ? "texts" : "images" ));&#13;
&#13;
        container.css({&#13;
            width: presenter.$view.css('width'),&#13;
            height: presenter.$view.css('height')&#13;
        });&#13;
&#13;
        container.click(presenter.acceptDraggable);&#13;
        container.droppable({drop: function(event, ui) {&#13;
            event.stopPropagation();&#13;
            event.preventDefault();&#13;
            container.click();&#13;
        }});&#13;
&#13;
        for(var i = 0; i &lt; model['Items'].length; i++) {&#13;
            presenter.items.push(model['Items'][i]['Answer ID']);&#13;
        }&#13;
&#13;
        presenter.$view.append(container);&#13;
&#13;
        if (!presenter.configuration.isVisibleByDefault) {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.eventListener = {&#13;
        onEventReceived: function(eventName, eventData) {&#13;
            var container = presenter.$view.find('.multiplegap_container');&#13;
&#13;
            if(presenter.showErrorsMode || presenter.isShowAnswersActive) return;&#13;
&#13;
            if (eventName === "ItemConsumed") {&#13;
                presenter.$view.find('.handler').show();&#13;
                presenter.isItemChecked = false;&#13;
            }&#13;
&#13;
            if (eventName === "ItemSelected" &amp;&amp; eventData.value !== null &amp;&amp; eventData.value !== "") {&#13;
                presenter.$view.find('.handler').hide();&#13;
                presenter.isItemChecked = true;&#13;
            } else if (eventName === "ItemSelected" ) {&#13;
                presenter.$view.find('.handler').show();&#13;
                presenter.isItemChecked = false;&#13;
            }&#13;
&#13;
            if(typeof(eventData.item) == "undefined" || eventData.item === null) {&#13;
                presenter.clearSelected();&#13;
            } else if(presenter.configuration.sourceType == presenter.SOURCE_TYPES.IMAGES &amp;&amp; eventData.type == "image") {&#13;
                presenter.saveSelected(eventData);&#13;
&#13;
            } else if(presenter.configuration.sourceType == presenter.SOURCE_TYPES.TEXTS &amp;&amp; eventData.type == "string") {&#13;
                presenter.saveSelected(eventData);&#13;
            } else {&#13;
                presenter.clearSelected();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.selectorRootClass = function() {&#13;
        switch(presenter.configuration.sourceType) {&#13;
            case presenter.SOURCE_TYPES.IMAGES:&#13;
                return ".multiplegap_images";&#13;
&#13;
            case presenter.SOURCE_TYPES.TEXTS:&#13;
                return ".multiplegap_texts";&#13;
        }&#13;
    };&#13;
&#13;
    presenter.clearSelected = function() {&#13;
        presenter.selectedItem = null;&#13;
        $(presenter.selectorRootClass() + '.multiplegap_active').removeClass('multiplegap_active');&#13;
&#13;
        $(presenter.selectorRootClass() + ' .placeholder_inactive').removeClass('placeholder_inactive');&#13;
&#13;
        $(presenter.selectorRootClass() + ' .handler_disabled')&#13;
            .click(presenter.removeDraggable)&#13;
            .removeClass('handler_disabled');&#13;
&#13;
        $(presenter.selectorRootClass() + '&gt;.handler').hide();&#13;
    };&#13;
&#13;
    presenter.saveSelected = function(eventData) {&#13;
        presenter.selectedItem = eventData;&#13;
&#13;
        if(!presenter.maximumItemCountReached()) {&#13;
            presenter.$view.find('.multiplegap_container').addClass('multiplegap_active');&#13;
        }&#13;
&#13;
        if (!presenter.isItemChecked) {&#13;
            presenter.$view.find('.multiplegap_container').removeClass('multiplegap_active');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.acceptDraggable = function(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
&#13;
        if(presenter.showErrorsMode || presenter.isShowAnswersActive || !presenter.isItemChecked) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.performAcceptDraggable($(e.target), presenter.selectedItem, true, false, false);&#13;
        presenter.$view.find('.handler').show();&#13;
        presenter.$view.find('.multiplegap_container').removeClass('multiplegap_active');&#13;
    };&#13;
&#13;
    presenter.maximumItemCountReached = function() {&#13;
        return presenter.countItems() &gt;= presenter.configuration.items.maximumCount;&#13;
    };&#13;
&#13;
    presenter.parseItemValue = function (item) {&#13;
        if(item.indexOf("**") &gt; -1 || item.indexOf("__") &gt; -1){&#13;
            return item.replace(/\*\*(.*?)\*\*/g, "&lt;b&gt;$1&lt;/b&gt;").replace(/__(.*?)__/g, "&lt;i&gt;$1&lt;/i&gt;").replace(/__(.*?)_/g, "&lt;i&gt;$1_&lt;/i&gt;").replace(/\*\*(.*?)\*/g, "&lt;b&gt;$1*&lt;/b&gt;").replace(/_(.*?)__/g, "_$1").replace(/\*(.*?)\*\*/g, "*$1");&#13;
        }else{&#13;
            return item;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getImageURL = function (elem) {&#13;
        var imageSourceModule = presenter.playerController.getModule(elem.item);&#13;
&#13;
        if (imageSourceModule == null || !imageSourceModule.hasOwnProperty('getImageUrl')) {&#13;
            return '';&#13;
        }&#13;
&#13;
        return imageSourceModule.getImageUrl();&#13;
    };&#13;
&#13;
    presenter.updateLaTeX = function (element) {&#13;
        MathJax.CallBack.Queue().Push(function () {&#13;
            MathJax.Hub.Typeset(element)&#13;
        });&#13;
    };&#13;
&#13;
    presenter.performAcceptDraggable = function(handler, item, sendEvents, force, isState) {&#13;
        if(!presenter.isShowAnswersActive){&#13;
            if(!force &amp;&amp; presenter.selectedItem == null) return;&#13;
            if(presenter.maximumItemCountReached()) return;&#13;
            if(presenter.configuration.blockWrongAnswers &amp;&amp; !presenter.isElementCorrect(item.item)) {&#13;
                sendEvent(item, false);&#13;
                return;&#13;
            }&#13;
        }&#13;
&#13;
        var child;&#13;
        var placeholder;&#13;
        if(presenter.isShowAnswersActive){&#13;
            placeholder = $('&lt;div class="placeholder placeholder-show-answers"&gt;&lt;/div&gt;');&#13;
        }else{&#13;
            placeholder = $('&lt;div class="placeholder"&gt;&lt;/div&gt;');&#13;
        }&#13;
        placeholder.css({&#13;
            width: presenter.configuration.items.width + 'px',&#13;
            height: presenter.configuration.items.height + 'px'&#13;
        });&#13;
&#13;
        var i = presenter.countItems();&#13;
&#13;
        switch(presenter.configuration.orientation) {&#13;
            case presenter.ORIENTATIONS.HORIZONTAL:&#13;
                placeholder.css({&#13;
                    top: 0,&#13;
                    left: (i == 0 ? 0 : presenter.configuration.items.width * i + presenter.configuration.items.spacing * i) + 'px'&#13;
                });&#13;
                break;&#13;
&#13;
            case presenter.ORIENTATIONS.VERTICAL:&#13;
                placeholder.css({&#13;
                    left: 0,&#13;
                    top: (i == 0 ? 0 : presenter.configuration.items.height * i + presenter.configuration.items.spacing * i) + 'px'&#13;
                });&#13;
                break;&#13;
        }&#13;
&#13;
        presenter.$view.find('.multiplegap_placeholders').append(placeholder);&#13;
&#13;
        switch(presenter.configuration.sourceType) {&#13;
            case presenter.SOURCE_TYPES.IMAGES:&#13;
                child = $('&lt;img class="contents" alt="" /&gt;');&#13;
                child.attr('src', presenter.getImageURL(item));&#13;
&#13;
                if(presenter.configuration.stretchImages) {&#13;
                    child.css({&#13;
                        width: presenter.configuration.items.width + 'px',&#13;
                        height: presenter.configuration.items.height + 'px'&#13;
                    });&#13;
                }&#13;
                break;&#13;
&#13;
            case presenter.SOURCE_TYPES.TEXTS:&#13;
                child = $('&lt;p class="contents"&gt;&lt;/p&gt;');&#13;
                child.html(presenter.parseItemValue(item.value));&#13;
                break;&#13;
        }&#13;
&#13;
        placeholder&#13;
            .attr({&#13;
                draggableValue: item.value,&#13;
                draggableItem: item.item,&#13;
                draggableType: item.type&#13;
            })&#13;
            .append(child);&#13;
&#13;
        if (!isState) {&#13;
            presenter.updateLaTeX(child[0]);&#13;
        }&#13;
&#13;
        var placeholderPadding = DOMOperationsUtils.getOuterDimensions(placeholder).padding,&#13;
            placeholderVerticalPadding = placeholderPadding.left + placeholderPadding.right,&#13;
            placeholderHorizontalPadding = placeholderPadding.top + placeholderPadding.bottom;&#13;
&#13;
        switch(presenter.configuration.items.horizontalAlign) {&#13;
            case 'left':&#13;
                child.css({&#13;
                    position: 'absolute',&#13;
                    left: 0&#13;
                });&#13;
                break;&#13;
            case 'center':&#13;
&#13;
                switch(presenter.configuration.sourceType) {&#13;
                    case presenter.SOURCE_TYPES.TEXTS:&#13;
                        child.css({&#13;
                            position: 'absolute',&#13;
                            width: '100%',&#13;
                            textAlign: 'center'&#13;
                        });&#13;
                        break;&#13;
&#13;
                    case presenter.SOURCE_TYPES.IMAGES:&#13;
                        child.css({&#13;
                            position: 'absolute',&#13;
                            left: Math.round((presenter.configuration.items.width - placeholderHorizontalPadding - parseInt(child.css('width'))) / 2) + 'px'&#13;
                        });&#13;
                        break;&#13;
                }&#13;
                break;&#13;
            case 'right':&#13;
                child.css({&#13;
                    position: 'absolute',&#13;
                    right: 0&#13;
                });&#13;
                break;&#13;
        }&#13;
&#13;
        switch(presenter.configuration.items.horizontalAlign) {&#13;
            case 'top':&#13;
                child.css({&#13;
                    position: 'absolute',&#13;
                    top: 0&#13;
                });&#13;
                break;&#13;
            case 'center':&#13;
                child.css({&#13;
                    position: 'absolute',&#13;
                    top: Math.round((presenter.configuration.items.height - placeholderVerticalPadding - parseInt(child.css('height'))) / 2) + 'px'&#13;
                });&#13;
                break;&#13;
            case 'bottom':&#13;
                child.css({&#13;
                    position: 'absolute',&#13;
                    bottom: 0&#13;
                });&#13;
                break;&#13;
        }&#13;
&#13;
        handler = $('&lt;div class="handler"&gt;&lt;/div&gt;');&#13;
&#13;
        // Workaround for IE bug: empty divs in IE are not clickable so let's&#13;
        // make them not empty and appear as empty.&#13;
        if($.browser.msie) {&#13;
            handler.css({backgroundColor: "#000000", opacity: 0 });&#13;
        }&#13;
&#13;
        handler.click(presenter.removeDraggable);&#13;
        placeholder.append(handler);&#13;
&#13;
        if(sendEvents) {&#13;
            sendEvent(item, true);&#13;
        }&#13;
&#13;
        $(presenter.selectorRootClass() + '&gt;.handler').hide();&#13;
&#13;
        presenter.clearSelected();&#13;
&#13;
        if (isState) {&#13;
            presenter.placeholders2drag.push(placeholder);&#13;
        } else {&#13;
            presenter.makePlaceholderDraggable(placeholder);&#13;
        }&#13;
    };&#13;
&#13;
    function sendEvent(item, consumed) {&#13;
        if (consumed) {&#13;
            presenter.eventBus.sendEvent('ItemConsumed', item);&#13;
        }&#13;
&#13;
        var score;&#13;
        if(presenter.isElementCorrect(item.item)){&#13;
            score = 1;&#13;
        }else{&#13;
            score = 0;&#13;
        }&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            'source': presenter.configuration.ID,&#13;
            'item'  : '' + item.item, // ensure that we send string&#13;
            'value' : 'add',&#13;
            'score' : score&#13;
        });&#13;
&#13;
        if (presenter.isAllOK()) sendAllOKEvent();&#13;
    }&#13;
&#13;
    presenter.isElementCorrect = function (item) {&#13;
        return presenter.items.indexOf(item) &gt; -1;&#13;
    };&#13;
&#13;
    presenter.makePlaceholderDraggable = function(placeholder) {&#13;
        placeholder.draggable({&#13;
            revert : false,&#13;
            helper: function() {&#13;
                if (!presenter.isDragPossible()) {&#13;
                    return $('&lt;div&gt;&lt;/div&gt;');&#13;
                }&#13;
&#13;
                presenter.itemDragged(placeholder);&#13;
                return getDraggedSrc(placeholder).clone().show();&#13;
            },&#13;
            cursorAt: calculateCursorPosition(placeholder),&#13;
            appendTo: getDraggedSrc(placeholder) === placeholder ? 'parent' : placeholder.parents('.ic_page:first'),&#13;
            start : function(event, ui) {&#13;
                if (!presenter.isDragPossible()) {&#13;
                    event.stopPropagation();&#13;
                    event.preventDefault();&#13;
                    return;&#13;
                }&#13;
                ui.helper.zIndex(100);&#13;
            },&#13;
            stop : function(event, ui) {&#13;
                ui.helper.zIndex(0);&#13;
                ui.helper.remove();&#13;
                presenter.itemStopped(placeholder);&#13;
                ui.helper.remove();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    var getDraggedSrc = function(placeholder) {&#13;
        if (placeholder.parents('.multiplegap_container').css("overflow") == "hidden") {&#13;
            if (presenter.configuration.sourceType == presenter.SOURCE_TYPES.IMAGES) {&#13;
                return $("[id='" + placeholder.attr('draggableitem') + "']");&#13;
            } else {&#13;
                var item_id = placeholder.attr('draggableitem');&#13;
                var container_id = item_id.replace(/\-[0-9]+$/, '');&#13;
                return $(presenter.playerController.getModule(container_id).getItemView(item_id));&#13;
            }&#13;
        } else {&#13;
            return placeholder;&#13;
        }&#13;
    };&#13;
&#13;
    var calculateCursorPosition = function(placeholder) {&#13;
        var obj = getDraggedSrc(placeholder);&#13;
        var position;&#13;
        if (obj === placeholder) {&#13;
            position = {&#13;
                left: Math.round(obj.outerWidth() / 2),&#13;
                top: Math.round(obj.outerHeight() / 2)&#13;
            };&#13;
        } else {&#13;
            var src = obj.clone();&#13;
            src.width(obj.width());&#13;
            src.height(obj.height());&#13;
            presenter.$view.parents('.ic_page:first').append(src);&#13;
            position = {&#13;
                left:  Math.round(src.outerWidth()/2),&#13;
                top: Math.round(src.outerHeight()/2)&#13;
            };&#13;
            src.remove();&#13;
        }&#13;
        return position;&#13;
    };&#13;
&#13;
    presenter.isDragPossible = function() {&#13;
        if (presenter.showErrorsMode || presenter.isShowAnswersActive) {&#13;
            return false;&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.itemDragged = function(placeholder) {&#13;
        var evnt = {&#13;
            source: presenter.configuration.ID,&#13;
            value: placeholder.attr('draggableValue'),&#13;
            item: placeholder.attr('draggableItem'),&#13;
            type: placeholder.attr('draggableType')&#13;
        };&#13;
        presenter.performRemoveDraggable(placeholder.find('.handler'), true);&#13;
        presenter.eventBus.sendEvent('itemDragged', evnt);&#13;
    };&#13;
&#13;
    presenter.itemStopped = function(placeholder) {&#13;
        var evnt = {&#13;
            source: presenter.configuration.ID,&#13;
            value: placeholder.attr('draggableValue'),&#13;
            item: placeholder.attr('draggableItem'),&#13;
            type: placeholder.attr('draggableType')&#13;
        };&#13;
        presenter.eventBus.sendEvent('itemStopped', evnt);&#13;
        placeholder.remove();&#13;
    };&#13;
&#13;
    presenter.removeDraggable = function(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
&#13;
        if(presenter.showErrorsMode || presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.performRemoveDraggable($(e.target));&#13;
    };&#13;
&#13;
    presenter.performRemoveDraggable = function(handler) {&#13;
&#13;
        var placeholder = handler.parent();&#13;
&#13;
        presenter.$view.find('.placeholder').each(function(i, element) {&#13;
            switch(presenter.configuration.orientation) {&#13;
                case presenter.ORIENTATIONS.HORIZONTAL:&#13;
                    if(parseInt($(element).css('left')) &gt; parseInt(placeholder.css('left'))) {&#13;
                        $(element).css('left', (parseInt($(element).css('left')) - presenter.configuration.items.width - presenter.configuration.items.spacing) + 'px');&#13;
                    }&#13;
                    break;&#13;
&#13;
                case presenter.ORIENTATIONS.VERTICAL:&#13;
                    if(parseInt($(element).css('top')) &gt; parseInt(placeholder.css('top'))) {&#13;
                        $(element).css('top', (parseInt($(element).css('top')) - presenter.configuration.items.height - presenter.configuration.items.spacing) + 'px');&#13;
                    }&#13;
                    break;&#13;
&#13;
            }&#13;
        });&#13;
&#13;
        if (arguments[1]) {&#13;
            placeholder.hide();&#13;
            if (placeholder.is(":visible")) {&#13;
                placeholder.style("display", "none", "important");&#13;
            }&#13;
        } else {&#13;
            placeholder.remove();&#13;
        }&#13;
&#13;
        presenter.eventBus.sendEvent('ItemReturned', {&#13;
            value: placeholder.attr('draggableValue'),&#13;
            item: placeholder.attr('draggableItem'),&#13;
            type: placeholder.attr('draggableType')&#13;
        });&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            'source': presenter.configuration.ID,&#13;
            'item'  : '' + placeholder.attr('draggableItem'), // ensure that we send string&#13;
            'value' : 'remove',&#13;
            'score' : '0'&#13;
        });&#13;
&#13;
        if (presenter.isAllOK()) sendAllOKEvent();&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    function sendAllOKEvent () {&#13;
        var eventData = {&#13;
            'source': presenter.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    function getItemsLength(items) {&#13;
        return (items.length == 1 &amp;&amp; items[0] == '') ? 0 : items.length;&#13;
    }&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (presenter.itemCounterMode) {&#13;
            return presenter.configuration.isActivity ? 1 : 0;&#13;
        }&#13;
&#13;
        return presenter.configuration.isActivity ? getItemsLength(presenter.items) : 0;&#13;
    };&#13;
&#13;
    function getItemsCount() {&#13;
        return presenter.$view.find('.placeholder').length;&#13;
    }&#13;
&#13;
    function isAllCorrect () {&#13;
        return getItemsCount() === presenter.configuration.repetitions;&#13;
    }&#13;
&#13;
    presenter.getScore = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.itemCounterMode) {&#13;
            var score = isAllCorrect() ? 1 : 0;&#13;
&#13;
            return presenter.configuration.isActivity ? score : 0;&#13;
        }&#13;
        return presenter.configuration.isActivity ? presenter.items.length - presenter.getInvalidItems().length : 0;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.itemCounterMode) {&#13;
            var isEmpty = getItemsCount() === 0,&#13;
                result = 0;&#13;
&#13;
            if (!isAllCorrect() &amp;&amp; !isEmpty) {&#13;
                result = 1;&#13;
            }&#13;
&#13;
            return presenter.configuration.isActivity ? result : 0;&#13;
        }&#13;
&#13;
        return presenter.configuration.isActivity ? presenter.countItems() - presenter.getScore() : 0;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function() {&#13;
        if (!presenter.configuration.isActivity) return;&#13;
&#13;
        if (presenter.itemCounterMode) {&#13;
            return isAllCorrect() ? 1 : 0;&#13;
        }&#13;
&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.getInvalidItems = function() {&#13;
        var remainingItems = presenter.items.slice(0), currentItem;&#13;
&#13;
        presenter.$view.find('.placeholder').each(function(index, placeholder) {&#13;
&#13;
            // To get updated score during dragged element which is still in DOM we must break out of each&#13;
            if (!$(placeholder).find('.handler').filter(':visible').length) {&#13;
                return true;&#13;
            }&#13;
            currentItem = $(placeholder).attr('draggableItem');&#13;
            var currentItemIndex = remainingItems.indexOf(currentItem);&#13;
&#13;
            if (currentItemIndex !== -1) {&#13;
                remainingItems.splice(currentItemIndex, 1);&#13;
            }&#13;
        });&#13;
&#13;
        return remainingItems;&#13;
    };&#13;
&#13;
    function markInactive () {&#13;
        presenter.$view.find('.multiplegap_container').addClass('multiplegap_inactive');&#13;
    }&#13;
&#13;
    function removeInactivityMark () {&#13;
        presenter.$view.find('.multiplegap_container').removeClass('multiplegap_inactive');&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.showErrorsMode = true;&#13;
        markInactive();&#13;
        if (!presenter.configuration.isActivity) return;&#13;
&#13;
        if (presenter.itemCounterMode) {&#13;
            if (isAllCorrect()) {&#13;
                presenter.$view.find('.multiplegap_placeholders').addClass('placeholder_valid');&#13;
            } else if (getItemsCount() === 0) {&#13;
                presenter.$view.find('.multiplegap_container').addClass('multiplegap_inactive');&#13;
            } else {&#13;
                presenter.$view.find('.multiplegap_placeholders').addClass('placeholder_invalid');&#13;
            }&#13;
        } else {&#13;
            var remainingItems = presenter.items.slice(0), currentItem;&#13;
            presenter.$view.find('.placeholder').each(function(index, placeholder) {&#13;
                currentItem = $(placeholder).attr('draggableItem');&#13;
                var currentItemIndex = remainingItems.indexOf(currentItem);&#13;
                if (currentItemIndex !== -1) {&#13;
                    remainingItems.splice(currentItemIndex, 1);&#13;
                    $(placeholder).addClass('placeholder_valid');&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.find('.placeholder:not(.placeholder_valid)').addClass('placeholder_invalid');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.showErrorsMode = false;&#13;
        removeInactivityMark();&#13;
        if (!presenter.configuration.isActivity) return;&#13;
&#13;
        presenter.$view.find('.placeholder_valid').removeClass('placeholder_valid');&#13;
        presenter.$view.find('.placeholder_invalid').removeClass('placeholder_invalid');&#13;
&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.$view.find('.placeholder').remove();&#13;
&#13;
        presenter.setWorkMode();&#13;
&#13;
        presenter.clearSelected();&#13;
&#13;
        if (presenter.configuration.isVisibleByDefault) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var placeholders = jQuery.map(presenter.$view.find('.placeholder:not(.placeholder-show-answers)'), function(placeholder) {&#13;
            return {&#13;
                item : $(placeholder).attr('draggableItem'),&#13;
                value : $(placeholder).attr('draggableValue'),&#13;
                type : $(placeholder).attr('draggableType')&#13;
            };&#13;
        });&#13;
&#13;
        return JSON.stringify({&#13;
            placeholders: placeholders,&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.upgradeState = function (parsedState) {&#13;
        return presenter.upgradeStateForVisibility(parsedState);&#13;
    };&#13;
&#13;
    presenter.upgradeStateForVisibility = function (parsedState) {&#13;
        if (parsedState.constructor == Array) {&#13;
            // Before introducing show and hide commands, whole state was an array of&#13;
            // entered by user elements (called placeholders).&#13;
            return {&#13;
                placeholders: parsedState,&#13;
                isVisible: true&#13;
            };&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (!state) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state),&#13;
            upgradedState = presenter.upgradeState(parsedState);&#13;
&#13;
        for(var i = 0; i &lt; upgradedState.placeholders.length; i++) {&#13;
            presenter.performAcceptDraggable(presenter.$view.find('.multiplegap_container&gt;.handler'), upgradedState.placeholders[i], false, true, true);&#13;
        }&#13;
&#13;
        if (upgradedState.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.pageLoaded.then(function() {&#13;
            presenter.updateLaTeX(presenter.getContainerElement());&#13;
            for (var i=0; i&lt;presenter.placeholders2drag.length; i++) {&#13;
                var placeholder = presenter.placeholders2drag[i];&#13;
                presenter.makePlaceholderDraggable(placeholder);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getContainerElement = function () {&#13;
        return presenter.$view.find('.multiplegap_container')[0];&#13;
    };&#13;
&#13;
    presenter.countItems = function() {&#13;
        return presenter.$view.find('.placeholder:visible').not('.ui-draggable-dragging').length;&#13;
    };&#13;
&#13;
    presenter.isAttemptedCommand = function() {&#13;
        return presenter.isAttempted();&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return presenter.countItems() &gt; 0;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(false);&#13;
            presenter.configuration.isVisible = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        if (!presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(true);&#13;
            presenter.configuration.isVisible = true;&#13;
            presenter.updateLaTeX(presenter.getContainerElement());&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'countItems': presenter.countItems,&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'isAttempted' : presenter.isAttempted,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers" || eventName == "NotAllAttempted" || eventName == "Submitted") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getElementText = function (id, element) {&#13;
        var module = presenter.playerController.getModule(id);&#13;
&#13;
        if (module == null || !module.hasOwnProperty('getItem')) {&#13;
            return '';&#13;
        }&#13;
&#13;
        return module.getItem(element);&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (!presenter.configuration.isActivity) return;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.setWorkMode();&#13;
&#13;
        presenter.tmpState = [];&#13;
        presenter.$view.find('.placeholder').each(function(i, placeholder) {&#13;
            presenter.tmpState.push({&#13;
                item : $(placeholder).attr('draggableItem'),&#13;
                value : $(placeholder).attr('draggableValue'),&#13;
                type : $(placeholder).attr('draggableType')&#13;
            });&#13;
        });&#13;
&#13;
        presenter.$view.find('.placeholder').remove();&#13;
        var moduleID,&#13;
            iteratedObject;&#13;
        if (presenter.itemCounterMode) {&#13;
            iteratedObject = presenter.configuration.repetitions;&#13;
        } else {&#13;
            iteratedObject = presenter.items.length;&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; iteratedObject; i++) {&#13;
            if (presenter.itemCounterMode) {&#13;
                moduleID = presenter.configuration.repeatedElement;&#13;
            } else {&#13;
                moduleID = presenter.items[i];&#13;
            }&#13;
&#13;
            var value = '';&#13;
            if (presenter.configuration.sourceType != presenter.SOURCE_TYPES.IMAGES) {&#13;
                var elementId = moduleID.split('-')[0],&#13;
                    elementIndex = moduleID.split('-')[1];&#13;
&#13;
                value = presenter.getElementText(elementId, elementIndex);&#13;
            }&#13;
&#13;
            presenter.performAcceptDraggable('&lt;div&gt;&lt;/div&gt;', {type:'string', value: value, item: moduleID}, false, false, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.$view.find('.placeholder-show-answers').remove();&#13;
&#13;
        if(presenter.tmpState){&#13;
            for(var i = 0; i &lt; presenter.tmpState.length; i++) {&#13;
                presenter.performAcceptDraggable(presenter.$view.find('.multiplegap_container&gt;.handler'), presenter.tmpState[i], false, false, false);&#13;
            }&#13;
        }&#13;
        presenter.$view.find('.placeholder-show-answers').removeClass('placeholder-show-answers');&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="text_identification" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Text" nameLabel="text_identification_property_text" type="html"/>
		<property name="SelectionCorrect" nameLabel="text_identification_property_selection_correct" type="boolean"/>
		<property name="onSelected" nameLabel="text_identification_property_on_selected" type="event"/>
		<property name="onDeselected" nameLabel="text_identification_property_on_deselected" type="event"/>
        <property displayName="Block wrong answers" name="blockWrongAnswers" nameLabel="text_identification_property_block_wrong_answers" type="boolean"/>
	</model>
<css>.text-identification-content {&#13;
    text-align: center;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.text-identification-element-selected,&#13;
.text-identification-element-correct,&#13;
.text-identification-element-incorrect,&#13;
.text-identification-element-mouse-hover,&#13;
.text-identification-element {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.text-identification-container {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.text-identification-background-image {&#13;
    border: 0 solid white;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    background-size: 100%;&#13;
    background-position: 0 0;&#13;
}&#13;
</css><view/><preview/><presenter>function Addontext_identification_create(){&#13;
    var presenter = function() {};&#13;
&#13;
    var viewContainer;&#13;
    var isHoverEnabled = true;&#13;
    &#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.lastEvent = null;&#13;
    presenter.isDisabled = false;&#13;
    &#13;
    var CSS_CLASSES = {&#13;
        ELEMENT : "text-identification-element",&#13;
        SELECTED : "text-identification-element-selected",&#13;
        CORRECT : "text-identification-element-correct",&#13;
        INCORRECT : "text-identification-element-incorrect",&#13;
        EMPTY : 'text-identification-element-empty',&#13;
        MOUSE_HOVER_SELECTED : "text-identification-element-mouse-hover-selected",&#13;
        MOUSE_HOVER : "text-identification-element-mouse-hover",&#13;
        SHOW_ANSWERS : "text-identification-element-show-answers"&#13;
&#13;
    };&#13;
&#13;
    function CSS_CLASSESToString() {&#13;
        return CSS_CLASSES.ELEMENT + " " + CSS_CLASSES.SELECTED + " " + CSS_CLASSES.CORRECT + " " +&#13;
            CSS_CLASSES.INCORRECT + " " + CSS_CLASSES.EMPTY + " " + CSS_CLASSES.MOUSE_HOVER + " " + CSS_CLASSES.MOUSE_HOVER_SELECTED+ " " + CSS_CLASSES.SHOW_ANSWERS;&#13;
    }&#13;
&#13;
    presenter.executeUserEventCode = function () {&#13;
        if (presenter.playerController == null) return;&#13;
&#13;
        if (!presenter.isSelected()) {&#13;
            if (presenter.configuration.onDeselected) {&#13;
                presenter.playerController.getCommands().executeEventCode(presenter.configuration.onDeselected);&#13;
            }&#13;
        } else {&#13;
            if (presenter.configuration.onSelected) {&#13;
                presenter.playerController.getCommands().executeEventCode(presenter.configuration.onSelected);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.triggerSelectionChangeEvent = function() {&#13;
        if (presenter.playerController == null) return;&#13;
&#13;
        presenter.playerController.getEventBus().sendEvent('ValueChanged', this.createEventData());&#13;
    };&#13;
&#13;
    presenter.clickHandler = function (e) {&#13;
        if(presenter.isDisabled){&#13;
            return;&#13;
        }&#13;
&#13;
        e.stopPropagation();&#13;
        if (presenter.configuration.isErrorCheckMode) return;&#13;
        presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
        presenter.applySelectionStyle(presenter.isSelected(), CSS_CLASSES.MOUSE_HOVER_SELECTED, CSS_CLASSES.ELEMENT);&#13;
        presenter.executeUserEventCode();&#13;
        presenter.triggerSelectionChangeEvent();&#13;
        if (presenter.isAllOK()) sendAllOKEvent();&#13;
&#13;
        var score = presenter.configuration.shouldBeSelected ? 1 : 0;&#13;
        if(score == 0 &amp;&amp; presenter.configuration.blockWrongAnswers) {&#13;
            presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
            presenter.applySelectionStyle(presenter.isSelected(), CSS_CLASSES.MOUSE_HOVER_SELECTED, CSS_CLASSES.ELEMENT);&#13;
        }&#13;
    };&#13;
&#13;
    function handleMouseActions() {&#13;
        var $element = viewContainer.find('div.text-identification-container');&#13;
        $element.hover(&#13;
            function() {&#13;
                if (!presenter.configuration.isErrorCheckMode &amp;&amp; isHoverEnabled) {&#13;
                    $(this).removeClass(CSS_CLASSESToString());&#13;
                    $(this).addClass(presenter.isSelected() ? CSS_CLASSES.MOUSE_HOVER_SELECTED : CSS_CLASSES.MOUSE_HOVER);&#13;
                }&#13;
            },&#13;
            function() {&#13;
                if (!presenter.configuration.isErrorCheckMode &amp;&amp; isHoverEnabled) {&#13;
                    $(this).removeClass(CSS_CLASSESToString());&#13;
                    $(this).addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
                }&#13;
            }&#13;
        );&#13;
&#13;
        $element.on('touchstart', function (e) {&#13;
            e.preventDefault();&#13;
&#13;
            presenter.lastEvent = e;&#13;
        });&#13;
&#13;
        $element.on('touchend', function (e) {&#13;
            e.preventDefault();&#13;
            if ( presenter.lastEvent.type != e.type ) {&#13;
                presenter.clickHandler(e);&#13;
            }&#13;
        });&#13;
&#13;
        $element.click(presenter.clickHandler);&#13;
    }&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        return {&#13;
            addonID: model.ID,&#13;
            onSelected: model.onSelected,&#13;
            onDeselected: model.onDeselected,&#13;
            shouldBeSelected: ModelValidationUtils.validateBoolean(model.SelectionCorrect),&#13;
            isSelected: false,&#13;
            isErrorCheckMode: false,&#13;
            blockWrongAnswers: ModelValidationUtils.validateBoolean(model.blockWrongAnswers)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.centerElements = function ($text, $container) {&#13;
        $.when(presenter.mathJaxProcessEnded).then(function () {&#13;
            var contentWidth = parseInt($text.css('width'), 10),&#13;
                contentHeight = parseInt($text.css('height'), 10),&#13;
                containerWidth = parseInt(viewContainer.css('width'), 10),&#13;
                containerHeight = parseInt(viewContainer.css('height'), 10);&#13;
&#13;
            $text.css({&#13;
                left: Math.round((containerWidth - contentWidth) / 2) + 'px',&#13;
                top: Math.round((containerHeight - contentHeight) / 2) + 'px'&#13;
            });&#13;
&#13;
            $container.css({&#13;
                width: containerWidth + 'px',&#13;
                height: containerHeight + 'px'&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.registerMathJaxListener(isPreview);&#13;
&#13;
        viewContainer = $(view);&#13;
        presenter.$view = $(view);&#13;
        presenter.currentPageId = presenter.$view.parent('.ic_page').attr('id');&#13;
        var textSrc = model.Text;&#13;
        presenter.moduleID = model.ID;&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        var container = $('&lt;div class="text-identification-container"&gt;&lt;/div&gt;');&#13;
        container.addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
&#13;
        var text = $('&lt;div class="text-identification-content"&gt;&lt;/div&gt;');&#13;
        text.html(textSrc);&#13;
        container.append(text);&#13;
&#13;
        viewContainer.append(container);&#13;
        presenter.centerElements(text, container);&#13;
&#13;
        if (!isPreview) handleMouseActions();&#13;
    }&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        $(presenter.$view).css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.applySelectionStyle = function (selected, selectedClass, unselectedClass) {&#13;
        var element = viewContainer.find('div:first')[0];&#13;
&#13;
        $(element).removeClass(CSS_CLASSESToString());&#13;
        $(element).addClass(selected ? selectedClass : unselectedClass);&#13;
    };&#13;
&#13;
    presenter.select = function () {&#13;
        presenter.configuration.isSelected = true;&#13;
        presenter.executeUserEventCode();&#13;
        presenter.applySelectionStyle(true, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.deselect = function () {&#13;
        presenter.configuration.isSelected = false;&#13;
        presenter.executeUserEventCode();&#13;
        presenter.applySelectionStyle(false, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.isSelected = function () {&#13;
        return presenter.configuration.isSelected;&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function() {&#13;
        isHoverEnabled = false;&#13;
        presenter.configuration.isSelected = true;&#13;
        presenter.applySelectionStyle(true, CSS_CLASSES.CORRECT, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        isHoverEnabled = false;&#13;
        presenter.configuration.isSelected = true;&#13;
        presenter.applySelectionStyle(true, CSS_CLASSES.INCORRECT, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.markAsEmpty = function() {&#13;
        isHoverEnabled = false;&#13;
        presenter.applySelectionStyle(true, CSS_CLASSES.EMPTY, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    function sendAllOKEvent() {&#13;
        var eventData = {&#13;
            'source': presenter.moduleID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.configuration.isErrorCheckMode) return;&#13;
&#13;
        var commands = {&#13;
            'select': presenter.select,&#13;
            'deselect': presenter.deselect,&#13;
            'isSelected': presenter.isSelected,&#13;
            'markAsCorrect': presenter.markAsCorrect,&#13;
            'markAsWrong': presenter.markAsWrong,&#13;
            'markAsEmpty': presenter.markAsEmpty,&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'disable': presenter.disable,&#13;
            'enable': presenter.enable&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        presenter.isDisabled = true;&#13;
        var $element = viewContainer.find('div.text-identification-container');&#13;
        $element.addClass("text-identification-element-disabled");&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        presenter.isDisabled = false;&#13;
        var $element = viewContainer.find('div.text-identification-container');&#13;
        $element.removeClass("text-identification-element-disabled");&#13;
    };&#13;
&#13;
    presenter.registerMathJaxListener = function (isPreview) {&#13;
        var mathJaxDeferred = new jQuery.Deferred();&#13;
        presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;&#13;
        presenter.mathJaxProcessEnded = mathJaxDeferred.promise();&#13;
&#13;
        MathJax.Hub.Register.MessageHook("End Process", function (message) {&#13;
            // We're listening for "End Process" that was fired for ic_page into which addon was inserted.&#13;
            // This way we're not reacting on events from other page in Book View.&#13;
            if (isPreview || ($(message[1]).hasClass('ic_page') &amp;&amp; $(message[1]).is('#' + presenter.currentPageId))) {&#13;
                presenter.mathJaxProcessEndedDeferred.resolve();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.configuration.isSelected = false;&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
        isHoverEnabled = true;&#13;
        presenter.applySelectionStyle(presenter.isSelected(), CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
        presenter.isVisible = presenter.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
&#13;
        presenter.applySelectionStyle(presenter.isSelected(), CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorCheckMode = true;&#13;
&#13;
        if (presenter.isSelected()) {&#13;
            presenter.applySelectionStyle(presenter.isSelected() === presenter.configuration.shouldBeSelected, CSS_CLASSES.CORRECT, CSS_CLASSES.INCORRECT);&#13;
        } else {&#13;
            presenter.applySelectionStyle(true, CSS_CLASSES.EMPTY, CSS_CLASSES.ELEMENT)&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        return !presenter.configuration.shouldBeSelected &amp;&amp; presenter.isSelected() ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        return presenter.configuration.shouldBeSelected ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        return presenter.configuration.shouldBeSelected &amp;&amp; presenter.isSelected() ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        //return presenter.isSelected() ? 'True' : 'False';&#13;
&#13;
        return JSON.stringify({&#13;
            isSelected: presenter.isSelected() ? 'True' : 'False',&#13;
            isVisible: presenter.isVisible,&#13;
            isDisabled: presenter.isDisabled&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var serializeIsSelected, parsedState;&#13;
        if (state.indexOf("}") &gt; -1 &amp;&amp; state.indexOf("{") &gt; -1){&#13;
            parsedState = JSON.parse(state);&#13;
            serializeIsSelected = parsedState.isSelected;&#13;
        }else{&#13;
            serializeIsSelected = state;&#13;
            parsedState = undefined;&#13;
        }&#13;
&#13;
        presenter.configuration.isSelected = serializeIsSelected.toString() === "True";&#13;
&#13;
        presenter.applySelectionStyle(presenter.isSelected(), CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
&#13;
        if(parsedState){&#13;
            if(parsedState.isVisible != undefined){&#13;
                presenter.setVisibility(parsedState.isVisible);&#13;
                presenter.isVisible = parsedState.isVisible;&#13;
            }&#13;
&#13;
            if(parsedState.isDisabled != undefined){&#13;
                presenter.isDisabled = parsedState.isDisabled;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function() {&#13;
        return {&#13;
            'source' : presenter.configuration.addonID,&#13;
            'item' : '1',&#13;
            'value' : presenter.isSelected() ? '1' : '0',&#13;
            'score' : presenter.configuration.shouldBeSelected ? '1' : '0'&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    function applySelectionStyleShowAnswers (style){&#13;
        var element = presenter.$view.find('div:first')[0];&#13;
        $(element).addClass(style);&#13;
    }&#13;
&#13;
    function applySelectionStyleHideAnswers (style){&#13;
        var element = presenter.$view.find('div:first')[0];&#13;
&#13;
        $(element).removeClass(style);&#13;
        $(element).removeClass(CSS_CLASSES.EMPTY).addClass(CSS_CLASSES.ELEMENT);&#13;
    }&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
&#13;
        presenter.configuration.isErrorCheckMode = true;&#13;
&#13;
        presenter.$view.find('.text-identification-element-incorrect').removeClass(CSS_CLASSES.INCORRECT).addClass("text-identification-element was-selected");&#13;
        presenter.$view.find('.text-identification-element-correct').removeClass(CSS_CLASSES.CORRECT).addClass("text-identification-element was-selected");&#13;
&#13;
        if(presenter.configuration.shouldBeSelected){&#13;
            applySelectionStyleShowAnswers(CSS_CLASSES.SHOW_ANSWERS);&#13;
        }else{&#13;
            presenter.$view.find('.text-identification-element-selected').removeClass(CSS_CLASSES.SELECTED).addClass("text-identification-element was-selected");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
&#13;
        applySelectionStyleHideAnswers(CSS_CLASSES.SHOW_ANSWERS);&#13;
&#13;
        var elementWasSelected = presenter.$view.find('.was-selected');&#13;
        $(elementWasSelected).addClass(CSS_CLASSES.SELECTED).removeClass("was-selected");&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="video" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Files" nameLabel="video_property_files" type="list">
			<property displayName="Ogv video" name="Ogg video" nameLabel="video_property_ogg_video" type="video"/>
			<property name="MP4 video" nameLabel="video_property_mp4_video" type="video"/>
			<property name="WebM video" nameLabel="video_property_webm_video" type="video"/>
			<property isLocalized="true" name="Subtitles" nameLabel="video_property_subtitles" type="text"/>
			<property name="Poster" nameLabel="video_property_poster" type="image"/>
			<property name="ID" nameLabel="video_property_id" type="string"/>
		</property>
		<property name="Show video" nameLabel="video_property_show_video" type="string"/>
		<property isLocalized="true" name="Narration" nameLabel="video_property_narration" type="narration"/>
        <property name="Hide default controls" nameLabel="video_property_hide_default_controls" type="boolean"/>
        <property name="Hide subtitles" nameLabel="video_property_hide_subtitles" type="boolean"/>
	</model>
<css>.video-container {&#13;
    background-color: #000;&#13;
    position: relative;&#13;
}&#13;
&#13;
.captions {&#13;
    position: absolute;&#13;
    z-index: 999;&#13;
    color: #fff;&#13;
}&#13;
&#13;
.poster-wrapper {&#13;
    display: block;&#13;
    position: absolute;&#13;
    top:0;&#13;
    left:0;&#13;
}&#13;
&#13;
.poster-wrapper img {&#13;
    position : absolute;&#13;
    top:0;&#13;
    left:0;&#13;
}&#13;
&#13;
.video-poster-play {&#13;
    position : absolute;&#13;
    background: url('resources/video-poster-play.svg') no-repeat center;&#13;
    text-align: center;&#13;
    width: 80px;&#13;
    height: 80px;&#13;
}&#13;
</css><view>&lt;div class="video-container"&gt;&#13;
    &lt;video controls="controls"&gt;&#13;
        Video playback is not supported on your browser.&#13;
    &lt;/video&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="video-container"&gt;&#13;
    &lt;video preload="auto"&gt;&#13;
        Video playback is not supported on your browser.&#13;
    &lt;/video&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function Addonvideo_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.currentMovie = 0;&#13;
    presenter.videoContainer = null;&#13;
    presenter.$view = null;&#13;
    presenter.files = [];&#13;
    presenter.video = null;&#13;
    presenter.metadadaLoaded = false;&#13;
    presenter.isPreview = false;&#13;
    presenter.captions = [];&#13;
    presenter.configuration = {};&#13;
    presenter.captionDivs = [];&#13;
    presenter.areSubtitlesHidden = false;&#13;
&#13;
    var height;&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradePoster(model);&#13;
    };&#13;
&#13;
    presenter.upgradePoster = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        for (var i = 0; i &lt; model.Files.length; i++) {&#13;
            if (!upgradedModel.Files[i].Poster) {&#13;
                upgradedModel.Files[i].Poster = "";&#13;
            }&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'MEDIA_ERR_ABORTED' : 1,&#13;
        'MEDIA_ERR_DECODE' : 2,&#13;
        'MEDIA_ERR_NETWORK' : 3,&#13;
        'MEDIA_ERR_SRC_NOT_SUPPORTED' : [4, 'Ups ! Looks like your browser doesn\'t support this codecs. ' +&#13;
            'Go &lt;a href="https://tools.google.com/dlpage/webmmf/" &gt; -here- &lt;/a&gt; to download WebM plugin']&#13;
    };&#13;
&#13;
    presenter.getVideoErrorMessage = function (errorCode) {&#13;
        var errorMessage = 'We are terribly sorry, but an error has occurred: ';&#13;
&#13;
        switch (errorCode) {&#13;
            case presenter.ERROR_CODES.MEDIA_ERR_ABORTED:&#13;
                errorMessage += 'you aborted the video playback.';&#13;
                break;&#13;
            case presenter.ERROR_CODES.MEDIA_ERR_NETWORK:&#13;
                errorMessage += 'a network error caused the video download to fail part-way.';&#13;
                break;&#13;
            case presenter.ERROR_CODES.MEDIA_ERR_DECODE:&#13;
                errorMessage += 'the video playback was aborted due to a corruption problem or because the video used features your browser did not support.';&#13;
                break;&#13;
            case presenter.ERROR_CODES.MEDIA_ERR_SRC_NOT_SUPPORTED:&#13;
                errorMessage += 'the video could not be loaded, either because the server or network failed or because the format is not supported.';&#13;
                break;&#13;
            default:&#13;
                errorMessage += 'unknown.';&#13;
                break;&#13;
        }&#13;
&#13;
        return errorMessage + ' Please refresh page.';&#13;
    };&#13;
&#13;
    presenter.videoTypes = [&#13;
        { name : 'MP4 video', type : 'video/mp4'},&#13;
        { name : 'Ogg video', type : 'video/ogg'},&#13;
        { name : 'WebM video', type : 'video/webm'}&#13;
    ];&#13;
&#13;
    presenter.VIDEO_STATE = {&#13;
        STOPPED: 0,&#13;
        PLAYING: 1,&#13;
        PAUSED: 2&#13;
    };&#13;
&#13;
    function fullScreenChange () {&#13;
        presenter.configuration.isFullScreen = document.webkitIsFullScreen == true || document.mozFullScreen == true;&#13;
        var top, left, newTop, newLeft, i,&#13;
            screenWidth = screen.width,&#13;
            screenHeight = screen.height,&#13;
            moduleWidth = presenter.$view.width(),&#13;
            moduleHeight = presenter.$view.height(),&#13;
            videoFSWidth = screenWidth,&#13;
            videoFSHeight = parseInt(moduleHeight * screenWidth / moduleWidth),&#13;
            scale = videoFSWidth / moduleWidth,&#13;
            xProportion = screenWidth / moduleWidth,&#13;
            yProportion = screenHeight / moduleHeight,&#13;
            offsetX, offsetY, $element, transformation;&#13;
&#13;
        if (yProportion &lt; xProportion) {&#13;
            videoFSHeight = screenHeight;&#13;
            videoFSWidth = parseInt(moduleWidth * yProportion);&#13;
            scale = videoFSWidth / moduleWidth;&#13;
        } else {&#13;
            videoFSWidth = screenWidth;&#13;
            videoFSHeight = parseInt(moduleHeight * xProportion);&#13;
            scale = videoFSHeight / moduleHeight;&#13;
        }&#13;
&#13;
        offsetX = screenWidth - videoFSWidth;&#13;
        offsetY = screenHeight - videoFSHeight;&#13;
        scale = Math.round(scale * 100) / 100;&#13;
        offsetX = Math.round(offsetX * 100) / 100;&#13;
        offsetY = Math.round(offsetY * 100) / 100;&#13;
&#13;
        for (i = 0; i &lt; presenter.captions.length; i++) {&#13;
            $element = $(presenter.captions[i].element);&#13;
&#13;
            if (presenter.configuration.isFullScreen) {&#13;
                if ($element.attr('oldLeft')) continue;&#13;
&#13;
                top = parseInt($element.css('top'), 10);&#13;
                left = parseInt($element.css('left'), 10);&#13;
&#13;
                newTop = parseInt(top * scale, 10);&#13;
                newLeft = parseInt(left * scale, 10);&#13;
&#13;
                $element.attr({&#13;
                    oldTop: top,&#13;
                    oldLeft: left,&#13;
                    oldWidth: $element.width(),&#13;
                    oldHeight: $element.height()&#13;
                });&#13;
                transformation = 'scale(' + scale + ')';&#13;
                $element.css({&#13;
                    '-webkit-transform-origin': 'top left',&#13;
                    '-moz-transform-origin': 'top left',&#13;
                    '-ms-transform-origin': 'top left',&#13;
                    'transform-origin': 'top left',&#13;
                    position: 'fixed',&#13;
                    zIndex: 9999999999,&#13;
                    top: (newTop + offsetY / 2) + 'px',&#13;
                    left: (newLeft + offsetX / 2) + 'px',&#13;
                    '-moz-transform': transformation,&#13;
                    '-webkit-transform': transformation,&#13;
                    '-ms-transform': transformation,&#13;
                    'transform': transformation&#13;
                });&#13;
            } else {&#13;
                newLeft = $element.attr('oldLeft');&#13;
                newTop = $element.attr('oldTop');&#13;
                transformation = 'scale(1.0)';&#13;
                $element.css({&#13;
                    width: $element.attr('oldWidth') + 'px',&#13;
                    height: $element.attr('oldHeight') + 'px',&#13;
                    top: newTop + 'px',&#13;
                    left: newLeft + 'px',&#13;
                    position: 'absolute',&#13;
                    zIndex: '',&#13;
                    '-moz-transform': '',&#13;
                    '-webkit-transform': '',&#13;
                    '-o-transform': '',&#13;
                    '-ms-transform': '',&#13;
                    'transform': ''&#13;
                });&#13;
&#13;
                $element.removeAttr('oldWidth oldHeight oldTop oldLeft');&#13;
            }&#13;
        }&#13;
&#13;
        if (!presenter.configuration.isFullScreen) {&#13;
            $(presenter.videoContainer).css({&#13;
                width: presenter.configuration.dimensions.container.width + 'px',&#13;
                height: presenter.configuration.dimensions.container.height + 'px'&#13;
            });&#13;
            $(presenter.video).css({&#13;
                width: presenter.configuration.dimensions.video.width + 'px',&#13;
                height: presenter.configuration.dimensions.video.height + 'px'&#13;
            })&#13;
        }&#13;
    }&#13;
&#13;
    presenter.registerFullScreenEventCallbacks = function () {&#13;
        document.addEventListener("mozfullscreenchange", fullScreenChange, false);&#13;
        this.video.addEventListener("webkitfullscreenchange", fullScreenChange, false);&#13;
    };&#13;
&#13;
    presenter.registerHook = function() {&#13;
        presenter.mathJaxHook = MathJax.Hub.Register.MessageHook("End Process", function mathJaxResolve(message) {&#13;
            if ($(message[1]).hasClass('ic_page')) {&#13;
                presenter.mathJaxProcessEndedDeferred.resolve();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        var mathJaxDeferred = new jQuery.Deferred();&#13;
        presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;&#13;
        presenter.mathJaxProcessEnded = mathJaxDeferred.promise();&#13;
&#13;
        presenter.registerHook();&#13;
&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
&#13;
        var pageLoadedDeferred = new jQuery.Deferred();&#13;
        presenter.pageLoadedDeferred = pageLoadedDeferred;&#13;
        presenter.pageLoaded = pageLoadedDeferred.promise();&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        presenter.pageLoadedDeferred.resolve();&#13;
        if(eventData.value == 'dropdownClicked') {&#13;
            this.video.load();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEndedEventData = function (currentVideo) {&#13;
        return {&#13;
            source: presenter.addonID,&#13;
            item: '' + (currentVideo + 1),&#13;
            value: 'ended'&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendVideoEndedEvent = function () {&#13;
        var eventData = presenter.createEndedEventData(presenter.currentMovie);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.stopPropagationOnClickEvent = function(e) {&#13;
        e.stopPropagation();&#13;
    };&#13;
&#13;
    presenter.setMetaDataOnMetaDataLoadedEvent = function() {&#13;
        presenter.metadadaLoaded = true;&#13;
    };&#13;
&#13;
    function setVideoStateOnPlayEvent() {&#13;
        presenter.videoState = presenter.VIDEO_STATE.PLAYING;&#13;
        presenter.addClassToView('playing');&#13;
    }&#13;
&#13;
    function setVideoStateOnPauseEvent() {&#13;
        if (!presenter.isHideExecuted) {&#13;
            presenter.videoState = presenter.VIDEO_STATE.PAUSED;&#13;
            presenter.removeClassFromView('playing');&#13;
        }&#13;
&#13;
        delete presenter.isHideExecuted;&#13;
    }&#13;
&#13;
    presenter.removeMathJaxHook = function() {&#13;
        MathJax.Hub.signal.hooks["End Process"].Remove(presenter.mathJaxHook);&#13;
    };&#13;
&#13;
    presenter.destroy = function() {&#13;
        presenter.videoView.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.videoObject.removeEventListener('click', presenter.stopPropagationOnClickEvent);&#13;
        presenter.videoObject.removeEventListener('loadedmetadata', presenter.setMetaDataOnMetaDataLoadedEvent);&#13;
        presenter.videoObject.removeEventListener('play', setVideoStateOnPlayEvent);&#13;
        presenter.videoObject.removeEventListener('pause', setVideoStateOnPauseEvent);&#13;
        presenter.videoObject.removeEventListener('stalled', presenter.onStalledEventHandler);&#13;
        presenter.videoObject.removeEventListener('webkitfullscreenchange', fullScreenChange);&#13;
        document.removeEventListener("mozfullscreenchange", fullScreenChange);&#13;
&#13;
        presenter.$videoObject.unbind("ended");&#13;
        presenter.$videoObject.unbind("error");&#13;
        presenter.$videoObject.unbind("canplay");&#13;
        presenter.$videoObject.unbind('timeupdate');&#13;
&#13;
        presenter.removeMathJaxHook();&#13;
        presenter.$view.off();&#13;
&#13;
        presenter.videoObject.src = '';&#13;
        presenter.mathJaxHook = null;&#13;
        presenter.eventBus = null;&#13;
        presenter.view = null;&#13;
        presenter.viewObject = null;&#13;
        presenter.video = null;&#13;
    };&#13;
    &#13;
    presenter.keyboardController = function(keycode) {&#13;
&#13;
        $(document).on('keydown', function(e) {&#13;
            e.preventDefault();&#13;
            $(this).off('keydown');&#13;
        });&#13;
&#13;
        function increasedVolume() {&#13;
        	var val = Math.round((presenter.videoObject.volume + 0.1)*10)/10;&#13;
        	&#13;
        	return val &gt; 1 ? 1 : val;&#13;
        }&#13;
        &#13;
        function decreasedVolume() {&#13;
        	var val = Math.round((presenter.videoObject.volume - 0.1)*10)/10;&#13;
        	&#13;
        	return val &lt; 0 ? 0 : val;&#13;
        }&#13;
        &#13;
        function forward() {&#13;
        	presenter.videoObject.currentTime += 15; &#13;
        }&#13;
        &#13;
        function backward() {&#13;
        	presenter.videoObject.currentTime -= 15; &#13;
        }&#13;
&#13;
        function playPause() {&#13;
            if (presenter.video.paused) {&#13;
                presenter.play();&#13;
            } else {&#13;
                presenter.pause();&#13;
            }&#13;
        }&#13;
&#13;
        function fullScreen() {&#13;
            if (presenter.videoObject.requestFullscreen) {&#13;
                presenter.videoObject.requestFullscreen();&#13;
            } else if (presenter.videoObject.mozRequestFullScreen) {&#13;
                presenter.videoObject.mozRequestFullScreen();&#13;
            } else if (presenter.videoObject.webkitRequestFullscreen) {&#13;
                presenter.videoObject.webkitRequestFullscreen();&#13;
            }&#13;
        }&#13;
&#13;
        switch(keycode) {&#13;
            case 32:&#13;
                playPause();&#13;
                break;&#13;
            case 38:&#13;
                presenter.videoObject.volume = increasedVolume();&#13;
                break;&#13;
            case 40:&#13;
                presenter.videoObject.volume = decreasedVolume();&#13;
                break;&#13;
            case 37:&#13;
                backward();&#13;
                break;&#13;
            case 39:&#13;
                forward();&#13;
                break;&#13;
            case 27:&#13;
                presenter.pause();&#13;
                break;&#13;
            case 70:&#13;
                fullScreen();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.commandsQueue = CommandsQueueFactory.create(presenter);&#13;
        presenter.isVideoLoaded = false;&#13;
&#13;
        presenter.addonID = model.ID;&#13;
        presenter.isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.isCurrentlyVisible = true;&#13;
        presenter.shouldHideSubtitles = ModelValidationUtils.validateBoolean(model["Hide subtitles"]);&#13;
        var upgradedModel = this.upgradeModel(model);&#13;
        presenter.files = upgradedModel.Files;&#13;
        presenter.defaultControls = !ModelValidationUtils.validateBoolean(upgradedModel['Hide default controls']);&#13;
        presenter.videoContainer = $(view).find('.video-container:first');&#13;
        presenter.$view = $(view);&#13;
        presenter.videoState = presenter.VIDEO_STATE.STOPPED;&#13;
        height = upgradedModel.Height;&#13;
        this.setDimensions();&#13;
        presenter.reload();&#13;
&#13;
        if (!presenter.isVisibleByDefault) presenter.hide();&#13;
&#13;
        presenter.video.addEventListener('click', presenter.stopPropagationOnClickEvent);&#13;
        presenter.video.addEventListener('error', function() { presenter.handleErrorCode(this.error); }, true);&#13;
        presenter.video.addEventListener('loadedmetadata', presenter.setMetaDataOnMetaDataLoadedEvent);&#13;
        presenter.video.addEventListener('play', setVideoStateOnPlayEvent);&#13;
        presenter.video.addEventListener('pause', setVideoStateOnPauseEvent);&#13;
        presenter.video.addEventListener('playing', AddonVideo_onVideoPlaying, false);&#13;
&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
&#13;
        presenter.videoObject = this.video;&#13;
        presenter.$videoObject = $(this.video);&#13;
        presenter.videoView = view;&#13;
&#13;
        presenter.videoView.addEventListener('DOMNodeRemoved', function onDOMNodeRemoved(ev) {&#13;
            if (ev.target === this) {&#13;
                presenter.destroy();&#13;
            }&#13;
        });&#13;
&#13;
        if (presenter.shouldHideSubtitles) {&#13;
            presenter.hideSubtitles();&#13;
        } else {&#13;
            presenter.showSubtitles();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.sendOnPLayingEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.addonID,&#13;
            'item': '',&#13;
            'value': 'playing',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    function AddonVideo_onVideoPlaying () {&#13;
        presenter.sendOnPLayingEvent();&#13;
    }&#13;
&#13;
    presenter.convertTimeStringToNumber = function(timeString) {&#13;
        timeString = timeString.split(':');&#13;
        var minutes = parseInt(timeString[0] * 60, 10);&#13;
        var seconds = parseInt(timeString[1], 10);&#13;
        return { isCorrect: true, value: (minutes + seconds) };&#13;
    };&#13;
&#13;
    presenter.handleErrorCode = function(error) {&#13;
        if (!error) return;&#13;
&#13;
        presenter.$view.html(presenter.getVideoErrorMessage(error.code));&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        this.files = model.Files;&#13;
        this.$view = $(view);&#13;
        this.videoContainer = $(view).find('.video-container:first');&#13;
        height = model.Height;&#13;
&#13;
        this.isPreview = true;&#13;
        this.setVideo();&#13;
&#13;
        this.setDimensions();&#13;
&#13;
        presenter.isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.isCurrentlyVisible = true;&#13;
        if (!presenter.isVisibleByDefault) presenter.hide();&#13;
    };&#13;
&#13;
    presenter.showCaptions = function(time) {&#13;
        if (!presenter.configuration.dimensions) return; // No captions to show when video wasn't loaded properly&#13;
&#13;
        for (var i = 0; i &lt; this.captions.length; i++) {&#13;
            var caption = this.captions[i];&#13;
            if (caption.start &lt;= time &amp;&amp; caption.end &gt;= time) {&#13;
                $(caption.element).attr('visibility', 'visible');&#13;
                $(caption.element).css('visibility', presenter.isCurrentlyVisible ? 'visible' : 'hidden');&#13;
&#13;
                if (presenter.configuration.isFullScreen &amp;&amp; !$(caption.element).attr('oldTop')) {&#13;
                    var top = parseInt($(caption.element).css('top'), 10),&#13;
                        left = parseInt($(caption.element).css('left'), 10),&#13;
                        newTop, newLeft,&#13;
                        screenWidth = screen.width,&#13;
                        screenHeight = screen.height,&#13;
                        moduleWidth = presenter.$view.width(),&#13;
                        moduleHeight = presenter.$view.height(),&#13;
                        videoFSWidth = screenWidth,&#13;
                        videoFSHeight = parseInt(moduleHeight * screenWidth / moduleWidth),&#13;
                        scale = videoFSWidth / moduleWidth,&#13;
                        offsetX, offsetY, translateX, translateY, transformation;&#13;
&#13;
                    if (videoFSHeight &gt; screenHeight) {&#13;
                        videoFSHeight = screenHeight;&#13;
                        videoFSWidth = parseInt(moduleWidth * screenHeight / moduleHeight);&#13;
                        scale = videoFSWidth / moduleWidth;&#13;
                    }&#13;
&#13;
                    offsetX = screenWidth - videoFSWidth;&#13;
                    offsetY = screenHeight - videoFSHeight;&#13;
                    scale = Math.round(scale * 100) / 100;&#13;
                    offsetX = Math.round(offsetX * 100) / 100;&#13;
                    offsetY = Math.round(offsetY * 100) / 100;&#13;
&#13;
                    translateX = ($(caption.element).width() / 4) * scale;&#13;
                    translateX = Math.round(translateX * 100) / 100;&#13;
                    translateY = ($(caption.element).height() / 4) * scale;&#13;
                    translateY = Math.round(translateY * 100) / 100;&#13;
&#13;
                    newTop = parseInt(videoFSHeight * (top / moduleHeight), 10);&#13;
                    newLeft = parseInt(videoFSWidth * (left / moduleWidth), 10);&#13;
&#13;
                    $(caption.element).attr({&#13;
                        oldTop: top,&#13;
                        oldLeft: left,&#13;
                        oldWidth: $(caption.element).width(),&#13;
                        oldHeight: $(caption.element).height()&#13;
                    });&#13;
                    transformation = 'scale(' + scale + ')';&#13;
                    $(caption.element).css({&#13;
                        position: 'fixed',&#13;
                        zIndex: 9999999999,&#13;
                        top: (newTop + offsetY + translateY) + 'px',&#13;
                        left: (newLeft + offsetX + translateX) + 'px',&#13;
                        'transform': transformation,&#13;
                        '-ms-transform': transformation,&#13;
                        '-webkit-transform': transformation,&#13;
                        '-o-transform': transformation,&#13;
                        '-moz-transform': transformation&#13;
                    });&#13;
                }&#13;
&#13;
            } else {&#13;
                $(caption.element).css('visibility', 'hidden');&#13;
                $(caption.element).attr('visibility', 'hidden');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reload = function() {&#13;
        presenter.isVideoLoaded = false;&#13;
        $(this.videoContainer).find('.captions').remove();&#13;
        this.setVideo();&#13;
        this.loadSubtitles();&#13;
        $(this.video).unbind('timeupdate');&#13;
        $(this.video).bind("timeupdate", function () {&#13;
            onTimeUpdate(this);&#13;
        });&#13;
        presenter.removeClassFromView('playing');&#13;
    };&#13;
&#13;
    function onTimeUpdate(video) {&#13;
        presenter.showCaptions(presenter.video.currentTime);&#13;
&#13;
        var currentTime = Math.round(video.currentTime * 10) / 10,&#13;
            videoDuration = Math.round(video.duration * 10) / 10,&#13;
            isFullScreen = document.mozFullScreen || document.webkitIsFullScreen;&#13;
&#13;
        if (currentTime &gt;= videoDuration) {&#13;
            presenter.sendVideoEndedEvent();&#13;
            presenter.reload();&#13;
&#13;
            if (isFullScreen &amp;&amp; document.webkitExitFullscreen) {&#13;
                document.webkitExitFullscreen();&#13;
            }&#13;
&#13;
            if (presenter.configuration.isFullScreen) {&#13;
                fullScreenChange();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getState = function() {&#13;
        var isPaused = this.video.paused;&#13;
        this.video.pause();&#13;
        return JSON.stringify({&#13;
            currentTime : this.video.currentTime,&#13;
            isCurrentlyVisible : this.isCurrentlyVisible,&#13;
            isPaused: isPaused,&#13;
            currentMovie: this.currentMovie,&#13;
            areSubtitlesHidden: presenter.areSubtitlesHidden&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
        var state = JSON.parse(stateString);&#13;
        var currentTime = state.currentTime;&#13;
        this.isCurrentlyVisible = state.isCurrentlyVisible;&#13;
&#13;
        if (presenter.isCurrentlyVisible !== (presenter.$view.css('visibility') !== 'hidden')) {&#13;
            presenter.setVisibility(this.isCurrentlyVisible);&#13;
        }&#13;
&#13;
        this.currentMovie = state.currentMovie;&#13;
        this.reload();&#13;
&#13;
        $(this.video).on('canplay', function onVideoCanPlay() {&#13;
            if (this.currentTime &lt; currentTime) {&#13;
                this.currentTime = currentTime;&#13;
                this.startTime = currentTime;&#13;
                presenter.videoState = presenter.VIDEO_STATE.PAUSED;&#13;
                $(this).off('canplay');&#13;
            }&#13;
&#13;
            if(state.areSubtitlesHidden != undefined) {&#13;
                if (state.areSubtitlesHidden) {&#13;
                    presenter.hideSubtitles();&#13;
                } else {&#13;
                    presenter.showSubtitles();&#13;
                }&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getIOSVersion = function(userAgent) {&#13;
        var match = /CPU OS ([\d_]+) like Mac OS X/.exec(userAgent);&#13;
        return match === null ? '' : match[1];&#13;
    };&#13;
&#13;
    presenter.addAttributePoster = function(video, posterSource) {&#13;
        if (posterSource) {&#13;
            if (!MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
                if(navigator.userAgent.toLowerCase().indexOf('firefox') &gt; -1){&#13;
                    var tmpVideo = video;&#13;
                    video.remove();&#13;
                    $(tmpVideo).attr('poster', '');&#13;
                    $(tmpVideo).attr('poster', posterSource);&#13;
                    presenter.videoContainer.append(tmpVideo);&#13;
                }else{&#13;
                    video.attr('poster', '');&#13;
                    video.attr('poster', posterSource);&#13;
                }&#13;
                return;&#13;
            }&#13;
&#13;
            var video_width = presenter.configuration.dimensions.video.width,&#13;
                video_height = presenter.configuration.dimensions.video.height;&#13;
&#13;
            var $poster_wrapper = $('&lt;div&gt;');&#13;
            $poster_wrapper.width(video_width);&#13;
            $poster_wrapper.height(video_height);&#13;
            $poster_wrapper.addClass('poster-wrapper');&#13;
            $poster_wrapper.on('click', function onPosterWrapperClick(e) {&#13;
                e.stopPropagation();&#13;
                $(this).remove();&#13;
                video.attr('controls', true);&#13;
                presenter.video.play();&#13;
            });&#13;
&#13;
            var $poster = $('&lt;img&gt;');&#13;
            $poster.attr('src', posterSource);&#13;
            $poster.width(video_width);&#13;
            $poster.height(video_height);&#13;
            $poster_wrapper.append($poster);&#13;
&#13;
            var $playBTN = $('&lt;div&gt;');&#13;
            $playBTN.addClass('video-poster-play');&#13;
            $playBTN.css({top:(video_height-80)/2, left:(video_width-80)/2});&#13;
            $poster_wrapper.append($playBTN);&#13;
&#13;
            video.parent().append($poster_wrapper);&#13;
&#13;
            if (presenter.getIOSVersion(navigator.userAgent) === '8_3') {&#13;
                video.attr('controls', true);&#13;
            } else {&#13;
                // Default video controls should be disabled to enable events on poster&#13;
                video.attr('controls', false);&#13;
            }&#13;
        } else {&#13;
            video.attr('poster', '');&#13;
            presenter.$view.find('.poster-wrapper').remove();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVideo = function() {&#13;
        if (this.video) {&#13;
            $(this.video).unbind("ended");&#13;
            $(this.video).unbind("error");&#13;
            $(this.video).unbind("canplay");&#13;
&#13;
            this.video.pause();&#13;
        }&#13;
        this.videoContainer.find('source').remove();&#13;
        this.video = this.videoContainer.find('video')[0];&#13;
        presenter.videoState = presenter.VIDEO_STATE.STOPPED;&#13;
        var $video = $(this.video);&#13;
        var files = this.files;&#13;
        this.addAttributePoster($video, files[this.currentMovie].Poster);&#13;
        if (!presenter.defaultControls) {&#13;
            $video.removeAttr('controls');&#13;
        }&#13;
        if (presenter.isPreview) {&#13;
            $video.attr('preload', 'none');&#13;
        } else {&#13;
            $video.attr('preload', 'auto');&#13;
            for (var vtype in this.videoTypes) {&#13;
                if (files[this.currentMovie][this.videoTypes[vtype].name] &amp;&amp; this.video.canPlayType(this.videoTypes[vtype].type)) {&#13;
                    var source = $('&lt;source&gt;');&#13;
                    source.attr('type', this.videoTypes[vtype].type);&#13;
                    source.attr('src', files[this.currentMovie][this.videoTypes[vtype].name]);&#13;
                    $video.append(source);&#13;
                }&#13;
            }&#13;
&#13;
            // "ended" event doesn't work on Safari&#13;
            $(this.video).unbind('timeupdate');&#13;
            $(this.video).bind("timeupdate", function onTimeUpdate() {&#13;
                onTimeUpdate(this);&#13;
            });&#13;
&#13;
            $(this.video).bind("error", function onError() {&#13;
                $(this).unbind("error");&#13;
                presenter.reload();&#13;
                if (presenter.configuration.isFullScreen) {&#13;
                    fullScreenChange();&#13;
                }&#13;
            });&#13;
&#13;
            $(this.video).bind("canplay", function onCanPlay() {&#13;
                presenter.isVideoLoaded = true;&#13;
&#13;
                if (!presenter.commandsQueue.isQueueEmpty()) {&#13;
                    presenter.commandsQueue.executeAllTasks();&#13;
                }&#13;
&#13;
                $(this).unbind("canplay");&#13;
&#13;
                if (presenter.areSubtitlesHidden) {&#13;
                    presenter.hideSubtitles();&#13;
                } else {&#13;
                    presenter.showSubtitles();&#13;
                }&#13;
            });&#13;
            // Android devices have problem with loading content.&#13;
            this.video.addEventListener("stalled", presenter.onStalledEventHandler, false);&#13;
            this.video.load();&#13;
        }&#13;
    };&#13;
&#13;
    /**&#13;
     * Creates DIV element containing caption text.&#13;
     *&#13;
     * @param caption - used text, top and left properties&#13;
     * @return reference do newly created element&#13;
     */&#13;
    function createCaptionElement(caption) {&#13;
        var captionElement = document.createElement('div');&#13;
&#13;
        $(captionElement).addClass('captions');&#13;
        $(captionElement).addClass(caption.cssClass);&#13;
        $(captionElement).html(caption.text);&#13;
        $(captionElement).css({&#13;
            top: caption.top,&#13;
            left: caption.left&#13;
        });&#13;
&#13;
        $(captionElement).css('visibility', 'hidden');&#13;
        $(captionElement).attr('visibility', 'hidden');&#13;
        presenter.videoContainer.append(captionElement);&#13;
&#13;
        return captionElement;&#13;
    }&#13;
&#13;
    presenter.convertLinesToCaptions = function(lines) {&#13;
        this.captions = [];&#13;
&#13;
        for (var i = 0; i &lt; lines.length; i++) {&#13;
            var parts = lines[i].split('|');&#13;
            if (parts.length == 6) {&#13;
                var caption = {&#13;
                    start:parts[0],&#13;
                    end:parts[1],&#13;
                    top:(StringUtils.endsWith(parts[2], 'px') ? parts[2] : parts[2] + 'px'),&#13;
                    left:(StringUtils.endsWith(parts[3], 'px') ? parts[3] : parts[3] + 'px'),&#13;
                    cssClass:parts[4],&#13;
                    text:parts[5]&#13;
                };&#13;
&#13;
                caption.element = createCaptionElement(caption);&#13;
                this.captions.push(caption);&#13;
&#13;
                presenter.captionDivs.push(caption.element);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.registerFullScreenEventCallbacks();&#13;
    };&#13;
&#13;
    presenter.loadSubtitles = function() {&#13;
        var subtitlesLoadedDeferred = new $.Deferred(),&#13;
            subtitles = this.files[this.currentMovie].Subtitles;&#13;
&#13;
        if (subtitles) {&#13;
            if (StringUtils.startsWith(subtitles, "/file")) {&#13;
                $.get(subtitles, function(data) {&#13;
                    subtitlesLoadedDeferred.resolve(data);&#13;
                });&#13;
            } else {&#13;
                subtitlesLoadedDeferred.resolve(subtitles);&#13;
            }&#13;
&#13;
            presenter.convertLinesToCaptions(Helpers.splitLines(subtitles));&#13;
            $.when(subtitlesLoadedDeferred.promise(), presenter.mathJaxProcessEnded, presenter.pageLoaded).then(function onSubtitlesLoaded(data) {&#13;
                presenter.convertLinesToCaptions(Helpers.splitLines(data));&#13;
                MathJax.Hub.Queue(["Typeset", MathJax.Hub, presenter.captionDivs])();&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.calculateVideoContainerHeight = function ($container, moduleHeight) {&#13;
        var borderBottom = $container.css('border-bottom-width'),&#13;
            borderTop = $container.css('border-top-width'),&#13;
            marginTop = $container.css('margin-top'),&#13;
            marginBottom = $container.css('margin-bottom');&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(borderTop)) borderTop = "0px";&#13;
        if (ModelValidationUtils.isStringEmpty(borderBottom)) borderBottom = "0px";&#13;
        if (ModelValidationUtils.isStringEmpty(marginTop)) marginTop = "0px";&#13;
        if (ModelValidationUtils.isStringEmpty(marginBottom)) marginBottom = "0px";&#13;
&#13;
        return moduleHeight - parseInt(borderBottom, 10) -&#13;
            parseInt(borderTop, 10) -&#13;
            parseInt(marginTop, 10) -&#13;
            parseInt(marginBottom, 10);&#13;
    };&#13;
&#13;
    presenter.setDimensions = function() {&#13;
        var video = this.getVideo();&#13;
&#13;
        this.videoContainer.css('height',  presenter.calculateVideoContainerHeight(this.videoContainer, height) + 'px');&#13;
&#13;
        video.css("width", "100%")&#13;
             .attr('height', this.videoContainer.height());&#13;
&#13;
        presenter.configuration.dimensions = {&#13;
            video:{&#13;
                width:$(video).width(),&#13;
                height:$(video).height()&#13;
            },&#13;
            container:{&#13;
                width:$(presenter.videoContainer).width(),&#13;
                height:$(presenter.videoContainer).height()&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.showSubtitles = function () {&#13;
        presenter.$view.find('.captions').show();&#13;
        presenter.areSubtitlesHidden = false;&#13;
    };&#13;
&#13;
    presenter.hideSubtitles = function () {&#13;
        presenter.$view.find('.captions').hide();&#13;
        presenter.areSubtitlesHidden = true;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous,&#13;
            'jumpTo': presenter.jumpToCommand,&#13;
            'jumpToID': presenter.jumpToIDCommand,&#13;
            'seek': presenter.seekCommand,&#13;
            'play' : presenter.play,&#13;
            'stop' : presenter.stop,&#13;
            'showSubtitles' : presenter.showSubtitles,&#13;
            'hideSubtitles' : presenter.hideSubtitles&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
&#13;
        var $captions = presenter.$view.find('.captions');&#13;
        if (!isVisible) {&#13;
            $captions.each(function hideVisibility() {&#13;
                $(this).css('visibility', 'hidden');&#13;
            });&#13;
        } else {&#13;
            $captions.each(function showVisibility() {&#13;
                if ($(this).attr('visibility') === 'visible') {&#13;
                    $(this).css('visibility', 'visible');&#13;
                }&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.seek = function (seconds) {&#13;
        if (!presenter.isVideoLoaded) {&#13;
            presenter.commandsQueue.addTask('seek', [seconds]);&#13;
            return;&#13;
        }&#13;
&#13;
        this.video.currentTime = seconds;&#13;
    };&#13;
&#13;
    presenter.seekCommand = function(params) {&#13;
        presenter.seek(params[0]);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if (presenter.isCurrentlyVisible) return;&#13;
        if(presenter.VIDEO_STATE.PLAYING == presenter.videoState) {&#13;
            this.video.play();&#13;
        }&#13;
        this.isCurrentlyVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if (!presenter.isCurrentlyVisible) return;&#13;
&#13;
        if (presenter.VIDEO_STATE.PLAYING == presenter.videoState) {&#13;
            this.video.pause();&#13;
            presenter.videoState = presenter.VIDEO_STATE.PLAYING;&#13;
            presenter.isHideExecuted = true;&#13;
        }&#13;
        this.isCurrentlyVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.jumpTo = function(movieNumber) {&#13;
        var newMovie = parseInt(movieNumber, 10) - 1;&#13;
        if (0 &lt;= newMovie &amp;&amp; newMovie &lt; this.files.length) {&#13;
            this.currentMovie = newMovie;&#13;
            this.reload();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToCommand = function (params) {&#13;
        presenter.jumpTo(params[0]);&#13;
    };&#13;
&#13;
    presenter.jumpToID = function(id) {&#13;
        for (var i = 0; i &lt; this.files.length; i++) {&#13;
            if (id === this.files[i].ID) {&#13;
                this.jumpTo(i + 1);  // Video numbers are counted from 1 to n&#13;
                break;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToIDCommand = function (params) {&#13;
        presenter.jumpToID(params[0]);&#13;
    };&#13;
&#13;
    presenter.onStalledEventHandler = function () {&#13;
        var video = this;&#13;
&#13;
        if (!presenter.commandsQueue.isQueueEmpty() &amp;&amp; video.readyState &gt;= 2) {&#13;
            presenter.isVideoLoaded = true;&#13;
            presenter.commandsQueue.executeAllTasks();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.removeWaterMark = function () {&#13;
        presenter.$view.find('.poster-wrapper').remove();&#13;
    };&#13;
&#13;
    presenter.loadVideoAtPlayOnMobiles = function () {&#13;
        if (MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
            if(!presenter.isVideoLoaded) {&#13;
                this.video.load();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addClassToView = function (className) {&#13;
        presenter.$view.addClass(className);&#13;
    };&#13;
&#13;
    presenter.removeClassFromView = function (className) {&#13;
        presenter.$view.removeClass(className);&#13;
    };&#13;
&#13;
    presenter.play = function () {&#13;
        presenter.removeWaterMark();&#13;
&#13;
        presenter.loadVideoAtPlayOnMobiles();&#13;
&#13;
        if (!presenter.isVideoLoaded) {&#13;
            presenter.commandsQueue.addTask('play', []);&#13;
            return;&#13;
        }&#13;
&#13;
        if (this.video.paused) {&#13;
            this.video.play();&#13;
            presenter.addClassToView('playing');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stop = function () {&#13;
        if (!presenter.isVideoLoaded) {&#13;
            presenter.commandsQueue.addTask('stop', []);&#13;
            return;&#13;
        }&#13;
&#13;
        if (!this.video.paused) {&#13;
            presenter.seek(0); // sets the current time to 0&#13;
            this.video.pause();&#13;
            presenter.removeClassFromView('playing');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.pause = function () {&#13;
        if (!presenter.isVideoLoaded) {&#13;
            presenter.commandsQueue.addTask('pause', []);&#13;
            return;&#13;
        }&#13;
&#13;
        if (!this.video.paused) {&#13;
            this.video.pause();&#13;
            presenter.removeClassFromView('playing');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.previous = function() {&#13;
        if (this.currentMovie &gt; 0) {&#13;
            this.currentMovie--;&#13;
            this.reload();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.next = function() {&#13;
        if (this.currentMovie &lt; this.files.length - 1) {&#13;
            this.currentMovie++;&#13;
            this.reload();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.isVisibleByDefault ? presenter.show() : presenter.hide();&#13;
        presenter.videoState = presenter.VIDEO_STATE.STOPPED;&#13;
&#13;
        this.currentMovie = 0;&#13;
        if (this.metadadaLoaded) {&#13;
            this.video.pause();&#13;
        }&#13;
&#13;
        presenter.reload();&#13;
&#13;
        if (presenter.shouldHideSubtitles) {&#13;
            presenter.hideSubtitles();&#13;
        } else {&#13;
            presenter.showSubtitles();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getVideo = function() {&#13;
        return this.videoContainer.find('video:first');&#13;
    };&#13;
&#13;
    /**&#13;
     * Validates string representation of integer. Only positive integer values are allowed. If both (value and default) are&#13;
     * undefined then isError property is set to true.&#13;
     */&#13;
    presenter.validatePositiveInteger = function (value, defaultValue) {&#13;
        var isValueDefined = value !== undefined &amp;&amp; value !== "";&#13;
        var isDefaultDefined = defaultValue !== undefined &amp;&amp; !isNaN(defaultValue);&#13;
&#13;
        if (!isValueDefined &amp;&amp; !isDefaultDefined) {&#13;
            return {&#13;
                isError: true,&#13;
                value: 1&#13;
            };&#13;
        }&#13;
&#13;
        if (!isValueDefined &amp;&amp; isDefaultDefined) {&#13;
            return {&#13;
                isError: false,&#13;
                value: defaultValue&#13;
            };&#13;
        }&#13;
&#13;
        var parsedValue = parseInt(value, 10);&#13;
        if (isNaN(parsedValue) || parsedValue &lt; 1) {&#13;
            return {&#13;
                isError: true,&#13;
                value: defaultValue&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            value: parsedValue&#13;
        };&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon></addons>